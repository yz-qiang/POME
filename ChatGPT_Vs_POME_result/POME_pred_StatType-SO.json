[
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.Activity",
    "boolean": 1,
    "context": "public class Android01 extends <mask><mask><mask>.Activity { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);mTextView = new TextView(this);if (savedInstanceState == null) { setText(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "android.os",
    "full_FQN": "android.os.Bundle",
    "boolean": 0,
    "context": "public class Android01 extends Activity { @Override public void onCreate(<mask><mask><mask>.Bundle savedInstanceState) { onCreate(savedInstanceState);mTextView = new TextView(this);if (savedInstanceState == null) { setText(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView()",
    "boolean": 1,
    "context": "public class Android01 extends Activity { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);mTextView = new <mask><mask><mask>.TextView(this);if (savedInstanceState == null) { setText(String);} else { setText(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView.setText()",
    "boolean": 1,
    "context": "public class Android01 extends Activity { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);mTextView = new TextView(this);if (savedInstanceState == null) { <mask><mask><mask>setText(String);} else { setText(String);} setContentView(mTextView);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView.setText()",
    "boolean": 1,
    "context": "mTextView = new TextView(this);if (savedInstanceState == null) { setText(String);} else { <mask><mask><mask>setText(String);} setContentView(mTextView);} private TextView mTextView = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView",
    "boolean": 1,
    "context": "} else { setText(String);} setContentView(mTextView);} private <mask><mask><mask>.TextView mTextView = null;};"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.Activity",
    "boolean": 1,
    "context": "public class Android02 extends <mask><mask><mask>.Activity { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);} };"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "android.os",
    "full_FQN": "android.os.Bundle",
    "boolean": 0,
    "context": "public class Android02 extends Activity { @Override public void onCreate(<mask><mask><mask>.Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.graphics..able",
    "truth_type": "com.google.android.maps",
    "full_FQN": "com.google.android.maps.ItemizedOverlay",
    "boolean": 0,
    "context": "public class Android03 extends <mask><mask><mask><mask><mask><mask><mask>.ItemizedOverlay<OverlayItem> { public Android03(Drawable defaultMarker) { super(defaultMarker);populate();} @Override protected OverlayItem createItem(int index) { Double lat = (index + 422006) * 0;"
  },
  {
    "lib_name": "android",
    "pred_type": "com.google.internal.maps",
    "truth_type": "com.google.android.maps",
    "full_FQN": "com.google.android.maps.OverlayItem",
    "boolean": 0,
    "context": "public class Android03 extends ItemizedOverlay<<mask><mask><mask><mask><mask><mask><mask>.OverlayItem> { public Android03(Drawable defaultMarker) { super(defaultMarker);populate();} @Override protected OverlayItem createItem(int index) { Double lat = (index + 422006) * 0;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.graphics.drawable",
    "truth_type": "android.graphics.drawable",
    "full_FQN": "android.graphics.drawable.Drawable",
    "boolean": 1,
    "context": "public class Android03 extends ItemizedOverlay<OverlayItem> { public Android03(<mask><mask><mask><mask><mask><mask><mask>.Drawable defaultMarker) { super(defaultMarker);populate();} @Override protected OverlayItem createItem(int index) { Double lat = (index + 422006) * 0;"
  },
  {
    "lib_name": "android",
    "pred_type": "com.google.internal.widget",
    "truth_type": "com.google.android.maps",
    "full_FQN": "com.google.android.maps.OverlayItem",
    "boolean": 0,
    "context": "public class Android03 extends ItemizedOverlay<OverlayItem> { public Android03(Drawable defaultMarker) { super(defaultMarker);populate();} @Override protected <mask><mask><mask><mask><mask><mask><mask>.OverlayItem createItem(int index) { Double lat = (index + 422006) * 0;Double lng = (-084095) * 0;GeoPoint point = new GeoPoint intValue(), intValue());"
  },
  {
    "lib_name": "android",
    "pred_type": "com.google.internal.location",
    "truth_type": "com.google.android.maps",
    "full_FQN": "com.google.android.maps.GeoPoint",
    "boolean": 0,
    "context": "} @Override protected OverlayItem createItem(int index) { Double lat = (index + 422006) * 0;Double lng = (-084095) * 0;<mask><mask><mask><mask><mask><mask><mask>.GeoPoint point = new GeoPoint intValue(), intValue());OverlayItem oi = new OverlayItem(point, String, String);return oi;"
  },
  {
    "lib_name": "android",
    "pred_type": "com.google.internal.location",
    "truth_type": "com.google.android.maps",
    "full_FQN": "com.google.android.maps.GeoPoint",
    "boolean": 0,
    "context": "} @Override protected OverlayItem createItem(int index) { Double lat = (index + 422006) * 0;Double lng = (-084095) * 0;GeoPoint point = new <mask><mask><mask><mask><mask><mask><mask>.GeoPoint intValue(), intValue());OverlayItem oi = new OverlayItem(point, String, String);return oi;"
  },
  {
    "lib_name": "android",
    "pred_type": "com.google.internal.maps",
    "truth_type": "com.google.android.maps",
    "full_FQN": "com.google.android.maps.OverlayItem",
    "boolean": 0,
    "context": "java.lang.Double lng = (-084095) * 0;GeoPoint point = new GeoPoint intValue(), intValue());<mask><mask><mask><mask><mask><mask><mask>.OverlayItem oi = new OverlayItem(point, String, String);return oi;} @Override public int size() { return 5;"
  },
  {
    "lib_name": "android",
    "pred_type": "com.google.android",
    "truth_type": "com.google.android",
    "full_FQN": "com.google.android.maps.OverlayItem()",
    "boolean": 1,
    "context": "java.lang.Double lng = (-084095) * 0;GeoPoint point = new GeoPoint intValue(), intValue());OverlayItem oi = new <mask><mask><mask><mask><mask>OverlayItem(point, String, String);return oi;} @Override public int size() { return 5;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.Activity",
    "boolean": 1,
    "context": "public class Android04 extends <mask><mask><mask>.Activity { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);mTextView = new TextView(this);if (savedInstanceState == null) { setText(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "android.os",
    "full_FQN": "android.os.Bundle",
    "boolean": 0,
    "context": "public class Android04 extends Activity { @Override public void onCreate(<mask><mask><mask>.Bundle savedInstanceState) { onCreate(savedInstanceState);mTextView = new TextView(this);if (savedInstanceState == null) { setText(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView()",
    "boolean": 1,
    "context": "public class Android04 extends Activity { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);mTextView = new <mask><mask><mask>.TextView(this);if (savedInstanceState == null) { setText(String);} else { setText(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView.setText()",
    "boolean": 1,
    "context": "public class Android04 extends Activity { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);mTextView = new TextView(this);if (savedInstanceState == null) { <mask><mask><mask>setText(String);} else { setText(String);} setContentView(mTextView);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView.setText()",
    "boolean": 1,
    "context": "mTextView = new TextView(this);if (savedInstanceState == null) { setText(String);} else { <mask><mask><mask>setText(String);} setContentView(mTextView);} private TextView mTextView = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView",
    "boolean": 1,
    "context": "} else { setText(String);} setContentView(mTextView);} private <mask><mask><mask>.TextView mTextView = null;};"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TabHost",
    "boolean": 1,
    "context": "public class Android05 { public static void main(String[] args) { <mask><mask><mask>.TabHost mTabs = null;TabSpec ts = newTabSpec(String);Drawable iconResource = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget.TabHost",
    "truth_type": "android.widget.TabHost",
    "full_FQN": "android.widget.TabHost.TabSpec",
    "boolean": 1,
    "context": "public class Android05 { public static void main(String[] args) { TabHost mTabs = null;<mask><mask><mask><mask><mask><mask>.TabSpec ts = newTabSpec(String);Drawable iconResource = null; setIndicator(String, iconResource);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TabHost.newTabSpec()",
    "boolean": 1,
    "context": "public class Android05 { public static void main(String[] args) { TabHost mTabs = null;TabSpec ts = <mask><mask><mask>newTabSpec(String);Drawable iconResource = null; setIndicator(String, iconResource);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.graphics.drawable",
    "truth_type": "android.graphics.drawable",
    "full_FQN": "android.graphics.drawable.Drawable",
    "boolean": 1,
    "context": "public class Android05 { public static void main(String[] args) { TabHost mTabs = null;TabSpec ts = newTabSpec(String);<mask><mask><mask><mask><mask><mask><mask>.Drawable iconResource = null; setIndicator(String, iconResource); addTab(ts);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget.TabHost",
    "truth_type": "android.widget.TabHost",
    "full_FQN": "android.widget.TabHost.TabSpec.setIndicator()",
    "boolean": 1,
    "context": "android.widget.TabHost.TabSpec ts = newTabSpec(String);Drawable iconResource = null; <mask><mask><mask><mask><mask><mask>setIndicator(String, iconResource); addTab(ts); getTabWidget().removeAllViews();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TabHost.addTab()",
    "boolean": 1,
    "context": "android.graphics.drawable.Drawable iconResource = null; setIndicator(String, iconResource); <mask><mask><mask>addTab(ts); getTabWidget().removeAllViews(); clearAllTabs();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TabHost.getTabWidget()",
    "boolean": 1,
    "context": " setIndicator(String, iconResource); addTab(ts); <mask><mask><mask>getTabWidget().removeAllViews(); clearAllTabs();} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TabHost.clearAllTabs()",
    "boolean": 1,
    "context": " addTab(ts); getTabWidget().removeAllViews(); <mask><mask><mask>clearAllTabs();} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.LinearLayout",
    "boolean": 1,
    "context": "public class Android06 { public static void main(String[] args) { <mask><mask><mask>.LinearLayout zoomView = null; setLayoutParams(new LayoutParams(WRAP_CONTENT, WRAP_CONTENT)); setGravity(BOTTOM | CENTER_HORIZONTAL);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.LinearLayout.setLayoutParams()",
    "boolean": 1,
    "context": "public class Android06 { public static void main(String[] args) { LinearLayout zoomView = null; <mask><mask><mask>setLayoutParams(new LayoutParams(WRAP_CONTENT, WRAP_CONTENT)); setGravity(BOTTOM | CENTER_HORIZONTAL);} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.ViewGroup.LayoutParams()",
    "boolean": 1,
    "context": "public class Android06 { public static void main(String[] args) { LinearLayout zoomView = null; setLayoutParams(new <mask><mask><mask>LayoutParams(WRAP_CONTENT, WRAP_CONTENT)); setGravity(BOTTOM | CENTER_HORIZONTAL);} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view.ViewGroup.LayoutParams",
    "truth_type": "android.view.ViewGroup.LayoutParams",
    "full_FQN": "android.view.ViewGroup.LayoutParams.WRAP_CONTENT",
    "boolean": 1,
    "context": "public class Android06 { public static void main(String[] args) { LinearLayout zoomView = null; setLayoutParams(new LayoutParams(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.WRAP_CONTENT, WRAP_CONTENT)); setGravity(BOTTOM | CENTER_HORIZONTAL);} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view.ViewGroup.LayoutParams",
    "truth_type": "android.view.ViewGroup.LayoutParams",
    "full_FQN": "android.view.ViewGroup.LayoutParams.WRAP_CONTENT",
    "boolean": 1,
    "context": "public class Android06 { public static void main(String[] args) { LinearLayout zoomView = null; setLayoutParams(new LayoutParams(WRAP_CONTENT, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.WRAP_CONTENT)); setGravity(BOTTOM | CENTER_HORIZONTAL);} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.LinearLayout.setGravity()",
    "boolean": 1,
    "context": "public class Android06 { public static void main(String[] args) { LinearLayout zoomView = null; setLayoutParams(new LayoutParams(WRAP_CONTENT, WRAP_CONTENT)); <mask><mask><mask>setGravity(BOTTOM | CENTER_HORIZONTAL);} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view.Gravity",
    "truth_type": "android.view.Gravity",
    "full_FQN": "android.view.Gravity.BOTTOM",
    "boolean": 1,
    "context": "public class Android06 { public static void main(String[] args) { LinearLayout zoomView = null; setLayoutParams(new LayoutParams(WRAP_CONTENT, WRAP_CONTENT)); setGravity(<mask><mask><mask><mask><mask><mask>.BOTTOM | CENTER_HORIZONTAL);} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view.Gravity",
    "truth_type": "android.view.Gravity",
    "full_FQN": "android.view.Gravity.CENTER_HORIZONTAL",
    "boolean": 1,
    "context": "public class Android06 { public static void main(String[] args) { LinearLayout zoomView = null; setLayoutParams(new LayoutParams(WRAP_CONTENT, WRAP_CONTENT)); setGravity(BOTTOM | <mask><mask><mask><mask><mask><mask>.CENTER_HORIZONTAL);} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.Activity",
    "boolean": 1,
    "context": "// ID = 288044 public class Android07 extends <mask><mask><mask>.Activity { String[] mainItems = new String[]{ String, String, String, String };@Override public void onCreate(Bundle icicle) { onCreate(icicle);setContentView(activity_list_item);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "android.os",
    "full_FQN": "android.os.Bundle",
    "boolean": 0,
    "context": "// ID = 288044 public class Android07 extends Activity { String[] mainItems = new String[]{ String, String, String, String };@Override public void onCreate(<mask><mask><mask>.Bundle icicle) { onCreate(icicle);setContentView(activity_list_item);setListAdapter(new ArrayAdapter<String>(this, simple_list_item_1, mainItems));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ArrayAdapter",
    "boolean": 1,
    "context": "@Override public void onCreate(Bundle icicle) { onCreate(icicle);setContentView(activity_list_item);setListAdapter(new <mask><mask><mask>.ArrayAdapter<String>(this, simple_list_item_1, mainItems));registerForContextMenu(getListView());} private void setListAdapter(ArrayAdapter<String> arrayAdapter) { } private View getListView() { return null;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ArrayAdapter",
    "boolean": 1,
    "context": "setListAdapter(new ArrayAdapter<String>(this, simple_list_item_1, mainItems));registerForContextMenu(getListView());} private void setListAdapter(<mask><mask><mask>.ArrayAdapter<String> arrayAdapter) { } private View getListView() { return null;} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.View",
    "boolean": 1,
    "context": "setListAdapter(new ArrayAdapter<String>(this, simple_list_item_1, mainItems));registerForContextMenu(getListView());} private void setListAdapter(ArrayAdapter<String> arrayAdapter) { } private <mask><mask><mask>.View getListView() { return null;} };"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.InetAddress",
    "boolean": 1,
    "context": "// ID = 442496 public class Android08 { private static final String TAG = String;public static void main(String[] args) { try { <mask><mask><mask>.InetAddress server = getByName(String);if  isReachable(5000)) { d(TAG, String);} Socket clientsocket = new Socket(server, 8080);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.Inet4Address.getByName()",
    "boolean": 1,
    "context": "// ID = 442496 public class Android08 { private static final String TAG = String;public static void main(String[] args) { try { InetAddress server = <mask><mask><mask>getByName(String);if  isReachable(5000)) { d(TAG, String);} Socket clientsocket = new Socket(server, 8080);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.InetAddress.isReachable()",
    "boolean": 1,
    "context": "// ID = 442496 public class Android08 { private static final String TAG = String;public static void main(String[] args) { try { InetAddress server = getByName(String);if  <mask><mask><mask>isReachable(5000)) { d(TAG, String);} Socket clientsocket = new Socket(server, 8080);} catch (UnknownHostException e) { e(TAG, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.d()",
    "boolean": 1,
    "context": "// ID = 442496 public class Android08 { private static final String TAG = String;public static void main(String[] args) { try { InetAddress server = getByName(String);if  isReachable(5000)) { <mask><mask><mask>d(TAG, String);} Socket clientsocket = new Socket(server, 8080);} catch (UnknownHostException e) { e(TAG, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.Socket",
    "boolean": 1,
    "context": "public static void main(String[] args) { try { InetAddress server = getByName(String);if  isReachable(5000)) { d(TAG, String);} <mask><mask><mask>.Socket clientsocket = new Socket(server, 8080);} catch (UnknownHostException e) { e(TAG, String);} catch (IOException e) { e(TAG, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.Socket()",
    "boolean": 1,
    "context": "public static void main(String[] args) { try { InetAddress server = getByName(String);if  isReachable(5000)) { d(TAG, String);} Socket clientsocket = new <mask><mask><mask>.Socket(server, 8080);} catch (UnknownHostException e) { e(TAG, String);} catch (IOException e) { e(TAG, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.UnknownHostException",
    "boolean": 1,
    "context": "if  isReachable(5000)) { d(TAG, String);} Socket clientsocket = new Socket(server, 8080);} catch (<mask><mask><mask>.UnknownHostException e) { e(TAG, String);} catch (IOException e) { e(TAG, String);} } };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.e()",
    "boolean": 1,
    "context": "if  isReachable(5000)) { d(TAG, String);} Socket clientsocket = new Socket(server, 8080);} catch (UnknownHostException e) { <mask><mask><mask>e(TAG, String);} catch (IOException e) { e(TAG, String);} } };"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException",
    "boolean": 1,
    "context": "} Socket clientsocket = new Socket(server, 8080);} catch (UnknownHostException e) { e(TAG, String);} catch (<mask><mask><mask>.IOException e) { e(TAG, String);} } };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.e()",
    "boolean": 1,
    "context": "} Socket clientsocket = new Socket(server, 8080);} catch (UnknownHostException e) { e(TAG, String);} catch (IOException e) { <mask><mask><mask>e(TAG, String);} } };"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Timer",
    "boolean": 1,
    "context": "public class Android09 { float seconds;public <mask><mask><mask>.Timer gametimer;void updatecount() { TextView t = ((TextView) (findViewById(copy))); setText((String + seconds) + String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView",
    "boolean": 1,
    "context": "public class Android09 { float seconds;public Timer gametimer;void updatecount() { <mask><mask><mask>.TextView t = ((TextView) (findViewById(copy))); setText((String + seconds) + String); postInvalidate();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView",
    "boolean": 1,
    "context": "public class Android09 { float seconds;public Timer gametimer;void updatecount() { TextView t = ((<mask><mask><mask>.TextView) (findViewById(copy))); setText((String + seconds) + String); postInvalidate();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView.setText()",
    "boolean": 1,
    "context": "public Timer gametimer;void updatecount() { TextView t = ((TextView) (findViewById(copy))); <mask><mask><mask>setText((String + seconds) + String); postInvalidate();} private TextView findViewById(int topscore) { return null;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView.postInvalidate()",
    "boolean": 1,
    "context": "void updatecount() { TextView t = ((TextView) (findViewById(copy))); setText((String + seconds) + String); <mask><mask><mask>postInvalidate();} private TextView findViewById(int topscore) { return null;} public void onCreate(Bundle sis) { schedule(new TimerTask() { public void run() { seconds += 1;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView",
    "boolean": 1,
    "context": " setText((String + seconds) + String); postInvalidate();} private <mask><mask><mask>.TextView findViewById(int topscore) { return null;} public void onCreate(Bundle sis) { schedule(new TimerTask() { public void run() { seconds += 1;updatecount();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "android.os",
    "full_FQN": "android.os.Bundle",
    "boolean": 0,
    "context": " postInvalidate();} private TextView findViewById(int topscore) { return null;} public void onCreate(<mask><mask><mask>.Bundle sis) { schedule(new TimerTask() { public void run() { seconds += 1;updatecount();} }, 100, 100);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Timer.schedule()",
    "boolean": 1,
    "context": " postInvalidate();} private TextView findViewById(int topscore) { return null;} public void onCreate(Bundle sis) { <mask><mask><mask>schedule(new TimerTask() { public void run() { seconds += 1;updatecount();} }, 100, 100);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.TimerTask()",
    "boolean": 1,
    "context": " postInvalidate();} private TextView findViewById(int topscore) { return null;} public void onCreate(Bundle sis) { schedule(new <mask><mask><mask>.TimerTask() { public void run() { seconds += 1;updatecount();} }, 100, 100);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.Chronometer",
    "boolean": 1,
    "context": "// ID = 526524 public class Android10 { public static void main(String[] args) { <mask><mask><mask>.Chronometer t = ((Chronometer) (findViewById(copy)));long time = elapsedRealtime() - getBase();d(null, String + time);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.Chronometer",
    "boolean": 1,
    "context": "// ID = 526524 public class Android10 { public static void main(String[] args) { Chronometer t = ((<mask><mask><mask>.Chronometer) (findViewById(copy)));long time = elapsedRealtime() - getBase();d(null, String + time);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.os",
    "truth_type": "android.os",
    "full_FQN": "android.os.SystemClock.elapsedRealtime()",
    "boolean": 1,
    "context": "// ID = 526524 public class Android10 { public static void main(String[] args) { Chronometer t = ((Chronometer) (findViewById(copy)));long time = <mask><mask><mask>elapsedRealtime() - getBase();d(null, String + time); setBase(elapsedRealtime());"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.Chronometer.getBase()",
    "boolean": 1,
    "context": "// ID = 526524 public class Android10 { public static void main(String[] args) { Chronometer t = ((Chronometer) (findViewById(copy)));long time = elapsedRealtime() - <mask><mask><mask>getBase();d(null, String + time); setBase(elapsedRealtime());"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.d()",
    "boolean": 1,
    "context": "// ID = 526524 public class Android10 { public static void main(String[] args) { Chronometer t = ((Chronometer) (findViewById(copy)));long time = elapsedRealtime() - getBase();<mask><mask><mask>d(null, String + time); setBase(elapsedRealtime()); start();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.Chronometer.setBase()",
    "boolean": 1,
    "context": "long time = elapsedRealtime() - getBase();d(null, String + time); <mask><mask><mask>setBase(elapsedRealtime()); start();} private static Chronometer findViewById(int toptime) { return null;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.os",
    "truth_type": "android.os",
    "full_FQN": "android.os.SystemClock.elapsedRealtime()",
    "boolean": 1,
    "context": "long time = elapsedRealtime() - getBase();d(null, String + time); setBase(<mask><mask><mask>elapsedRealtime()); start();} private static Chronometer findViewById(int toptime) { return null;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.Chronometer.start()",
    "boolean": 1,
    "context": "android.util.Log.d(null, String + time); setBase(elapsedRealtime()); <mask><mask><mask>start();} private static Chronometer findViewById(int toptime) { return null;} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.Chronometer",
    "boolean": 1,
    "context": " setBase(elapsedRealtime()); start();} private static <mask><mask><mask>.Chronometer findViewById(int toptime) { return null;} };"
  },
  {
    "lib_name": "android",
    "pred_type": "com.android.internal.test",
    "truth_type": "com.google.android.maps",
    "full_FQN": "com.google.android.maps.MyLocationOverlay",
    "boolean": 0,
    "context": "public class Android11 extends <mask><mask><mask><mask><mask><mask><mask>.MyLocationOverlay { public Android11(Context arg0, MapView arg1) { super(arg0, arg1);} @Override public void drawMyLocation(Canvas canvas, MapView mapView, Location lastFix, GeoPoint myLocation, long when) { drawMyLocation(canvas, mapView, lastFix, myLocation, when);Location bLocation = new Location(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Context",
    "boolean": 1,
    "context": "public class Android11 extends MyLocationOverlay { public Android11(<mask><mask><mask>.Context arg0, MapView arg1) { super(arg0, arg1);} @Override public void drawMyLocation(Canvas canvas, MapView mapView, Location lastFix, GeoPoint myLocation, long when) { drawMyLocation(canvas, mapView, lastFix, myLocation, when);Location bLocation = new Location(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "com.google.android.widget",
    "truth_type": "com.google.android.maps",
    "full_FQN": "com.google.android.maps.MapView",
    "boolean": 0,
    "context": "public class Android11 extends MyLocationOverlay { public Android11(Context arg0, <mask><mask><mask><mask><mask><mask><mask>.MapView arg1) { super(arg0, arg1);} @Override public void drawMyLocation(Canvas canvas, MapView mapView, Location lastFix, GeoPoint myLocation, long when) { drawMyLocation(canvas, mapView, lastFix, myLocation, when);Location bLocation = new Location(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.graphics",
    "truth_type": "android.graphics",
    "full_FQN": "android.graphics.Canvas",
    "boolean": 1,
    "context": "public class Android11 extends MyLocationOverlay { public Android11(Context arg0, MapView arg1) { super(arg0, arg1);} @Override public void drawMyLocation(<mask><mask><mask><mask>.Canvas canvas, MapView mapView, Location lastFix, GeoPoint myLocation, long when) { drawMyLocation(canvas, mapView, lastFix, myLocation, when);Location bLocation = new Location(String); setLatitude(gpslat);"
  },
  {
    "lib_name": "android",
    "pred_type": "com.google.android.widget",
    "truth_type": "com.google.android.maps",
    "full_FQN": "com.google.android.maps.MapView",
    "boolean": 0,
    "context": "public class Android11 extends MyLocationOverlay { public Android11(Context arg0, MapView arg1) { super(arg0, arg1);} @Override public void drawMyLocation(Canvas canvas, <mask><mask><mask><mask><mask><mask><mask>.MapView mapView, Location lastFix, GeoPoint myLocation, long when) { drawMyLocation(canvas, mapView, lastFix, myLocation, when);Location bLocation = new Location(String); setLatitude(gpslat);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.location",
    "truth_type": "android.location",
    "full_FQN": "android.location.Location",
    "boolean": 1,
    "context": "public class Android11 extends MyLocationOverlay { public Android11(Context arg0, MapView arg1) { super(arg0, arg1);} @Override public void drawMyLocation(Canvas canvas, MapView mapView, <mask><mask><mask>.Location lastFix, GeoPoint myLocation, long when) { drawMyLocation(canvas, mapView, lastFix, myLocation, when);Location bLocation = new Location(String); setLatitude(gpslat);"
  },
  {
    "lib_name": "android",
    "pred_type": "com.android...location",
    "truth_type": "com.google.android.maps",
    "full_FQN": "com.google.android.maps.GeoPoint",
    "boolean": 0,
    "context": "public class Android11 extends MyLocationOverlay { public Android11(Context arg0, MapView arg1) { super(arg0, arg1);} @Override public void drawMyLocation(Canvas canvas, MapView mapView, Location lastFix, <mask><mask><mask><mask><mask><mask><mask>.GeoPoint myLocation, long when) { drawMyLocation(canvas, mapView, lastFix, myLocation, when);Location bLocation = new Location(String); setLatitude(gpslat);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.location",
    "truth_type": "android.location",
    "full_FQN": "android.location.Location",
    "boolean": 1,
    "context": "public class Android11 extends MyLocationOverlay { public Android11(Context arg0, MapView arg1) { super(arg0, arg1);} @Override public void drawMyLocation(Canvas canvas, MapView mapView, Location lastFix, GeoPoint myLocation, long when) { drawMyLocation(canvas, mapView, lastFix, myLocation, when);<mask><mask><mask>.Location bLocation = new Location(String); setLatitude(gpslat); setLongitude(gpslong);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.location",
    "truth_type": "android.location",
    "full_FQN": "android.location.Location()",
    "boolean": 1,
    "context": "public class Android11 extends MyLocationOverlay { public Android11(Context arg0, MapView arg1) { super(arg0, arg1);} @Override public void drawMyLocation(Canvas canvas, MapView mapView, Location lastFix, GeoPoint myLocation, long when) { drawMyLocation(canvas, mapView, lastFix, myLocation, when);Location bLocation = new <mask><mask><mask>.Location(String); setLatitude(gpslat); setLongitude(gpslong);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.location",
    "truth_type": "android.location",
    "full_FQN": "android.location.Location.setLatitude()",
    "boolean": 1,
    "context": "} @Override public void drawMyLocation(Canvas canvas, MapView mapView, Location lastFix, GeoPoint myLocation, long when) { drawMyLocation(canvas, mapView, lastFix, myLocation, when);Location bLocation = new Location(String); <mask><mask><mask>setLatitude(gpslat); setLongitude(gpslong);Location aLocation = new Location(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.location",
    "truth_type": "android.location",
    "full_FQN": "android.location.Location.setLongitude()",
    "boolean": 1,
    "context": "android.location.Location bLocation = new Location(String); setLatitude(gpslat); <mask><mask><mask>setLongitude(gpslong);Location aLocation = new Location(String); setLatitude getLatitudeE6());"
  },
  {
    "lib_name": "android",
    "pred_type": "android.location",
    "truth_type": "android.location",
    "full_FQN": "android.location.Location",
    "boolean": 1,
    "context": " setLatitude(gpslat); setLongitude(gpslong);<mask><mask><mask>.Location aLocation = new Location(String); setLatitude getLatitudeE6()); setLongitude getLongitudeE6());"
  },
  {
    "lib_name": "android",
    "pred_type": "android.location",
    "truth_type": "android.location",
    "full_FQN": "android.location.Location()",
    "boolean": 1,
    "context": " setLatitude(gpslat); setLongitude(gpslong);Location aLocation = new <mask><mask><mask>.Location(String); setLatitude getLatitudeE6()); setLongitude getLongitudeE6());"
  },
  {
    "lib_name": "android",
    "pred_type": "android.location.Location",
    "truth_type": "android.location.Location",
    "full_FQN": "android.location.Location.setLatitude",
    "boolean": 1,
    "context": " setLongitude(gpslong);Location aLocation = new Location(String); <mask><mask><mask><mask><mask>.setLatitude getLatitudeE6()); setLongitude getLongitudeE6()); set(aLocation);"
  },
  {
    "lib_name": "android",
    "pred_type": "com.google.location.location",
    "truth_type": "com.google.android.maps",
    "full_FQN": "com.google.android.maps.GeoPoint.getLatitudeE6()",
    "boolean": 0,
    "context": " setLongitude(gpslong);Location aLocation = new Location(String); setLatitude <mask><mask><mask><mask><mask><mask><mask>getLatitudeE6()); setLongitude getLongitudeE6()); set(aLocation);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.location.Location",
    "truth_type": "android.location.Location",
    "full_FQN": "android.location.Location.setLongitude",
    "boolean": 1,
    "context": "android.location.Location aLocation = new Location(String); setLatitude getLatitudeE6()); <mask><mask><mask><mask><mask>.setLongitude getLongitudeE6()); set(aLocation); set(bLocation);"
  },
  {
    "lib_name": "android",
    "pred_type": "com.google.location.location",
    "truth_type": "com.google.android.maps",
    "full_FQN": "com.google.android.maps.GeoPoint.getLongitudeE6()",
    "boolean": 0,
    "context": "android.location.Location aLocation = new Location(String); setLatitude getLatitudeE6()); setLongitude <mask><mask><mask><mask><mask><mask><mask>getLongitudeE6()); set(aLocation); set(bLocation);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.location",
    "truth_type": "android.location",
    "full_FQN": "android.location.Location.set()",
    "boolean": 1,
    "context": " setLatitude getLatitudeE6()); setLongitude getLongitudeE6()); <mask><mask><mask>set(aLocation); set(bLocation);int distance = ((int)  distanceTo(bLocation)));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.location",
    "truth_type": "android.location",
    "full_FQN": "android.location.Location.set()",
    "boolean": 1,
    "context": " setLongitude getLongitudeE6()); set(aLocation); <mask><mask><mask>set(bLocation);int distance = ((int)  distanceTo(bLocation)));String str = (String + valueOf(distance)) + String;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.location",
    "truth_type": "android.location",
    "full_FQN": "android.location.Location.distanceTo()",
    "boolean": 1,
    "context": " set(aLocation); set(bLocation);int distance = ((int)  <mask><mask><mask>distanceTo(bLocation)));String str = (String + valueOf(distance)) + String;} static final class FindList { public static int gpslat = 1;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.Activity",
    "boolean": 1,
    "context": "public class Android12 extends <mask><mask><mask>.Activity { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);LinearLayout l = new LinearLayout(this);LayoutParams lp = new LayoutParams(FILL_PARENT, WRAP_CONTENT);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "android.os",
    "full_FQN": "android.os.Bundle",
    "boolean": 0,
    "context": "public class Android12 extends Activity { @Override public void onCreate(<mask><mask><mask>.Bundle savedInstanceState) { onCreate(savedInstanceState);LinearLayout l = new LinearLayout(this);LayoutParams lp = new LayoutParams(FILL_PARENT, WRAP_CONTENT);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.LinearLayout",
    "boolean": 1,
    "context": "public class Android12 extends Activity { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);<mask><mask><mask>.LinearLayout l = new LinearLayout(this);LayoutParams lp = new LayoutParams(FILL_PARENT, WRAP_CONTENT);LayoutParams mlp = new LayoutParams(new MarginLayoutParams(WRAP_CONTENT, WRAP_CONTENT));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.LinearLayout()",
    "boolean": 1,
    "context": "public class Android12 extends Activity { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);LinearLayout l = new <mask><mask><mask>.LinearLayout(this);LayoutParams lp = new LayoutParams(FILL_PARENT, WRAP_CONTENT);LayoutParams mlp = new LayoutParams(new MarginLayoutParams(WRAP_CONTENT, WRAP_CONTENT));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget.LinearLayout",
    "truth_type": "android.widget.LinearLayout",
    "full_FQN": "android.widget.LinearLayout.LayoutParams",
    "boolean": 1,
    "context": "public class Android12 extends Activity { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);LinearLayout l = new LinearLayout(this);<mask><mask><mask><mask><mask><mask><mask>.LayoutParams lp = new LayoutParams(FILL_PARENT, WRAP_CONTENT);LayoutParams mlp = new LayoutParams(new MarginLayoutParams(WRAP_CONTENT, WRAP_CONTENT)); LinearLayout$setMargins(0, 0, 2, 0);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.LinearLayout.LayoutParams()",
    "boolean": 1,
    "context": "public class Android12 extends Activity { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);LinearLayout l = new LinearLayout(this);LayoutParams lp = new <mask><mask><mask>LayoutParams(FILL_PARENT, WRAP_CONTENT);LayoutParams mlp = new LayoutParams(new MarginLayoutParams(WRAP_CONTENT, WRAP_CONTENT)); LinearLayout$setMargins(0, 0, 2, 0);"
  },
  {
    "lib_name": "android",
    "pred_type": "LinearLayout.LayoutParams",
    "truth_type": "LinearLayout.LayoutParams",
    "full_FQN": "LinearLayout.LayoutParams.FILL_PARENT",
    "boolean": 1,
    "context": "public class Android12 extends Activity { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);LinearLayout l = new LinearLayout(this);LayoutParams lp = new LayoutParams(<mask><mask><mask><mask><mask><mask><mask>.FILL_PARENT, WRAP_CONTENT);LayoutParams mlp = new LayoutParams(new MarginLayoutParams(WRAP_CONTENT, WRAP_CONTENT)); LinearLayout$setMargins(0, 0, 2, 0);"
  },
  {
    "lib_name": "android",
    "pred_type": "LinearearLayout.LayoutParams",
    "truth_type": "LinearLayout.LayoutParams",
    "full_FQN": "LinearLayout.LayoutParams.WRAP_CONTENT",
    "boolean": 0,
    "context": "public class Android12 extends Activity { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);LinearLayout l = new LinearLayout(this);LayoutParams lp = new LayoutParams(FILL_PARENT, <mask><mask><mask><mask><mask><mask><mask>.WRAP_CONTENT);LayoutParams mlp = new LayoutParams(new MarginLayoutParams(WRAP_CONTENT, WRAP_CONTENT)); LinearLayout$setMargins(0, 0, 2, 0);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget.LinearLayout",
    "truth_type": "android.widget.LinearLayout",
    "full_FQN": "android.widget.LinearLayout.LayoutParams",
    "boolean": 1,
    "context": "android.widget.LinearLayout l = new LinearLayout(this);LayoutParams lp = new LayoutParams(FILL_PARENT, WRAP_CONTENT);<mask><mask><mask><mask><mask><mask><mask>.LayoutParams mlp = new LayoutParams(new MarginLayoutParams(WRAP_CONTENT, WRAP_CONTENT)); LinearLayout$setMargins(0, 0, 2, 0);for (int i = 0; i < 10; i++) { TextView t = new TextView(this);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.LinearLayout.LayoutParams()",
    "boolean": 1,
    "context": "android.widget.LinearLayout l = new LinearLayout(this);LayoutParams lp = new LayoutParams(FILL_PARENT, WRAP_CONTENT);LayoutParams mlp = new <mask><mask><mask>LayoutParams(new MarginLayoutParams(WRAP_CONTENT, WRAP_CONTENT)); LinearLayout$setMargins(0, 0, 2, 0);for (int i = 0; i < 10; i++) { TextView t = new TextView(this);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.view",
    "full_FQN": "android.view.ViewGroup.MarginLayoutParams()",
    "boolean": 0,
    "context": "android.widget.LinearLayout l = new LinearLayout(this);LayoutParams lp = new LayoutParams(FILL_PARENT, WRAP_CONTENT);LayoutParams mlp = new LayoutParams(new <mask><mask><mask>MarginLayoutParams(WRAP_CONTENT, WRAP_CONTENT)); LinearLayout$setMargins(0, 0, 2, 0);for (int i = 0; i < 10; i++) { TextView t = new TextView(this);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget.LinearLayout.LayoutParams",
    "truth_type": "android.widget.LinearLayout.LayoutParams",
    "full_FQN": "android.widget.LinearLayout.LayoutParams.WRAP_CONTENT",
    "boolean": 1,
    "context": "android.widget.LinearLayout l = new LinearLayout(this);LayoutParams lp = new LayoutParams(FILL_PARENT, WRAP_CONTENT);LayoutParams mlp = new LayoutParams(new MarginLayoutParams(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.WRAP_CONTENT, WRAP_CONTENT)); LinearLayout$setMargins(0, 0, 2, 0);for (int i = 0; i < 10; i++) { TextView t = new TextView(this);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view.LinearLayout.LayoutParams",
    "truth_type": "android.widget.LinearLayout.LayoutParams",
    "full_FQN": "android.widget.LinearLayout.LayoutParams.WRAP_CONTENT",
    "boolean": 0,
    "context": "android.widget.LinearLayout l = new LinearLayout(this);LayoutParams lp = new LayoutParams(FILL_PARENT, WRAP_CONTENT);LayoutParams mlp = new LayoutParams(new MarginLayoutParams(WRAP_CONTENT, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.WRAP_CONTENT)); LinearLayout$setMargins(0, 0, 2, 0);for (int i = 0; i < 10; i++) { TextView t = new TextView(this);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.LinearLayout",
    "boolean": 1,
    "context": "android.widget.LinearLayout.LayoutParams lp = new LayoutParams(FILL_PARENT, WRAP_CONTENT);LayoutParams mlp = new LayoutParams(new MarginLayoutParams(WRAP_CONTENT, WRAP_CONTENT)); <mask><mask><mask>.LinearLayout$setMargins(0, 0, 2, 0);for (int i = 0; i < 10; i++) { TextView t = new TextView(this); setText(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView",
    "boolean": 1,
    "context": "android.widget.LinearLayout.LayoutParams mlp = new LayoutParams(new MarginLayoutParams(WRAP_CONTENT, WRAP_CONTENT)); LinearLayout$setMargins(0, 0, 2, 0);for (int i = 0; i < 10; i++) { <mask><mask><mask>.TextView t = new TextView(this); setText(String); setBackgroundColor(RED);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView()",
    "boolean": 1,
    "context": "android.widget.LinearLayout.LayoutParams mlp = new LayoutParams(new MarginLayoutParams(WRAP_CONTENT, WRAP_CONTENT)); LinearLayout$setMargins(0, 0, 2, 0);for (int i = 0; i < 10; i++) { TextView t = new <mask><mask><mask>.TextView(this); setText(String); setBackgroundColor(RED);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView.setText()",
    "boolean": 1,
    "context": " LinearLayout$setMargins(0, 0, 2, 0);for (int i = 0; i < 10; i++) { TextView t = new TextView(this); <mask><mask><mask>setText(String); setBackgroundColor(RED); setSingleLine(true);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView.setBackgroundColor()",
    "boolean": 1,
    "context": "for (int i = 0; i < 10; i++) { TextView t = new TextView(this); setText(String); <mask><mask><mask>setBackgroundColor(RED); setSingleLine(true); addView(t, mlp);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView.setSingleLine()",
    "boolean": 1,
    "context": " setText(String); setBackgroundColor(RED); <mask><mask><mask>setSingleLine(true); addView(t, mlp);} setContentView(l, lp);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.LinearLayout.addView()",
    "boolean": 1,
    "context": " setBackgroundColor(RED); setSingleLine(true); <mask><mask><mask>addView(t, mlp);} setContentView(l, lp);} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.net",
    "truth_type": "android.net",
    "full_FQN": "android.net.Uri",
    "boolean": 1,
    "context": "// ID = 559902 public class Android13 { public static void main(String[] args) { <mask><mask><mask>.Uri imageUri = null;Bitmap bitmap = null;try { bitmap = getBitmap(getContentResolver(), imageUri);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.graphics",
    "truth_type": "android.graphics",
    "full_FQN": "android.graphics.Bitmap",
    "boolean": 1,
    "context": "// ID = 559902 public class Android13 { public static void main(String[] args) { Uri imageUri = null;<mask><mask><mask><mask>.Bitmap bitmap = null;try { bitmap = getBitmap(getContentResolver(), imageUri);} catch (FileNotFoundException e) { printStackTrace();"
  },
  {
    "lib_name": "android",
    "pred_type": "com.android.internal...Media",
    "truth_type": "android.provider.MediaStore.Images",
    "full_FQN": "android.provider.MediaStore.Images.Media.getBitmap()",
    "boolean": 0,
    "context": "// ID = 559902 public class Android13 { public static void main(String[] args) { Uri imageUri = null;Bitmap bitmap = null;try { bitmap = <mask><mask><mask><mask><mask><mask><mask><mask><mask>getBitmap(getContentResolver(), imageUri);} catch (FileNotFoundException e) { printStackTrace();} catch (IOException e) { printStackTrace();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileNotFoundException",
    "boolean": 1,
    "context": "android.graphics.Bitmap bitmap = null;try { bitmap = getBitmap(getContentResolver(), imageUri);} catch (<mask><mask><mask>.FileNotFoundException e) { printStackTrace();} catch (IOException e) { printStackTrace();} ByteArrayOutputStream bytes = new ByteArrayOutputStream();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileNotFoundException.printStackTrace()",
    "boolean": 1,
    "context": "android.graphics.Bitmap bitmap = null;try { bitmap = getBitmap(getContentResolver(), imageUri);} catch (FileNotFoundException e) { <mask><mask><mask>printStackTrace();} catch (IOException e) { printStackTrace();} ByteArrayOutputStream bytes = new ByteArrayOutputStream();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException",
    "boolean": 1,
    "context": "try { bitmap = getBitmap(getContentResolver(), imageUri);} catch (FileNotFoundException e) { printStackTrace();} catch (<mask><mask><mask>.IOException e) { printStackTrace();} ByteArrayOutputStream bytes = new ByteArrayOutputStream(); compress(JPEG, 40, bytes);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileNotFoundException.printStackTrace()",
    "boolean": 1,
    "context": "try { bitmap = getBitmap(getContentResolver(), imageUri);} catch (FileNotFoundException e) { printStackTrace();} catch (IOException e) { <mask><mask><mask>printStackTrace();} ByteArrayOutputStream bytes = new ByteArrayOutputStream(); compress(JPEG, 40, bytes);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.ByteArrayOutputStream",
    "boolean": 1,
    "context": "} catch (FileNotFoundException e) { printStackTrace();} catch (IOException e) { printStackTrace();} <mask><mask><mask>.ByteArrayOutputStream bytes = new ByteArrayOutputStream(); compress(JPEG, 40, bytes);ByteArrayInputStream fileInputStream = new ByteArrayInputStream toByteArray());"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.ByteArrayOutputStream()",
    "boolean": 1,
    "context": "} catch (FileNotFoundException e) { printStackTrace();} catch (IOException e) { printStackTrace();} ByteArrayOutputStream bytes = new <mask><mask><mask>.ByteArrayOutputStream(); compress(JPEG, 40, bytes);ByteArrayInputStream fileInputStream = new ByteArrayInputStream toByteArray());"
  },
  {
    "lib_name": "android",
    "pred_type": "android.graphics",
    "truth_type": "android.graphics",
    "full_FQN": "android.graphics.Bitmap.compress()",
    "boolean": 1,
    "context": "} catch (IOException e) { printStackTrace();} ByteArrayOutputStream bytes = new ByteArrayOutputStream(); <mask><mask><mask><mask>compress(JPEG, 40, bytes);ByteArrayInputStream fileInputStream = new ByteArrayInputStream toByteArray());} private static ContentResolver getContentResolver() { return null;"
  },
  {
    "lib_name": "android",
    "pred_type": "Bitmap.CompressFormat",
    "truth_type": "Bitmap.CompressFormat",
    "full_FQN": "Bitmap.CompressFormat.JPEG",
    "boolean": 1,
    "context": "} catch (IOException e) { printStackTrace();} ByteArrayOutputStream bytes = new ByteArrayOutputStream(); compress(<mask><mask><mask><mask><mask><mask>.JPEG, 40, bytes);ByteArrayInputStream fileInputStream = new ByteArrayInputStream toByteArray());} private static ContentResolver getContentResolver() { return null;"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.ByteArrayInputStream",
    "boolean": 1,
    "context": "} ByteArrayOutputStream bytes = new ByteArrayOutputStream(); compress(JPEG, 40, bytes);<mask><mask><mask>.ByteArrayInputStream fileInputStream = new ByteArrayInputStream toByteArray());} private static ContentResolver getContentResolver() { return null;} };"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.ByteArrayInputStream",
    "boolean": 1,
    "context": "} ByteArrayOutputStream bytes = new ByteArrayOutputStream(); compress(JPEG, 40, bytes);ByteArrayInputStream fileInputStream = new <mask><mask><mask>.ByteArrayInputStream toByteArray());} private static ContentResolver getContentResolver() { return null;} };"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.ByteArrayOutputStream.toByteArray()",
    "boolean": 1,
    "context": "} ByteArrayOutputStream bytes = new ByteArrayOutputStream(); compress(JPEG, 40, bytes);ByteArrayInputStream fileInputStream = new ByteArrayInputStream <mask><mask><mask>toByteArray());} private static ContentResolver getContentResolver() { return null;} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.ContentResolver",
    "boolean": 1,
    "context": " compress(JPEG, 40, bytes);ByteArrayInputStream fileInputStream = new ByteArrayInputStream toByteArray());} private static <mask><mask><mask>.ContentResolver getContentResolver() { return null;} };"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.URL",
    "boolean": 1,
    "context": "public class Android14 { public static void main(String[] args) { try { <mask><mask><mask>.URL u = new URL(String);HttpURLConnection c = ((HttpURLConnection)  openConnection())); setRequestMethod(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.URL()",
    "boolean": 1,
    "context": "public class Android14 { public static void main(String[] args) { try { URL u = new <mask><mask><mask>.URL(String);HttpURLConnection c = ((HttpURLConnection)  openConnection())); setRequestMethod(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection",
    "boolean": 1,
    "context": "public class Android14 { public static void main(String[] args) { try { URL u = new URL(String);<mask><mask><mask>.HttpURLConnection c = ((HttpURLConnection)  openConnection())); setRequestMethod(String); setDoOutput(true);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection",
    "boolean": 1,
    "context": "public class Android14 { public static void main(String[] args) { try { URL u = new URL(String);HttpURLConnection c = ((<mask><mask><mask>.HttpURLConnection)  openConnection())); setRequestMethod(String); setDoOutput(true);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.URL.openConnection()",
    "boolean": 1,
    "context": "public class Android14 { public static void main(String[] args) { try { URL u = new URL(String);HttpURLConnection c = ((HttpURLConnection)  <mask><mask><mask>openConnection())); setRequestMethod(String); setDoOutput(true);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection.setRequestMethod()",
    "boolean": 1,
    "context": "public class Android14 { public static void main(String[] args) { try { URL u = new URL(String);HttpURLConnection c = ((HttpURLConnection)  openConnection())); <mask><mask><mask>setRequestMethod(String); setDoOutput(true); connect();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection.setDoOutput()",
    "boolean": 1,
    "context": "java.net.HttpURLConnection c = ((HttpURLConnection)  openConnection())); setRequestMethod(String); <mask><mask><mask>setDoOutput(true); connect();String root = String;"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection.connect()",
    "boolean": 1,
    "context": " setRequestMethod(String); setDoOutput(true); <mask><mask><mask>connect();String root = String;FileOutputStream f = new FileOutputStream(new File(root, String));"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileOutputStream",
    "boolean": 1,
    "context": " connect();String root = String;<mask><mask><mask>.FileOutputStream f = new FileOutputStream(new File(root, String));InputStream in = getInputStream();byte[] buffer = new byte[1024];"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileOutputStream()",
    "boolean": 1,
    "context": " connect();String root = String;FileOutputStream f = new <mask><mask><mask>.FileOutputStream(new File(root, String));InputStream in = getInputStream();byte[] buffer = new byte[1024];"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File()",
    "boolean": 1,
    "context": " connect();String root = String;FileOutputStream f = new FileOutputStream(new <mask><mask><mask>.File(root, String));InputStream in = getInputStream();byte[] buffer = new byte[1024];"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.InputStream",
    "boolean": 1,
    "context": "java.lang.String root = String;FileOutputStream f = new FileOutputStream(new File(root, String));<mask><mask><mask>.InputStream in = getInputStream();byte[] buffer = new byte[1024];int len1 = 0;"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection.getInputStream()",
    "boolean": 1,
    "context": "java.lang.String root = String;FileOutputStream f = new FileOutputStream(new File(root, String));InputStream in = <mask><mask><mask>getInputStream();byte[] buffer = new byte[1024];int len1 = 0;"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.InputStream.read()",
    "boolean": 1,
    "context": "byte[] buffer = new byte[1024];int len1 = 0;while ((len1 = <mask><mask><mask>read(buffer)) > 0) { write(buffer);} close();} catch (MalformedURLException e) { printStackTrace();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileOutputStream.write()",
    "boolean": 1,
    "context": "byte[] buffer = new byte[1024];int len1 = 0;while ((len1 = read(buffer)) > 0) { <mask><mask><mask>write(buffer);} close();} catch (MalformedURLException e) { printStackTrace();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileOutputStream.close()",
    "boolean": 1,
    "context": "int len1 = 0;while ((len1 = read(buffer)) > 0) { write(buffer);} <mask><mask><mask>close();} catch (MalformedURLException e) { printStackTrace();} catch (ProtocolException e) { printStackTrace();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.MalformedURLException",
    "boolean": 1,
    "context": "while ((len1 = read(buffer)) > 0) { write(buffer);} close();} catch (<mask><mask><mask>.MalformedURLException e) { printStackTrace();} catch (ProtocolException e) { printStackTrace();} catch (FileNotFoundException e) { printStackTrace();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.ProtocolException.printStackTrace()",
    "boolean": 1,
    "context": "while ((len1 = read(buffer)) > 0) { write(buffer);} close();} catch (MalformedURLException e) { <mask><mask><mask>printStackTrace();} catch (ProtocolException e) { printStackTrace();} catch (FileNotFoundException e) { printStackTrace();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.ProtocolException",
    "boolean": 1,
    "context": "} close();} catch (MalformedURLException e) { printStackTrace();} catch (<mask><mask><mask>.ProtocolException e) { printStackTrace();} catch (FileNotFoundException e) { printStackTrace();} catch (IOException e) { printStackTrace();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.ProtocolException.printStackTrace()",
    "boolean": 1,
    "context": "} close();} catch (MalformedURLException e) { printStackTrace();} catch (ProtocolException e) { <mask><mask><mask>printStackTrace();} catch (FileNotFoundException e) { printStackTrace();} catch (IOException e) { printStackTrace();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileNotFoundException",
    "boolean": 1,
    "context": "} catch (MalformedURLException e) { printStackTrace();} catch (ProtocolException e) { printStackTrace();} catch (<mask><mask><mask>.FileNotFoundException e) { printStackTrace();} catch (IOException e) { printStackTrace();} } };"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.ProtocolException.printStackTrace()",
    "boolean": 1,
    "context": "} catch (MalformedURLException e) { printStackTrace();} catch (ProtocolException e) { printStackTrace();} catch (FileNotFoundException e) { <mask><mask><mask>printStackTrace();} catch (IOException e) { printStackTrace();} } };"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException",
    "boolean": 1,
    "context": "} catch (ProtocolException e) { printStackTrace();} catch (FileNotFoundException e) { printStackTrace();} catch (<mask><mask><mask>.IOException e) { printStackTrace();} } };"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.ProtocolException.printStackTrace()",
    "boolean": 1,
    "context": "} catch (ProtocolException e) { printStackTrace();} catch (FileNotFoundException e) { printStackTrace();} catch (IOException e) { <mask><mask><mask>printStackTrace();} } };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Intent",
    "boolean": 1,
    "context": "public class Android15 { public static void main(String[] args) { <mask><mask><mask>.Intent sendIntent = new Intent(ACTION_SEND); setType(String); putExtra(EXTRA_SUBJECT, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Intent()",
    "boolean": 1,
    "context": "public class Android15 { public static void main(String[] args) { Intent sendIntent = new <mask><mask><mask>.Intent(ACTION_SEND); setType(String); putExtra(EXTRA_SUBJECT, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content.Intent",
    "truth_type": "android.content.Intent",
    "full_FQN": "android.content.Intent.ACTION_SEND",
    "boolean": 1,
    "context": "public class Android15 { public static void main(String[] args) { Intent sendIntent = new Intent(<mask><mask><mask><mask><mask><mask>.ACTION_SEND); setType(String); putExtra(EXTRA_SUBJECT, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Intent.setType()",
    "boolean": 1,
    "context": "public class Android15 { public static void main(String[] args) { Intent sendIntent = new Intent(ACTION_SEND); <mask><mask><mask>setType(String); putExtra(EXTRA_SUBJECT, String); putExtra(EXTRA_STREAM, parse(String));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Intent.putExtra()",
    "boolean": 1,
    "context": "public class Android15 { public static void main(String[] args) { Intent sendIntent = new Intent(ACTION_SEND); setType(String); <mask><mask><mask>putExtra(EXTRA_SUBJECT, String); putExtra(EXTRA_STREAM, parse(String)); putExtra(EXTRA_TEXT, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content.Intent",
    "truth_type": "android.content.Intent",
    "full_FQN": "android.content.Intent.EXTRA_SUBJECT",
    "boolean": 1,
    "context": "public class Android15 { public static void main(String[] args) { Intent sendIntent = new Intent(ACTION_SEND); setType(String); putExtra(<mask><mask><mask><mask><mask><mask>.EXTRA_SUBJECT, String); putExtra(EXTRA_STREAM, parse(String)); putExtra(EXTRA_TEXT, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Intent.putExtra()",
    "boolean": 1,
    "context": " setType(String); putExtra(EXTRA_SUBJECT, String); <mask><mask><mask>putExtra(EXTRA_STREAM, parse(String)); putExtra(EXTRA_TEXT, String);startActivity(createChooser(sendIntent, String));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content.Intent",
    "truth_type": "android.content.Intent",
    "full_FQN": "android.content.Intent.EXTRA_STREAM",
    "boolean": 1,
    "context": " setType(String); putExtra(EXTRA_SUBJECT, String); putExtra(<mask><mask><mask><mask><mask><mask>.EXTRA_STREAM, parse(String)); putExtra(EXTRA_TEXT, String);startActivity(createChooser(sendIntent, String));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.net",
    "truth_type": "android.net",
    "full_FQN": "android.net.Uri.parse()",
    "boolean": 1,
    "context": " setType(String); putExtra(EXTRA_SUBJECT, String); putExtra(EXTRA_STREAM, <mask><mask><mask>parse(String)); putExtra(EXTRA_TEXT, String);startActivity(createChooser(sendIntent, String));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Intent.putExtra()",
    "boolean": 1,
    "context": " putExtra(EXTRA_SUBJECT, String); putExtra(EXTRA_STREAM, parse(String)); <mask><mask><mask>putExtra(EXTRA_TEXT, String);startActivity(createChooser(sendIntent, String));} private static void startActivity(Intent createChooser) { } };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content.Intent",
    "truth_type": "android.content.Intent",
    "full_FQN": "android.content.Intent.EXTRA_TEXT",
    "boolean": 1,
    "context": " putExtra(EXTRA_SUBJECT, String); putExtra(EXTRA_STREAM, parse(String)); putExtra(<mask><mask><mask><mask><mask><mask>.EXTRA_TEXT, String);startActivity(createChooser(sendIntent, String));} private static void startActivity(Intent createChooser) { } };"
  },
  {
    "lib_name": "android",
    "pred_type": "intent.mthis",
    "truth_type": "android.Android15",
    "full_FQN": "android.Android15.startActivity()",
    "boolean": 0,
    "context": " putExtra(EXTRA_STREAM, parse(String)); putExtra(EXTRA_TEXT, String);<mask><mask><mask><mask>.startActivity(createChooser(sendIntent, String));} private static void startActivity(Intent createChooser) { } };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Intent.createChooser()",
    "boolean": 1,
    "context": " putExtra(EXTRA_STREAM, parse(String)); putExtra(EXTRA_TEXT, String);startActivity(<mask><mask><mask>createChooser(sendIntent, String));} private static void startActivity(Intent createChooser) { } };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Intent",
    "boolean": 1,
    "context": " putExtra(EXTRA_TEXT, String);startActivity(createChooser(sendIntent, String));} private static void startActivity(<mask><mask><mask>.Intent createChooser) { } };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.SeekBar",
    "boolean": 1,
    "context": "public class Android16 extends <mask><mask><mask>.SeekBar { private int oHeight = 320;private int oWidth = 29;private int oProgress = -1;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Context",
    "boolean": 1,
    "context": "private int left = -1;private int right = -1;public Android16(<mask><mask><mask>.Context context) { super(context);} public Android16(Context context, AttributeSet attrs) { super(context, attrs);oOffset = getThumbOffset();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Context",
    "boolean": 1,
    "context": "private int right = -1;public Android16(Context context) { super(context);} public Android16(<mask><mask><mask>.Context context, AttributeSet attrs) { super(context, attrs);oOffset = getThumbOffset();oProgress = getProgress();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.AttributeSet",
    "boolean": 1,
    "context": "private int right = -1;public Android16(Context context) { super(context);} public Android16(Context context, <mask><mask><mask>.AttributeSet attrs) { super(context, attrs);oOffset = getThumbOffset();oProgress = getProgress();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Context",
    "boolean": 1,
    "context": "oOffset = getThumbOffset();oProgress = getProgress();} public Android16(<mask><mask><mask>.Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle);} protected synchronized void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { int height = getSize(heightMeasureSpec);oHeight = height;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.AttributeSet",
    "boolean": 1,
    "context": "oOffset = getThumbOffset();oProgress = getProgress();} public Android16(Context context, <mask><mask><mask>.AttributeSet attrs, int defStyle) { super(context, attrs, defStyle);} protected synchronized void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { int height = getSize(heightMeasureSpec);oHeight = height;"
  },
  {
    "lib_name": "android",
    "pred_type": "this.mSpec",
    "truth_type": "android.MeasureSpec",
    "full_FQN": "android.MeasureSpec.getSize()",
    "boolean": 0,
    "context": "oProgress = getProgress();} public Android16(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle);} protected synchronized void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { int height = <mask><mask><mask><mask>.getSize(heightMeasureSpec);oHeight = height;setMeasuredDimension(oWidth, oHeight);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.graphics",
    "truth_type": "android.graphics",
    "full_FQN": "android.graphics.Canvas",
    "boolean": 1,
    "context": "top = t;bottom = b;} protected void onDraw(<mask><mask><mask><mask>.Canvas c) { rotate(90); translate(0, -29);onDraw(c);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.graphics",
    "truth_type": "android.graphics",
    "full_FQN": "android.graphics.Canvas.rotate()",
    "boolean": 1,
    "context": "top = t;bottom = b;} protected void onDraw(Canvas c) { <mask><mask><mask><mask>rotate(90); translate(0, -29);onDraw(c);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.graphics",
    "truth_type": "android.graphics",
    "full_FQN": "android.graphics.Canvas.translate()",
    "boolean": 1,
    "context": "bottom = b;} protected void onDraw(Canvas c) { rotate(90); <mask><mask><mask><mask>translate(0, -29);onDraw(c);} public boolean onTouchEvent(MotionEvent event) { xPos = getX();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.MotionEvent",
    "boolean": 1,
    "context": " translate(0, -29);onDraw(c);} public boolean onTouchEvent(<mask><mask><mask>.MotionEvent event) { xPos = getX();yPos = getY();float progress = (yPos - getTop()) / (getBottom() - getTop());"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.MotionEvent.getX()",
    "boolean": 1,
    "context": " translate(0, -29);onDraw(c);} public boolean onTouchEvent(MotionEvent event) { xPos = <mask><mask><mask>getX();yPos = getY();float progress = (yPos - getTop()) / (getBottom() - getTop());"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.MotionEvent.getY()",
    "boolean": 1,
    "context": "super.onDraw(c);} public boolean onTouchEvent(MotionEvent event) { xPos = getX();yPos = <mask><mask><mask>getY();float progress = (yPos - getTop()) / (getBottom() - getTop());oOffset = getThumbOffset();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.d()",
    "boolean": 1,
    "context": "oOffset = getThumbOffset();oProgress = getProgress();<mask><mask><mask>d(String + nanoTime(), new Integer(oOffset).toString());d(String + nanoTime(), new Integer(oProgress).toString());float offset;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.d()",
    "boolean": 1,
    "context": "oProgress = getProgress();d(String + nanoTime(), new Integer(oOffset).toString());<mask><mask><mask>d(String + nanoTime(), new Integer(oProgress).toString());float offset;offset = progress * (getBottom() - getTop());"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.d()",
    "boolean": 1,
    "context": "offset = progress * (getBottom() - getTop());setThumbOffset(((int) (offset)));<mask><mask><mask>d(String + nanoTime(), new Integer(oOffset).toString());d(String + nanoTime(), new Integer(oProgress).toString());setProgress(((int) ((100 * getY()) / getBottom())));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.d()",
    "boolean": 1,
    "context": "this.setThumbOffset(((int) (offset)));d(String + nanoTime(), new Integer(oOffset).toString());<mask><mask><mask>d(String + nanoTime(), new Integer(oProgress).toString());setProgress(((int) ((100 * getY()) / getBottom())));return true;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.MotionEvent.getY()",
    "boolean": 1,
    "context": "android.util.Log.d(String + nanoTime(), new Integer(oOffset).toString());d(String + nanoTime(), new Integer(oProgress).toString());setProgress(((int) ((100 * <mask><mask><mask>getY()) / getBottom())));return true;} };"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http.impl",
    "truth_type": "org.apache.http.client",
    "full_FQN": "org.apache.http.client.HttpClient",
    "boolean": 0,
    "context": "public class Android17 { private void Login() { <mask><mask><mask><mask><mask><mask><mask>.HttpClient httpClient = new DefaultHttpClient();try { String url = String;HttpGet method = new HttpGet(new URI(url));"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http.client",
    "truth_type": "org.apache.http.impl",
    "full_FQN": "org.apache.http.impl.client.DefaultHttpClient()",
    "boolean": 0,
    "context": "public class Android17 { private void Login() { HttpClient httpClient = new <mask><mask><mask><mask><mask><mask><mask>DefaultHttpClient();try { String url = String;HttpGet method = new HttpGet(new URI(url));"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http.client.methods",
    "truth_type": "org.apache.http.client.methods",
    "full_FQN": "org.apache.http.client.methods.HttpGet",
    "boolean": 1,
    "context": "public class Android17 { private void Login() { HttpClient httpClient = new DefaultHttpClient();try { String url = String;<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HttpGet method = new HttpGet(new URI(url));HttpResponse response = execute(method);if (response != null) { i(String, String + getResponse getEntity()));"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http.client",
    "truth_type": "org.apache.http.client",
    "full_FQN": "org.apache.http.client.methods.HttpGet()",
    "boolean": 1,
    "context": "public class Android17 { private void Login() { HttpClient httpClient = new DefaultHttpClient();try { String url = String;HttpGet method = new <mask><mask><mask><mask><mask><mask><mask>HttpGet(new URI(url));HttpResponse response = execute(method);if (response != null) { i(String, String + getResponse getEntity()));"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.URI()",
    "boolean": 1,
    "context": "public class Android17 { private void Login() { HttpClient httpClient = new DefaultHttpClient();try { String url = String;HttpGet method = new HttpGet(new <mask><mask><mask>.URI(url));HttpResponse response = execute(method);if (response != null) { i(String, String + getResponse getEntity()));"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http",
    "truth_type": "org.apache.http",
    "full_FQN": "org.apache.http.HttpResponse",
    "boolean": 1,
    "context": "try { String url = String;HttpGet method = new HttpGet(new URI(url));<mask><mask><mask><mask><mask>.HttpResponse response = execute(method);if (response != null) { i(String, String + getResponse getEntity()));} else { i(String, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http.client",
    "truth_type": "org.apache.http.client",
    "full_FQN": "org.apache.http.client.HttpClient.execute()",
    "boolean": 1,
    "context": "try { String url = String;HttpGet method = new HttpGet(new URI(url));HttpResponse response = <mask><mask><mask><mask><mask><mask><mask>execute(method);if (response != null) { i(String, String + getResponse getEntity()));} else { i(String, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.i()",
    "boolean": 1,
    "context": "org.apache.http.client.methods.HttpGet method = new HttpGet(new URI(url));HttpResponse response = execute(method);if (response != null) { <mask><mask><mask>i(String, String + getResponse getEntity()));} else { i(String, String);} } catch (IOException e) { e(String, getMessage());"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http",
    "truth_type": "org.apache.http",
    "full_FQN": "org.apache.http.HttpResponse.getEntity()",
    "boolean": 1,
    "context": "org.apache.http.client.methods.HttpGet method = new HttpGet(new URI(url));HttpResponse response = execute(method);if (response != null) { i(String, String + getResponse <mask><mask><mask><mask><mask>getEntity()));} else { i(String, String);} } catch (IOException e) { e(String, getMessage());"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.i()",
    "boolean": 1,
    "context": "org.apache.http.HttpResponse response = execute(method);if (response != null) { i(String, String + getResponse getEntity()));} else { <mask><mask><mask>i(String, String);} } catch (IOException e) { e(String, getMessage());} catch (URISyntaxException e) { e(String, getMessage());"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException",
    "boolean": 1,
    "context": "if (response != null) { i(String, String + getResponse getEntity()));} else { i(String, String);} } catch (<mask><mask><mask>.IOException e) { e(String, getMessage());} catch (URISyntaxException e) { e(String, getMessage());} } private String getResponse(HttpEntity entity) { String response = String;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.e()",
    "boolean": 1,
    "context": "if (response != null) { i(String, String + getResponse getEntity()));} else { i(String, String);} } catch (IOException e) { <mask><mask><mask>e(String, getMessage());} catch (URISyntaxException e) { e(String, getMessage());} } private String getResponse(HttpEntity entity) { String response = String;"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.URISyntaxException.getMessage()",
    "boolean": 1,
    "context": "if (response != null) { i(String, String + getResponse getEntity()));} else { i(String, String);} } catch (IOException e) { e(String, <mask><mask><mask>getMessage());} catch (URISyntaxException e) { e(String, getMessage());} } private String getResponse(HttpEntity entity) { String response = String;"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.URISyntaxException",
    "boolean": 1,
    "context": "} else { i(String, String);} } catch (IOException e) { e(String, getMessage());} catch (<mask><mask><mask>.URISyntaxException e) { e(String, getMessage());} } private String getResponse(HttpEntity entity) { String response = String;try { int length = ((int)  getContentLength()));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.e()",
    "boolean": 1,
    "context": "} else { i(String, String);} } catch (IOException e) { e(String, getMessage());} catch (URISyntaxException e) { <mask><mask><mask>e(String, getMessage());} } private String getResponse(HttpEntity entity) { String response = String;try { int length = ((int)  getContentLength()));"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.URISyntaxException.getMessage()",
    "boolean": 1,
    "context": "} else { i(String, String);} } catch (IOException e) { e(String, getMessage());} catch (URISyntaxException e) { e(String, <mask><mask><mask>getMessage());} } private String getResponse(HttpEntity entity) { String response = String;try { int length = ((int)  getContentLength()));"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http",
    "truth_type": "org.apache.http",
    "full_FQN": "org.apache.http.HttpEntity",
    "boolean": 1,
    "context": "} } catch (IOException e) { e(String, getMessage());} catch (URISyntaxException e) { e(String, getMessage());} } private String getResponse(<mask><mask><mask><mask><mask>.HttpEntity entity) { String response = String;try { int length = ((int)  getContentLength()));StringBuffer sb = new StringBuffer(length);"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http",
    "truth_type": "org.apache.http",
    "full_FQN": "org.apache.http.HttpEntity.getContentLength()",
    "boolean": 1,
    "context": "} catch (URISyntaxException e) { e(String, getMessage());} } private String getResponse(HttpEntity entity) { String response = String;try { int length = ((int)  <mask><mask><mask><mask><mask>getContentLength()));StringBuffer sb = new StringBuffer(length);InputStreamReader isr = new InputStreamReader getContent(), String);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.InputStreamReader",
    "boolean": 1,
    "context": "try { int length = ((int)  getContentLength()));StringBuffer sb = new StringBuffer(length);<mask><mask><mask>.InputStreamReader isr = new InputStreamReader getContent(), String);char[] buff = new char[length];int cnt;"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.InputStreamReader",
    "boolean": 1,
    "context": "try { int length = ((int)  getContentLength()));StringBuffer sb = new StringBuffer(length);InputStreamReader isr = new <mask><mask><mask>.InputStreamReader getContent(), String);char[] buff = new char[length];int cnt;"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http",
    "truth_type": "org.apache.http",
    "full_FQN": "org.apache.http.HttpEntity.getContent()",
    "boolean": 1,
    "context": "try { int length = ((int)  getContentLength()));StringBuffer sb = new StringBuffer(length);InputStreamReader isr = new InputStreamReader <mask><mask><mask><mask><mask>getContent(), String);char[] buff = new char[length];int cnt;"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.InputStreamReader.read()",
    "boolean": 1,
    "context": "char[] buff = new char[length];int cnt;while ((cnt = <mask><mask><mask>read(buff, 0, length - 1)) > 0) { append(buff, 0, cnt);} response = toString(); close();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.InputStreamReader.close()",
    "boolean": 1,
    "context": "while ((cnt = read(buff, 0, length - 1)) > 0) { append(buff, 0, cnt);} response = toString(); <mask><mask><mask>close();} catch (IOException ioe) { printStackTrace();} return response;"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException",
    "boolean": 1,
    "context": "} response = toString(); close();} catch (<mask><mask><mask>.IOException ioe) { printStackTrace();} return response;} };"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException.printStackTrace()",
    "boolean": 1,
    "context": "} response = toString(); close();} catch (IOException ioe) { <mask><mask><mask>printStackTrace();} return response;} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.Activity",
    "boolean": 1,
    "context": "// ID = 724419 public class Android18 extends <mask><mask><mask>.Activity implements android OnClickListener { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);setTitle(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view.View.View",
    "truth_type": "android.view.View.View",
    "full_FQN": "android.view.View.View.OnClickListener",
    "boolean": 1,
    "context": "// ID = 724419 public class Android18 extends Activity implements android <mask><mask><mask><mask><mask><mask><mask>.OnClickListener { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);setTitle(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "android.os",
    "full_FQN": "android.os.Bundle",
    "boolean": 0,
    "context": "// ID = 724419 public class Android18 extends Activity implements android OnClickListener { @Override public void onCreate(<mask><mask><mask>.Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);setTitle(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.DialogInterface",
    "boolean": 1,
    "context": "setContentView(activity_list_item);setTitle(String);} public void onClick(<mask><mask><mask>.DialogInterface arg0, int arg1) { startActivity(new Intent(this, class));} @Override public void onClick(android View view) { } } class ChildActivity extends Activity { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Intent()",
    "boolean": 1,
    "context": "setContentView(activity_list_item);setTitle(String);} public void onClick(DialogInterface arg0, int arg1) { startActivity(new <mask><mask><mask>.Intent(this, class));} @Override public void onClick(android View view) { } } class ChildActivity extends Activity { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);"
  },
  {
    "lib_name": "android",
    "pred_type": "App.ListActivity",
    "truth_type": "android.ChildActivity",
    "full_FQN": "android.ChildActivity.class",
    "boolean": 0,
    "context": "setContentView(activity_list_item);setTitle(String);} public void onClick(DialogInterface arg0, int arg1) { startActivity(new Intent(this, <mask><mask><mask><mask>.class));} @Override public void onClick(android View view) { } } class ChildActivity extends Activity { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view.View",
    "truth_type": "android.view.View",
    "full_FQN": "android.view.View.View",
    "boolean": 1,
    "context": "this.setTitle(String);} public void onClick(DialogInterface arg0, int arg1) { startActivity(new Intent(this, class));} @Override public void onClick(android <mask><mask><mask><mask><mask>.View view) { } } class ChildActivity extends Activity { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);setTitle(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.Activity",
    "boolean": 1,
    "context": "this.setTitle(String);} public void onClick(DialogInterface arg0, int arg1) { startActivity(new Intent(this, class));} @Override public void onClick(android View view) { } } class ChildActivity extends <mask><mask><mask>.Activity { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);setTitle(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "android.os",
    "full_FQN": "android.os.Bundle",
    "boolean": 0,
    "context": "this.setTitle(String);} public void onClick(DialogInterface arg0, int arg1) { startActivity(new Intent(this, class));} @Override public void onClick(android View view) { } } class ChildActivity extends Activity { @Override public void onCreate(<mask><mask><mask>.Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);setTitle(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.View",
    "boolean": 1,
    "context": "public class Android19 { public <mask><mask><mask>.View getView(int position, View convertView, ViewGroup parent) { ImageView imageView;if (convertView == null) { Context mContext = null;imageView = new ImageView(mContext);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.View",
    "boolean": 1,
    "context": "public class Android19 { public View getView(int position, <mask><mask><mask>.View convertView, ViewGroup parent) { ImageView imageView;if (convertView == null) { Context mContext = null;imageView = new ImageView(mContext);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.ViewGroup",
    "boolean": 1,
    "context": "public class Android19 { public View getView(int position, View convertView, <mask><mask><mask>.ViewGroup parent) { ImageView imageView;if (convertView == null) { Context mContext = null;imageView = new ImageView(mContext);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ImageView",
    "boolean": 1,
    "context": "public class Android19 { public View getView(int position, View convertView, ViewGroup parent) { <mask><mask><mask>.ImageView imageView;if (convertView == null) { Context mContext = null;imageView = new ImageView(mContext);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Context",
    "boolean": 1,
    "context": "public class Android19 { public View getView(int position, View convertView, ViewGroup parent) { ImageView imageView;if (convertView == null) { <mask><mask><mask>.Context mContext = null;imageView = new ImageView(mContext); setLayoutParams(new LayoutParams(85, 85));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ImageView()",
    "boolean": 1,
    "context": "public class Android19 { public View getView(int position, View convertView, ViewGroup parent) { ImageView imageView;if (convertView == null) { Context mContext = null;imageView = new <mask><mask><mask>.ImageView(mContext); setLayoutParams(new LayoutParams(85, 85)); setScaleType(CENTER_CROP);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ImageView.setLayoutParams()",
    "boolean": 1,
    "context": "if (convertView == null) { Context mContext = null;imageView = new ImageView(mContext); <mask><mask><mask>setLayoutParams(new LayoutParams(85, 85)); setScaleType(CENTER_CROP); setPadding(8, 8, 8, 8);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.GridView.LayoutParams()",
    "boolean": 1,
    "context": "if (convertView == null) { Context mContext = null;imageView = new ImageView(mContext); setLayoutParams(new <mask><mask><mask>LayoutParams(85, 85)); setScaleType(CENTER_CROP); setPadding(8, 8, 8, 8);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ImageView.setScaleType()",
    "boolean": 1,
    "context": "imageView = new ImageView(mContext); setLayoutParams(new LayoutParams(85, 85)); <mask><mask><mask>setScaleType(CENTER_CROP); setPadding(8, 8, 8, 8);} else { imageView = ((ImageView) (convertView));"
  },
  {
    "lib_name": "android",
    "pred_type": "ImageView.ScaleType",
    "truth_type": "ImageView.ScaleType",
    "full_FQN": "ImageView.ScaleType.CENTER_CROP",
    "boolean": 1,
    "context": "imageView = new ImageView(mContext); setLayoutParams(new LayoutParams(85, 85)); setScaleType(<mask><mask><mask><mask><mask>.CENTER_CROP); setPadding(8, 8, 8, 8);} else { imageView = ((ImageView) (convertView));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ImageView.setPadding()",
    "boolean": 1,
    "context": " setLayoutParams(new LayoutParams(85, 85)); setScaleType(CENTER_CROP); <mask><mask><mask>setPadding(8, 8, 8, 8);} else { imageView = ((ImageView) (convertView));} int[] mThumbIds = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ImageView",
    "boolean": 1,
    "context": " setScaleType(CENTER_CROP); setPadding(8, 8, 8, 8);} else { imageView = ((<mask><mask><mask>.ImageView) (convertView));} int[] mThumbIds = null; setImageResource(mThumbIds[position]);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ImageView.setImageResource()",
    "boolean": 1,
    "context": "} else { imageView = ((ImageView) (convertView));} int[] mThumbIds = null; <mask><mask><mask>setImageResource(mThumbIds[position]);return imageView;} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.View",
    "boolean": 1,
    "context": "public class Android20 extends <mask><mask><mask>.View { private static final int BOARD_X_OFFSET = 10;private static final int BOARD_Y_OFFSET = 10;public Android20(Context context) { super(context);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Context",
    "boolean": 1,
    "context": "public class Android20 extends View { private static final int BOARD_X_OFFSET = 10;private static final int BOARD_Y_OFFSET = 10;public Android20(<mask><mask><mask>.Context context) { super(context);} private TextView animText;private void animText(String text, int color, int xBlocks, int yBlocks) { setText(text);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView",
    "boolean": 1,
    "context": "private static final int BOARD_Y_OFFSET = 10;public Android20(Context context) { super(context);} private <mask><mask><mask>.TextView animText;private void animText(String text, int color, int xBlocks, int yBlocks) { setText(text); setTextColor(color);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView.setText()",
    "boolean": 1,
    "context": "public Android20(Context context) { super(context);} private TextView animText;private void animText(String text, int color, int xBlocks, int yBlocks) { <mask><mask><mask>setText(text); setTextColor(color); setVisibility(VISIBLE);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView.setTextColor()",
    "boolean": 1,
    "context": "} private TextView animText;private void animText(String text, int color, int xBlocks, int yBlocks) { setText(text); <mask><mask><mask>setTextColor(color); setVisibility(VISIBLE);int xBlockSize = 2;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView.setVisibility()",
    "boolean": 1,
    "context": "private void animText(String text, int color, int xBlocks, int yBlocks) { setText(text); setTextColor(color); <mask><mask><mask>setVisibility(VISIBLE);int xBlockSize = 2;final int x = BOARD_X_OFFSET + (xBlocks * xBlockSize);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view.animation",
    "truth_type": "android.view.animation",
    "full_FQN": "android.view.animation.ScaleAnimation",
    "boolean": 1,
    "context": "final float SCALE_FROM = ((float) (25));final float SCALE_TO = ((float) (0));<mask><mask><mask><mask><mask><mask>.ScaleAnimation anim = new ScaleAnimation(SCALE_FROM, SCALE_TO, SCALE_FROM, SCALE_TO, x, y); setDuration(500); setAnimation(anim);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.animation.ScaleAnimation()",
    "boolean": 1,
    "context": "final float SCALE_FROM = ((float) (25));final float SCALE_TO = ((float) (0));ScaleAnimation anim = new <mask><mask><mask>ScaleAnimation(SCALE_FROM, SCALE_TO, SCALE_FROM, SCALE_TO, x, y); setDuration(500); setAnimation(anim);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view.animation",
    "truth_type": "android.view.animation",
    "full_FQN": "android.view.animation.ScaleAnimation.setDuration()",
    "boolean": 1,
    "context": "final float SCALE_TO = ((float) (0));ScaleAnimation anim = new ScaleAnimation(SCALE_FROM, SCALE_TO, SCALE_FROM, SCALE_TO, x, y); <mask><mask><mask><mask><mask><mask>setDuration(500); setAnimation(anim);setAnimation(null);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView.setAnimation()",
    "boolean": 1,
    "context": "android.view.animation.ScaleAnimation anim = new ScaleAnimation(SCALE_FROM, SCALE_TO, SCALE_FROM, SCALE_TO, x, y); setDuration(500); <mask><mask><mask>setAnimation(anim);setAnimation(null);startAnimation(anim);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ImageButton",
    "boolean": 1,
    "context": "// ID = 775188 public class Android21 { public static void main(String[] args) { <mask><mask><mask>.ImageButton b2 = new ImageButton(getApplicationContext()); setBackgroundResource(ic_btn_speak_now);LinearLayout container = ((LinearLayout) (findViewById(background)));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ImageButton()",
    "boolean": 1,
    "context": "// ID = 775188 public class Android21 { public static void main(String[] args) { ImageButton b2 = new <mask><mask><mask>.ImageButton(getApplicationContext()); setBackgroundResource(ic_btn_speak_now);LinearLayout container = ((LinearLayout) (findViewById(background)));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ImageButton.setBackgroundResource()",
    "boolean": 1,
    "context": "// ID = 775188 public class Android21 { public static void main(String[] args) { ImageButton b2 = new ImageButton(getApplicationContext()); <mask><mask><mask>setBackgroundResource(ic_btn_speak_now);LinearLayout container = ((LinearLayout) (findViewById(background))); addView(b2);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.LinearLayout",
    "boolean": 1,
    "context": "// ID = 775188 public class Android21 { public static void main(String[] args) { ImageButton b2 = new ImageButton(getApplicationContext()); setBackgroundResource(ic_btn_speak_now);<mask><mask><mask>.LinearLayout container = ((LinearLayout) (findViewById(background))); addView(b2);} private static LinearLayout findViewById(int lay) { return null;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.LinearLayout",
    "boolean": 1,
    "context": "// ID = 775188 public class Android21 { public static void main(String[] args) { ImageButton b2 = new ImageButton(getApplicationContext()); setBackgroundResource(ic_btn_speak_now);LinearLayout container = ((<mask><mask><mask>.LinearLayout) (findViewById(background))); addView(b2);} private static LinearLayout findViewById(int lay) { return null;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.LinearLayout.addView()",
    "boolean": 1,
    "context": " setBackgroundResource(ic_btn_speak_now);LinearLayout container = ((LinearLayout) (findViewById(background))); <mask><mask><mask>addView(b2);} private static LinearLayout findViewById(int lay) { return null;} private static Context getApplicationContext() { return null;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.LinearLayout",
    "boolean": 1,
    "context": "android.widget.LinearLayout container = ((LinearLayout) (findViewById(background))); addView(b2);} private static <mask><mask><mask>.LinearLayout findViewById(int lay) { return null;} private static Context getApplicationContext() { return null;} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Context",
    "boolean": 1,
    "context": " addView(b2);} private static LinearLayout findViewById(int lay) { return null;} private static <mask><mask><mask>.Context getApplicationContext() { return null;} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.ListActivity",
    "boolean": 1,
    "context": "public class Android22 extends <mask><mask><mask>.ListActivity { private ListAdapter mAdapter;public TextView pbContact;public static String PBCONTACT;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ListAdapter",
    "boolean": 1,
    "context": "public class Android22 extends ListActivity { private <mask><mask><mask>.ListAdapter mAdapter;public TextView pbContact;public static String PBCONTACT;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView",
    "boolean": 1,
    "context": "public class Android22 extends ListActivity { private ListAdapter mAdapter;public <mask><mask><mask>.TextView pbContact;public static String PBCONTACT;public static final int ACTIVITY_EDIT = 1;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.os",
    "full_FQN": "android.os.Bundle",
    "boolean": 0,
    "context": "public static final int ACTIVITY_EDIT = 1;private static final int ACTIVITY_CREATE = 0;@Override public void onCreate(<mask><mask><mask>.Bundle icicle) { onCreate(icicle);Cursor C = getContentResolver().query(CONTENT_URI, null, null, null, null);startManagingCursor(C);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.database",
    "truth_type": "android.database",
    "full_FQN": "android.database.Cursor",
    "boolean": 1,
    "context": "private static final int ACTIVITY_CREATE = 0;@Override public void onCreate(Bundle icicle) { onCreate(icicle);<mask><mask><mask>.Cursor C = getContentResolver().query(CONTENT_URI, null, null, null, null);startManagingCursor(C);String[] columns = new String[]{ NAME };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.provider.Contacts.Contract",
    "truth_type": "android.provider.Contacts.People",
    "full_FQN": "android.provider.Contacts.People.CONTENT_URI",
    "boolean": 0,
    "context": "private static final int ACTIVITY_CREATE = 0;@Override public void onCreate(Bundle icicle) { onCreate(icicle);Cursor C = getContentResolver().query(<mask><mask><mask><mask><mask><mask><mask><mask><mask>.CONTENT_URI, null, null, null, null);startManagingCursor(C);String[] columns = new String[]{ NAME };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.provider.Contacts.Names",
    "truth_type": "android.provider.Contacts.People",
    "full_FQN": "android.provider.Contacts.People.NAME",
    "boolean": 0,
    "context": "android.database.Cursor C = getContentResolver().query(CONTENT_URI, null, null, null, null);startManagingCursor(C);String[] columns = new String[]{ <mask><mask><mask><mask><mask><mask><mask><mask><mask>.NAME };int[] names = new int[]{ background };mAdapter = new SimpleCursorAdapter(this, list_content, C, columns, names);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.SimpleCursorAdapter()",
    "boolean": 1,
    "context": "java.lang.String[] columns = new String[]{ NAME };int[] names = new int[]{ background };mAdapter = new <mask><mask><mask>.SimpleCursorAdapter(this, list_content, C, columns, names);setListAdapter(mAdapter);} @Override protected void onListItemClick(ListView l, View v, int position, long id) { onListItemClick(l, v, position, id);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ListView",
    "boolean": 1,
    "context": "mAdapter = new SimpleCursorAdapter(this, list_content, C, columns, names);setListAdapter(mAdapter);} @Override protected void onListItemClick(<mask><mask><mask>.ListView l, View v, int position, long id) { onListItemClick(l, v, position, id);Cursor C = ((Cursor)  getItem(position)));PBCONTACT = getString getColumnIndex(NAME));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.View",
    "boolean": 1,
    "context": "mAdapter = new SimpleCursorAdapter(this, list_content, C, columns, names);setListAdapter(mAdapter);} @Override protected void onListItemClick(ListView l, <mask><mask><mask>.View v, int position, long id) { onListItemClick(l, v, position, id);Cursor C = ((Cursor)  getItem(position)));PBCONTACT = getString getColumnIndex(NAME));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.database",
    "truth_type": "android.database",
    "full_FQN": "android.database.Cursor",
    "boolean": 1,
    "context": "setListAdapter(mAdapter);} @Override protected void onListItemClick(ListView l, View v, int position, long id) { onListItemClick(l, v, position, id);<mask><mask><mask>.Cursor C = ((Cursor)  getItem(position)));PBCONTACT = getString getColumnIndex(NAME));Intent i = new Intent(this, class);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.database",
    "truth_type": "android.database",
    "full_FQN": "android.database.Cursor",
    "boolean": 1,
    "context": "setListAdapter(mAdapter);} @Override protected void onListItemClick(ListView l, View v, int position, long id) { onListItemClick(l, v, position, id);Cursor C = ((<mask><mask><mask>.Cursor)  getItem(position)));PBCONTACT = getString getColumnIndex(NAME));Intent i = new Intent(this, class);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.database",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ListAdapter.getItem()",
    "boolean": 0,
    "context": "setListAdapter(mAdapter);} @Override protected void onListItemClick(ListView l, View v, int position, long id) { onListItemClick(l, v, position, id);Cursor C = ((Cursor)  <mask><mask><mask>getItem(position)));PBCONTACT = getString getColumnIndex(NAME));Intent i = new Intent(this, class);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.database.Cursor",
    "truth_type": "android.database.Cursor",
    "full_FQN": "android.database.Cursor.getString",
    "boolean": 1,
    "context": "} @Override protected void onListItemClick(ListView l, View v, int position, long id) { onListItemClick(l, v, position, id);Cursor C = ((Cursor)  getItem(position)));PBCONTACT = <mask><mask><mask><mask><mask><mask>.getString getColumnIndex(NAME));Intent i = new Intent(this, class);startActivityForResult(i, ACTIVITY_CREATE);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.database",
    "truth_type": "android.database",
    "full_FQN": "android.database.Cursor.getColumnIndex()",
    "boolean": 1,
    "context": "} @Override protected void onListItemClick(ListView l, View v, int position, long id) { onListItemClick(l, v, position, id);Cursor C = ((Cursor)  getItem(position)));PBCONTACT = getString <mask><mask><mask>getColumnIndex(NAME));Intent i = new Intent(this, class);startActivityForResult(i, ACTIVITY_CREATE);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Intent",
    "boolean": 1,
    "context": "android.database.Cursor C = ((Cursor)  getItem(position)));PBCONTACT = getString getColumnIndex(NAME));<mask><mask><mask>.Intent i = new Intent(this, class);startActivityForResult(i, ACTIVITY_CREATE);} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Intent()",
    "boolean": 1,
    "context": "android.database.Cursor C = ((Cursor)  getItem(position)));PBCONTACT = getString getColumnIndex(NAME));Intent i = new <mask><mask><mask>.Intent(this, class);startActivityForResult(i, ACTIVITY_CREATE);} };"
  },
  {
    "lib_name": "android",
    "pred_type": "com.android.common.cont..RecActivityScrollCodeateActivity",
    "truth_type": "android.provider.ContactsContract.CommonDataKinds.Note",
    "full_FQN": "android.provider.ContactsContract.CommonDataKinds.Note.class",
    "boolean": 0,
    "context": "android.database.Cursor C = ((Cursor)  getItem(position)));PBCONTACT = getString getColumnIndex(NAME));Intent i = new Intent(this, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.class);startActivityForResult(i, ACTIVITY_CREATE);} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.Activity",
    "boolean": 1,
    "context": "public class Android23 extends <mask><mask><mask>.Activity { ImageView imView;ImageView imViewLine;String imageUrl = String;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ImageView",
    "boolean": 1,
    "context": "public class Android23 extends Activity { <mask><mask><mask>.ImageView imView;ImageView imViewLine;String imageUrl = String;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ImageView",
    "boolean": 1,
    "context": "public class Android23 extends Activity { ImageView imView;<mask><mask><mask>.ImageView imViewLine;String imageUrl = String;String FileType = String;"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Random",
    "boolean": 1,
    "context": "java.lang.String FileType = String;int imageNum = 0;<mask><mask><mask>.Random r;int count = 0;@Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "android.os",
    "full_FQN": "android.os.Bundle",
    "boolean": 0,
    "context": "java.util.Random r;int count = 0;@Override public void onCreate(<mask><mask><mask>.Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);r = new Random();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Random()",
    "boolean": 1,
    "context": "@Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);r = new <mask><mask><mask>.Random();ListView myListView = ((ListView) (findViewById(background)));final ArrayList<String> todoItems = new ArrayList<String>();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ListView",
    "boolean": 1,
    "context": "setContentView(activity_list_item);r = new Random();<mask><mask><mask>.ListView myListView = ((ListView) (findViewById(background)));final ArrayList<String> todoItems = new ArrayList<String>();final ArrayAdapter<String> aa = new ArrayAdapter<String>(this, activity_list_item, todoItems);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ListView",
    "boolean": 1,
    "context": "setContentView(activity_list_item);r = new Random();ListView myListView = ((<mask><mask><mask>.ListView) (findViewById(background)));final ArrayList<String> todoItems = new ArrayList<String>();final ArrayAdapter<String> aa = new ArrayAdapter<String>(this, activity_list_item, todoItems);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "r = new Random();ListView myListView = ((ListView) (findViewById(background)));final <mask><mask><mask>.ArrayList<String> todoItems = new ArrayList<String>();final ArrayAdapter<String> aa = new ArrayAdapter<String>(this, activity_list_item, todoItems); setAdapter(aa);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "r = new Random();ListView myListView = ((ListView) (findViewById(background)));final ArrayList<String> todoItems = new <mask><mask><mask>.ArrayList<String>();final ArrayAdapter<String> aa = new ArrayAdapter<String>(this, activity_list_item, todoItems); setAdapter(aa);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ArrayAdapter",
    "boolean": 1,
    "context": "android.widget.ListView myListView = ((ListView) (findViewById(background)));final ArrayList<String> todoItems = new ArrayList<String>();final <mask><mask><mask>.ArrayAdapter<String> aa = new ArrayAdapter<String>(this, activity_list_item, todoItems); setAdapter(aa);for (count = 0; count < 2; count++) { add(0, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ArrayAdapter",
    "boolean": 1,
    "context": "android.widget.ListView myListView = ((ListView) (findViewById(background)));final ArrayList<String> todoItems = new ArrayList<String>();final ArrayAdapter<String> aa = new <mask><mask><mask>.ArrayAdapter<String>(this, activity_list_item, todoItems); setAdapter(aa);for (count = 0; count < 2; count++) { add(0, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ListView.setAdapter()",
    "boolean": 1,
    "context": "final ArrayList<String> todoItems = new ArrayList<String>();final ArrayAdapter<String> aa = new ArrayAdapter<String>(this, activity_list_item, todoItems); <mask><mask><mask>setAdapter(aa);for (count = 0; count < 2; count++) { add(0, String);downloadFile((imageUrl + toString(count)) + FileType);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.add()",
    "boolean": 1,
    "context": "final ArrayAdapter<String> aa = new ArrayAdapter<String>(this, activity_list_item, todoItems); setAdapter(aa);for (count = 0; count < 2; count++) { <mask><mask><mask>add(0, String);downloadFile((imageUrl + toString(count)) + FileType); notifyDataSetChanged();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ArrayAdapter.notifyDataSetChanged()",
    "boolean": 1,
    "context": "for (count = 0; count < 2; count++) { add(0, String);downloadFile((imageUrl + toString(count)) + FileType); <mask><mask><mask>notifyDataSetChanged();} } Bitmap bmImg;void downloadFile(String fileUrl) { URL myFileUrl = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.graphics",
    "truth_type": "android.graphics",
    "full_FQN": "android.graphics.Bitmap",
    "boolean": 1,
    "context": "downloadFile((imageUrl + toString(count)) + FileType); notifyDataSetChanged();} } <mask><mask><mask><mask>.Bitmap bmImg;void downloadFile(String fileUrl) { URL myFileUrl = null;try { myFileUrl = new URL(fileUrl);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.URL",
    "boolean": 1,
    "context": " notifyDataSetChanged();} } Bitmap bmImg;void downloadFile(String fileUrl) { <mask><mask><mask>.URL myFileUrl = null;try { myFileUrl = new URL(fileUrl);} catch (MalformedURLException e) { printStackTrace();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.URL()",
    "boolean": 1,
    "context": "} } Bitmap bmImg;void downloadFile(String fileUrl) { URL myFileUrl = null;try { myFileUrl = new <mask><mask><mask>.URL(fileUrl);} catch (MalformedURLException e) { printStackTrace();} try { HttpURLConnection conn = ((HttpURLConnection)  openConnection()));"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.MalformedURLException",
    "boolean": 1,
    "context": "void downloadFile(String fileUrl) { URL myFileUrl = null;try { myFileUrl = new URL(fileUrl);} catch (<mask><mask><mask>.MalformedURLException e) { printStackTrace();} try { HttpURLConnection conn = ((HttpURLConnection)  openConnection())); setDoInput(true);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.MalformedURLException.printStackTrace()",
    "boolean": 1,
    "context": "void downloadFile(String fileUrl) { URL myFileUrl = null;try { myFileUrl = new URL(fileUrl);} catch (MalformedURLException e) { <mask><mask><mask>printStackTrace();} try { HttpURLConnection conn = ((HttpURLConnection)  openConnection())); setDoInput(true);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection",
    "boolean": 1,
    "context": "try { myFileUrl = new URL(fileUrl);} catch (MalformedURLException e) { printStackTrace();} try { <mask><mask><mask>.HttpURLConnection conn = ((HttpURLConnection)  openConnection())); setDoInput(true); connect();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection",
    "boolean": 1,
    "context": "try { myFileUrl = new URL(fileUrl);} catch (MalformedURLException e) { printStackTrace();} try { HttpURLConnection conn = ((<mask><mask><mask>.HttpURLConnection)  openConnection())); setDoInput(true); connect();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.URL.openConnection()",
    "boolean": 1,
    "context": "try { myFileUrl = new URL(fileUrl);} catch (MalformedURLException e) { printStackTrace();} try { HttpURLConnection conn = ((HttpURLConnection)  <mask><mask><mask>openConnection())); setDoInput(true); connect();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection.setDoInput()",
    "boolean": 1,
    "context": "} catch (MalformedURLException e) { printStackTrace();} try { HttpURLConnection conn = ((HttpURLConnection)  openConnection())); <mask><mask><mask>setDoInput(true); connect();int length = getContentLength();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection.connect()",
    "boolean": 1,
    "context": "} try { HttpURLConnection conn = ((HttpURLConnection)  openConnection())); setDoInput(true); <mask><mask><mask>connect();int length = getContentLength();InputStream is = getInputStream();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection.getContentLength()",
    "boolean": 1,
    "context": " setDoInput(true); connect();int length = <mask><mask><mask>getContentLength();InputStream is = getInputStream();bmImg = decodeStream(is);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.InputStream",
    "boolean": 1,
    "context": " connect();int length = getContentLength();<mask><mask><mask>.InputStream is = getInputStream();bmImg = decodeStream(is); setImageBitmap(bmImg);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection.getInputStream()",
    "boolean": 1,
    "context": " connect();int length = getContentLength();InputStream is = <mask><mask><mask>getInputStream();bmImg = decodeStream(is); setImageBitmap(bmImg);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.graphics",
    "truth_type": "android.graphics",
    "full_FQN": "android.graphics.BitmapFactory.decodeStream()",
    "boolean": 1,
    "context": "int length = getContentLength();InputStream is = getInputStream();bmImg = <mask><mask><mask><mask>decodeStream(is); setImageBitmap(bmImg);} catch (IOException e) { printStackTrace();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ImageView.setImageBitmap()",
    "boolean": 1,
    "context": "java.io.InputStream is = getInputStream();bmImg = decodeStream(is); <mask><mask><mask>setImageBitmap(bmImg);} catch (IOException e) { printStackTrace();} } };"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException",
    "boolean": 1,
    "context": "bmImg = decodeStream(is); setImageBitmap(bmImg);} catch (<mask><mask><mask>.IOException e) { printStackTrace();} } };"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.MalformedURLException.printStackTrace()",
    "boolean": 1,
    "context": "bmImg = decodeStream(is); setImageBitmap(bmImg);} catch (IOException e) { <mask><mask><mask>printStackTrace();} } };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.Activity",
    "boolean": 1,
    "context": "public class Android24 extends <mask><mask><mask>.Activity { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);LocationManager l = ((LocationManager) (getSystemService(LOCATION_SERVICE)));"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "android.os",
    "full_FQN": "android.os.Bundle",
    "boolean": 0,
    "context": "public class Android24 extends Activity { @Override public void onCreate(<mask><mask><mask>.Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);LocationManager l = ((LocationManager) (getSystemService(LOCATION_SERVICE)));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.location",
    "truth_type": "android.location",
    "full_FQN": "android.location.LocationManager",
    "boolean": 1,
    "context": "public class Android24 extends Activity { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);<mask><mask><mask>.LocationManager l = ((LocationManager) (getSystemService(LOCATION_SERVICE)));List<String> li = getAllProviders();for (Iterator<String> iterator = iterator(); hasNext();) { String string = next();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.location",
    "truth_type": "android.location",
    "full_FQN": "android.location.LocationManager",
    "boolean": 1,
    "context": "public class Android24 extends Activity { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);LocationManager l = ((<mask><mask><mask>.LocationManager) (getSystemService(LOCATION_SERVICE)));List<String> li = getAllProviders();for (Iterator<String> iterator = iterator(); hasNext();) { String string = next();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "setContentView(activity_list_item);LocationManager l = ((LocationManager) (getSystemService(LOCATION_SERVICE)));<mask><mask><mask>.List<String> li = getAllProviders();for (Iterator<String> iterator = iterator(); hasNext();) { String string = next();d(String, string);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.location",
    "truth_type": "android.location",
    "full_FQN": "android.location.LocationManager.getAllProviders()",
    "boolean": 1,
    "context": "setContentView(activity_list_item);LocationManager l = ((LocationManager) (getSystemService(LOCATION_SERVICE)));List<String> li = <mask><mask><mask>getAllProviders();for (Iterator<String> iterator = iterator(); hasNext();) { String string = next();d(String, string);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator",
    "boolean": 1,
    "context": "android.location.LocationManager l = ((LocationManager) (getSystemService(LOCATION_SERVICE)));List<String> li = getAllProviders();for (<mask><mask><mask>.Iterator<String> iterator = iterator(); hasNext();) { String string = next();d(String, string);} if  getLastKnownLocation(String) == null) { d(String, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.iterator()",
    "boolean": 1,
    "context": "android.location.LocationManager l = ((LocationManager) (getSystemService(LOCATION_SERVICE)));List<String> li = getAllProviders();for (Iterator<String> iterator = <mask><mask><mask>iterator(); hasNext();) { String string = next();d(String, string);} if  getLastKnownLocation(String) == null) { d(String, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator.hasNext()",
    "boolean": 1,
    "context": "android.location.LocationManager l = ((LocationManager) (getSystemService(LOCATION_SERVICE)));List<String> li = getAllProviders();for (Iterator<String> iterator = iterator(); <mask><mask><mask>hasNext();) { String string = next();d(String, string);} if  getLastKnownLocation(String) == null) { d(String, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator.next()",
    "boolean": 1,
    "context": "android.location.LocationManager l = ((LocationManager) (getSystemService(LOCATION_SERVICE)));List<String> li = getAllProviders();for (Iterator<String> iterator = iterator(); hasNext();) { String string = <mask><mask><mask>next();d(String, string);} if  getLastKnownLocation(String) == null) { d(String, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.d()",
    "boolean": 1,
    "context": "java.util.List<String> li = getAllProviders();for (Iterator<String> iterator = iterator(); hasNext();) { String string = next();<mask><mask><mask>d(String, string);} if  getLastKnownLocation(String) == null) { d(String, String);} } };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.location",
    "truth_type": "android.location",
    "full_FQN": "android.location.LocationManager.getLastKnownLocation()",
    "boolean": 1,
    "context": "for (Iterator<String> iterator = iterator(); hasNext();) { String string = next();d(String, string);} if  <mask><mask><mask>getLastKnownLocation(String) == null) { d(String, String);} } };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.d()",
    "boolean": 1,
    "context": "for (Iterator<String> iterator = iterator(); hasNext();) { String string = next();d(String, string);} if  getLastKnownLocation(String) == null) { <mask><mask><mask>d(String, String);} } };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.ListActivity",
    "boolean": 1,
    "context": "public class Android25 extends <mask><mask><mask>.ListActivity { private final String MY_DATABASE_NAME = String;private final String MY_DATABASE_TABLE = String;Context c;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Context",
    "boolean": 1,
    "context": "public class Android25 extends ListActivity { private final String MY_DATABASE_NAME = String;private final String MY_DATABASE_TABLE = String;<mask><mask><mask>.Context c;@Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);ArrayList<String> results = new ArrayList<String>();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.os",
    "full_FQN": "android.os.Bundle",
    "boolean": 0,
    "context": "private final String MY_DATABASE_TABLE = String;Context c;@Override public void onCreate(<mask><mask><mask>.Bundle savedInstanceState) { onCreate(savedInstanceState);ArrayList<String> results = new ArrayList<String>();setContentView(activity_list_item);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "android.content.Context c;@Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);<mask><mask><mask>.ArrayList<String> results = new ArrayList<String>();setContentView(activity_list_item);SQLiteDatabase mydb = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "android.content.Context c;@Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);ArrayList<String> results = new <mask><mask><mask>.ArrayList<String>();setContentView(activity_list_item);SQLiteDatabase mydb = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.database.sqlite",
    "truth_type": "android.database.sqlite",
    "full_FQN": "android.database.sqlite.SQLiteDatabase",
    "boolean": 1,
    "context": "java.util.ArrayList<String> results = new ArrayList<String>();setContentView(activity_list_item);<mask><mask><mask><mask><mask><mask>.SQLiteDatabase mydb = null;try { openOrCreateDatabase(MY_DATABASE_NAME, null);} catch (Exception e) { } } };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.database.sqlite",
    "truth_type": "android.database.sqlite",
    "full_FQN": "android.database.sqlite.SQLiteDatabase.openOrCreateDatabase()",
    "boolean": 1,
    "context": "setContentView(activity_list_item);SQLiteDatabase mydb = null;try { <mask><mask><mask><mask><mask><mask>openOrCreateDatabase(MY_DATABASE_NAME, null);} catch (Exception e) { } } };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ScrollView",
    "boolean": 1,
    "context": "public class Android26 extends <mask><mask><mask>.ScrollView { public Android26(Context context) { super(context);} @Override public boolean onInterceptTouchEvent(MotionEvent ev) { return false;} @Override public boolean onKeyDown(int keyCode, KeyEvent event) { return false;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Context",
    "boolean": 1,
    "context": "public class Android26 extends ScrollView { public Android26(<mask><mask><mask>.Context context) { super(context);} @Override public boolean onInterceptTouchEvent(MotionEvent ev) { return false;} @Override public boolean onKeyDown(int keyCode, KeyEvent event) { return false;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.MotionEvent",
    "boolean": 1,
    "context": "public class Android26 extends ScrollView { public Android26(Context context) { super(context);} @Override public boolean onInterceptTouchEvent(<mask><mask><mask>.MotionEvent ev) { return false;} @Override public boolean onKeyDown(int keyCode, KeyEvent event) { return false;} } class GameView extends View implements OnTouchListener { public GameView(Context context) { super(context);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.KeyEvent",
    "boolean": 1,
    "context": "public class Android26 extends ScrollView { public Android26(Context context) { super(context);} @Override public boolean onInterceptTouchEvent(MotionEvent ev) { return false;} @Override public boolean onKeyDown(int keyCode, <mask><mask><mask>.KeyEvent event) { return false;} } class GameView extends View implements OnTouchListener { public GameView(Context context) { super(context);} public boolean onKey(View v, int keyCode, KeyEvent event) { if (keyCode == KEYCODE_BACK) { } invalidate();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.View",
    "boolean": 1,
    "context": "} @Override public boolean onInterceptTouchEvent(MotionEvent ev) { return false;} @Override public boolean onKeyDown(int keyCode, KeyEvent event) { return false;} } class GameView extends <mask><mask><mask>.View implements OnTouchListener { public GameView(Context context) { super(context);} public boolean onKey(View v, int keyCode, KeyEvent event) { if (keyCode == KEYCODE_BACK) { } invalidate();return true;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view.View",
    "truth_type": "android.view.View",
    "full_FQN": "android.view.View.OnTouchListener",
    "boolean": 1,
    "context": "} @Override public boolean onInterceptTouchEvent(MotionEvent ev) { return false;} @Override public boolean onKeyDown(int keyCode, KeyEvent event) { return false;} } class GameView extends View implements <mask><mask><mask><mask><mask>.OnTouchListener { public GameView(Context context) { super(context);} public boolean onKey(View v, int keyCode, KeyEvent event) { if (keyCode == KEYCODE_BACK) { } invalidate();return true;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Context",
    "boolean": 1,
    "context": "} @Override public boolean onInterceptTouchEvent(MotionEvent ev) { return false;} @Override public boolean onKeyDown(int keyCode, KeyEvent event) { return false;} } class GameView extends View implements OnTouchListener { public GameView(<mask><mask><mask>.Context context) { super(context);} public boolean onKey(View v, int keyCode, KeyEvent event) { if (keyCode == KEYCODE_BACK) { } invalidate();return true;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.View",
    "boolean": 1,
    "context": "} @Override public boolean onKeyDown(int keyCode, KeyEvent event) { return false;} } class GameView extends View implements OnTouchListener { public GameView(Context context) { super(context);} public boolean onKey(<mask><mask><mask>.View v, int keyCode, KeyEvent event) { if (keyCode == KEYCODE_BACK) { } invalidate();return true;} @Override public boolean onTouch(View arg0, MotionEvent arg1) { return false;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.KeyEvent",
    "boolean": 1,
    "context": "} @Override public boolean onKeyDown(int keyCode, KeyEvent event) { return false;} } class GameView extends View implements OnTouchListener { public GameView(Context context) { super(context);} public boolean onKey(View v, int keyCode, <mask><mask><mask>.KeyEvent event) { if (keyCode == KEYCODE_BACK) { } invalidate();return true;} @Override public boolean onTouch(View arg0, MotionEvent arg1) { return false;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view.KeyEvent",
    "truth_type": "android.view.KeyEvent",
    "full_FQN": "android.view.KeyEvent.KEYCODE_BACK",
    "boolean": 1,
    "context": "} @Override public boolean onKeyDown(int keyCode, KeyEvent event) { return false;} } class GameView extends View implements OnTouchListener { public GameView(Context context) { super(context);} public boolean onKey(View v, int keyCode, KeyEvent event) { if (keyCode == <mask><mask><mask><mask><mask><mask>.KEYCODE_BACK) { } invalidate();return true;} @Override public boolean onTouch(View arg0, MotionEvent arg1) { return false;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.View",
    "boolean": 1,
    "context": "} public boolean onKey(View v, int keyCode, KeyEvent event) { if (keyCode == KEYCODE_BACK) { } invalidate();return true;} @Override public boolean onTouch(<mask><mask><mask>.View arg0, MotionEvent arg1) { return false;} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.MotionEvent",
    "boolean": 1,
    "context": "} public boolean onKey(View v, int keyCode, KeyEvent event) { if (keyCode == KEYCODE_BACK) { } invalidate();return true;} @Override public boolean onTouch(View arg0, <mask><mask><mask>.MotionEvent arg1) { return false;} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.BaseAdapter",
    "boolean": 1,
    "context": "public class Android27 extends <mask><mask><mask>.BaseAdapter { private Context context;private String[] texts = new String[]{ String, String, String, String, String, String, String, String, String };public Android27(Context context) { context = context;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Context",
    "boolean": 1,
    "context": "public class Android27 extends BaseAdapter { private <mask><mask><mask>.Context context;private String[] texts = new String[]{ String, String, String, String, String, String, String, String, String };public Android27(Context context) { context = context;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Context",
    "boolean": 1,
    "context": "public class Android27 extends BaseAdapter { private Context context;private String[] texts = new String[]{ String, String, String, String, String, String, String, String, String };public Android27(<mask><mask><mask>.Context context) { context = context;} public int getCount() { return 9;} public Object getItem(int position) { return null;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.View",
    "boolean": 1,
    "context": "} public Object getItem(int position) { return null;} public long getItemId(int position) { return 0;} public <mask><mask><mask>.View getView(int position, View convertView, ViewGroup parent) { TextView tv;if (convertView == null) { tv = new TextView(context); setLayoutParams(new LayoutParams(85, 85));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.View",
    "boolean": 1,
    "context": "} public Object getItem(int position) { return null;} public long getItemId(int position) { return 0;} public View getView(int position, <mask><mask><mask>.View convertView, ViewGroup parent) { TextView tv;if (convertView == null) { tv = new TextView(context); setLayoutParams(new LayoutParams(85, 85));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.ViewGroup",
    "boolean": 1,
    "context": "} public Object getItem(int position) { return null;} public long getItemId(int position) { return 0;} public View getView(int position, View convertView, <mask><mask><mask>.ViewGroup parent) { TextView tv;if (convertView == null) { tv = new TextView(context); setLayoutParams(new LayoutParams(85, 85));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView",
    "boolean": 1,
    "context": "} public Object getItem(int position) { return null;} public long getItemId(int position) { return 0;} public View getView(int position, View convertView, ViewGroup parent) { <mask><mask><mask>.TextView tv;if (convertView == null) { tv = new TextView(context); setLayoutParams(new LayoutParams(85, 85));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView()",
    "boolean": 1,
    "context": "} public long getItemId(int position) { return 0;} public View getView(int position, View convertView, ViewGroup parent) { TextView tv;if (convertView == null) { tv = new <mask><mask><mask>.TextView(context); setLayoutParams(new LayoutParams(85, 85));} else { tv = ((TextView) (convertView));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView.setLayoutParams()",
    "boolean": 1,
    "context": "} public View getView(int position, View convertView, ViewGroup parent) { TextView tv;if (convertView == null) { tv = new TextView(context); <mask><mask><mask>setLayoutParams(new LayoutParams(85, 85));} else { tv = ((TextView) (convertView));} setText(texts[position]);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.GridView.LayoutParams()",
    "boolean": 1,
    "context": "} public View getView(int position, View convertView, ViewGroup parent) { TextView tv;if (convertView == null) { tv = new TextView(context); setLayoutParams(new <mask><mask><mask>LayoutParams(85, 85));} else { tv = ((TextView) (convertView));} setText(texts[position]);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView",
    "boolean": 1,
    "context": "if (convertView == null) { tv = new TextView(context); setLayoutParams(new LayoutParams(85, 85));} else { tv = ((<mask><mask><mask>.TextView) (convertView));} setText(texts[position]);return tv;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView.setText()",
    "boolean": 1,
    "context": " setLayoutParams(new LayoutParams(85, 85));} else { tv = ((TextView) (convertView));} <mask><mask><mask>setText(texts[position]);return tv;} };"
  },
  {
    "lib_name": "android",
    "pred_type": "sun.content",
    "truth_type": "android.app",
    "full_FQN": "android.app.Application",
    "boolean": 0,
    "context": "public class Android28 extends <mask><mask><mask>.Application { public static Context getContext() { return ((Context) (instance));} };"
  },
  {
    "lib_name": "android",
    "pred_type": "javax.naming",
    "truth_type": "javax.naming",
    "full_FQN": "javax.naming.Context",
    "boolean": 1,
    "context": "public class Android28 extends Application { public static <mask><mask><mask><mask><mask><mask>.Context getContext() { return ((Context) (instance));} };"
  },
  {
    "lib_name": "android",
    "pred_type": "javax.naming",
    "truth_type": "javax.naming",
    "full_FQN": "javax.naming.Context",
    "boolean": 1,
    "context": "public class Android28 extends Application { public static Context getContext() { return ((<mask><mask><mask><mask><mask><mask>.Context) (instance));} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.Service",
    "boolean": 1,
    "context": "public class Android29 extends <mask><mask><mask>.Service { @Override public IBinder onBind(Intent arg0) { return null;} @Override public void onCreate() { PowerManager pm = ((PowerManager) (getSystemService(POWER_SERVICE)));WakeLock wl = newWakeLock(FULL_WAKE_LOCK, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.os",
    "truth_type": "android.os",
    "full_FQN": "android.os.IBinder",
    "boolean": 1,
    "context": "public class Android29 extends Service { @Override public <mask><mask><mask>.IBinder onBind(Intent arg0) { return null;} @Override public void onCreate() { PowerManager pm = ((PowerManager) (getSystemService(POWER_SERVICE)));WakeLock wl = newWakeLock(FULL_WAKE_LOCK, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Intent",
    "boolean": 1,
    "context": "public class Android29 extends Service { @Override public IBinder onBind(<mask><mask><mask>.Intent arg0) { return null;} @Override public void onCreate() { PowerManager pm = ((PowerManager) (getSystemService(POWER_SERVICE)));WakeLock wl = newWakeLock(FULL_WAKE_LOCK, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.os",
    "truth_type": "android.os",
    "full_FQN": "android.os.PowerManager",
    "boolean": 1,
    "context": "public class Android29 extends Service { @Override public IBinder onBind(Intent arg0) { return null;} @Override public void onCreate() { <mask><mask><mask>.PowerManager pm = ((PowerManager) (getSystemService(POWER_SERVICE)));WakeLock wl = newWakeLock(FULL_WAKE_LOCK, String); PowerManager$acquire();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.os",
    "truth_type": "android.os",
    "full_FQN": "android.os.PowerManager",
    "boolean": 1,
    "context": "public class Android29 extends Service { @Override public IBinder onBind(Intent arg0) { return null;} @Override public void onCreate() { PowerManager pm = ((<mask><mask><mask>.PowerManager) (getSystemService(POWER_SERVICE)));WakeLock wl = newWakeLock(FULL_WAKE_LOCK, String); PowerManager$acquire();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.os.PowerManager",
    "truth_type": "android.os.PowerManager",
    "full_FQN": "android.os.PowerManager.WakeLock",
    "boolean": 1,
    "context": "public class Android29 extends Service { @Override public IBinder onBind(Intent arg0) { return null;} @Override public void onCreate() { PowerManager pm = ((PowerManager) (getSystemService(POWER_SERVICE)));<mask><mask><mask><mask><mask><mask>.WakeLock wl = newWakeLock(FULL_WAKE_LOCK, String); PowerManager$acquire();} @Override public void onDestroy() { WakeLock wl = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.os",
    "truth_type": "android.os",
    "full_FQN": "android.os.PowerManager.newWakeLock()",
    "boolean": 1,
    "context": "public class Android29 extends Service { @Override public IBinder onBind(Intent arg0) { return null;} @Override public void onCreate() { PowerManager pm = ((PowerManager) (getSystemService(POWER_SERVICE)));WakeLock wl = <mask><mask><mask>newWakeLock(FULL_WAKE_LOCK, String); PowerManager$acquire();} @Override public void onDestroy() { WakeLock wl = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.os",
    "truth_type": "android.os",
    "full_FQN": "android.os.PowerManager",
    "boolean": 1,
    "context": "} @Override public void onCreate() { PowerManager pm = ((PowerManager) (getSystemService(POWER_SERVICE)));WakeLock wl = newWakeLock(FULL_WAKE_LOCK, String); <mask><mask><mask>.PowerManager$acquire();} @Override public void onDestroy() { WakeLock wl = null; PowerManager$release();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.os.PowerManager",
    "truth_type": "android.os.PowerManager",
    "full_FQN": "android.os.PowerManager.WakeLock",
    "boolean": 1,
    "context": "android.os.PowerManager.WakeLock wl = newWakeLock(FULL_WAKE_LOCK, String); PowerManager$acquire();} @Override public void onDestroy() { <mask><mask><mask><mask><mask><mask>.WakeLock wl = null; PowerManager$release();} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.os",
    "truth_type": "android.os",
    "full_FQN": "android.os.PowerManager",
    "boolean": 1,
    "context": " PowerManager$acquire();} @Override public void onDestroy() { WakeLock wl = null; <mask><mask><mask>.PowerManager$release();} };"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http",
    "truth_type": "org.apache.http",
    "full_FQN": "org.apache.http.HttpHost",
    "boolean": 1,
    "context": "public class Android30 { public static String main(String[] args) { <mask><mask><mask><mask><mask>.HttpHost target = new HttpHost(String + SERVER_HOST, SERVER_PORT);http HttpGet get = new http HttpGet(String);String result = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache",
    "truth_type": "org.apache",
    "full_FQN": "org.apache.http.HttpHost()",
    "boolean": 1,
    "context": "public class Android30 { public static String main(String[] args) { HttpHost target = new <mask><mask><mask>HttpHost(String + SERVER_HOST, SERVER_PORT);http HttpGet get = new http HttpGet(String);String result = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.net.Host",
    "truth_type": "android.ServiceWrapper",
    "full_FQN": "android.ServiceWrapper.SERVER_HOST",
    "boolean": 0,
    "context": "public class Android30 { public static String main(String[] args) { HttpHost target = new HttpHost(String + <mask><mask><mask><mask><mask>.SERVER_HOST, SERVER_PORT);http HttpGet get = new http HttpGet(String);String result = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.net.Integer",
    "truth_type": "android.ServiceWrapper",
    "full_FQN": "android.ServiceWrapper.SERVER_PORT",
    "boolean": 0,
    "context": "public class Android30 { public static String main(String[] args) { HttpHost target = new HttpHost(String + SERVER_HOST, <mask><mask><mask><mask><mask>.SERVER_PORT);http HttpGet get = new http HttpGet(String);String result = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache",
    "truth_type": "org.apache",
    "full_FQN": "org.apache.http",
    "boolean": 1,
    "context": "public class Android30 { public static String main(String[] args) { HttpHost target = new HttpHost(String + SERVER_HOST, SERVER_PORT);<mask><mask><mask>.http HttpGet get = new http HttpGet(String);String result = null;HttpEntity entity = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http.client.HttpClient.methods",
    "truth_type": "org.apache.http.client.HttpClient.methods",
    "full_FQN": "org.apache.http.client.HttpClient.methods.HttpGet",
    "boolean": 1,
    "context": "public class Android30 { public static String main(String[] args) { HttpHost target = new HttpHost(String + SERVER_HOST, SERVER_PORT);http <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HttpGet get = new http HttpGet(String);String result = null;HttpEntity entity = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache",
    "truth_type": "org.apache",
    "full_FQN": "org.apache.http",
    "boolean": 1,
    "context": "public class Android30 { public static String main(String[] args) { HttpHost target = new HttpHost(String + SERVER_HOST, SERVER_PORT);http HttpGet get = new <mask><mask><mask>.http HttpGet(String);String result = null;HttpEntity entity = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http.client.HttpClient",
    "truth_type": "org.apache.http.client.HttpClient",
    "full_FQN": "org.apache.http.client.HttpClient.methods.HttpGet()",
    "boolean": 1,
    "context": "public class Android30 { public static String main(String[] args) { HttpHost target = new HttpHost(String + SERVER_HOST, SERVER_PORT);http HttpGet get = new http <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>HttpGet(String);String result = null;HttpEntity entity = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http",
    "truth_type": "org.apache.http",
    "full_FQN": "org.apache.http.HttpEntity",
    "boolean": 1,
    "context": "org.apache.http HttpGet get = new http HttpGet(String);String result = null;<mask><mask><mask><mask><mask>.HttpEntity entity = null;http HttpClient client = new impl DefaultHttpClient();try { HttpResponse response = execute(target, get);"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache",
    "truth_type": "org.apache",
    "full_FQN": "org.apache.http",
    "boolean": 1,
    "context": "java.lang.String result = null;HttpEntity entity = null;<mask><mask><mask>.http HttpClient client = new impl DefaultHttpClient();try { HttpResponse response = execute(target, get);entity = getEntity();"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http.client.HttpClient",
    "truth_type": "org.apache.http.client.HttpClient",
    "full_FQN": "org.apache.http.client.HttpClient.HttpClient",
    "boolean": 1,
    "context": "java.lang.String result = null;HttpEntity entity = null;http <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HttpClient client = new impl DefaultHttpClient();try { HttpResponse response = execute(target, get);entity = getEntity();"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http",
    "truth_type": "org.apache.http",
    "full_FQN": "org.apache.http.impl",
    "boolean": 1,
    "context": "java.lang.String result = null;HttpEntity entity = null;http HttpClient client = new <mask><mask><mask><mask><mask>.impl DefaultHttpClient();try { HttpResponse response = execute(target, get);entity = getEntity();"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http.Client",
    "truth_type": "org.apache.http.client",
    "full_FQN": "org.apache.http.client.HttpClient.DefaultHttpClient()",
    "boolean": 0,
    "context": "java.lang.String result = null;HttpEntity entity = null;http HttpClient client = new impl <mask><mask><mask><mask><mask><mask><mask>DefaultHttpClient();try { HttpResponse response = execute(target, get);entity = getEntity();"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http",
    "truth_type": "org.apache.http",
    "full_FQN": "org.apache.http.HttpResponse",
    "boolean": 1,
    "context": "org.apache.http.HttpEntity entity = null;http HttpClient client = new impl DefaultHttpClient();try { <mask><mask><mask><mask><mask>.HttpResponse response = execute(target, get);entity = getEntity();result = toString(entity);"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http.client",
    "truth_type": "org.apache.http.client",
    "full_FQN": "org.apache.http.client.HttpClient.execute()",
    "boolean": 1,
    "context": "org.apache.http.HttpEntity entity = null;http HttpClient client = new impl DefaultHttpClient();try { HttpResponse response = <mask><mask><mask><mask><mask><mask><mask>execute(target, get);entity = getEntity();result = toString(entity);"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http",
    "truth_type": "org.apache.http",
    "full_FQN": "org.apache.http.HttpResponse.getEntity()",
    "boolean": 1,
    "context": "org.apache.http HttpClient client = new impl DefaultHttpClient();try { HttpResponse response = execute(target, get);entity = <mask><mask><mask><mask><mask>getEntity();result = toString(entity);} catch (Exception e) { printStackTrace();"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http.util",
    "truth_type": "org.apache.http.util",
    "full_FQN": "org.apache.http.util.EntityUtils.toString()",
    "boolean": 1,
    "context": "try { HttpResponse response = execute(target, get);entity = getEntity();result = <mask><mask><mask><mask><mask><mask><mask>toString(entity);} catch (Exception e) { printStackTrace();} finally { if (entity != null) { try { consumeContent();"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http",
    "truth_type": "org.apache.http",
    "full_FQN": "org.apache.http.HttpEntity.consumeContent()",
    "boolean": 1,
    "context": "result = toString(entity);} catch (Exception e) { printStackTrace();} finally { if (entity != null) { try { <mask><mask><mask><mask><mask>consumeContent();} catch (IOException e) { } } } return result;} } class ServiceWrapper { static String SERVER_HOST = String;"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException",
    "boolean": 1,
    "context": "} catch (Exception e) { printStackTrace();} finally { if (entity != null) { try { consumeContent();} catch (<mask><mask><mask>.IOException e) { } } } return result;} } class ServiceWrapper { static String SERVER_HOST = String;static int SERVER_PORT = 8080;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.os",
    "truth_type": "android.os",
    "full_FQN": "android.os.PowerManager",
    "boolean": 1,
    "context": "public class Android31 { public static void main(String[] args) { <mask><mask><mask>.PowerManager pm = ((PowerManager) (getSystemService(POWER_SERVICE)));WakeLock wl = newWakeLock(FULL_WAKE_LOCK, String);} private static PowerManager getSystemService(String powerService) { return null;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.os",
    "truth_type": "android.os",
    "full_FQN": "android.os.PowerManager",
    "boolean": 1,
    "context": "public class Android31 { public static void main(String[] args) { PowerManager pm = ((<mask><mask><mask>.PowerManager) (getSystemService(POWER_SERVICE)));WakeLock wl = newWakeLock(FULL_WAKE_LOCK, String);} private static PowerManager getSystemService(String powerService) { return null;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.os.PowerManager",
    "truth_type": "android.os.PowerManager",
    "full_FQN": "android.os.PowerManager.WakeLock",
    "boolean": 1,
    "context": "public class Android31 { public static void main(String[] args) { PowerManager pm = ((PowerManager) (getSystemService(POWER_SERVICE)));<mask><mask><mask><mask><mask><mask>.WakeLock wl = newWakeLock(FULL_WAKE_LOCK, String);} private static PowerManager getSystemService(String powerService) { return null;} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.os",
    "truth_type": "android.os",
    "full_FQN": "android.os.PowerManager.newWakeLock()",
    "boolean": 1,
    "context": "public class Android31 { public static void main(String[] args) { PowerManager pm = ((PowerManager) (getSystemService(POWER_SERVICE)));WakeLock wl = <mask><mask><mask>newWakeLock(FULL_WAKE_LOCK, String);} private static PowerManager getSystemService(String powerService) { return null;} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.os",
    "truth_type": "android.os",
    "full_FQN": "android.os.PowerManager",
    "boolean": 1,
    "context": "public class Android31 { public static void main(String[] args) { PowerManager pm = ((PowerManager) (getSystemService(POWER_SERVICE)));WakeLock wl = newWakeLock(FULL_WAKE_LOCK, String);} private static <mask><mask><mask>.PowerManager getSystemService(String powerService) { return null;} };"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException",
    "boolean": 1,
    "context": "public class Android32 { public void start() throws <mask><mask><mask>.IOException { String state = getExternalStorageState();if (!equals(MEDIA_MOUNTED)) { throw new IOException((String + state) + String);} String path = String;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.os",
    "truth_type": "android.os",
    "full_FQN": "android.os.Environment.getExternalStorageState()",
    "boolean": 1,
    "context": "public class Android32 { public void start() throws IOException { String state = <mask><mask><mask>getExternalStorageState();if (!equals(MEDIA_MOUNTED)) { throw new IOException((String + state) + String);} String path = String;"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException()",
    "boolean": 1,
    "context": "public class Android32 { public void start() throws IOException { String state = getExternalStorageState();if (!equals(MEDIA_MOUNTED)) { throw new <mask><mask><mask>.IOException((String + state) + String);} String path = String;File directory = new File(path).getParentFile();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File",
    "boolean": 1,
    "context": "if (!equals(MEDIA_MOUNTED)) { throw new IOException((String + state) + String);} String path = String;<mask><mask><mask>.File directory = new File(path).getParentFile();if (( exists()) && ( mkdirs())) { throw new IOException(String);} MediaRecorder recorder = new MediaRecorder();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File()",
    "boolean": 1,
    "context": "if (!equals(MEDIA_MOUNTED)) { throw new IOException((String + state) + String);} String path = String;File directory = new <mask><mask><mask>.File(path).getParentFile();if (( exists()) && ( mkdirs())) { throw new IOException(String);} MediaRecorder recorder = new MediaRecorder();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File.exists()",
    "boolean": 1,
    "context": "} String path = String;File directory = new File(path).getParentFile();if (( <mask><mask><mask>exists()) && ( mkdirs())) { throw new IOException(String);} MediaRecorder recorder = new MediaRecorder(); setVideoSource(CAMERA);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File.mkdirs()",
    "boolean": 1,
    "context": "} String path = String;File directory = new File(path).getParentFile();if (( exists()) && ( <mask><mask><mask>mkdirs())) { throw new IOException(String);} MediaRecorder recorder = new MediaRecorder(); setVideoSource(CAMERA);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException()",
    "boolean": 1,
    "context": "} String path = String;File directory = new File(path).getParentFile();if (( exists()) && ( mkdirs())) { throw new <mask><mask><mask>.IOException(String);} MediaRecorder recorder = new MediaRecorder(); setVideoSource(CAMERA);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaRecorder",
    "boolean": 1,
    "context": "java.io.File directory = new File(path).getParentFile();if (( exists()) && ( mkdirs())) { throw new IOException(String);} <mask><mask><mask>.MediaRecorder recorder = new MediaRecorder(); setVideoSource(CAMERA); setOutputFormat(THREE_GPP);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaRecorder()",
    "boolean": 1,
    "context": "java.io.File directory = new File(path).getParentFile();if (( exists()) && ( mkdirs())) { throw new IOException(String);} MediaRecorder recorder = new <mask><mask><mask>.MediaRecorder(); setVideoSource(CAMERA); setOutputFormat(THREE_GPP);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaRecorder.setVideoSource()",
    "boolean": 1,
    "context": "if (( exists()) && ( mkdirs())) { throw new IOException(String);} MediaRecorder recorder = new MediaRecorder(); <mask><mask><mask>setVideoSource(CAMERA); setOutputFormat(THREE_GPP); setVideoEncoder(H263);"
  },
  {
    "lib_name": "android",
    "pred_type": "com.android.mediaframeworkorder.Mediaperties",
    "truth_type": "android.media.MediaRecorder.VideoSource",
    "full_FQN": "android.media.MediaRecorder.VideoSource.CAMERA",
    "boolean": 0,
    "context": "if (( exists()) && ( mkdirs())) { throw new IOException(String);} MediaRecorder recorder = new MediaRecorder(); setVideoSource(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.CAMERA); setOutputFormat(THREE_GPP); setVideoEncoder(H263);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaRecorder.setOutputFormat()",
    "boolean": 1,
    "context": "} MediaRecorder recorder = new MediaRecorder(); setVideoSource(CAMERA); <mask><mask><mask>setOutputFormat(THREE_GPP); setVideoEncoder(H263); setVideoFrameRate(15);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media.MediaRecorder.MediaFormat",
    "truth_type": "android.media.MediaRecorder.OutputFormat",
    "full_FQN": "android.media.MediaRecorder.OutputFormat.THREE_GPP",
    "boolean": 0,
    "context": "} MediaRecorder recorder = new MediaRecorder(); setVideoSource(CAMERA); setOutputFormat(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.THREE_GPP); setVideoEncoder(H263); setVideoFrameRate(15);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaRecorder.setVideoEncoder()",
    "boolean": 1,
    "context": " setVideoSource(CAMERA); setOutputFormat(THREE_GPP); <mask><mask><mask>setVideoEncoder(H263); setVideoFrameRate(15); setVideoSize(176, 144);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.android.mediaframework..MediaEncTest",
    "truth_type": "android.media.MediaRecorder.VideoEncoder",
    "full_FQN": "android.media.MediaRecorder.VideoEncoder.H263",
    "boolean": 0,
    "context": " setVideoSource(CAMERA); setOutputFormat(THREE_GPP); setVideoEncoder(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.H263); setVideoFrameRate(15); setVideoSize(176, 144);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaRecorder.setVideoFrameRate()",
    "boolean": 1,
    "context": " setOutputFormat(THREE_GPP); setVideoEncoder(H263); <mask><mask><mask>setVideoFrameRate(15); setVideoSize(176, 144); setOutputFile(path);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaRecorder.setVideoSize()",
    "boolean": 1,
    "context": " setVideoEncoder(H263); setVideoFrameRate(15); <mask><mask><mask>setVideoSize(176, 144); setOutputFile(path); prepare();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaRecorder.setOutputFile()",
    "boolean": 1,
    "context": " setVideoFrameRate(15); setVideoSize(176, 144); <mask><mask><mask>setOutputFile(path); prepare(); start();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaRecorder.prepare()",
    "boolean": 1,
    "context": " setVideoSize(176, 144); setOutputFile(path); <mask><mask><mask>prepare(); start();} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaRecorder.start()",
    "boolean": 1,
    "context": " setOutputFile(path); prepare(); <mask><mask><mask>start();} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Context",
    "boolean": 1,
    "context": "public class Android33 { private void init(<mask><mask><mask>.Context context) { boolean mRecording = false;int frameCount = 0;Camera mCamera = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.hardware",
    "truth_type": "android.hardware",
    "full_FQN": "android.hardware.Camera",
    "boolean": 1,
    "context": "public class Android33 { private void init(Context context) { boolean mRecording = false;int frameCount = 0;<mask><mask><mask><mask>.Camera mCamera = null;if (mCamera == null) { mCamera = open();} Parameters parameters = getParameters();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.hardware",
    "truth_type": "android.hardware",
    "full_FQN": "android.hardware.Camera.open()",
    "boolean": 1,
    "context": "int frameCount = 0;Camera mCamera = null;if (mCamera == null) { mCamera = <mask><mask><mask><mask>open();} Parameters parameters = getParameters(); setPictureFormat(JPEG);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.hardware.Camera",
    "truth_type": "android.hardware.Camera",
    "full_FQN": "android.hardware.Camera.Parameters",
    "boolean": 1,
    "context": "android.hardware.Camera mCamera = null;if (mCamera == null) { mCamera = open();} <mask><mask><mask><mask><mask><mask>.Parameters parameters = getParameters(); setPictureFormat(JPEG); setParameters(parameters);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.hardware",
    "truth_type": "android.hardware",
    "full_FQN": "android.hardware.Camera.getParameters()",
    "boolean": 1,
    "context": "android.hardware.Camera mCamera = null;if (mCamera == null) { mCamera = open();} Parameters parameters = <mask><mask><mask><mask>getParameters(); setPictureFormat(JPEG); setParameters(parameters);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.hardware.Camera",
    "truth_type": "android.hardware.Camera",
    "full_FQN": "android.hardware.Camera.Parameters.setPictureFormat()",
    "boolean": 1,
    "context": "if (mCamera == null) { mCamera = open();} Parameters parameters = getParameters(); <mask><mask><mask><mask><mask><mask>setPictureFormat(JPEG); setParameters(parameters);try { SurfaceHolder surfaceHolder = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.hardware",
    "truth_type": "android.hardware",
    "full_FQN": "android.hardware.Camera.setParameters()",
    "boolean": 1,
    "context": "} Parameters parameters = getParameters(); setPictureFormat(JPEG); <mask><mask><mask><mask>setParameters(parameters);try { SurfaceHolder surfaceHolder = null; setPreviewDisplay(surfaceHolder);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.SurfaceHolder",
    "boolean": 1,
    "context": " setPictureFormat(JPEG); setParameters(parameters);try { <mask><mask><mask>.SurfaceHolder surfaceHolder = null; setPreviewDisplay(surfaceHolder);} catch (IOException e) { printStackTrace();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.hardware",
    "truth_type": "android.hardware",
    "full_FQN": "android.hardware.Camera.setPreviewDisplay()",
    "boolean": 1,
    "context": " setParameters(parameters);try { SurfaceHolder surfaceHolder = null; <mask><mask><mask><mask>setPreviewDisplay(surfaceHolder);} catch (IOException e) { printStackTrace();} startPreview();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException",
    "boolean": 1,
    "context": "try { SurfaceHolder surfaceHolder = null; setPreviewDisplay(surfaceHolder);} catch (<mask><mask><mask>.IOException e) { printStackTrace();} startPreview();} };"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException.printStackTrace()",
    "boolean": 1,
    "context": "try { SurfaceHolder surfaceHolder = null; setPreviewDisplay(surfaceHolder);} catch (IOException e) { <mask><mask><mask>printStackTrace();} startPreview();} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.hardware",
    "truth_type": "android.hardware",
    "full_FQN": "android.hardware.Camera.startPreview()",
    "boolean": 1,
    "context": " setPreviewDisplay(surfaceHolder);} catch (IOException e) { printStackTrace();} <mask><mask><mask><mask>startPreview();} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.TabActivity",
    "boolean": 1,
    "context": "public class Android34 extends <mask><mask><mask>.TabActivity implements TabContentFactory , OnTabChangeListener , OnClickListener { private static final String LOG_KEY = String;ListView listView;@Override protected void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget.Tabml",
    "truth_type": "android.widget.TabHost",
    "full_FQN": "android.widget.TabHost.TabContentFactory",
    "boolean": 0,
    "context": "public class Android34 extends TabActivity implements <mask><mask><mask><mask><mask><mask>.TabContentFactory , OnTabChangeListener , OnClickListener { private static final String LOG_KEY = String;ListView listView;@Override protected void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget.TabOptions",
    "truth_type": "android.widget.TabHost",
    "full_FQN": "android.widget.TabHost.OnTabChangeListener",
    "boolean": 0,
    "context": "public class Android34 extends TabActivity implements TabContentFactory , <mask><mask><mask><mask><mask><mask>.OnTabChangeListener , OnClickListener { private static final String LOG_KEY = String;ListView listView;@Override protected void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view.View",
    "truth_type": "android.view.View",
    "full_FQN": "android.view.View.OnClickListener",
    "boolean": 1,
    "context": "public class Android34 extends TabActivity implements TabContentFactory , OnTabChangeListener , <mask><mask><mask><mask><mask>.OnClickListener { private static final String LOG_KEY = String;ListView listView;@Override protected void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ListView",
    "boolean": 1,
    "context": "public class Android34 extends TabActivity implements TabContentFactory , OnTabChangeListener , OnClickListener { private static final String LOG_KEY = String;<mask><mask><mask>.ListView listView;@Override protected void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);final TabHost tabHost = getTabHost();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "android.os",
    "full_FQN": "android.os.Bundle",
    "boolean": 0,
    "context": "public class Android34 extends TabActivity implements TabContentFactory , OnTabChangeListener , OnClickListener { private static final String LOG_KEY = String;ListView listView;@Override protected void onCreate(<mask><mask><mask>.Bundle savedInstanceState) { onCreate(savedInstanceState);final TabHost tabHost = getTabHost();TabSpec ts = newTabSpec(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TabHost",
    "boolean": 1,
    "context": "android.widget.ListView listView;@Override protected void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);final <mask><mask><mask>.TabHost tabHost = getTabHost();TabSpec ts = newTabSpec(String); TabHost$setIndicator(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget.TabHost",
    "truth_type": "android.widget.TabHost",
    "full_FQN": "android.widget.TabHost.TabSpec",
    "boolean": 1,
    "context": "@Override protected void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);final TabHost tabHost = getTabHost();<mask><mask><mask><mask><mask><mask>.TabSpec ts = newTabSpec(String); TabHost$setIndicator(String); TabHost$setContent(this);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TabHost.newTabSpec()",
    "boolean": 1,
    "context": "@Override protected void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);final TabHost tabHost = getTabHost();TabSpec ts = <mask><mask><mask>newTabSpec(String); TabHost$setIndicator(String); TabHost$setContent(this);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TabHost",
    "boolean": 1,
    "context": "final TabHost tabHost = getTabHost();TabSpec ts = newTabSpec(String); <mask><mask><mask>.TabHost$setIndicator(String); TabHost$setContent(this); addTab(ts);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TabHost",
    "boolean": 1,
    "context": "android.widget.TabHost.TabSpec ts = newTabSpec(String); TabHost$setIndicator(String); <mask><mask><mask>.TabHost$setContent(this); addTab(ts);ts = newTabSpec(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TabHost.addTab()",
    "boolean": 1,
    "context": " TabHost$setIndicator(String); TabHost$setContent(this); <mask><mask><mask>addTab(ts);ts = newTabSpec(String); TabHost$setIndicator(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TabHost.newTabSpec()",
    "boolean": 1,
    "context": " TabHost$setContent(this); addTab(ts);ts = <mask><mask><mask>newTabSpec(String); TabHost$setIndicator(String); TabHost$setContent(this);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TabHost",
    "boolean": 1,
    "context": " addTab(ts);ts = newTabSpec(String); <mask><mask><mask>.TabHost$setIndicator(String); TabHost$setContent(this); addTab(ts);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TabHost",
    "boolean": 1,
    "context": "ts = newTabSpec(String); TabHost$setIndicator(String); <mask><mask><mask>.TabHost$setContent(this); addTab(ts);ts = newTabSpec(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TabHost.addTab()",
    "boolean": 1,
    "context": " TabHost$setIndicator(String); TabHost$setContent(this); <mask><mask><mask>addTab(ts);ts = newTabSpec(String); TabHost$setIndicator(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TabHost.newTabSpec()",
    "boolean": 1,
    "context": " TabHost$setContent(this); addTab(ts);ts = <mask><mask><mask>newTabSpec(String); TabHost$setIndicator(String); TabHost$setContent(this);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TabHost",
    "boolean": 1,
    "context": " addTab(ts);ts = newTabSpec(String); <mask><mask><mask>.TabHost$setIndicator(String); TabHost$setContent(this); addTab(ts);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TabHost",
    "boolean": 1,
    "context": "ts = newTabSpec(String); TabHost$setIndicator(String); <mask><mask><mask>.TabHost$setContent(this); addTab(ts); setOnClickListener(this);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TabHost.addTab()",
    "boolean": 1,
    "context": " TabHost$setIndicator(String); TabHost$setContent(this); <mask><mask><mask>addTab(ts); setOnClickListener(this); setOnTabChangedListener(this);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TabHost.setOnClickListener()",
    "boolean": 1,
    "context": " TabHost$setContent(this); addTab(ts); <mask><mask><mask>setOnClickListener(this); setOnTabChangedListener(this);} public void onClick(View v) { d(LOG_KEY, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TabHost.setOnTabChangedListener()",
    "boolean": 1,
    "context": " addTab(ts); setOnClickListener(this); <mask><mask><mask>setOnTabChangedListener(this);} public void onClick(View v) { d(LOG_KEY, String);} public void onTabChanged(String tabId) { d(LOG_KEY, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.View",
    "boolean": 1,
    "context": " setOnClickListener(this); setOnTabChangedListener(this);} public void onClick(<mask><mask><mask>.View v) { d(LOG_KEY, String);} public void onTabChanged(String tabId) { d(LOG_KEY, String);} @Override public View createTabContent(String arg0) { return null;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.d()",
    "boolean": 1,
    "context": " setOnClickListener(this); setOnTabChangedListener(this);} public void onClick(View v) { <mask><mask><mask>d(LOG_KEY, String);} public void onTabChanged(String tabId) { d(LOG_KEY, String);} @Override public View createTabContent(String arg0) { return null;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.d()",
    "boolean": 1,
    "context": " setOnTabChangedListener(this);} public void onClick(View v) { d(LOG_KEY, String);} public void onTabChanged(String tabId) { <mask><mask><mask>d(LOG_KEY, String);} @Override public View createTabContent(String arg0) { return null;} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.View",
    "boolean": 1,
    "context": "} public void onClick(View v) { d(LOG_KEY, String);} public void onTabChanged(String tabId) { d(LOG_KEY, String);} @Override public <mask><mask><mask>.View createTabContent(String arg0) { return null;} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaRecorder",
    "boolean": 1,
    "context": "public class Android35 { private void recordVideoStart() { <mask><mask><mask>.MediaRecorder recorder = new MediaRecorder();if (recorder != null) { stop(); release();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaRecorder()",
    "boolean": 1,
    "context": "public class Android35 { private void recordVideoStart() { MediaRecorder recorder = new <mask><mask><mask>.MediaRecorder();if (recorder != null) { stop(); release();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaRecorder.stop()",
    "boolean": 1,
    "context": "public class Android35 { private void recordVideoStart() { MediaRecorder recorder = new MediaRecorder();if (recorder != null) { <mask><mask><mask>stop(); release();} File file = new File(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaRecorder.release()",
    "boolean": 1,
    "context": "public class Android35 { private void recordVideoStart() { MediaRecorder recorder = new MediaRecorder();if (recorder != null) { stop(); <mask><mask><mask>release();} File file = new File(String);try { createNewFile();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File",
    "boolean": 1,
    "context": "if (recorder != null) { stop(); release();} <mask><mask><mask>.File file = new File(String);try { createNewFile();} catch (IOException e) { // TODO Auto-generated catch block printStackTrace();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File()",
    "boolean": 1,
    "context": "if (recorder != null) { stop(); release();} File file = new <mask><mask><mask>.File(String);try { createNewFile();} catch (IOException e) { // TODO Auto-generated catch block printStackTrace();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File.createNewFile()",
    "boolean": 1,
    "context": " release();} File file = new File(String);try { <mask><mask><mask>createNewFile();} catch (IOException e) { // TODO Auto-generated catch block printStackTrace();} recorder = new MediaRecorder();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException",
    "boolean": 1,
    "context": "} File file = new File(String);try { createNewFile();} catch (<mask><mask><mask>.IOException e) { // TODO Auto-generated catch block printStackTrace();} recorder = new MediaRecorder(); setVideoSource(CAMERA);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException.printStackTrace()",
    "boolean": 1,
    "context": "} File file = new File(String);try { createNewFile();} catch (IOException e) { // TODO Auto-generated catch block <mask><mask><mask>printStackTrace();} recorder = new MediaRecorder(); setVideoSource(CAMERA);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaRecorder()",
    "boolean": 1,
    "context": "try { createNewFile();} catch (IOException e) { // TODO Auto-generated catch block printStackTrace();} recorder = new <mask><mask><mask>.MediaRecorder(); setVideoSource(CAMERA); setAudioSource(MIC);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaRecorder.setVideoSource()",
    "boolean": 1,
    "context": "} catch (IOException e) { // TODO Auto-generated catch block printStackTrace();} recorder = new MediaRecorder(); <mask><mask><mask>setVideoSource(CAMERA); setAudioSource(MIC); setOutputFormat(THREE_GPP);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media.videoRecorder.MediaSource",
    "truth_type": "android.media.MediaRecorder.VideoSource",
    "full_FQN": "android.media.MediaRecorder.VideoSource.CAMERA",
    "boolean": 0,
    "context": "} catch (IOException e) { // TODO Auto-generated catch block printStackTrace();} recorder = new MediaRecorder(); setVideoSource(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.CAMERA); setAudioSource(MIC); setOutputFormat(THREE_GPP);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaRecorder.setAudioSource()",
    "boolean": 1,
    "context": "} recorder = new MediaRecorder(); setVideoSource(CAMERA); <mask><mask><mask>setAudioSource(MIC); setOutputFormat(THREE_GPP); setOutputFile getAbsolutePath());"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media.MediaRecorder.MediaSource",
    "truth_type": "android.media.MediaRecorder.AudioSource",
    "full_FQN": "android.media.MediaRecorder.AudioSource.MIC",
    "boolean": 0,
    "context": "} recorder = new MediaRecorder(); setVideoSource(CAMERA); setAudioSource(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MIC); setOutputFormat(THREE_GPP); setOutputFile getAbsolutePath());"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaRecorder.setOutputFormat()",
    "boolean": 1,
    "context": " setVideoSource(CAMERA); setAudioSource(MIC); <mask><mask><mask>setOutputFormat(THREE_GPP); setOutputFile getAbsolutePath()); setVideoSize(176, 144);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media.Mediaframeworkorder.MediaFormat",
    "truth_type": "android.media.MediaRecorder.OutputFormat",
    "full_FQN": "android.media.MediaRecorder.OutputFormat.THREE_GPP",
    "boolean": 0,
    "context": " setVideoSource(CAMERA); setAudioSource(MIC); setOutputFormat(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.THREE_GPP); setOutputFile getAbsolutePath()); setVideoSize(176, 144);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media.MediaRecorder",
    "truth_type": "android.media.MediaRecorder",
    "full_FQN": "android.media.MediaRecorder.setOutputFile",
    "boolean": 1,
    "context": " setAudioSource(MIC); setOutputFormat(THREE_GPP); <mask><mask><mask><mask><mask><mask><mask>.setOutputFile getAbsolutePath()); setVideoSize(176, 144); setVideoFrameRate(15);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File.getAbsolutePath()",
    "boolean": 1,
    "context": " setAudioSource(MIC); setOutputFormat(THREE_GPP); setOutputFile <mask><mask><mask>getAbsolutePath()); setVideoSize(176, 144); setVideoFrameRate(15);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaRecorder.setVideoSize()",
    "boolean": 1,
    "context": " setOutputFormat(THREE_GPP); setOutputFile getAbsolutePath()); <mask><mask><mask>setVideoSize(176, 144); setVideoFrameRate(15); setVideoEncoder(DEFAULT);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaRecorder.setVideoFrameRate()",
    "boolean": 1,
    "context": " setOutputFile getAbsolutePath()); setVideoSize(176, 144); <mask><mask><mask>setVideoFrameRate(15); setVideoEncoder(DEFAULT); setAudioEncoder(AMR_NB);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaRecorder.setVideoEncoder()",
    "boolean": 1,
    "context": " setVideoSize(176, 144); setVideoFrameRate(15); <mask><mask><mask>setVideoEncoder(DEFAULT); setAudioEncoder(AMR_NB);try { prepare();"
  },
  {
    "lib_name": "android",
    "pred_type": "Media.media.MediaRecorder.VideoEncoder",
    "truth_type": "android.media.MediaRecorder.VideoEncoder",
    "full_FQN": "android.media.MediaRecorder.VideoEncoder.DEFAULT",
    "boolean": 0,
    "context": " setVideoSize(176, 144); setVideoFrameRate(15); setVideoEncoder(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.DEFAULT); setAudioEncoder(AMR_NB);try { prepare();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaRecorder.setAudioEncoder()",
    "boolean": 1,
    "context": " setVideoFrameRate(15); setVideoEncoder(DEFAULT); <mask><mask><mask>setAudioEncoder(AMR_NB);try { prepare();} catch (IllegalStateException e) { printStackTrace();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media.MediaRecorder.MediaEncTest",
    "truth_type": "android.media.MediaRecorder.AudioEncoder",
    "full_FQN": "android.media.MediaRecorder.AudioEncoder.AMR_NB",
    "boolean": 0,
    "context": " setVideoFrameRate(15); setVideoEncoder(DEFAULT); setAudioEncoder(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.AMR_NB);try { prepare();} catch (IllegalStateException e) { printStackTrace();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaRecorder.prepare()",
    "boolean": 1,
    "context": " setVideoEncoder(DEFAULT); setAudioEncoder(AMR_NB);try { <mask><mask><mask>prepare();} catch (IllegalStateException e) { printStackTrace();} catch (IOException e) { printStackTrace();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException.printStackTrace()",
    "boolean": 1,
    "context": " setAudioEncoder(AMR_NB);try { prepare();} catch (IllegalStateException e) { <mask><mask><mask>printStackTrace();} catch (IOException e) { printStackTrace();} start();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException",
    "boolean": 1,
    "context": "try { prepare();} catch (IllegalStateException e) { printStackTrace();} catch (<mask><mask><mask>.IOException e) { printStackTrace();} start();} };"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException.printStackTrace()",
    "boolean": 1,
    "context": "try { prepare();} catch (IllegalStateException e) { printStackTrace();} catch (IOException e) { <mask><mask><mask>printStackTrace();} start();} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaRecorder.start()",
    "boolean": 1,
    "context": "} catch (IllegalStateException e) { printStackTrace();} catch (IOException e) { printStackTrace();} <mask><mask><mask>start();} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.database.sqlite",
    "truth_type": "android.database.sqlite",
    "full_FQN": "android.database.sqlite.SQLiteDatabase",
    "boolean": 1,
    "context": "private static final String VALUE = String;private static final String DATABASE_TABLE = String;private long insertRow(int rowParameter, String rowValue, <mask><mask><mask><mask><mask><mask>.SQLiteDatabase db) { long res = -1;ContentValues settingsParameterValues = new ContentValues(); put(KEY_NAME, rowParameter);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.ContentValues",
    "boolean": 1,
    "context": "private static final String DATABASE_TABLE = String;private long insertRow(int rowParameter, String rowValue, SQLiteDatabase db) { long res = -1;<mask><mask><mask>.ContentValues settingsParameterValues = new ContentValues(); put(KEY_NAME, rowParameter); put(VALUE, rowValue);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.ContentValues()",
    "boolean": 1,
    "context": "private static final String DATABASE_TABLE = String;private long insertRow(int rowParameter, String rowValue, SQLiteDatabase db) { long res = -1;ContentValues settingsParameterValues = new <mask><mask><mask>.ContentValues(); put(KEY_NAME, rowParameter); put(VALUE, rowValue);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.ContentValues.put()",
    "boolean": 1,
    "context": "private long insertRow(int rowParameter, String rowValue, SQLiteDatabase db) { long res = -1;ContentValues settingsParameterValues = new ContentValues(); <mask><mask><mask>put(KEY_NAME, rowParameter); put(VALUE, rowValue);if (db != null) { res = insert(DATABASE_TABLE, null, settingsParameterValues);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.ContentValues.put()",
    "boolean": 1,
    "context": "android.content.ContentValues settingsParameterValues = new ContentValues(); put(KEY_NAME, rowParameter); <mask><mask><mask>put(VALUE, rowValue);if (db != null) { res = insert(DATABASE_TABLE, null, settingsParameterValues);} return res;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.database.sqlite",
    "truth_type": "android.database.sqlite",
    "full_FQN": "android.database.sqlite.SQLiteDatabase.insert()",
    "boolean": 1,
    "context": " put(KEY_NAME, rowParameter); put(VALUE, rowValue);if (db != null) { res = <mask><mask><mask><mask><mask><mask>insert(DATABASE_TABLE, null, settingsParameterValues);} return res;} public static void main(String[] args) { } };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.Activity",
    "boolean": 1,
    "context": "public class Android37 extends <mask><mask><mask>.Activity implements Runnable { public ProgressDialog mProgress;public void send() { mProgress = show(this, String, String, true, true);Thread thread = new Thread(this);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.ProgressDialog",
    "boolean": 1,
    "context": "public class Android37 extends Activity implements Runnable { public <mask><mask><mask>.ProgressDialog mProgress;public void send() { mProgress = show(this, String, String, true, true);Thread thread = new Thread(this);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.ProgressDialog.show()",
    "boolean": 1,
    "context": "public class Android37 extends Activity implements Runnable { public ProgressDialog mProgress;public void send() { mProgress = <mask><mask><mask>show(this, String, String, true, true);Thread thread = new Thread(this); start();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.os",
    "truth_type": "android.os",
    "full_FQN": "android.os.Message",
    "boolean": 1,
    "context": "} public void run() { try { sleep(10000);} catch (InterruptedException e) { printStackTrace();} <mask><mask><mask>.Message msg = new Message(); sendMessage(msg);} private final Handler mHandler = new Handler() { @Override public void handleMessage(Message msg) { dismiss();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.os",
    "truth_type": "android.os",
    "full_FQN": "android.os.Message()",
    "boolean": 1,
    "context": "} public void run() { try { sleep(10000);} catch (InterruptedException e) { printStackTrace();} Message msg = new <mask><mask><mask>.Message(); sendMessage(msg);} private final Handler mHandler = new Handler() { @Override public void handleMessage(Message msg) { dismiss();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.os",
    "truth_type": "android.os",
    "full_FQN": "android.os.Handler.sendMessage()",
    "boolean": 1,
    "context": "} catch (InterruptedException e) { printStackTrace();} Message msg = new Message(); <mask><mask><mask>sendMessage(msg);} private final Handler mHandler = new Handler() { @Override public void handleMessage(Message msg) { dismiss();} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.os",
    "truth_type": "android.os",
    "full_FQN": "android.os.Handler",
    "boolean": 1,
    "context": "} Message msg = new Message(); sendMessage(msg);} private final <mask><mask><mask>.Handler mHandler = new Handler() { @Override public void handleMessage(Message msg) { dismiss();} };};"
  },
  {
    "lib_name": "android",
    "pred_type": "android.os",
    "truth_type": "android.os",
    "full_FQN": "android.os.Handler()",
    "boolean": 1,
    "context": "} Message msg = new Message(); sendMessage(msg);} private final Handler mHandler = new <mask><mask><mask>.Handler() { @Override public void handleMessage(Message msg) { dismiss();} };};"
  },
  {
    "lib_name": "android",
    "pred_type": "android.os",
    "truth_type": "android.os",
    "full_FQN": "android.os.Message",
    "boolean": 1,
    "context": "} Message msg = new Message(); sendMessage(msg);} private final Handler mHandler = new Handler() { @Override public void handleMessage(<mask><mask><mask>.Message msg) { dismiss();} };};"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.ProgressDialog.dismiss()",
    "boolean": 1,
    "context": "} Message msg = new Message(); sendMessage(msg);} private final Handler mHandler = new Handler() { @Override public void handleMessage(Message msg) { <mask><mask><mask>dismiss();} };};"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataOutputStream",
    "boolean": 1,
    "context": "private String name = null;private String password = null;private <mask><mask><mask>.DataOutputStream dataStream = null;enum ReturnCode { noPicture, unknown, http201, http400, http401, http403, http404, http500;} public Android38(String name, String password) { name = name;password = password;"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File",
    "boolean": 1,
    "context": "} public static void setServiceDomain(String domainName) { serviceDomain = domainName;} public static String getServiceDomain() { return serviceDomain;} public ReturnCode uploadPicture(String pictureFileName) { <mask><mask><mask>.File uploadFile = new File(pictureFileName);if  exists()) { try { FileInputStream fileInputStream = new FileInputStream(uploadFile);URL connectURL = new URL(postUrl);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File()",
    "boolean": 1,
    "context": "} public static void setServiceDomain(String domainName) { serviceDomain = domainName;} public static String getServiceDomain() { return serviceDomain;} public ReturnCode uploadPicture(String pictureFileName) { File uploadFile = new <mask><mask><mask>.File(pictureFileName);if  exists()) { try { FileInputStream fileInputStream = new FileInputStream(uploadFile);URL connectURL = new URL(postUrl);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File.exists()",
    "boolean": 1,
    "context": "} public static String getServiceDomain() { return serviceDomain;} public ReturnCode uploadPicture(String pictureFileName) { File uploadFile = new File(pictureFileName);if  <mask><mask><mask>exists()) { try { FileInputStream fileInputStream = new FileInputStream(uploadFile);URL connectURL = new URL(postUrl);HttpURLConnection conn = ((HttpURLConnection)  openConnection()));"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileInputStream",
    "boolean": 1,
    "context": "} public static String getServiceDomain() { return serviceDomain;} public ReturnCode uploadPicture(String pictureFileName) { File uploadFile = new File(pictureFileName);if  exists()) { try { <mask><mask><mask>.FileInputStream fileInputStream = new FileInputStream(uploadFile);URL connectURL = new URL(postUrl);HttpURLConnection conn = ((HttpURLConnection)  openConnection()));"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileInputStream()",
    "boolean": 1,
    "context": "} public static String getServiceDomain() { return serviceDomain;} public ReturnCode uploadPicture(String pictureFileName) { File uploadFile = new File(pictureFileName);if  exists()) { try { FileInputStream fileInputStream = new <mask><mask><mask>.FileInputStream(uploadFile);URL connectURL = new URL(postUrl);HttpURLConnection conn = ((HttpURLConnection)  openConnection()));"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.URL",
    "boolean": 1,
    "context": "} public ReturnCode uploadPicture(String pictureFileName) { File uploadFile = new File(pictureFileName);if  exists()) { try { FileInputStream fileInputStream = new FileInputStream(uploadFile);<mask><mask><mask>.URL connectURL = new URL(postUrl);HttpURLConnection conn = ((HttpURLConnection)  openConnection())); setDoInput(true);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.URL()",
    "boolean": 1,
    "context": "} public ReturnCode uploadPicture(String pictureFileName) { File uploadFile = new File(pictureFileName);if  exists()) { try { FileInputStream fileInputStream = new FileInputStream(uploadFile);URL connectURL = new <mask><mask><mask>.URL(postUrl);HttpURLConnection conn = ((HttpURLConnection)  openConnection())); setDoInput(true);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection",
    "boolean": 1,
    "context": "if  exists()) { try { FileInputStream fileInputStream = new FileInputStream(uploadFile);URL connectURL = new URL(postUrl);<mask><mask><mask>.HttpURLConnection conn = ((HttpURLConnection)  openConnection())); setDoInput(true); setDoOutput(true);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection",
    "boolean": 1,
    "context": "if  exists()) { try { FileInputStream fileInputStream = new FileInputStream(uploadFile);URL connectURL = new URL(postUrl);HttpURLConnection conn = ((<mask><mask><mask>.HttpURLConnection)  openConnection())); setDoInput(true); setDoOutput(true);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.URL.openConnection()",
    "boolean": 1,
    "context": "if  exists()) { try { FileInputStream fileInputStream = new FileInputStream(uploadFile);URL connectURL = new URL(postUrl);HttpURLConnection conn = ((HttpURLConnection)  <mask><mask><mask>openConnection())); setDoInput(true); setDoOutput(true);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection.setDoInput()",
    "boolean": 1,
    "context": "java.net.URL connectURL = new URL(postUrl);HttpURLConnection conn = ((HttpURLConnection)  openConnection())); <mask><mask><mask>setDoInput(true); setDoOutput(true); setUseCaches(false);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection.setDoOutput()",
    "boolean": 1,
    "context": "java.net.HttpURLConnection conn = ((HttpURLConnection)  openConnection())); setDoInput(true); <mask><mask><mask>setDoOutput(true); setUseCaches(false); setRequestMethod(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection.setUseCaches()",
    "boolean": 1,
    "context": " setDoInput(true); setDoOutput(true); <mask><mask><mask>setUseCaches(false); setRequestMethod(String); setRequestProperty(String, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection.setRequestMethod()",
    "boolean": 1,
    "context": " setDoOutput(true); setUseCaches(false); <mask><mask><mask>setRequestMethod(String); setRequestProperty(String, String); setRequestProperty(String, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection.setRequestProperty()",
    "boolean": 1,
    "context": " setUseCaches(false); setRequestMethod(String); <mask><mask><mask>setRequestProperty(String, String); setRequestProperty(String, String); setRequestProperty(String, String + boundary);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection.setRequestProperty()",
    "boolean": 1,
    "context": " setRequestMethod(String); setRequestProperty(String, String); <mask><mask><mask>setRequestProperty(String, String); setRequestProperty(String, String + boundary); connect();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection.setRequestProperty()",
    "boolean": 1,
    "context": " setRequestProperty(String, String); setRequestProperty(String, String); <mask><mask><mask>setRequestProperty(String, String + boundary); connect();dataStream = new DataOutputStream getOutputStream());"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection.connect()",
    "boolean": 1,
    "context": " setRequestProperty(String, String); setRequestProperty(String, String + boundary); <mask><mask><mask>connect();dataStream = new DataOutputStream getOutputStream());writeFormField(String, name);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataOutputStream",
    "boolean": 1,
    "context": " setRequestProperty(String, String + boundary); connect();dataStream = new <mask><mask><mask>.DataOutputStream getOutputStream());writeFormField(String, name);writeFormField(String, password);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection.getOutputStream()",
    "boolean": 1,
    "context": " setRequestProperty(String, String + boundary); connect();dataStream = new DataOutputStream <mask><mask><mask>getOutputStream());writeFormField(String, name);writeFormField(String, password);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataOutputStream.writeBytes()",
    "boolean": 1,
    "context": "writeFormField(String, password);writeFileField(String, pictureFileName, String, fileInputStream); <mask><mask><mask>writeBytes(((twoHyphens + boundary) + twoHyphens) + CRLF); close(); flush();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileInputStream.close()",
    "boolean": 1,
    "context": "writeFileField(String, pictureFileName, String, fileInputStream); writeBytes(((twoHyphens + boundary) + twoHyphens) + CRLF); <mask><mask><mask>close(); flush(); close();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataOutputStream.flush()",
    "boolean": 1,
    "context": " writeBytes(((twoHyphens + boundary) + twoHyphens) + CRLF); close(); <mask><mask><mask>flush(); close();dataStream = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataOutputStream.close()",
    "boolean": 1,
    "context": " close(); flush(); <mask><mask><mask>close();dataStream = null;String response = getResponse(conn);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection.getResponseCode()",
    "boolean": 1,
    "context": "dataStream = null;String response = getResponse(conn); <mask><mask><mask>getResponseCode();if (contains(String)) { return http201;} else { return http401;"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.MalformedURLException",
    "boolean": 1,
    "context": "if (contains(String)) { return http201;} else { return http401;} } catch (<mask><mask><mask>.MalformedURLException mue) { println(String + getMessage());return http400;} catch (IOException ioe) { println(String + getMessage());"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.MalformedURLException.getMessage()",
    "boolean": 1,
    "context": "if (contains(String)) { return http201;} else { return http401;} } catch (MalformedURLException mue) { println(String + <mask><mask><mask>getMessage());return http400;} catch (IOException ioe) { println(String + getMessage());"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException",
    "boolean": 1,
    "context": "} } catch (MalformedURLException mue) { println(String + getMessage());return http400;} catch (<mask><mask><mask>.IOException ioe) { println(String + getMessage());return http500;} catch (Exception e) { println(String + getMessage());"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException.getMessage()",
    "boolean": 1,
    "context": "} } catch (MalformedURLException mue) { println(String + getMessage());return http400;} catch (IOException ioe) { println(String + <mask><mask><mask>getMessage());return http500;} catch (Exception e) { println(String + getMessage());"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection",
    "boolean": 1,
    "context": "return unknown;} } else { return noPicture;} } private String getResponse(<mask><mask><mask>.HttpURLConnection conn) { try { DataInputStream dis = new DataInputStream getInputStream());byte[] data = new byte[1024];int len = read(data, 0, 1024);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataInputStream",
    "boolean": 1,
    "context": "return unknown;} } else { return noPicture;} } private String getResponse(HttpURLConnection conn) { try { <mask><mask><mask>.DataInputStream dis = new DataInputStream getInputStream());byte[] data = new byte[1024];int len = read(data, 0, 1024);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataInputStream",
    "boolean": 1,
    "context": "return unknown;} } else { return noPicture;} } private String getResponse(HttpURLConnection conn) { try { DataInputStream dis = new <mask><mask><mask>.DataInputStream getInputStream());byte[] data = new byte[1024];int len = read(data, 0, 1024);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection.getInputStream()",
    "boolean": 1,
    "context": "return unknown;} } else { return noPicture;} } private String getResponse(HttpURLConnection conn) { try { DataInputStream dis = new DataInputStream <mask><mask><mask>getInputStream());byte[] data = new byte[1024];int len = read(data, 0, 1024);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataInputStream.read()",
    "boolean": 1,
    "context": "} } private String getResponse(HttpURLConnection conn) { try { DataInputStream dis = new DataInputStream getInputStream());byte[] data = new byte[1024];int len = <mask><mask><mask>read(data, 0, 1024); close(); getResponseCode();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataInputStream.close()",
    "boolean": 1,
    "context": "byte[] data = new byte[1024];int len = read(data, 0, 1024); <mask><mask><mask>close(); getResponseCode();if (len > 0) { return new String(data, 0, len);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection.getResponseCode()",
    "boolean": 1,
    "context": "int len = read(data, 0, 1024); close(); <mask><mask><mask>getResponseCode();if (len > 0) { return new String(data, 0, len);} else { return String;"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection",
    "boolean": 1,
    "context": "} } catch (Exception e) { println(String);return String;} } private String getResponseOrig(<mask><mask><mask>.HttpURLConnection conn) { InputStream is = null;try { is = getInputStream();int ch;"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.InputStream",
    "boolean": 1,
    "context": "} } catch (Exception e) { println(String);return String;} } private String getResponseOrig(HttpURLConnection conn) { <mask><mask><mask>.InputStream is = null;try { is = getInputStream();int ch;"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.HttpURLConnection.getInputStream()",
    "boolean": 1,
    "context": "return String;} } private String getResponseOrig(HttpURLConnection conn) { InputStream is = null;try { is = <mask><mask><mask>getInputStream();int ch;StringBuffer sb = new StringBuffer();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.InputStream.read()",
    "boolean": 1,
    "context": "int ch;StringBuffer sb = new StringBuffer();while ((ch = <mask><mask><mask>read()) != (-1)) { append(((char) (ch)));} return toString();} catch (Exception e) { println(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.InputStream.close()",
    "boolean": 1,
    "context": "} return toString();} catch (Exception e) { println(String);} finally { try { if (is != null) { <mask><mask><mask>close();} } catch (Exception e) { } } return String;} private void writeFormField(String fieldName, String fieldValue) { try { writeBytes((twoHyphens + boundary) + CRLF);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataOutputStream.writeBytes()",
    "boolean": 1,
    "context": "} finally { try { if (is != null) { close();} } catch (Exception e) { } } return String;} private void writeFormField(String fieldName, String fieldValue) { try { <mask><mask><mask>writeBytes((twoHyphens + boundary) + CRLF); writeBytes(((StringString\\String) + CRLF); writeBytes(CRLF);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataOutputStream.writeBytes()",
    "boolean": 1,
    "context": "} } catch (Exception e) { } } return String;} private void writeFormField(String fieldName, String fieldValue) { try { writeBytes((twoHyphens + boundary) + CRLF); <mask><mask><mask>writeBytes(((StringString\\String) + CRLF); writeBytes(CRLF); writeBytes(fieldValue);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataOutputStream.writeBytes()",
    "boolean": 1,
    "context": "} private void writeFormField(String fieldName, String fieldValue) { try { writeBytes((twoHyphens + boundary) + CRLF); writeBytes(((StringString\\String) + CRLF); <mask><mask><mask>writeBytes(CRLF); writeBytes(fieldValue); writeBytes(CRLF);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataOutputStream.writeBytes()",
    "boolean": 1,
    "context": " writeBytes(((StringString\\String) + CRLF); writeBytes(CRLF); <mask><mask><mask>writeBytes(fieldValue); writeBytes(CRLF);} catch (Exception e) { println(String + getMessage());"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataOutputStream.writeBytes()",
    "boolean": 1,
    "context": " writeBytes(CRLF); writeBytes(fieldValue); <mask><mask><mask>writeBytes(CRLF);} catch (Exception e) { println(String + getMessage());} } private void writeFileField(String fieldName, String fieldValue, String type, FileInputStream fis) { try { writeBytes((twoHyphens + boundary) + CRLF);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileInputStream",
    "boolean": 1,
    "context": " writeBytes(CRLF);} catch (Exception e) { println(String + getMessage());} } private void writeFileField(String fieldName, String fieldValue, String type, <mask><mask><mask>.FileInputStream fis) { try { writeBytes((twoHyphens + boundary) + CRLF); writeBytes(((((StringString\\StringString\\String) + CRLF); writeBytes((String + type) + CRLF);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataOutputStream.writeBytes()",
    "boolean": 1,
    "context": " writeBytes(CRLF);} catch (Exception e) { println(String + getMessage());} } private void writeFileField(String fieldName, String fieldValue, String type, FileInputStream fis) { try { <mask><mask><mask>writeBytes((twoHyphens + boundary) + CRLF); writeBytes(((((StringString\\StringString\\String) + CRLF); writeBytes((String + type) + CRLF);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataOutputStream.writeBytes()",
    "boolean": 1,
    "context": "} catch (Exception e) { println(String + getMessage());} } private void writeFileField(String fieldName, String fieldValue, String type, FileInputStream fis) { try { writeBytes((twoHyphens + boundary) + CRLF); <mask><mask><mask>writeBytes(((((StringString\\StringString\\String) + CRLF); writeBytes((String + type) + CRLF); writeBytes(CRLF);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataOutputStream.writeBytes()",
    "boolean": 1,
    "context": "} } private void writeFileField(String fieldName, String fieldValue, String type, FileInputStream fis) { try { writeBytes((twoHyphens + boundary) + CRLF); writeBytes(((((StringString\\StringString\\String) + CRLF); <mask><mask><mask>writeBytes((String + type) + CRLF); writeBytes(CRLF);int bytesAvailable = available();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataOutputStream.writeBytes()",
    "boolean": 1,
    "context": " writeBytes(((((StringString\\StringString\\String) + CRLF); writeBytes((String + type) + CRLF); <mask><mask><mask>writeBytes(CRLF);int bytesAvailable = available();int maxBufferSize = 1024;"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileInputStream.available()",
    "boolean": 1,
    "context": " writeBytes((String + type) + CRLF); writeBytes(CRLF);int bytesAvailable = <mask><mask><mask>available();int maxBufferSize = 1024;int bufferSize = min(bytesAvailable, maxBufferSize);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileInputStream.read()",
    "boolean": 1,
    "context": "int bufferSize = min(bytesAvailable, maxBufferSize);byte[] buffer = new byte[bufferSize];int bytesRead = <mask><mask><mask>read(buffer, 0, bufferSize);while (bytesRead > 0) { write(buffer, 0, bufferSize);bytesAvailable = available();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataOutputStream.write()",
    "boolean": 1,
    "context": "byte[] buffer = new byte[bufferSize];int bytesRead = read(buffer, 0, bufferSize);while (bytesRead > 0) { <mask><mask><mask>write(buffer, 0, bufferSize);bytesAvailable = available();bufferSize = min(bytesAvailable, maxBufferSize);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileInputStream.available()",
    "boolean": 1,
    "context": "int bytesRead = read(buffer, 0, bufferSize);while (bytesRead > 0) { write(buffer, 0, bufferSize);bytesAvailable = <mask><mask><mask>available();bufferSize = min(bytesAvailable, maxBufferSize);bytesRead = read(buffer, 0, bufferSize);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileInputStream.read()",
    "boolean": 1,
    "context": "bytesAvailable = available();bufferSize = min(bytesAvailable, maxBufferSize);bytesRead = <mask><mask><mask>read(buffer, 0, bufferSize);} writeBytes(CRLF);} catch (Exception e) { println(String + getMessage());"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataOutputStream.writeBytes()",
    "boolean": 1,
    "context": "bufferSize = min(bytesAvailable, maxBufferSize);bytesRead = read(buffer, 0, bufferSize);} <mask><mask><mask>writeBytes(CRLF);} catch (Exception e) { println(String + getMessage());} } public static void main(String[] args) { if (length >= 0) { Android38 gpu = new Android38(String, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "android.os",
    "full_FQN": "android.os.Bundle",
    "boolean": 0,
    "context": "public class Android39 extends MapActivity { public void onCreate(<mask><mask><mask>.Bundle icicle) { onCreate(icicle);setContentView(activity_list_item);MapView myMapView = ((MapView) (findViewById(background)));"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "MapView myMapView = ((MapView) (findViewById(background)));MapController mapController = getController();<mask><mask><mask>.List<Overlay> overlays = getOverlays();MyLocationOverlay myLocationOverlay = new MyLocationOverlay(this, myMapView); add(myLocationOverlay);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.add()",
    "boolean": 1,
    "context": "java.util.List<Overlay> overlays = getOverlays();MyLocationOverlay myLocationOverlay = new MyLocationOverlay(this, myMapView); <mask><mask><mask>add(myLocationOverlay);enableMyLocation();} protected boolean isRouteDisplayed() { return false;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.Activity",
    "boolean": 1,
    "context": "// ID= 1163812 public class Android40 extends <mask><mask><mask>.Activity { public static void main(String[] args) { } public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);SlidingDrawer drawer = ((SlidingDrawer) (findViewById(background)));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.os",
    "full_FQN": "android.os.Bundle",
    "boolean": 0,
    "context": "// ID= 1163812 public class Android40 extends Activity { public static void main(String[] args) { } public void onCreate(<mask><mask><mask>.Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);SlidingDrawer drawer = ((SlidingDrawer) (findViewById(background)));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.SlidingDrawer",
    "boolean": 1,
    "context": "// ID= 1163812 public class Android40 extends Activity { public static void main(String[] args) { } public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);<mask><mask><mask>.SlidingDrawer drawer = ((SlidingDrawer) (findViewById(background)));ImageView handle = ((ImageView) (findViewById(cut))); setFocusable(true);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.SlidingDrawer",
    "boolean": 1,
    "context": "// ID= 1163812 public class Android40 extends Activity { public static void main(String[] args) { } public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);SlidingDrawer drawer = ((<mask><mask><mask>.SlidingDrawer) (findViewById(background)));ImageView handle = ((ImageView) (findViewById(cut))); setFocusable(true);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ImageView",
    "boolean": 1,
    "context": "setContentView(activity_list_item);SlidingDrawer drawer = ((SlidingDrawer) (findViewById(background)));<mask><mask><mask>.ImageView handle = ((ImageView) (findViewById(cut))); setFocusable(true); setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { i(String, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ImageView",
    "boolean": 1,
    "context": "setContentView(activity_list_item);SlidingDrawer drawer = ((SlidingDrawer) (findViewById(background)));ImageView handle = ((<mask><mask><mask>.ImageView) (findViewById(cut))); setFocusable(true); setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { i(String, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ImageView.setFocusable()",
    "boolean": 1,
    "context": "android.widget.SlidingDrawer drawer = ((SlidingDrawer) (findViewById(background)));ImageView handle = ((ImageView) (findViewById(cut))); <mask><mask><mask>setFocusable(true); setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { i(String, String);} });"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ImageView.setOnClickListener()",
    "boolean": 1,
    "context": "android.widget.ImageView handle = ((ImageView) (findViewById(cut))); setFocusable(true); <mask><mask><mask>setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { i(String, String);} });} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.View.OnClickListener()",
    "boolean": 1,
    "context": "android.widget.ImageView handle = ((ImageView) (findViewById(cut))); setFocusable(true); setOnClickListener(new <mask><mask><mask>OnClickListener() { @Override public void onClick(View v) { i(String, String);} });} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.View",
    "boolean": 1,
    "context": "android.widget.ImageView handle = ((ImageView) (findViewById(cut))); setFocusable(true); setOnClickListener(new OnClickListener() { @Override public void onClick(<mask><mask><mask>.View v) { i(String, String);} });} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.i()",
    "boolean": 1,
    "context": "android.widget.ImageView handle = ((ImageView) (findViewById(cut))); setFocusable(true); setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { <mask><mask><mask>i(String, String);} });} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.View",
    "boolean": 1,
    "context": "public class Android41 extends <mask><mask><mask>.View { public Android41(Context context) { super(context);setBackgroundColor(RED);} private void setBackgroundColor(Color red) { } TextView tv;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Context",
    "boolean": 1,
    "context": "public class Android41 extends View { public Android41(<mask><mask><mask>.Context context) { super(context);setBackgroundColor(RED);} private void setBackgroundColor(Color red) { } TextView tv;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.graphics.Color",
    "truth_type": "java.awt.Color",
    "full_FQN": "java.awt.Color.RED",
    "boolean": 0,
    "context": "public class Android41 extends View { public Android41(Context context) { super(context);setBackgroundColor(<mask><mask><mask><mask><mask><mask>.RED);} private void setBackgroundColor(Color red) { } TextView tv;public void adText(TextView tv) { tv = tv;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Color",
    "boolean": 0,
    "context": "public class Android41 extends View { public Android41(Context context) { super(context);setBackgroundColor(RED);} private void setBackgroundColor(<mask><mask><mask><mask>.Color red) { } TextView tv;public void adText(TextView tv) { tv = tv; setVisibility VISIBLE);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView",
    "boolean": 1,
    "context": "public class Android41 extends View { public Android41(Context context) { super(context);setBackgroundColor(RED);} private void setBackgroundColor(Color red) { } <mask><mask><mask>.TextView tv;public void adText(TextView tv) { tv = tv; setVisibility VISIBLE);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView",
    "boolean": 1,
    "context": "setBackgroundColor(RED);} private void setBackgroundColor(Color red) { } TextView tv;public void adText(<mask><mask><mask>.TextView tv) { tv = tv; setVisibility VISIBLE);} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget.TextView",
    "truth_type": "android.widget.TextView",
    "full_FQN": "android.widget.TextView.setVisibility",
    "boolean": 1,
    "context": "} private void setBackgroundColor(Color red) { } TextView tv;public void adText(TextView tv) { tv = tv; <mask><mask><mask><mask><mask><mask>.setVisibility VISIBLE);} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget.ImageView",
    "truth_type": "android.widget.TextView",
    "full_FQN": "android.widget.TextView.VISIBLE",
    "boolean": 0,
    "context": "} private void setBackgroundColor(Color red) { } TextView tv;public void adText(TextView tv) { tv = tv; setVisibility <mask><mask><mask><mask><mask><mask>.VISIBLE);} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.Activity",
    "boolean": 1,
    "context": "// ID = 1188346 public class Android42 extends <mask><mask><mask>.Activity implements OnErrorListener , OnBufferingUpdateListener , OnCompletionListener , OnPreparedListener , Callback { private static final String TAG = String;private MediaPlayer mp;private SurfaceView mPreview;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media.MediaPlayer",
    "truth_type": "android.media.MediaPlayer",
    "full_FQN": "android.media.MediaPlayer.OnErrorListener",
    "boolean": 1,
    "context": "// ID = 1188346 public class Android42 extends Activity implements <mask><mask><mask><mask><mask><mask>.OnErrorListener , OnBufferingUpdateListener , OnCompletionListener , OnPreparedListener , Callback { private static final String TAG = String;private MediaPlayer mp;private SurfaceView mPreview;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media.MediaPlayer",
    "truth_type": "android.media.MediaPlayer",
    "full_FQN": "android.media.MediaPlayer.OnBufferingUpdateListener",
    "boolean": 1,
    "context": "// ID = 1188346 public class Android42 extends Activity implements OnErrorListener , <mask><mask><mask><mask><mask><mask>.OnBufferingUpdateListener , OnCompletionListener , OnPreparedListener , Callback { private static final String TAG = String;private MediaPlayer mp;private SurfaceView mPreview;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media.MediaPlayer",
    "truth_type": "android.media.MediaPlayer",
    "full_FQN": "android.media.MediaPlayer.OnCompletionListener",
    "boolean": 1,
    "context": "// ID = 1188346 public class Android42 extends Activity implements OnErrorListener , OnBufferingUpdateListener , <mask><mask><mask><mask><mask><mask>.OnCompletionListener , OnPreparedListener , Callback { private static final String TAG = String;private MediaPlayer mp;private SurfaceView mPreview;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media.MediaPlayer",
    "truth_type": "android.media.MediaPlayer",
    "full_FQN": "android.media.MediaPlayer.OnPreparedListener",
    "boolean": 1,
    "context": "// ID = 1188346 public class Android42 extends Activity implements OnErrorListener , OnBufferingUpdateListener , OnCompletionListener , <mask><mask><mask><mask><mask><mask>.OnPreparedListener , Callback { private static final String TAG = String;private MediaPlayer mp;private SurfaceView mPreview;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view.systemCodHS",
    "truth_type": "android.view.SurfaceHolder",
    "full_FQN": "android.view.SurfaceHolder.Callback",
    "boolean": 0,
    "context": "// ID = 1188346 public class Android42 extends Activity implements OnErrorListener , OnBufferingUpdateListener , OnCompletionListener , OnPreparedListener , <mask><mask><mask><mask><mask><mask><mask><mask>.Callback { private static final String TAG = String;private MediaPlayer mp;private SurfaceView mPreview;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaPlayer",
    "boolean": 1,
    "context": "// ID = 1188346 public class Android42 extends Activity implements OnErrorListener , OnBufferingUpdateListener , OnCompletionListener , OnPreparedListener , Callback { private static final String TAG = String;private <mask><mask><mask>.MediaPlayer mp;private SurfaceView mPreview;private SurfaceHolder holder;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.SurfaceView",
    "boolean": 1,
    "context": "// ID = 1188346 public class Android42 extends Activity implements OnErrorListener , OnBufferingUpdateListener , OnCompletionListener , OnPreparedListener , Callback { private static final String TAG = String;private MediaPlayer mp;private <mask><mask><mask>.SurfaceView mPreview;private SurfaceHolder holder;private Button btnPlay;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.SurfaceHolder",
    "boolean": 1,
    "context": "private MediaPlayer mp;private SurfaceView mPreview;private <mask><mask><mask>.SurfaceHolder holder;private Button btnPlay;private Button btnPause;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.Button",
    "boolean": 1,
    "context": "private SurfaceView mPreview;private SurfaceHolder holder;private <mask><mask><mask>.Button btnPlay;private Button btnPause;private Button btnReset;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.Button",
    "boolean": 1,
    "context": "private SurfaceHolder holder;private Button btnPlay;private <mask><mask><mask>.Button btnPause;private Button btnReset;private Button btnStop;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.Button",
    "boolean": 1,
    "context": "private Button btnPlay;private Button btnPause;private <mask><mask><mask>.Button btnReset;private Button btnStop;private String mPath;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.Button",
    "boolean": 1,
    "context": "private Button btnPause;private Button btnReset;private <mask><mask><mask>.Button btnStop;private String mPath;@Override protected void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "android.os",
    "full_FQN": "android.os.Bundle",
    "boolean": 0,
    "context": "private Button btnStop;private String mPath;@Override protected void onCreate(<mask><mask><mask>.Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);mPreview = ((SurfaceView) (findViewById(message)));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.SurfaceView",
    "boolean": 1,
    "context": "@Override protected void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);mPreview = ((<mask><mask><mask>.SurfaceView) (findViewById(message)));btnPlay = ((Button) (findViewById(100)));btnPause = ((Button) (findViewById(101)));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.Button",
    "boolean": 1,
    "context": "setContentView(activity_list_item);mPreview = ((SurfaceView) (findViewById(message)));btnPlay = ((<mask><mask><mask>.Button) (findViewById(100)));btnPause = ((Button) (findViewById(101)));btnReset = ((Button) (findViewById(102)));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.Button",
    "boolean": 1,
    "context": "mPreview = ((SurfaceView) (findViewById(message)));btnPlay = ((Button) (findViewById(100)));btnPause = ((<mask><mask><mask>.Button) (findViewById(101)));btnReset = ((Button) (findViewById(102)));btnStop = ((Button) (findViewById(103)));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.Button",
    "boolean": 1,
    "context": "btnPlay = ((Button) (findViewById(100)));btnPause = ((Button) (findViewById(101)));btnReset = ((<mask><mask><mask>.Button) (findViewById(102)));btnStop = ((Button) (findViewById(103)));getPathFromParentDialog();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.Button",
    "boolean": 1,
    "context": "btnPause = ((Button) (findViewById(101)));btnReset = ((Button) (findViewById(102)));btnStop = ((<mask><mask><mask>.Button) (findViewById(103)));getPathFromParentDialog(); setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { playVideo();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.Button.setOnClickListener()",
    "boolean": 1,
    "context": "btnStop = ((Button) (findViewById(103)));getPathFromParentDialog(); <mask><mask><mask>setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { playVideo();} }); setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { if (mp != null) { pause();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.View.OnClickListener()",
    "boolean": 1,
    "context": "btnStop = ((Button) (findViewById(103)));getPathFromParentDialog(); setOnClickListener(new <mask><mask><mask>OnClickListener() { @Override public void onClick(View v) { playVideo();} }); setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { if (mp != null) { pause();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.View",
    "boolean": 1,
    "context": "btnStop = ((Button) (findViewById(103)));getPathFromParentDialog(); setOnClickListener(new OnClickListener() { @Override public void onClick(<mask><mask><mask>.View v) { playVideo();} }); setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { if (mp != null) { pause();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.Button.setOnClickListener()",
    "boolean": 1,
    "context": " setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { playVideo();} }); <mask><mask><mask>setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { if (mp != null) { pause();} } }); setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { if (mp != null) { seekTo(0);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.View.OnClickListener()",
    "boolean": 1,
    "context": " setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { playVideo();} }); setOnClickListener(new <mask><mask><mask>OnClickListener() { @Override public void onClick(View v) { if (mp != null) { pause();} } }); setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { if (mp != null) { seekTo(0);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.View",
    "boolean": 1,
    "context": " setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { playVideo();} }); setOnClickListener(new OnClickListener() { @Override public void onClick(<mask><mask><mask>.View v) { if (mp != null) { pause();} } }); setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { if (mp != null) { seekTo(0);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaPlayer.pause()",
    "boolean": 1,
    "context": " setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { playVideo();} }); setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { if (mp != null) { <mask><mask><mask>pause();} } }); setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { if (mp != null) { seekTo(0);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.Button.setOnClickListener()",
    "boolean": 1,
    "context": " setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { if (mp != null) { pause();} } }); <mask><mask><mask>setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { if (mp != null) { seekTo(0);} } }); setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { if (mp != null) { stop();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.View.OnClickListener()",
    "boolean": 1,
    "context": " setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { if (mp != null) { pause();} } }); setOnClickListener(new <mask><mask><mask>OnClickListener() { @Override public void onClick(View v) { if (mp != null) { seekTo(0);} } }); setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { if (mp != null) { stop();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.View",
    "boolean": 1,
    "context": " setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { if (mp != null) { pause();} } }); setOnClickListener(new OnClickListener() { @Override public void onClick(<mask><mask><mask>.View v) { if (mp != null) { seekTo(0);} } }); setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { if (mp != null) { stop();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaPlayer.seekTo()",
    "boolean": 1,
    "context": " setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { if (mp != null) { pause();} } }); setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { if (mp != null) { <mask><mask><mask>seekTo(0);} } }); setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { if (mp != null) { stop();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.Button.setOnClickListener()",
    "boolean": 1,
    "context": " setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { if (mp != null) { seekTo(0);} } }); <mask><mask><mask>setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { if (mp != null) { stop(); release();} } });"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.View.OnClickListener()",
    "boolean": 1,
    "context": " setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { if (mp != null) { seekTo(0);} } }); setOnClickListener(new <mask><mask><mask>OnClickListener() { @Override public void onClick(View v) { if (mp != null) { stop(); release();} } });"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.View",
    "boolean": 1,
    "context": " setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { if (mp != null) { seekTo(0);} } }); setOnClickListener(new OnClickListener() { @Override public void onClick(<mask><mask><mask>.View v) { if (mp != null) { stop(); release();} } });"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaPlayer.stop()",
    "boolean": 1,
    "context": " setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { if (mp != null) { seekTo(0);} } }); setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { if (mp != null) { <mask><mask><mask>stop(); release();} } });"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaPlayer.release()",
    "boolean": 1,
    "context": "} } }); setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { if (mp != null) { stop(); <mask><mask><mask>release();} } });getWindow().setFormat(TRANSPARENT);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.SurfaceView.getHolder()",
    "boolean": 1,
    "context": "} } });getWindow().setFormat(TRANSPARENT);holder = <mask><mask><mask>getHolder(); addCallback(this); setFixedSize(400, 300);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.SurfaceHolder.addCallback()",
    "boolean": 1,
    "context": "getWindow().setFormat(TRANSPARENT);holder = getHolder(); <mask><mask><mask>addCallback(this); setFixedSize(400, 300);} @Override protected void onResume() { setRequestedOrientation(SCREEN_ORIENTATION_LANDSCAPE);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.SurfaceHolder.setFixedSize()",
    "boolean": 1,
    "context": "holder = getHolder(); addCallback(this); <mask><mask><mask>setFixedSize(400, 300);} @Override protected void onResume() { setRequestedOrientation(SCREEN_ORIENTATION_LANDSCAPE);onResume();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaPlayer",
    "boolean": 1,
    "context": "} @Override protected void onResume() { setRequestedOrientation(SCREEN_ORIENTATION_LANDSCAPE);onResume();} @Override public boolean onError(<mask><mask><mask>.MediaPlayer mp, int what, int extra) { if (mp != null) { stop(); release();} return false;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaPlayer.stop()",
    "boolean": 1,
    "context": "} @Override protected void onResume() { setRequestedOrientation(SCREEN_ORIENTATION_LANDSCAPE);onResume();} @Override public boolean onError(MediaPlayer mp, int what, int extra) { if (mp != null) { <mask><mask><mask>stop(); release();} return false;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaPlayer.release()",
    "boolean": 1,
    "context": "super.onResume();} @Override public boolean onError(MediaPlayer mp, int what, int extra) { if (mp != null) { stop(); <mask><mask><mask>release();} return false;} @Override public void onBufferingUpdate(MediaPlayer mp, int percent) { } @Override public void onCompletion(MediaPlayer mp) { } @Override public void onPrepared(MediaPlayer mp) { } @Override public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) { } @Override public void surfaceCreated(SurfaceHolder holder) { } @Override public void surfaceDestroyed(SurfaceHolder holder) { } private void playVideo() { try { mp = new MediaPlayer();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaPlayer",
    "boolean": 1,
    "context": " release();} return false;} @Override public void onBufferingUpdate(<mask><mask><mask>.MediaPlayer mp, int percent) { } @Override public void onCompletion(MediaPlayer mp) { } @Override public void onPrepared(MediaPlayer mp) { } @Override public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) { } @Override public void surfaceCreated(SurfaceHolder holder) { } @Override public void surfaceDestroyed(SurfaceHolder holder) { } private void playVideo() { try { mp = new MediaPlayer(); setOnErrorListener(this); setOnBufferingUpdateListener(this);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaPlayer",
    "boolean": 1,
    "context": " release();} return false;} @Override public void onBufferingUpdate(MediaPlayer mp, int percent) { } @Override public void onCompletion(<mask><mask><mask>.MediaPlayer mp) { } @Override public void onPrepared(MediaPlayer mp) { } @Override public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) { } @Override public void surfaceCreated(SurfaceHolder holder) { } @Override public void surfaceDestroyed(SurfaceHolder holder) { } private void playVideo() { try { mp = new MediaPlayer(); setOnErrorListener(this); setOnBufferingUpdateListener(this);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaPlayer",
    "boolean": 1,
    "context": " release();} return false;} @Override public void onBufferingUpdate(MediaPlayer mp, int percent) { } @Override public void onCompletion(MediaPlayer mp) { } @Override public void onPrepared(<mask><mask><mask>.MediaPlayer mp) { } @Override public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) { } @Override public void surfaceCreated(SurfaceHolder holder) { } @Override public void surfaceDestroyed(SurfaceHolder holder) { } private void playVideo() { try { mp = new MediaPlayer(); setOnErrorListener(this); setOnBufferingUpdateListener(this);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.SurfaceHolder",
    "boolean": 1,
    "context": " release();} return false;} @Override public void onBufferingUpdate(MediaPlayer mp, int percent) { } @Override public void onCompletion(MediaPlayer mp) { } @Override public void onPrepared(MediaPlayer mp) { } @Override public void surfaceChanged(<mask><mask><mask>.SurfaceHolder holder, int format, int width, int height) { } @Override public void surfaceCreated(SurfaceHolder holder) { } @Override public void surfaceDestroyed(SurfaceHolder holder) { } private void playVideo() { try { mp = new MediaPlayer(); setOnErrorListener(this); setOnBufferingUpdateListener(this);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.SurfaceHolder",
    "boolean": 1,
    "context": " release();} return false;} @Override public void onBufferingUpdate(MediaPlayer mp, int percent) { } @Override public void onCompletion(MediaPlayer mp) { } @Override public void onPrepared(MediaPlayer mp) { } @Override public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) { } @Override public void surfaceCreated(<mask><mask><mask>.SurfaceHolder holder) { } @Override public void surfaceDestroyed(SurfaceHolder holder) { } private void playVideo() { try { mp = new MediaPlayer(); setOnErrorListener(this); setOnBufferingUpdateListener(this);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.SurfaceHolder",
    "boolean": 1,
    "context": " release();} return false;} @Override public void onBufferingUpdate(MediaPlayer mp, int percent) { } @Override public void onCompletion(MediaPlayer mp) { } @Override public void onPrepared(MediaPlayer mp) { } @Override public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) { } @Override public void surfaceCreated(SurfaceHolder holder) { } @Override public void surfaceDestroyed(<mask><mask><mask>.SurfaceHolder holder) { } private void playVideo() { try { mp = new MediaPlayer(); setOnErrorListener(this); setOnBufferingUpdateListener(this);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaPlayer()",
    "boolean": 1,
    "context": " release();} return false;} @Override public void onBufferingUpdate(MediaPlayer mp, int percent) { } @Override public void onCompletion(MediaPlayer mp) { } @Override public void onPrepared(MediaPlayer mp) { } @Override public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) { } @Override public void surfaceCreated(SurfaceHolder holder) { } @Override public void surfaceDestroyed(SurfaceHolder holder) { } private void playVideo() { try { mp = new <mask><mask><mask>.MediaPlayer(); setOnErrorListener(this); setOnBufferingUpdateListener(this);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaPlayer.setOnErrorListener()",
    "boolean": 1,
    "context": "} return false;} @Override public void onBufferingUpdate(MediaPlayer mp, int percent) { } @Override public void onCompletion(MediaPlayer mp) { } @Override public void onPrepared(MediaPlayer mp) { } @Override public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) { } @Override public void surfaceCreated(SurfaceHolder holder) { } @Override public void surfaceDestroyed(SurfaceHolder holder) { } private void playVideo() { try { mp = new MediaPlayer(); <mask><mask><mask>setOnErrorListener(this); setOnBufferingUpdateListener(this); setOnCompletionListener(this);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaPlayer.setOnBufferingUpdateListener()",
    "boolean": 1,
    "context": "} @Override public void onBufferingUpdate(MediaPlayer mp, int percent) { } @Override public void onCompletion(MediaPlayer mp) { } @Override public void onPrepared(MediaPlayer mp) { } @Override public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) { } @Override public void surfaceCreated(SurfaceHolder holder) { } @Override public void surfaceDestroyed(SurfaceHolder holder) { } private void playVideo() { try { mp = new MediaPlayer(); setOnErrorListener(this); <mask><mask><mask>setOnBufferingUpdateListener(this); setOnCompletionListener(this); setOnPreparedListener(this);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaPlayer.setOnCompletionListener()",
    "boolean": 1,
    "context": " setOnErrorListener(this); setOnBufferingUpdateListener(this); <mask><mask><mask>setOnCompletionListener(this); setOnPreparedListener(this); setAudioStreamType(2);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaPlayer.setOnPreparedListener()",
    "boolean": 1,
    "context": " setOnBufferingUpdateListener(this); setOnCompletionListener(this); <mask><mask><mask>setOnPreparedListener(this); setAudioStreamType(2); setDisplay getHolder());"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaPlayer.setAudioStreamType()",
    "boolean": 1,
    "context": " setOnCompletionListener(this); setOnPreparedListener(this); <mask><mask><mask>setAudioStreamType(2); setDisplay getHolder());Runnable r = new Runnable() { @Override public void run() { try { setDataSource(mPath);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget.MediaPlayer",
    "truth_type": "android.media.MediaPlayer",
    "full_FQN": "android.media.MediaPlayer.setDisplay",
    "boolean": 0,
    "context": " setOnPreparedListener(this); setAudioStreamType(2); <mask><mask><mask><mask><mask><mask>.setDisplay getHolder());Runnable r = new Runnable() { @Override public void run() { try { setDataSource(mPath);} catch (Exception ex) { e(TAG, getMessage());"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.SurfaceView.getHolder()",
    "boolean": 1,
    "context": " setOnPreparedListener(this); setAudioStreamType(2); setDisplay <mask><mask><mask>getHolder());Runnable r = new Runnable() { @Override public void run() { try { setDataSource(mPath);} catch (Exception ex) { e(TAG, getMessage());"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.e()",
    "boolean": 1,
    "context": " setDisplay getHolder());Runnable r = new Runnable() { @Override public void run() { try { setDataSource(mPath);} catch (Exception ex) { <mask><mask><mask>e(TAG, getMessage());} try { prepare();v(TAG, String + getDuration());"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaPlayer.prepare()",
    "boolean": 1,
    "context": "java.lang.Runnable r = new Runnable() { @Override public void run() { try { setDataSource(mPath);} catch (Exception ex) { e(TAG, getMessage());} try { <mask><mask><mask>prepare();v(TAG, String + getDuration());} catch (IllegalStateException e) { printStackTrace();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.v()",
    "boolean": 1,
    "context": "} catch (Exception ex) { e(TAG, getMessage());} try { prepare();<mask><mask><mask>v(TAG, String + getDuration());} catch (IllegalStateException e) { printStackTrace();} catch (IOException e) { printStackTrace();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaPlayer.getDuration()",
    "boolean": 1,
    "context": "} catch (Exception ex) { e(TAG, getMessage());} try { prepare();v(TAG, String + <mask><mask><mask>getDuration());} catch (IllegalStateException e) { printStackTrace();} catch (IOException e) { printStackTrace();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException",
    "boolean": 1,
    "context": "android.util.Log.v(TAG, String + getDuration());} catch (IllegalStateException e) { printStackTrace();} catch (<mask><mask><mask>.IOException e) { printStackTrace();e(TAG, getMessage());} start();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.e()",
    "boolean": 1,
    "context": "} catch (IllegalStateException e) { printStackTrace();} catch (IOException e) { printStackTrace();<mask><mask><mask>e(TAG, getMessage());} start();} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaPlayer.start()",
    "boolean": 1,
    "context": "} catch (IOException e) { printStackTrace();e(TAG, getMessage());} <mask><mask><mask>start();} };new Thread(r).start();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaPlayer.stop()",
    "boolean": 1,
    "context": "new Thread(r).start();} catch (Exception ex) { String sDummy = toString();if (mp != null) { <mask><mask><mask>stop(); release();} } } private void setDataSource(String path) throws IOException { if (!isNetworkUrl(mPath)) { setDataSource(mPath);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaPlayer.release()",
    "boolean": 1,
    "context": "} catch (Exception ex) { String sDummy = toString();if (mp != null) { stop(); <mask><mask><mask>release();} } } private void setDataSource(String path) throws IOException { if (!isNetworkUrl(mPath)) { setDataSource(mPath);} else { URL url = new URL(mPath);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException",
    "boolean": 1,
    "context": "if (mp != null) { stop(); release();} } } private void setDataSource(String path) throws <mask><mask><mask>.IOException { if (!isNetworkUrl(mPath)) { setDataSource(mPath);} else { URL url = new URL(mPath);URLConnection cn = openConnection();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.net",
    "truth_type": "android.webkit",
    "full_FQN": "android.webkit.URLUtil.isNetworkUrl()",
    "boolean": 0,
    "context": "if (mp != null) { stop(); release();} } } private void setDataSource(String path) throws IOException { if (!<mask><mask><mask>isNetworkUrl(mPath)) { setDataSource(mPath);} else { URL url = new URL(mPath);URLConnection cn = openConnection();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaPlayer.setDataSource()",
    "boolean": 1,
    "context": "if (mp != null) { stop(); release();} } } private void setDataSource(String path) throws IOException { if (!isNetworkUrl(mPath)) { <mask><mask><mask>setDataSource(mPath);} else { URL url = new URL(mPath);URLConnection cn = openConnection();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.URL",
    "boolean": 1,
    "context": " release();} } } private void setDataSource(String path) throws IOException { if (!isNetworkUrl(mPath)) { setDataSource(mPath);} else { <mask><mask><mask>.URL url = new URL(mPath);URLConnection cn = openConnection(); connect();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.URL()",
    "boolean": 1,
    "context": " release();} } } private void setDataSource(String path) throws IOException { if (!isNetworkUrl(mPath)) { setDataSource(mPath);} else { URL url = new <mask><mask><mask>.URL(mPath);URLConnection cn = openConnection(); connect();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.URLConnection",
    "boolean": 1,
    "context": "} } } private void setDataSource(String path) throws IOException { if (!isNetworkUrl(mPath)) { setDataSource(mPath);} else { URL url = new URL(mPath);<mask><mask><mask>.URLConnection cn = openConnection(); connect();InputStream stream = getInputStream();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.URL.openConnection()",
    "boolean": 1,
    "context": "} } } private void setDataSource(String path) throws IOException { if (!isNetworkUrl(mPath)) { setDataSource(mPath);} else { URL url = new URL(mPath);URLConnection cn = <mask><mask><mask>openConnection(); connect();InputStream stream = getInputStream();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.URLConnection.connect()",
    "boolean": 1,
    "context": "} else { URL url = new URL(mPath);URLConnection cn = openConnection(); <mask><mask><mask>connect();InputStream stream = getInputStream();if (stream == null) { throw new RuntimeException(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.InputStream",
    "boolean": 1,
    "context": "java.net.URLConnection cn = openConnection(); connect();<mask><mask><mask>.InputStream stream = getInputStream();if (stream == null) { throw new RuntimeException(String);} File fileTemp = createTempFile(String, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.URLConnection.getInputStream()",
    "boolean": 1,
    "context": "java.net.URLConnection cn = openConnection(); connect();InputStream stream = <mask><mask><mask>getInputStream();if (stream == null) { throw new RuntimeException(String);} File fileTemp = createTempFile(String, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File",
    "boolean": 1,
    "context": "java.io.InputStream stream = getInputStream();if (stream == null) { throw new RuntimeException(String);} <mask><mask><mask>.File fileTemp = createTempFile(String, String);String tempPath = getAbsolutePath();FileOutputStream out = new FileOutputStream(fileTemp);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File.createTempFile()",
    "boolean": 1,
    "context": "java.io.InputStream stream = getInputStream();if (stream == null) { throw new RuntimeException(String);} File fileTemp = <mask><mask><mask>createTempFile(String, String);String tempPath = getAbsolutePath();FileOutputStream out = new FileOutputStream(fileTemp);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File.getAbsolutePath()",
    "boolean": 1,
    "context": "if (stream == null) { throw new RuntimeException(String);} File fileTemp = createTempFile(String, String);String tempPath = <mask><mask><mask>getAbsolutePath();FileOutputStream out = new FileOutputStream(fileTemp);byte[] buf = new byte[128];"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileOutputStream",
    "boolean": 1,
    "context": "} File fileTemp = createTempFile(String, String);String tempPath = getAbsolutePath();<mask><mask><mask>.FileOutputStream out = new FileOutputStream(fileTemp);byte[] buf = new byte[128];do { int numRead = read(buf);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileOutputStream()",
    "boolean": 1,
    "context": "} File fileTemp = createTempFile(String, String);String tempPath = getAbsolutePath();FileOutputStream out = new <mask><mask><mask>.FileOutputStream(fileTemp);byte[] buf = new byte[128];do { int numRead = read(buf);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.InputStream.read()",
    "boolean": 1,
    "context": "java.io.FileOutputStream out = new FileOutputStream(fileTemp);byte[] buf = new byte[128];do { int numRead = <mask><mask><mask>read(buf);if (numRead <= 0) { break;} write(buf, 0, numRead);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileOutputStream.write()",
    "boolean": 1,
    "context": "do { int numRead = read(buf);if (numRead <= 0) { break;} <mask><mask><mask>write(buf, 0, numRead);} while (true ); setDataSource(tempPath);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.media",
    "truth_type": "android.media",
    "full_FQN": "android.media.MediaPlayer.setDataSource()",
    "boolean": 1,
    "context": "} write(buf, 0, numRead);} while (true ); <mask><mask><mask>setDataSource(tempPath);try { close();} catch (Exception ex) { String sDummy = toString();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.InputStream.close()",
    "boolean": 1,
    "context": "} while (true ); setDataSource(tempPath);try { <mask><mask><mask>close();} catch (Exception ex) { String sDummy = toString();} } } private void getPathFromParentDialog() { Intent intent = getIntent();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Intent",
    "boolean": 1,
    "context": "try { close();} catch (Exception ex) { String sDummy = toString();} } } private void getPathFromParentDialog() { <mask><mask><mask>.Intent intent = getIntent();mPath = getExtras().getString(String);} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Intent.getExtras()",
    "boolean": 1,
    "context": "} catch (Exception ex) { String sDummy = toString();} } } private void getPathFromParentDialog() { Intent intent = getIntent();mPath = <mask><mask><mask>getExtras().getString(String);} };"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http",
    "truth_type": "org.apache.http",
    "full_FQN": "org.apache.http.HttpHost",
    "boolean": 1,
    "context": "public class Android43 { public static String main(String[] args) { <mask><mask><mask><mask><mask>.HttpHost target = new HttpHost(String, 80);http HttpGet get = new http HttpGet(String);String result = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache",
    "truth_type": "org.apache",
    "full_FQN": "org.apache.http.HttpHost()",
    "boolean": 1,
    "context": "public class Android43 { public static String main(String[] args) { HttpHost target = new <mask><mask><mask>HttpHost(String, 80);http HttpGet get = new http HttpGet(String);String result = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache",
    "truth_type": "org.apache",
    "full_FQN": "org.apache.http",
    "boolean": 1,
    "context": "public class Android43 { public static String main(String[] args) { HttpHost target = new HttpHost(String, 80);<mask><mask><mask>.http HttpGet get = new http HttpGet(String);String result = null;HttpEntity entity = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http.client.HttpClient.methods",
    "truth_type": "org.apache.http.client.HttpClient.methods",
    "full_FQN": "org.apache.http.client.HttpClient.methods.HttpGet",
    "boolean": 1,
    "context": "public class Android43 { public static String main(String[] args) { HttpHost target = new HttpHost(String, 80);http <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HttpGet get = new http HttpGet(String);String result = null;HttpEntity entity = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache",
    "truth_type": "org.apache",
    "full_FQN": "org.apache.http",
    "boolean": 1,
    "context": "public class Android43 { public static String main(String[] args) { HttpHost target = new HttpHost(String, 80);http HttpGet get = new <mask><mask><mask>.http HttpGet(String);String result = null;HttpEntity entity = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http.client.HttpClient",
    "truth_type": "org.apache.http.client.HttpClient",
    "full_FQN": "org.apache.http.client.HttpClient.methods.HttpGet()",
    "boolean": 1,
    "context": "public class Android43 { public static String main(String[] args) { HttpHost target = new HttpHost(String, 80);http HttpGet get = new http <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>HttpGet(String);String result = null;HttpEntity entity = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http",
    "truth_type": "org.apache.http",
    "full_FQN": "org.apache.http.HttpEntity",
    "boolean": 1,
    "context": "org.apache.http HttpGet get = new http HttpGet(String);String result = null;<mask><mask><mask><mask><mask>.HttpEntity entity = null;http HttpClient client = new impl DefaultHttpClient();try { HttpResponse response = execute(target, get);"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache",
    "truth_type": "org.apache",
    "full_FQN": "org.apache.http",
    "boolean": 1,
    "context": "java.lang.String result = null;HttpEntity entity = null;<mask><mask><mask>.http HttpClient client = new impl DefaultHttpClient();try { HttpResponse response = execute(target, get);entity = getEntity();"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http.client.HttpClient",
    "truth_type": "org.apache.http.client.HttpClient",
    "full_FQN": "org.apache.http.client.HttpClient.HttpClient",
    "boolean": 1,
    "context": "java.lang.String result = null;HttpEntity entity = null;http <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HttpClient client = new impl DefaultHttpClient();try { HttpResponse response = execute(target, get);entity = getEntity();"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http",
    "truth_type": "org.apache.http",
    "full_FQN": "org.apache.http.impl",
    "boolean": 1,
    "context": "java.lang.String result = null;HttpEntity entity = null;http HttpClient client = new <mask><mask><mask><mask><mask>.impl DefaultHttpClient();try { HttpResponse response = execute(target, get);entity = getEntity();"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http.Client",
    "truth_type": "org.apache.http.client",
    "full_FQN": "org.apache.http.client.HttpClient.DefaultHttpClient()",
    "boolean": 0,
    "context": "java.lang.String result = null;HttpEntity entity = null;http HttpClient client = new impl <mask><mask><mask><mask><mask><mask><mask>DefaultHttpClient();try { HttpResponse response = execute(target, get);entity = getEntity();"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http",
    "truth_type": "org.apache.http",
    "full_FQN": "org.apache.http.HttpResponse",
    "boolean": 1,
    "context": "org.apache.http.HttpEntity entity = null;http HttpClient client = new impl DefaultHttpClient();try { <mask><mask><mask><mask><mask>.HttpResponse response = execute(target, get);entity = getEntity();result = toString(entity);"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http.client",
    "truth_type": "org.apache.http.client",
    "full_FQN": "org.apache.http.client.HttpClient.execute()",
    "boolean": 1,
    "context": "org.apache.http.HttpEntity entity = null;http HttpClient client = new impl DefaultHttpClient();try { HttpResponse response = <mask><mask><mask><mask><mask><mask><mask>execute(target, get);entity = getEntity();result = toString(entity);"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http",
    "truth_type": "org.apache.http",
    "full_FQN": "org.apache.http.HttpResponse.getEntity()",
    "boolean": 1,
    "context": "org.apache.http HttpClient client = new impl DefaultHttpClient();try { HttpResponse response = execute(target, get);entity = <mask><mask><mask><mask><mask>getEntity();result = toString(entity);} catch (Exception e) { printStackTrace();"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http.util",
    "truth_type": "org.apache.http.util",
    "full_FQN": "org.apache.http.util.EntityUtils.toString()",
    "boolean": 1,
    "context": "try { HttpResponse response = execute(target, get);entity = getEntity();result = <mask><mask><mask><mask><mask><mask><mask>toString(entity);} catch (Exception e) { printStackTrace();} finally { if (entity != null) { } try { consumeContent();"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http",
    "truth_type": "org.apache.http",
    "full_FQN": "org.apache.http.HttpEntity.consumeContent()",
    "boolean": 1,
    "context": "result = toString(entity);} catch (Exception e) { printStackTrace();} finally { if (entity != null) { } try { <mask><mask><mask><mask><mask>consumeContent();} catch (IOException e) { } } return result;} };"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException",
    "boolean": 1,
    "context": "} catch (Exception e) { printStackTrace();} finally { if (entity != null) { } try { consumeContent();} catch (<mask><mask><mask>.IOException e) { } } return result;} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.Service",
    "boolean": 1,
    "context": "public class Android44 extends <mask><mask><mask>.Service { public volatile Thread runner;@Override public IBinder onBind(Intent intent) { return null;} @Override public void onCreate() { onCreate();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.os",
    "truth_type": "android.os",
    "full_FQN": "android.os.IBinder",
    "boolean": 1,
    "context": "public class Android44 extends Service { public volatile Thread runner;@Override public <mask><mask><mask>.IBinder onBind(Intent intent) { return null;} @Override public void onCreate() { onCreate();startThread();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Intent",
    "boolean": 1,
    "context": "public class Android44 extends Service { public volatile Thread runner;@Override public IBinder onBind(<mask><mask><mask>.Intent intent) { return null;} @Override public void onCreate() { onCreate();startThread();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.v()",
    "boolean": 1,
    "context": "startThread();} @Override public void onDestroy() { onDestroy();<mask><mask><mask>v(String, String);stopThread();} public synchronized void startThread() { if (runner == null) { v(String, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.v()",
    "boolean": 1,
    "context": "android.util.Log.v(String, String);stopThread();} public synchronized void startThread() { if (runner == null) { <mask><mask><mask>v(String, String); start();} } public synchronized void stopThread() { if (runner != null) { v(String, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.v()",
    "boolean": 1,
    "context": "} public synchronized void startThread() { if (runner == null) { v(String, String); start();} } public synchronized void stopThread() { if (runner != null) { <mask><mask><mask>v(String, String);Thread moribund = runner;runner = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "java.lang",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.v()",
    "boolean": 0,
    "context": "runner = null; interrupt();<mask><mask><mask>v(String, String + isInterrupted());} } };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.Activity",
    "boolean": 1,
    "context": "public class Android45 extends <mask><mask><mask>.Activity { private static final String TAG = String;@Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);IntentFilter intentFilter = new IntentFilter();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.os",
    "full_FQN": "android.os.Bundle",
    "boolean": 0,
    "context": "public class Android45 extends Activity { private static final String TAG = String;@Override public void onCreate(<mask><mask><mask>.Bundle savedInstanceState) { onCreate(savedInstanceState);IntentFilter intentFilter = new IntentFilter();addAction(ACTION_SEND);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.IntentFilter",
    "boolean": 1,
    "context": "public class Android45 extends Activity { private static final String TAG = String;@Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);<mask><mask><mask>.IntentFilter intentFilter = new IntentFilter();addAction(ACTION_SEND);addCategory(CATEGORY_DEFAULT);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.IntentFilter()",
    "boolean": 1,
    "context": "public class Android45 extends Activity { private static final String TAG = String;@Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);IntentFilter intentFilter = new <mask><mask><mask>.IntentFilter();addAction(ACTION_SEND);addCategory(CATEGORY_DEFAULT);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content.IntentFilter",
    "truth_type": "android.content.IntentFilter",
    "full_FQN": "android.content.IntentFilter.MalformedMimeTypeException",
    "boolean": 1,
    "context": "intentFilter.addCategory(CATEGORY_DEFAULT);try { addDataType(String);} catch (<mask><mask><mask><mask><mask><mask><mask>.MalformedMimeTypeException e) { e(TAG, toString());} Intent x = registerReceiver(new BroadcastReceiver() { public void onReceive(Context context, Intent intent) { d(TAG, String + intent);setComponent(new ComponentName(context, Uploader));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.e()",
    "boolean": 1,
    "context": "intentFilter.addCategory(CATEGORY_DEFAULT);try { addDataType(String);} catch (MalformedMimeTypeException e) { <mask><mask><mask>e(TAG, toString());} Intent x = registerReceiver(new BroadcastReceiver() { public void onReceive(Context context, Intent intent) { d(TAG, String + intent);setComponent(new ComponentName(context, Uploader));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content.IntentFilter",
    "truth_type": "android.content.IntentFilter",
    "full_FQN": "android.content.IntentFilter.MalformedMimeTypeException.toString()",
    "boolean": 1,
    "context": "intentFilter.addCategory(CATEGORY_DEFAULT);try { addDataType(String);} catch (MalformedMimeTypeException e) { e(TAG, <mask><mask><mask><mask><mask><mask><mask>toString());} Intent x = registerReceiver(new BroadcastReceiver() { public void onReceive(Context context, Intent intent) { d(TAG, String + intent);setComponent(new ComponentName(context, Uploader));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.d()",
    "boolean": 1,
    "context": "try { addDataType(String);} catch (MalformedMimeTypeException e) { e(TAG, toString());} Intent x = registerReceiver(new BroadcastReceiver() { public void onReceive(Context context, Intent intent) { <mask><mask><mask>d(TAG, String + intent);setComponent(new ComponentName(context, Uploader));startActivity(intent);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.i()",
    "boolean": 1,
    "context": "startActivity(intent);} }, intentFilter);if (x == null) { <mask><mask><mask>i(TAG, String);} else { i(TAG, String);} } class Uploader {} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.i()",
    "boolean": 1,
    "context": "} }, intentFilter);if (x == null) { i(TAG, String);} else { <mask><mask><mask>i(TAG, String);} } class Uploader {} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.Activity",
    "boolean": 1,
    "context": "// ID = 1254832 public class Android46 extends <mask><mask><mask>.Activity { private EditText mTextSearch;@Override protected void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.EditText",
    "boolean": 1,
    "context": "// ID = 1254832 public class Android46 extends Activity { private <mask><mask><mask>.EditText mTextSearch;@Override protected void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "android.os",
    "full_FQN": "android.os.Bundle",
    "boolean": 0,
    "context": "// ID = 1254832 public class Android46 extends Activity { private EditText mTextSearch;@Override protected void onCreate(<mask><mask><mask>.Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);mTextSearch = ((EditText) (findViewById(background)));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.EditText",
    "boolean": 1,
    "context": "@Override protected void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);mTextSearch = ((<mask><mask><mask>.EditText) (findViewById(background)));Button searchButton = ((Button) (findViewById(100))); setOnClickListener(new OnClickListener() { public void onClick(View v) { Intent data = new Intent();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.Button",
    "boolean": 1,
    "context": "setContentView(activity_list_item);mTextSearch = ((EditText) (findViewById(background)));<mask><mask><mask>.Button searchButton = ((Button) (findViewById(100))); setOnClickListener(new OnClickListener() { public void onClick(View v) { Intent data = new Intent(); putExtra(String, getText().toString());"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.Button",
    "boolean": 1,
    "context": "setContentView(activity_list_item);mTextSearch = ((EditText) (findViewById(background)));Button searchButton = ((<mask><mask><mask>.Button) (findViewById(100))); setOnClickListener(new OnClickListener() { public void onClick(View v) { Intent data = new Intent(); putExtra(String, getText().toString());"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.Button.setOnClickListener()",
    "boolean": 1,
    "context": "mTextSearch = ((EditText) (findViewById(background)));Button searchButton = ((Button) (findViewById(100))); <mask><mask><mask>setOnClickListener(new OnClickListener() { public void onClick(View v) { Intent data = new Intent(); putExtra(String, getText().toString());setResult(RESULT_OK, data);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.View.OnClickListener()",
    "boolean": 1,
    "context": "mTextSearch = ((EditText) (findViewById(background)));Button searchButton = ((Button) (findViewById(100))); setOnClickListener(new <mask><mask><mask>OnClickListener() { public void onClick(View v) { Intent data = new Intent(); putExtra(String, getText().toString());setResult(RESULT_OK, data);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.View",
    "boolean": 1,
    "context": "mTextSearch = ((EditText) (findViewById(background)));Button searchButton = ((Button) (findViewById(100))); setOnClickListener(new OnClickListener() { public void onClick(<mask><mask><mask>.View v) { Intent data = new Intent(); putExtra(String, getText().toString());setResult(RESULT_OK, data);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Intent",
    "boolean": 1,
    "context": "mTextSearch = ((EditText) (findViewById(background)));Button searchButton = ((Button) (findViewById(100))); setOnClickListener(new OnClickListener() { public void onClick(View v) { <mask><mask><mask>.Intent data = new Intent(); putExtra(String, getText().toString());setResult(RESULT_OK, data);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Intent()",
    "boolean": 1,
    "context": "mTextSearch = ((EditText) (findViewById(background)));Button searchButton = ((Button) (findViewById(100))); setOnClickListener(new OnClickListener() { public void onClick(View v) { Intent data = new <mask><mask><mask>.Intent(); putExtra(String, getText().toString());setResult(RESULT_OK, data);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Intent.putExtra()",
    "boolean": 1,
    "context": "android.widget.Button searchButton = ((Button) (findViewById(100))); setOnClickListener(new OnClickListener() { public void onClick(View v) { Intent data = new Intent(); <mask><mask><mask>putExtra(String, getText().toString());setResult(RESULT_OK, data);finish();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.EditText.getText()",
    "boolean": 1,
    "context": "android.widget.Button searchButton = ((Button) (findViewById(100))); setOnClickListener(new OnClickListener() { public void onClick(View v) { Intent data = new Intent(); putExtra(String, <mask><mask><mask>getText().toString());setResult(RESULT_OK, data);finish();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "android.os",
    "full_FQN": "android.os.Bundle",
    "boolean": 0,
    "context": "finish();} });} @Override protected void onSaveInstanceState(<mask><mask><mask>.Bundle outState) { onSaveInstanceState(outState);} @Override protected void onPause() { onPause();} @Override protected void onResume() { onResume();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.Activity",
    "boolean": 1,
    "context": "public class Android47 extends <mask><mask><mask>.Activity { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);impl DefaultHttpClient client = new impl DefaultHttpClient();"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "android.os",
    "full_FQN": "android.os.Bundle",
    "boolean": 0,
    "context": "public class Android47 extends Activity { @Override public void onCreate(<mask><mask><mask>.Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);impl DefaultHttpClient client = new impl DefaultHttpClient();"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http",
    "truth_type": "org.apache.http",
    "full_FQN": "org.apache.http.impl",
    "boolean": 1,
    "context": "public class Android47 extends Activity { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);<mask><mask><mask><mask><mask>.impl DefaultHttpClient client = new impl DefaultHttpClient();http HttpGet method = new http HttpGet(String);try { execute(method);"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http.impl.client.DefaultHttpClient",
    "truth_type": "org.apache.http.impl.client.DefaultHttpClient",
    "full_FQN": "org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient",
    "boolean": 1,
    "context": "public class Android47 extends Activity { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);impl <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.DefaultHttpClient client = new impl DefaultHttpClient();http HttpGet method = new http HttpGet(String);try { execute(method);"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http",
    "truth_type": "org.apache.http",
    "full_FQN": "org.apache.http.impl",
    "boolean": 1,
    "context": "public class Android47 extends Activity { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);impl DefaultHttpClient client = new <mask><mask><mask><mask><mask>.impl DefaultHttpClient();http HttpGet method = new http HttpGet(String);try { execute(method);"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http.impl.client",
    "truth_type": "org.apache.http.impl.client",
    "full_FQN": "org.apache.http.impl.client.DefaultHttpClient.DefaultHttpClient()",
    "boolean": 1,
    "context": "public class Android47 extends Activity { @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);setContentView(activity_list_item);impl DefaultHttpClient client = new impl <mask><mask><mask><mask><mask><mask><mask><mask><mask>DefaultHttpClient();http HttpGet method = new http HttpGet(String);try { execute(method);"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache",
    "truth_type": "org.apache",
    "full_FQN": "org.apache.http",
    "boolean": 1,
    "context": "setContentView(activity_list_item);impl DefaultHttpClient client = new impl DefaultHttpClient();<mask><mask><mask>.http HttpGet method = new http HttpGet(String);try { execute(method);TextView t = ((TextView) (findViewById(background)));"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http.impl.client.DefaultHttpClient.methods",
    "truth_type": "org.apache.http.impl.client.DefaultHttpClient.methods",
    "full_FQN": "org.apache.http.impl.client.DefaultHttpClient.methods.HttpGet",
    "boolean": 1,
    "context": "setContentView(activity_list_item);impl DefaultHttpClient client = new impl DefaultHttpClient();http <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HttpGet method = new http HttpGet(String);try { execute(method);TextView t = ((TextView) (findViewById(background)));"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache",
    "truth_type": "org.apache",
    "full_FQN": "org.apache.http",
    "boolean": 1,
    "context": "setContentView(activity_list_item);impl DefaultHttpClient client = new impl DefaultHttpClient();http HttpGet method = new <mask><mask><mask>.http HttpGet(String);try { execute(method);TextView t = ((TextView) (findViewById(background)));"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http.impl.client.DefaultHttpClient",
    "truth_type": "org.apache.http.impl.client.DefaultHttpClient",
    "full_FQN": "org.apache.http.impl.client.DefaultHttpClient.methods.HttpGet()",
    "boolean": 1,
    "context": "setContentView(activity_list_item);impl DefaultHttpClient client = new impl DefaultHttpClient();http HttpGet method = new http <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>HttpGet(String);try { execute(method);TextView t = ((TextView) (findViewById(background)));"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http.impl.client",
    "truth_type": "org.apache.http.impl.client",
    "full_FQN": "org.apache.http.impl.client.DefaultHttpClient.execute()",
    "boolean": 1,
    "context": "org.apache.http.impl DefaultHttpClient client = new impl DefaultHttpClient();http HttpGet method = new http HttpGet(String);try { <mask><mask><mask><mask><mask><mask><mask><mask><mask>execute(method);TextView t = ((TextView) (findViewById(background))); setText(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView",
    "boolean": 1,
    "context": "org.apache.http HttpGet method = new http HttpGet(String);try { execute(method);<mask><mask><mask>.TextView t = ((TextView) (findViewById(background))); setText(String);} catch (http ClientProtocolException e) { TextView t = ((TextView) (findViewById(background)));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView",
    "boolean": 1,
    "context": "org.apache.http HttpGet method = new http HttpGet(String);try { execute(method);TextView t = ((<mask><mask><mask>.TextView) (findViewById(background))); setText(String);} catch (http ClientProtocolException e) { TextView t = ((TextView) (findViewById(background)));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView.setText()",
    "boolean": 1,
    "context": "try { execute(method);TextView t = ((TextView) (findViewById(background))); <mask><mask><mask>setText(String);} catch (http ClientProtocolException e) { TextView t = ((TextView) (findViewById(background))); setText getMessage());"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache",
    "truth_type": "org.apache",
    "full_FQN": "org.apache.http",
    "boolean": 1,
    "context": "android.widget.TextView t = ((TextView) (findViewById(background))); setText(String);} catch (<mask><mask><mask>.http ClientProtocolException e) { TextView t = ((TextView) (findViewById(background))); setText getMessage());} catch (IOException e) { TextView t = ((TextView) (findViewById(background)));"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http.client.HttpClient.HttpClient",
    "truth_type": "org.apache.http.impl.client.DefaultHttpClient",
    "full_FQN": "org.apache.http.impl.client.DefaultHttpClient.ClientProtocolException",
    "boolean": 0,
    "context": "android.widget.TextView t = ((TextView) (findViewById(background))); setText(String);} catch (http <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ClientProtocolException e) { TextView t = ((TextView) (findViewById(background))); setText getMessage());} catch (IOException e) { TextView t = ((TextView) (findViewById(background)));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView",
    "boolean": 1,
    "context": "android.widget.TextView t = ((TextView) (findViewById(background))); setText(String);} catch (http ClientProtocolException e) { <mask><mask><mask>.TextView t = ((TextView) (findViewById(background))); setText getMessage());} catch (IOException e) { TextView t = ((TextView) (findViewById(background)));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView",
    "boolean": 1,
    "context": "android.widget.TextView t = ((TextView) (findViewById(background))); setText(String);} catch (http ClientProtocolException e) { TextView t = ((<mask><mask><mask>.TextView) (findViewById(background))); setText getMessage());} catch (IOException e) { TextView t = ((TextView) (findViewById(background)));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget.TextView",
    "truth_type": "android.widget.TextView",
    "full_FQN": "android.widget.TextView.setText",
    "boolean": 1,
    "context": " setText(String);} catch (http ClientProtocolException e) { TextView t = ((TextView) (findViewById(background))); <mask><mask><mask><mask><mask><mask>.setText getMessage());} catch (IOException e) { TextView t = ((TextView) (findViewById(background))); setText getMessage());"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http.client",
    "truth_type": "org.apache.http.client",
    "full_FQN": "org.apache.http.client.ClientProtocolException.getMessage()",
    "boolean": 1,
    "context": " setText(String);} catch (http ClientProtocolException e) { TextView t = ((TextView) (findViewById(background))); setText <mask><mask><mask><mask><mask><mask><mask>getMessage());} catch (IOException e) { TextView t = ((TextView) (findViewById(background))); setText getMessage());"
  },
  {
    "lib_name": "android",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException",
    "boolean": 1,
    "context": "} catch (http ClientProtocolException e) { TextView t = ((TextView) (findViewById(background))); setText getMessage());} catch (<mask><mask><mask>.IOException e) { TextView t = ((TextView) (findViewById(background))); setText getMessage());} } };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView",
    "boolean": 1,
    "context": "} catch (http ClientProtocolException e) { TextView t = ((TextView) (findViewById(background))); setText getMessage());} catch (IOException e) { <mask><mask><mask>.TextView t = ((TextView) (findViewById(background))); setText getMessage());} } };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView",
    "boolean": 1,
    "context": "} catch (http ClientProtocolException e) { TextView t = ((TextView) (findViewById(background))); setText getMessage());} catch (IOException e) { TextView t = ((<mask><mask><mask>.TextView) (findViewById(background))); setText getMessage());} } };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget.TextView",
    "truth_type": "android.widget.TextView",
    "full_FQN": "android.widget.TextView.setText",
    "boolean": 1,
    "context": " setText getMessage());} catch (IOException e) { TextView t = ((TextView) (findViewById(background))); <mask><mask><mask><mask><mask><mask>.setText getMessage());} } };"
  },
  {
    "lib_name": "android",
    "pred_type": "org.apache.http.client",
    "truth_type": "org.apache.http.client",
    "full_FQN": "org.apache.http.client.ClientProtocolException.getMessage()",
    "boolean": 1,
    "context": " setText getMessage());} catch (IOException e) { TextView t = ((TextView) (findViewById(background))); setText <mask><mask><mask><mask><mask><mask><mask>getMessage());} } };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.hardware",
    "truth_type": "android.hardware",
    "full_FQN": "android.hardware.Camera",
    "boolean": 1,
    "context": "// ID = 1305388 public class Android48 { public void captureImage() { <mask><mask><mask><mask>.Camera camera = null;Parameters params = getParameters(); setParameters(params);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.hardware.Camera",
    "truth_type": "android.hardware.Camera",
    "full_FQN": "android.hardware.Camera.Parameters",
    "boolean": 1,
    "context": "// ID = 1305388 public class Android48 { public void captureImage() { Camera camera = null;<mask><mask><mask><mask><mask><mask>.Parameters params = getParameters(); setParameters(params);PictureCallback jpgCallback = new PictureCallback() { public void onPictureTaken(byte[] data, Camera camera) { Context c = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.hardware",
    "truth_type": "android.hardware",
    "full_FQN": "android.hardware.Camera.getParameters()",
    "boolean": 1,
    "context": "// ID = 1305388 public class Android48 { public void captureImage() { Camera camera = null;Parameters params = <mask><mask><mask><mask>getParameters(); setParameters(params);PictureCallback jpgCallback = new PictureCallback() { public void onPictureTaken(byte[] data, Camera camera) { Context c = null;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.hardware",
    "truth_type": "android.hardware",
    "full_FQN": "android.hardware.Camera.setParameters()",
    "boolean": 1,
    "context": "// ID = 1305388 public class Android48 { public void captureImage() { Camera camera = null;Parameters params = getParameters(); <mask><mask><mask><mask>setParameters(params);PictureCallback jpgCallback = new PictureCallback() { public void onPictureTaken(byte[] data, Camera camera) { Context c = null;try { Dialog d = new Dialog(c);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.hardware.Camera",
    "truth_type": "android.hardware.Camera",
    "full_FQN": "android.hardware.Camera.PictureCallback",
    "boolean": 1,
    "context": "android.hardware.Camera.Parameters params = getParameters(); setParameters(params);<mask><mask><mask><mask><mask><mask>.PictureCallback jpgCallback = new PictureCallback() { public void onPictureTaken(byte[] data, Camera camera) { Context c = null;try { Dialog d = new Dialog(c); setContentView(0x7f030000);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.hardware",
    "truth_type": "android.hardware",
    "full_FQN": "android.hardware.Camera.PictureCallback()",
    "boolean": 1,
    "context": "android.hardware.Camera.Parameters params = getParameters(); setParameters(params);PictureCallback jpgCallback = new <mask><mask><mask><mask>PictureCallback() { public void onPictureTaken(byte[] data, Camera camera) { Context c = null;try { Dialog d = new Dialog(c); setContentView(0x7f030000);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.hardware",
    "truth_type": "android.hardware",
    "full_FQN": "android.hardware.Camera",
    "boolean": 1,
    "context": "android.hardware.Camera.Parameters params = getParameters(); setParameters(params);PictureCallback jpgCallback = new PictureCallback() { public void onPictureTaken(byte[] data, <mask><mask><mask><mask>.Camera camera) { Context c = null;try { Dialog d = new Dialog(c); setContentView(0x7f030000);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Context",
    "boolean": 1,
    "context": "android.hardware.Camera.Parameters params = getParameters(); setParameters(params);PictureCallback jpgCallback = new PictureCallback() { public void onPictureTaken(byte[] data, Camera camera) { <mask><mask><mask>.Context c = null;try { Dialog d = new Dialog(c); setContentView(0x7f030000);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.Dialog",
    "boolean": 1,
    "context": " setParameters(params);PictureCallback jpgCallback = new PictureCallback() { public void onPictureTaken(byte[] data, Camera camera) { Context c = null;try { <mask><mask><mask>.Dialog d = new Dialog(c); setContentView(0x7f030000);Options opts = new Options();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.Dialog()",
    "boolean": 1,
    "context": " setParameters(params);PictureCallback jpgCallback = new PictureCallback() { public void onPictureTaken(byte[] data, Camera camera) { Context c = null;try { Dialog d = new <mask><mask><mask>.Dialog(c); setContentView(0x7f030000);Options opts = new Options();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.Dialog.setContentView()",
    "boolean": 1,
    "context": "android.hardware.Camera.PictureCallback jpgCallback = new PictureCallback() { public void onPictureTaken(byte[] data, Camera camera) { Context c = null;try { Dialog d = new Dialog(c); <mask><mask><mask>setContentView(0x7f030000);Options opts = new Options();Bitmap bitmap = decodeByteArray(data, 0, length, opts);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.graphics.BitmapFactory",
    "truth_type": "android.graphics.BitmapFactory",
    "full_FQN": "android.graphics.BitmapFactory.Options",
    "boolean": 1,
    "context": "try { Dialog d = new Dialog(c); setContentView(0x7f030000);<mask><mask><mask><mask><mask><mask><mask><mask>.Options opts = new Options();Bitmap bitmap = decodeByteArray(data, 0, length, opts);TextView tv = ((TextView)  findViewById(0x7f050001)));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.graphics",
    "truth_type": "android.graphics",
    "full_FQN": "android.graphics.BitmapFactory.Options()",
    "boolean": 1,
    "context": "try { Dialog d = new Dialog(c); setContentView(0x7f030000);Options opts = new <mask><mask><mask><mask>Options();Bitmap bitmap = decodeByteArray(data, 0, length, opts);TextView tv = ((TextView)  findViewById(0x7f050001)));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.graphics",
    "truth_type": "android.graphics",
    "full_FQN": "android.graphics.Bitmap",
    "boolean": 1,
    "context": " setContentView(0x7f030000);Options opts = new Options();<mask><mask><mask><mask>.Bitmap bitmap = decodeByteArray(data, 0, length, opts);TextView tv = ((TextView)  findViewById(0x7f050001)));ImageView i = ((ImageView)  findViewById(0x7f050000)));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.graphics",
    "truth_type": "android.graphics",
    "full_FQN": "android.graphics.BitmapFactory.decodeByteArray()",
    "boolean": 1,
    "context": " setContentView(0x7f030000);Options opts = new Options();Bitmap bitmap = <mask><mask><mask><mask>decodeByteArray(data, 0, length, opts);TextView tv = ((TextView)  findViewById(0x7f050001)));ImageView i = ((ImageView)  findViewById(0x7f050000)));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView",
    "boolean": 1,
    "context": "android.graphics.BitmapFactory.Options opts = new Options();Bitmap bitmap = decodeByteArray(data, 0, length, opts);<mask><mask><mask>.TextView tv = ((TextView)  findViewById(0x7f050001)));ImageView i = ((ImageView)  findViewById(0x7f050000))); setImageBitmap(bitmap);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView",
    "boolean": 1,
    "context": "android.graphics.BitmapFactory.Options opts = new Options();Bitmap bitmap = decodeByteArray(data, 0, length, opts);TextView tv = ((<mask><mask><mask>.TextView)  findViewById(0x7f050001)));ImageView i = ((ImageView)  findViewById(0x7f050000))); setImageBitmap(bitmap);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.app",
    "full_FQN": "android.app.Dialog.findViewById()",
    "boolean": 0,
    "context": "android.graphics.BitmapFactory.Options opts = new Options();Bitmap bitmap = decodeByteArray(data, 0, length, opts);TextView tv = ((TextView)  <mask><mask><mask>findViewById(0x7f050001)));ImageView i = ((ImageView)  findViewById(0x7f050000))); setImageBitmap(bitmap);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ImageView",
    "boolean": 1,
    "context": "android.graphics.Bitmap bitmap = decodeByteArray(data, 0, length, opts);TextView tv = ((TextView)  findViewById(0x7f050001)));<mask><mask><mask>.ImageView i = ((ImageView)  findViewById(0x7f050000))); setImageBitmap(bitmap); setText(String + length);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ImageView",
    "boolean": 1,
    "context": "android.graphics.Bitmap bitmap = decodeByteArray(data, 0, length, opts);TextView tv = ((TextView)  findViewById(0x7f050001)));ImageView i = ((<mask><mask><mask>.ImageView)  findViewById(0x7f050000))); setImageBitmap(bitmap); setText(String + length);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.Dialog.findViewById()",
    "boolean": 1,
    "context": "android.graphics.Bitmap bitmap = decodeByteArray(data, 0, length, opts);TextView tv = ((TextView)  findViewById(0x7f050001)));ImageView i = ((ImageView)  <mask><mask><mask>findViewById(0x7f050000))); setImageBitmap(bitmap); setText(String + length);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.ImageView.setImageBitmap()",
    "boolean": 1,
    "context": "android.widget.TextView tv = ((TextView)  findViewById(0x7f050001)));ImageView i = ((ImageView)  findViewById(0x7f050000))); <mask><mask><mask>setImageBitmap(bitmap); setText(String + length); show();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView.setText()",
    "boolean": 1,
    "context": "android.widget.ImageView i = ((ImageView)  findViewById(0x7f050000))); setImageBitmap(bitmap); <mask><mask><mask>setText(String + length); show();} catch (Exception e) { Builder alert = new Builder(c);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.Dialog.show()",
    "boolean": 1,
    "context": " setImageBitmap(bitmap); setText(String + length); <mask><mask><mask>show();} catch (Exception e) { Builder alert = new Builder(c); AlertDialog$setMessage(String + getMessage());"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app.AlertDialog",
    "truth_type": "android.app.AlertDialog",
    "full_FQN": "android.app.AlertDialog.Builder",
    "boolean": 1,
    "context": " setText(String + length); show();} catch (Exception e) { <mask><mask><mask><mask><mask><mask>.Builder alert = new Builder(c); AlertDialog$setMessage(String + getMessage()); AlertDialog$create();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.AlertDialog.Builder()",
    "boolean": 1,
    "context": " setText(String + length); show();} catch (Exception e) { Builder alert = new <mask><mask><mask>Builder(c); AlertDialog$setMessage(String + getMessage()); AlertDialog$create();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.AlertDialog",
    "boolean": 1,
    "context": " show();} catch (Exception e) { Builder alert = new Builder(c); <mask><mask><mask>.AlertDialog$setMessage(String + getMessage()); AlertDialog$create(); AlertDialog$show();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.AlertDialog",
    "boolean": 1,
    "context": "} catch (Exception e) { Builder alert = new Builder(c); AlertDialog$setMessage(String + getMessage()); <mask><mask><mask>.AlertDialog$create(); AlertDialog$show();} } };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.AlertDialog",
    "boolean": 1,
    "context": " AlertDialog$setMessage(String + getMessage()); AlertDialog$create(); <mask><mask><mask>.AlertDialog$show();} } }; takePicture(null, null, jpgCallback);"
  },
  {
    "lib_name": "android",
    "pred_type": "android..raphics",
    "truth_type": "android.hardware",
    "full_FQN": "android.hardware.Camera.takePicture()",
    "boolean": 0,
    "context": " AlertDialog$show();} } }; <mask><mask><mask><mask>takePicture(null, null, jpgCallback);} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.LinearLayout",
    "boolean": 1,
    "context": "public class Android49 extends <mask><mask><mask>.LinearLayout { public Android49(Context context, AttributeSet attrs) { super(context, attrs);((LayoutInflater)  getSystemService(LAYOUT_INFLATER_SERVICE))).inflate(activity_list_item, this, true);setGravity(CENTER);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Context",
    "boolean": 1,
    "context": "public class Android49 extends LinearLayout { public Android49(<mask><mask><mask>.Context context, AttributeSet attrs) { super(context, attrs);((LayoutInflater)  getSystemService(LAYOUT_INFLATER_SERVICE))).inflate(activity_list_item, this, true);setGravity(CENTER);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.AttributeSet",
    "boolean": 1,
    "context": "public class Android49 extends LinearLayout { public Android49(Context context, <mask><mask><mask>.AttributeSet attrs) { super(context, attrs);((LayoutInflater)  getSystemService(LAYOUT_INFLATER_SERVICE))).inflate(activity_list_item, this, true);setGravity(CENTER);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view",
    "truth_type": "android.view",
    "full_FQN": "android.view.LayoutInflater",
    "boolean": 1,
    "context": "public class Android49 extends LinearLayout { public Android49(Context context, AttributeSet attrs) { super(context, attrs);((<mask><mask><mask>.LayoutInflater)  getSystemService(LAYOUT_INFLATER_SERVICE))).inflate(activity_list_item, this, true);setGravity(CENTER);} public Android49(Context context) { this(context, null);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Context.getSystemService()",
    "boolean": 1,
    "context": "public class Android49 extends LinearLayout { public Android49(Context context, AttributeSet attrs) { super(context, attrs);((LayoutInflater)  <mask><mask><mask>getSystemService(LAYOUT_INFLATER_SERVICE))).inflate(activity_list_item, this, true);setGravity(CENTER);} public Android49(Context context) { this(context, null);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view.Context",
    "truth_type": "android.content.Context",
    "full_FQN": "android.content.Context.LAYOUT_INFLATER_SERVICE",
    "boolean": 0,
    "context": "public class Android49 extends LinearLayout { public Android49(Context context, AttributeSet attrs) { super(context, attrs);((LayoutInflater)  getSystemService(<mask><mask><mask><mask><mask>.LAYOUT_INFLATER_SERVICE))).inflate(activity_list_item, this, true);setGravity(CENTER);} public Android49(Context context) { this(context, null);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.content",
    "truth_type": "android.content",
    "full_FQN": "android.content.Context",
    "boolean": 1,
    "context": "((LayoutInflater)  getSystemService(LAYOUT_INFLATER_SERVICE))).inflate(activity_list_item, this, true);setGravity(CENTER);} public Android49(<mask><mask><mask>.Context context) { this(context, null);} };"
  },
  {
    "lib_name": "android",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.Activity",
    "boolean": 1,
    "context": "public class Android50 extends <mask><mask><mask>.Activity { public static final String tag = String;@Override public void onCreate(Bundle icicle) { onCreate(icicle);setContentView(activity_list_item);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.util",
    "truth_type": "android.os",
    "full_FQN": "android.os.Bundle",
    "boolean": 0,
    "context": "public class Android50 extends Activity { public static final String tag = String;@Override public void onCreate(<mask><mask><mask>.Bundle icicle) { onCreate(icicle);setContentView(activity_list_item);final EditText mealpricefield = ((EditText) (findViewById(100)));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.EditText",
    "boolean": 1,
    "context": "@Override public void onCreate(Bundle icicle) { onCreate(icicle);setContentView(activity_list_item);final <mask><mask><mask>.EditText mealpricefield = ((EditText) (findViewById(100)));final TextView answerfield = ((TextView) (findViewById(background)));final Button button = ((Button) (findViewById(101)));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.EditText",
    "boolean": 1,
    "context": "@Override public void onCreate(Bundle icicle) { onCreate(icicle);setContentView(activity_list_item);final EditText mealpricefield = ((<mask><mask><mask>.EditText) (findViewById(100)));final TextView answerfield = ((TextView) (findViewById(background)));final Button button = ((Button) (findViewById(101)));"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView",
    "boolean": 1,
    "context": "setContentView(activity_list_item);final EditText mealpricefield = ((EditText) (findViewById(100)));final <mask><mask><mask>.TextView answerfield = ((TextView) (findViewById(background)));final Button button = ((Button) (findViewById(101))); setOnClickListener(new OnClickListener() { @Override public void onClick(android View view) { } public void onClick(View v) { try { i(tag, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView",
    "boolean": 1,
    "context": "setContentView(activity_list_item);final EditText mealpricefield = ((EditText) (findViewById(100)));final TextView answerfield = ((<mask><mask><mask>.TextView) (findViewById(background)));final Button button = ((Button) (findViewById(101))); setOnClickListener(new OnClickListener() { @Override public void onClick(android View view) { } public void onClick(View v) { try { i(tag, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.Button",
    "boolean": 1,
    "context": "final EditText mealpricefield = ((EditText) (findViewById(100)));final TextView answerfield = ((TextView) (findViewById(background)));final <mask><mask><mask>.Button button = ((Button) (findViewById(101))); setOnClickListener(new OnClickListener() { @Override public void onClick(android View view) { } public void onClick(View v) { try { i(tag, String);String mealprice = getText().toString();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.Button",
    "boolean": 1,
    "context": "final EditText mealpricefield = ((EditText) (findViewById(100)));final TextView answerfield = ((TextView) (findViewById(background)));final Button button = ((<mask><mask><mask>.Button) (findViewById(101))); setOnClickListener(new OnClickListener() { @Override public void onClick(android View view) { } public void onClick(View v) { try { i(tag, String);String mealprice = getText().toString();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.Button.setOnClickListener()",
    "boolean": 1,
    "context": "final TextView answerfield = ((TextView) (findViewById(background)));final Button button = ((Button) (findViewById(101))); <mask><mask><mask>setOnClickListener(new OnClickListener() { @Override public void onClick(android View view) { } public void onClick(View v) { try { i(tag, String);String mealprice = getText().toString();i(tag, (String + mealprice) + String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.Button.OnClickListener()",
    "boolean": 1,
    "context": "final TextView answerfield = ((TextView) (findViewById(background)));final Button button = ((Button) (findViewById(101))); setOnClickListener(new <mask><mask><mask>OnClickListener() { @Override public void onClick(android View view) { } public void onClick(View v) { try { i(tag, String);String mealprice = getText().toString();i(tag, (String + mealprice) + String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.view.View",
    "truth_type": "android.view.View",
    "full_FQN": "android.view.View.View",
    "boolean": 1,
    "context": "final TextView answerfield = ((TextView) (findViewById(background)));final Button button = ((Button) (findViewById(101))); setOnClickListener(new OnClickListener() { @Override public void onClick(android <mask><mask><mask><mask><mask>.View view) { } public void onClick(View v) { try { i(tag, String);String mealprice = getText().toString();i(tag, (String + mealprice) + String);"
  },
  {
    "lib_name": "android",
    "pred_type": "com.android.internal.text",
    "truth_type": "javax.swing.text",
    "full_FQN": "javax.swing.text.View",
    "boolean": 0,
    "context": "final TextView answerfield = ((TextView) (findViewById(background)));final Button button = ((Button) (findViewById(101))); setOnClickListener(new OnClickListener() { @Override public void onClick(android View view) { } public void onClick(<mask><mask><mask><mask><mask><mask><mask>.View v) { try { i(tag, String);String mealprice = getText().toString();i(tag, (String + mealprice) + String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.i()",
    "boolean": 1,
    "context": "final TextView answerfield = ((TextView) (findViewById(background)));final Button button = ((Button) (findViewById(101))); setOnClickListener(new OnClickListener() { @Override public void onClick(android View view) { } public void onClick(View v) { try { <mask><mask><mask>i(tag, String);String mealprice = getText().toString();i(tag, (String + mealprice) + String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.EditText.getText()",
    "boolean": 1,
    "context": "final Button button = ((Button) (findViewById(101))); setOnClickListener(new OnClickListener() { @Override public void onClick(android View view) { } public void onClick(View v) { try { i(tag, String);String mealprice = <mask><mask><mask>getText().toString();i(tag, (String + mealprice) + String);String answer = String;"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.i()",
    "boolean": 1,
    "context": " setOnClickListener(new OnClickListener() { @Override public void onClick(android View view) { } public void onClick(View v) { try { i(tag, String);String mealprice = getText().toString();<mask><mask><mask>i(tag, (String + mealprice) + String);String answer = String;if (indexOf(String) == (-1)) { mealprice = String + mealprice;"
  },
  {
    "lib_name": "android",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.NumberFormat",
    "boolean": 1,
    "context": "if (indexOf(String) == (-1)) { mealprice = String + mealprice;} float fmp = 0F;<mask><mask><mask>.NumberFormat nf = getCurrencyInstance();fmp = parse(mealprice).floatValue();fmp *= 2;"
  },
  {
    "lib_name": "android",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.NumberFormat.getCurrencyInstance()",
    "boolean": 1,
    "context": "if (indexOf(String) == (-1)) { mealprice = String + mealprice;} float fmp = 0F;NumberFormat nf = <mask><mask><mask>getCurrencyInstance();fmp = parse(mealprice).floatValue();fmp *= 2;"
  },
  {
    "lib_name": "android",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.NumberFormat.parse()",
    "boolean": 1,
    "context": "} float fmp = 0F;NumberFormat nf = getCurrencyInstance();fmp = <mask><mask><mask>parse(mealprice).floatValue();fmp *= 2;i(tag, (String + fmp) + String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.i()",
    "boolean": 1,
    "context": "fmp = parse(mealprice).floatValue();fmp *= 2;<mask><mask><mask>i(tag, (String + fmp) + String);answer = String + format(fmp); setText(answer);"
  },
  {
    "lib_name": "android",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.NumberFormat.format()",
    "boolean": 1,
    "context": "fmp *= 2;i(tag, (String + fmp) + String);answer = String + <mask><mask><mask>format(fmp); setText(answer);i(tag, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView.setText()",
    "boolean": 1,
    "context": "android.util.Log.i(tag, (String + fmp) + String);answer = String + format(fmp); <mask><mask><mask>setText(answer);i(tag, String);} catch (ParseException pe) { i(tag, String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.i()",
    "boolean": 1,
    "context": "answer = String + format(fmp); setText(answer);<mask><mask><mask>i(tag, String);} catch (ParseException pe) { i(tag, String); setText(String);"
  },
  {
    "lib_name": "android",
    "pred_type": "android.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.ParseException",
    "boolean": 0,
    "context": " setText(answer);i(tag, String);} catch (<mask><mask><mask>.ParseException pe) { i(tag, String); setText(String);} catch (Exception e) { e(tag, String + getMessage());"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.i()",
    "boolean": 1,
    "context": " setText(answer);i(tag, String);} catch (ParseException pe) { <mask><mask><mask>i(tag, String); setText(String);} catch (Exception e) { e(tag, String + getMessage());"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView.setText()",
    "boolean": 1,
    "context": "android.util.Log.i(tag, String);} catch (ParseException pe) { i(tag, String); <mask><mask><mask>setText(String);} catch (Exception e) { e(tag, String + getMessage()); printStackTrace();"
  },
  {
    "lib_name": "android",
    "pred_type": "android.util",
    "truth_type": "android.util",
    "full_FQN": "android.util.Log.e()",
    "boolean": 1,
    "context": "} catch (ParseException pe) { i(tag, String); setText(String);} catch (Exception e) { <mask><mask><mask>e(tag, String + getMessage()); printStackTrace(); setText getMessage());"
  },
  {
    "lib_name": "android",
    "pred_type": "android.widget.TextView",
    "truth_type": "android.widget.TextView",
    "full_FQN": "android.widget.TextView.setText",
    "boolean": 1,
    "context": "} catch (Exception e) { e(tag, String + getMessage()); printStackTrace(); <mask><mask><mask><mask><mask><mask>.setText getMessage());} } });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Composite",
    "boolean": 1,
    "context": "public class gwt_class_1 extends <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Composite implements gwt MouseDownHandler { AbsolutePanel abs = new AbsolutePanel();public gwt_class_1(int width) { println(String + width);initWidget(abs);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": "public class gwt_class_1 extends Composite implements <mask><mask><mask>.gwt MouseDownHandler { AbsolutePanel abs = new AbsolutePanel();public gwt_class_1(int width) { println(String + width);initWidget(abs);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client.MouseDownEvent.dom.client",
    "truth_type": "com.google.gwt.event.dom.client.MouseDownEvent.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.MouseDownEvent.dom.client.MouseDownHandler",
    "boolean": 1,
    "context": "public class gwt_class_1 extends Composite implements gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MouseDownHandler { AbsolutePanel abs = new AbsolutePanel();public gwt_class_1(int width) { println(String + width);initWidget(abs);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.AbsolutePanel",
    "boolean": 1,
    "context": "public class gwt_class_1 extends Composite implements gwt MouseDownHandler { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.AbsolutePanel abs = new AbsolutePanel();public gwt_class_1(int width) { println(String + width);initWidget(abs);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.AbsolutePanel()",
    "boolean": 1,
    "context": "public class gwt_class_1 extends Composite implements gwt MouseDownHandler { AbsolutePanel abs = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>AbsolutePanel();public gwt_class_1(int width) { println(String + width);initWidget(abs);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.AbsolutePanel.setWidth()",
    "boolean": 1,
    "context": "public gwt_class_1(int width) { println(String + width);initWidget(abs); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setWidth(valueOf(width)); setHeight(String); setStyleName(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.AbsolutePanel.setHeight()",
    "boolean": 1,
    "context": "initWidget(abs); setWidth(valueOf(width)); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setHeight(String); setStyleName(String);} public void onMouseDown(gwt MouseDownEvent event) { println(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.AbsolutePanel.setStyleName()",
    "boolean": 1,
    "context": " setWidth(valueOf(width)); setHeight(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setStyleName(String);} public void onMouseDown(gwt MouseDownEvent event) { println(String);} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": " setHeight(String); setStyleName(String);} public void onMouseDown(<mask><mask><mask>.gwt MouseDownEvent event) { println(String);} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client.MouseDownEvent.dom.client",
    "truth_type": "com.google.gwt.event.dom.client.MouseDownEvent.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.MouseDownEvent.dom.client.MouseDownEvent",
    "boolean": 1,
    "context": " setHeight(String); setStyleName(String);} public void onMouseDown(gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MouseDownEvent event) { println(String);} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.FormPanel",
    "boolean": 1,
    "context": "public class gwt_class_10 { public void main() { final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.FormPanel form = new FormPanel();VerticalPanel holder = new VerticalPanel(); add(new Label(String));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.FormPanel()",
    "boolean": 1,
    "context": "public class gwt_class_10 { public void main() { final FormPanel form = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>FormPanel();VerticalPanel holder = new VerticalPanel(); add(new Label(String));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel",
    "boolean": 1,
    "context": "public class gwt_class_10 { public void main() { final FormPanel form = new FormPanel();<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.VerticalPanel holder = new VerticalPanel(); add(new Label(String));TextBox nameTextBox = new TextBox();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel()",
    "boolean": 1,
    "context": "public class gwt_class_10 { public void main() { final FormPanel form = new FormPanel();VerticalPanel holder = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>VerticalPanel(); add(new Label(String));TextBox nameTextBox = new TextBox();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.add()",
    "boolean": 1,
    "context": "public class gwt_class_10 { public void main() { final FormPanel form = new FormPanel();VerticalPanel holder = new VerticalPanel(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(new Label(String));TextBox nameTextBox = new TextBox(); setName(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Label()",
    "boolean": 1,
    "context": "public class gwt_class_10 { public void main() { final FormPanel form = new FormPanel();VerticalPanel holder = new VerticalPanel(); add(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Label(String));TextBox nameTextBox = new TextBox(); setName(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.TextBox",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.VerticalPanel holder = new VerticalPanel(); add(new Label(String));<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.TextBox nameTextBox = new TextBox(); setName(String); add(nameTextBox);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.TextBox()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.VerticalPanel holder = new VerticalPanel(); add(new Label(String));TextBox nameTextBox = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>TextBox(); setName(String); add(nameTextBox);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.TextBox.setName()",
    "boolean": 1,
    "context": " add(new Label(String));TextBox nameTextBox = new TextBox(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setName(String); add(nameTextBox);Button submitButton = new Button(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.add()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.TextBox nameTextBox = new TextBox(); setName(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(nameTextBox);Button submitButton = new Button(String); add(submitButton);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button",
    "boolean": 1,
    "context": " setName(String); add(nameTextBox);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Button submitButton = new Button(String); add(submitButton); add(holder);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Button()",
    "boolean": 1,
    "context": " setName(String); add(nameTextBox);Button submitButton = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Button(String); add(submitButton); add(holder);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.add()",
    "boolean": 1,
    "context": " add(nameTextBox);Button submitButton = new Button(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(submitButton); add(holder); addClickListener(new ClickListener() { public void onClick1(Widget sender) { submit();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.FormPanel.add()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.Button submitButton = new Button(String); add(submitButton); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(holder); addClickListener(new ClickListener() { public void onClick1(Widget sender) { submit();} @Override public void onClick(Widget sender) { // TODO Auto-generated method stub } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button.addClickListener()",
    "boolean": 1,
    "context": " add(submitButton); add(holder); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addClickListener(new ClickListener() { public void onClick1(Widget sender) { submit();} @Override public void onClick(Widget sender) { // TODO Auto-generated method stub } });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.ClickListener()",
    "boolean": 1,
    "context": " add(submitButton); add(holder); addClickListener(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>ClickListener() { public void onClick1(Widget sender) { submit();} @Override public void onClick(Widget sender) { // TODO Auto-generated method stub } });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Widget",
    "boolean": 1,
    "context": " add(submitButton); add(holder); addClickListener(new ClickListener() { public void onClick1(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Widget sender) { submit();} @Override public void onClick(Widget sender) { // TODO Auto-generated method stub } });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.FormPanel.submit()",
    "boolean": 1,
    "context": " add(submitButton); add(holder); addClickListener(new ClickListener() { public void onClick1(Widget sender) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>submit();} @Override public void onClick(Widget sender) { // TODO Auto-generated method stub } });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Widget",
    "boolean": 1,
    "context": " add(holder); addClickListener(new ClickListener() { public void onClick1(Widget sender) { submit();} @Override public void onClick(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Widget sender) { // TODO Auto-generated method stub } });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.EntryPoint",
    "boolean": 1,
    "context": "public class gwt_class_11 implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.EntryPoint { HorizontalPanel dictionaryPanel;Label wordLabel;public gwt_class_11() { dictionaryPanel = new HorizontalPanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.HorizontalPanel",
    "boolean": 1,
    "context": "public class gwt_class_11 implements EntryPoint { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HorizontalPanel dictionaryPanel;Label wordLabel;public gwt_class_11() { dictionaryPanel = new HorizontalPanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Label",
    "boolean": 1,
    "context": "public class gwt_class_11 implements EntryPoint { HorizontalPanel dictionaryPanel;<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Label wordLabel;public gwt_class_11() { dictionaryPanel = new HorizontalPanel();wordLabel = new Label(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.HorizontalPanel()",
    "boolean": 1,
    "context": "public class gwt_class_11 implements EntryPoint { HorizontalPanel dictionaryPanel;Label wordLabel;public gwt_class_11() { dictionaryPanel = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>HorizontalPanel();wordLabel = new Label(String);} @Override public void onModuleLoad() { add(wordLabel);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Label()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.Label wordLabel;public gwt_class_11() { dictionaryPanel = new HorizontalPanel();wordLabel = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Label(String);} @Override public void onModuleLoad() { add(wordLabel);get(String).add(dictionaryPanel);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.HorizontalPanel.add()",
    "boolean": 1,
    "context": "public gwt_class_11() { dictionaryPanel = new HorizontalPanel();wordLabel = new Label(String);} @Override public void onModuleLoad() { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(wordLabel);get(String).add(dictionaryPanel);} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootPanel.get()",
    "boolean": 1,
    "context": "wordLabel = new Label(String);} @Override public void onModuleLoad() { add(wordLabel);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get(String).add(dictionaryPanel);} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.EntryPoint",
    "boolean": 1,
    "context": "public class gwt_class_12 implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.EntryPoint { public void onModuleLoad() { AbsolutePanel ap = new AbsolutePanel(); setSize(String, String);get().add(ap, 10, 10);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.AbsolutePanel",
    "boolean": 1,
    "context": "public class gwt_class_12 implements EntryPoint { public void onModuleLoad() { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.AbsolutePanel ap = new AbsolutePanel(); setSize(String, String);get().add(ap, 10, 10);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.AbsolutePanel()",
    "boolean": 1,
    "context": "public class gwt_class_12 implements EntryPoint { public void onModuleLoad() { AbsolutePanel ap = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>AbsolutePanel(); setSize(String, String);get().add(ap, 10, 10);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.AbsolutePanel.setSize()",
    "boolean": 1,
    "context": "public class gwt_class_12 implements EntryPoint { public void onModuleLoad() { AbsolutePanel ap = new AbsolutePanel(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setSize(String, String);get().add(ap, 10, 10);Label l = new Label(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootPanel.get()",
    "boolean": 1,
    "context": "public class gwt_class_12 implements EntryPoint { public void onModuleLoad() { AbsolutePanel ap = new AbsolutePanel(); setSize(String, String);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get().add(ap, 10, 10);Label l = new Label(String); add(l);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Label",
    "boolean": 1,
    "context": " setSize(String, String);get().add(ap, 10, 10);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Label l = new Label(String); add(l);Label l1 = new Label(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Label()",
    "boolean": 1,
    "context": " setSize(String, String);get().add(ap, 10, 10);Label l = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Label(String); add(l);Label l1 = new Label(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.AbsolutePanel.add()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.RootPanel.get().add(ap, 10, 10);Label l = new Label(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(l);Label l1 = new Label(String);TextBox t1 = new TextBox();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Label",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.Label l = new Label(String); add(l);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Label l1 = new Label(String);TextBox t1 = new TextBox(); setText(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Label()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.Label l = new Label(String); add(l);Label l1 = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Label(String);TextBox t1 = new TextBox(); setText(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.TextBox",
    "boolean": 1,
    "context": " add(l);Label l1 = new Label(String);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.TextBox t1 = new TextBox(); setText(String);VerticalPanel vp = new VerticalPanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.TextBox()",
    "boolean": 1,
    "context": " add(l);Label l1 = new Label(String);TextBox t1 = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>TextBox(); setText(String);VerticalPanel vp = new VerticalPanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.TextBox.setText()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.Label l1 = new Label(String);TextBox t1 = new TextBox(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setText(String);VerticalPanel vp = new VerticalPanel(); add(t1);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.TextBox t1 = new TextBox(); setText(String);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.VerticalPanel vp = new VerticalPanel(); add(t1); add(l1);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.TextBox t1 = new TextBox(); setText(String);VerticalPanel vp = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>VerticalPanel(); add(t1); add(l1);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.add()",
    "boolean": 1,
    "context": " setText(String);VerticalPanel vp = new VerticalPanel(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(t1); add(l1); add(vp);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.add()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.VerticalPanel vp = new VerticalPanel(); add(t1); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(l1); add(vp);} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.AbsolutePanel.add()",
    "boolean": 1,
    "context": " add(t1); add(l1); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(vp);} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.EntryPoint",
    "boolean": 1,
    "context": "@SuppressWarnings(String) public class gwt_class_13 { public class ERD1 implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.EntryPoint { public void onModuleLoad() { AbsolutePanel boundaryPanel = new AbsolutePanel(); setPixelSize(1000, 1000);Button b = new Button();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.AbsolutePanel",
    "boolean": 1,
    "context": "@SuppressWarnings(String) public class gwt_class_13 { public class ERD1 implements EntryPoint { public void onModuleLoad() { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.AbsolutePanel boundaryPanel = new AbsolutePanel(); setPixelSize(1000, 1000);Button b = new Button();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.AbsolutePanel()",
    "boolean": 1,
    "context": "@SuppressWarnings(String) public class gwt_class_13 { public class ERD1 implements EntryPoint { public void onModuleLoad() { AbsolutePanel boundaryPanel = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>AbsolutePanel(); setPixelSize(1000, 1000);Button b = new Button();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.AbsolutePanel.setPixelSize()",
    "boolean": 1,
    "context": "@SuppressWarnings(String) public class gwt_class_13 { public class ERD1 implements EntryPoint { public void onModuleLoad() { AbsolutePanel boundaryPanel = new AbsolutePanel(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setPixelSize(1000, 1000);Button b = new Button(); addClickListener(new ClickListener() { public void onClick1(Widget sender) { } @Override public void onClick(Widget sender) { // TODO Auto-generated method stub } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button",
    "boolean": 1,
    "context": "@SuppressWarnings(String) public class gwt_class_13 { public class ERD1 implements EntryPoint { public void onModuleLoad() { AbsolutePanel boundaryPanel = new AbsolutePanel(); setPixelSize(1000, 1000);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Button b = new Button(); addClickListener(new ClickListener() { public void onClick1(Widget sender) { } @Override public void onClick(Widget sender) { // TODO Auto-generated method stub } }); add(b, 10, 40);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Button()",
    "boolean": 1,
    "context": "@SuppressWarnings(String) public class gwt_class_13 { public class ERD1 implements EntryPoint { public void onModuleLoad() { AbsolutePanel boundaryPanel = new AbsolutePanel(); setPixelSize(1000, 1000);Button b = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Button(); addClickListener(new ClickListener() { public void onClick1(Widget sender) { } @Override public void onClick(Widget sender) { // TODO Auto-generated method stub } }); add(b, 10, 40);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button.addClickListener()",
    "boolean": 1,
    "context": " setPixelSize(1000, 1000);Button b = new Button(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addClickListener(new ClickListener() { public void onClick1(Widget sender) { } @Override public void onClick(Widget sender) { // TODO Auto-generated method stub } }); add(b, 10, 40);get().add(boundaryPanel);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.ClickListener()",
    "boolean": 1,
    "context": " setPixelSize(1000, 1000);Button b = new Button(); addClickListener(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>ClickListener() { public void onClick1(Widget sender) { } @Override public void onClick(Widget sender) { // TODO Auto-generated method stub } }); add(b, 10, 40);get().add(boundaryPanel);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Widget",
    "boolean": 1,
    "context": " setPixelSize(1000, 1000);Button b = new Button(); addClickListener(new ClickListener() { public void onClick1(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Widget sender) { } @Override public void onClick(Widget sender) { // TODO Auto-generated method stub } }); add(b, 10, 40);get().add(boundaryPanel);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Widget",
    "boolean": 1,
    "context": " setPixelSize(1000, 1000);Button b = new Button(); addClickListener(new ClickListener() { public void onClick1(Widget sender) { } @Override public void onClick(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Widget sender) { // TODO Auto-generated method stub } }); add(b, 10, 40);get().add(boundaryPanel);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.AbsolutePanel.add()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.Button b = new Button(); addClickListener(new ClickListener() { public void onClick1(Widget sender) { } @Override public void onClick(Widget sender) { // TODO Auto-generated method stub } }); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(b, 10, 40);get().add(boundaryPanel);} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootPanel.get()",
    "boolean": 1,
    "context": " addClickListener(new ClickListener() { public void onClick1(Widget sender) { } @Override public void onClick(Widget sender) { // TODO Auto-generated method stub } }); add(b, 10, 40);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get().add(boundaryPanel);} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder",
    "boolean": 1,
    "context": "public class gwt_class_14 { public void main(String[] arg) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.RequestBuilder rb = new RequestBuilder(GET, String);try { sendRequest(null, new RequestCallback() { public void onError1(final Request request, final Throwable exception) { alert getMessage());} public void onResponseReceived1(final Request request, final Response response) { log((String + getText()) + String, null);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http",
    "truth_type": "com.google.gwt.http",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder()",
    "boolean": 1,
    "context": "public class gwt_class_14 { public void main(String[] arg) { RequestBuilder rb = new <mask><mask><mask><mask><mask><mask><mask><mask>RequestBuilder(GET, String);try { sendRequest(null, new RequestCallback() { public void onError1(final Request request, final Throwable exception) { alert getMessage());} public void onResponseReceived1(final Request request, final Response response) { log((String + getText()) + String, null);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client.RequestBuilder",
    "truth_type": "com.google.gwt.http.client.RequestBuilder",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.GET",
    "boolean": 1,
    "context": "public class gwt_class_14 { public void main(String[] arg) { RequestBuilder rb = new RequestBuilder(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.GET, String);try { sendRequest(null, new RequestCallback() { public void onError1(final Request request, final Throwable exception) { alert getMessage());} public void onResponseReceived1(final Request request, final Response response) { log((String + getText()) + String, null);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.sendRequest()",
    "boolean": 1,
    "context": "public class gwt_class_14 { public void main(String[] arg) { RequestBuilder rb = new RequestBuilder(GET, String);try { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>sendRequest(null, new RequestCallback() { public void onError1(final Request request, final Throwable exception) { alert getMessage());} public void onResponseReceived1(final Request request, final Response response) { log((String + getText()) + String, null);} @Override public void onResponseReceived(Request request, Response response) { // TODO Auto-generated method stub } @Override public void onError(Request request, Throwable exception) { // TODO Auto-generated method stub } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http",
    "truth_type": "com.google.gwt.http",
    "full_FQN": "com.google.gwt.http.client.RequestCallback()",
    "boolean": 1,
    "context": "public class gwt_class_14 { public void main(String[] arg) { RequestBuilder rb = new RequestBuilder(GET, String);try { sendRequest(null, new <mask><mask><mask><mask><mask><mask><mask><mask>RequestCallback() { public void onError1(final Request request, final Throwable exception) { alert getMessage());} public void onResponseReceived1(final Request request, final Response response) { log((String + getText()) + String, null);} @Override public void onResponseReceived(Request request, Response response) { // TODO Auto-generated method stub } @Override public void onError(Request request, Throwable exception) { // TODO Auto-generated method stub } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Request",
    "boolean": 1,
    "context": "public class gwt_class_14 { public void main(String[] arg) { RequestBuilder rb = new RequestBuilder(GET, String);try { sendRequest(null, new RequestCallback() { public void onError1(final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Request request, final Throwable exception) { alert getMessage());} public void onResponseReceived1(final Request request, final Response response) { log((String + getText()) + String, null);} @Override public void onResponseReceived(Request request, Response response) { // TODO Auto-generated method stub } @Override public void onError(Request request, Throwable exception) { // TODO Auto-generated method stub } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.Window",
    "truth_type": "com.google.gwt.user.client.Window",
    "full_FQN": "com.google.gwt.user.client.Window.alert",
    "boolean": 1,
    "context": "public class gwt_class_14 { public void main(String[] arg) { RequestBuilder rb = new RequestBuilder(GET, String);try { sendRequest(null, new RequestCallback() { public void onError1(final Request request, final Throwable exception) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.alert getMessage());} public void onResponseReceived1(final Request request, final Response response) { log((String + getText()) + String, null);} @Override public void onResponseReceived(Request request, Response response) { // TODO Auto-generated method stub } @Override public void onError(Request request, Throwable exception) { // TODO Auto-generated method stub } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Request",
    "boolean": 1,
    "context": "public class gwt_class_14 { public void main(String[] arg) { RequestBuilder rb = new RequestBuilder(GET, String);try { sendRequest(null, new RequestCallback() { public void onError1(final Request request, final Throwable exception) { alert getMessage());} public void onResponseReceived1(final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Request request, final Response response) { log((String + getText()) + String, null);} @Override public void onResponseReceived(Request request, Response response) { // TODO Auto-generated method stub } @Override public void onError(Request request, Throwable exception) { // TODO Auto-generated method stub } });} catch (final Exception e) { alert getMessage());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response",
    "boolean": 1,
    "context": "public class gwt_class_14 { public void main(String[] arg) { RequestBuilder rb = new RequestBuilder(GET, String);try { sendRequest(null, new RequestCallback() { public void onError1(final Request request, final Throwable exception) { alert getMessage());} public void onResponseReceived1(final Request request, final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Response response) { log((String + getText()) + String, null);} @Override public void onResponseReceived(Request request, Response response) { // TODO Auto-generated method stub } @Override public void onError(Request request, Throwable exception) { // TODO Auto-generated method stub } });} catch (final Exception e) { alert getMessage());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.GWT.log()",
    "boolean": 1,
    "context": "public class gwt_class_14 { public void main(String[] arg) { RequestBuilder rb = new RequestBuilder(GET, String);try { sendRequest(null, new RequestCallback() { public void onError1(final Request request, final Throwable exception) { alert getMessage());} public void onResponseReceived1(final Request request, final Response response) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>log((String + getText()) + String, null);} @Override public void onResponseReceived(Request request, Response response) { // TODO Auto-generated method stub } @Override public void onError(Request request, Throwable exception) { // TODO Auto-generated method stub } });} catch (final Exception e) { alert getMessage());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response.getText()",
    "boolean": 1,
    "context": "public class gwt_class_14 { public void main(String[] arg) { RequestBuilder rb = new RequestBuilder(GET, String);try { sendRequest(null, new RequestCallback() { public void onError1(final Request request, final Throwable exception) { alert getMessage());} public void onResponseReceived1(final Request request, final Response response) { log((String + <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getText()) + String, null);} @Override public void onResponseReceived(Request request, Response response) { // TODO Auto-generated method stub } @Override public void onError(Request request, Throwable exception) { // TODO Auto-generated method stub } });} catch (final Exception e) { alert getMessage());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Request",
    "boolean": 1,
    "context": "try { sendRequest(null, new RequestCallback() { public void onError1(final Request request, final Throwable exception) { alert getMessage());} public void onResponseReceived1(final Request request, final Response response) { log((String + getText()) + String, null);} @Override public void onResponseReceived(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Request request, Response response) { // TODO Auto-generated method stub } @Override public void onError(Request request, Throwable exception) { // TODO Auto-generated method stub } });} catch (final Exception e) { alert getMessage());} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response",
    "boolean": 1,
    "context": "try { sendRequest(null, new RequestCallback() { public void onError1(final Request request, final Throwable exception) { alert getMessage());} public void onResponseReceived1(final Request request, final Response response) { log((String + getText()) + String, null);} @Override public void onResponseReceived(Request request, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Response response) { // TODO Auto-generated method stub } @Override public void onError(Request request, Throwable exception) { // TODO Auto-generated method stub } });} catch (final Exception e) { alert getMessage());} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Request",
    "boolean": 1,
    "context": "try { sendRequest(null, new RequestCallback() { public void onError1(final Request request, final Throwable exception) { alert getMessage());} public void onResponseReceived1(final Request request, final Response response) { log((String + getText()) + String, null);} @Override public void onResponseReceived(Request request, Response response) { // TODO Auto-generated method stub } @Override public void onError(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Request request, Throwable exception) { // TODO Auto-generated method stub } });} catch (final Exception e) { alert getMessage());} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.Window",
    "truth_type": "com.google.gwt.user.client.Window",
    "full_FQN": "com.google.gwt.user.client.Window.alert",
    "boolean": 1,
    "context": "} public void onResponseReceived1(final Request request, final Response response) { log((String + getText()) + String, null);} @Override public void onResponseReceived(Request request, Response response) { // TODO Auto-generated method stub } @Override public void onError(Request request, Throwable exception) { // TODO Auto-generated method stub } });} catch (final Exception e) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.alert getMessage());} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder",
    "boolean": 1,
    "context": "public class gwt_class_15 { public static void main(String[] arg) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.RequestBuilder builder = new RequestBuilder(GET, encode(String));try { Request request = sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived1(Request request, Response response) { } @Override public void onResponseReceived(Request request, Response response) { // TODO Auto-generated method stub } });} catch (RequestException e) { } } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http",
    "truth_type": "com.google.gwt.http",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder()",
    "boolean": 1,
    "context": "public class gwt_class_15 { public static void main(String[] arg) { RequestBuilder builder = new <mask><mask><mask><mask><mask><mask><mask><mask>RequestBuilder(GET, encode(String));try { Request request = sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived1(Request request, Response response) { } @Override public void onResponseReceived(Request request, Response response) { // TODO Auto-generated method stub } });} catch (RequestException e) { } } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client.RequestBuilder",
    "truth_type": "com.google.gwt.http.client.RequestBuilder",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.GET",
    "boolean": 1,
    "context": "public class gwt_class_15 { public static void main(String[] arg) { RequestBuilder builder = new RequestBuilder(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.GET, encode(String));try { Request request = sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived1(Request request, Response response) { } @Override public void onResponseReceived(Request request, Response response) { // TODO Auto-generated method stub } });} catch (RequestException e) { } } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.URL.encode()",
    "boolean": 1,
    "context": "public class gwt_class_15 { public static void main(String[] arg) { RequestBuilder builder = new RequestBuilder(GET, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>encode(String));try { Request request = sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived1(Request request, Response response) { } @Override public void onResponseReceived(Request request, Response response) { // TODO Auto-generated method stub } });} catch (RequestException e) { } } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Request",
    "boolean": 1,
    "context": "public class gwt_class_15 { public static void main(String[] arg) { RequestBuilder builder = new RequestBuilder(GET, encode(String));try { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Request request = sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived1(Request request, Response response) { } @Override public void onResponseReceived(Request request, Response response) { // TODO Auto-generated method stub } });} catch (RequestException e) { } } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.sendRequest()",
    "boolean": 1,
    "context": "public class gwt_class_15 { public static void main(String[] arg) { RequestBuilder builder = new RequestBuilder(GET, encode(String));try { Request request = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived1(Request request, Response response) { } @Override public void onResponseReceived(Request request, Response response) { // TODO Auto-generated method stub } });} catch (RequestException e) { } } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http",
    "truth_type": "com.google.gwt.http",
    "full_FQN": "com.google.gwt.http.client.RequestCallback()",
    "boolean": 1,
    "context": "public class gwt_class_15 { public static void main(String[] arg) { RequestBuilder builder = new RequestBuilder(GET, encode(String));try { Request request = sendRequest(null, new <mask><mask><mask><mask><mask><mask><mask><mask>RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived1(Request request, Response response) { } @Override public void onResponseReceived(Request request, Response response) { // TODO Auto-generated method stub } });} catch (RequestException e) { } } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Request",
    "boolean": 1,
    "context": "public class gwt_class_15 { public static void main(String[] arg) { RequestBuilder builder = new RequestBuilder(GET, encode(String));try { Request request = sendRequest(null, new RequestCallback() { public void onError(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Request request, Throwable exception) { } public void onResponseReceived1(Request request, Response response) { } @Override public void onResponseReceived(Request request, Response response) { // TODO Auto-generated method stub } });} catch (RequestException e) { } } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Request",
    "boolean": 1,
    "context": "public class gwt_class_15 { public static void main(String[] arg) { RequestBuilder builder = new RequestBuilder(GET, encode(String));try { Request request = sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived1(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Request request, Response response) { } @Override public void onResponseReceived(Request request, Response response) { // TODO Auto-generated method stub } });} catch (RequestException e) { } } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response",
    "boolean": 1,
    "context": "public class gwt_class_15 { public static void main(String[] arg) { RequestBuilder builder = new RequestBuilder(GET, encode(String));try { Request request = sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived1(Request request, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Response response) { } @Override public void onResponseReceived(Request request, Response response) { // TODO Auto-generated method stub } });} catch (RequestException e) { } } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Request",
    "boolean": 1,
    "context": "public class gwt_class_15 { public static void main(String[] arg) { RequestBuilder builder = new RequestBuilder(GET, encode(String));try { Request request = sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived1(Request request, Response response) { } @Override public void onResponseReceived(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Request request, Response response) { // TODO Auto-generated method stub } });} catch (RequestException e) { } } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response",
    "boolean": 1,
    "context": "public class gwt_class_15 { public static void main(String[] arg) { RequestBuilder builder = new RequestBuilder(GET, encode(String));try { Request request = sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived1(Request request, Response response) { } @Override public void onResponseReceived(Request request, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Response response) { // TODO Auto-generated method stub } });} catch (RequestException e) { } } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.clientcom.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestException",
    "boolean": 0,
    "context": "public class gwt_class_15 { public static void main(String[] arg) { RequestBuilder builder = new RequestBuilder(GET, encode(String));try { Request request = sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived1(Request request, Response response) { } @Override public void onResponseReceived(Request request, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Response response) { // TODO Auto-generated method stub } });} catch (<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.RequestException e) { } } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder",
    "boolean": 1,
    "context": "public class gwt_class_16 { public static void main(String[] arg) { try { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.RequestBuilder rb = new RequestBuilder(POST, String); sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { get().add(new HTML(String + getMessage()));} public void onResponseReceived(Request request, Response response) { get().add(new HTML((((String + getStatusCode()) + String) + getStatusText()) + String));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http",
    "truth_type": "com.google.gwt.http",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder()",
    "boolean": 1,
    "context": "public class gwt_class_16 { public static void main(String[] arg) { try { RequestBuilder rb = new <mask><mask><mask><mask><mask><mask><mask><mask>RequestBuilder(POST, String); sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { get().add(new HTML(String + getMessage()));} public void onResponseReceived(Request request, Response response) { get().add(new HTML((((String + getStatusCode()) + String) + getStatusText()) + String));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client.RequestBuilder",
    "truth_type": "com.google.gwt.http.client.RequestBuilder",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.POST",
    "boolean": 1,
    "context": "public class gwt_class_16 { public static void main(String[] arg) { try { RequestBuilder rb = new RequestBuilder(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.POST, String); sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { get().add(new HTML(String + getMessage()));} public void onResponseReceived(Request request, Response response) { get().add(new HTML((((String + getStatusCode()) + String) + getStatusText()) + String));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.sendRequest()",
    "boolean": 1,
    "context": "public class gwt_class_16 { public static void main(String[] arg) { try { RequestBuilder rb = new RequestBuilder(POST, String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { get().add(new HTML(String + getMessage()));} public void onResponseReceived(Request request, Response response) { get().add(new HTML((((String + getStatusCode()) + String) + getStatusText()) + String));} });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http",
    "truth_type": "com.google.gwt.http",
    "full_FQN": "com.google.gwt.http.client.RequestCallback()",
    "boolean": 1,
    "context": "public class gwt_class_16 { public static void main(String[] arg) { try { RequestBuilder rb = new RequestBuilder(POST, String); sendRequest(null, new <mask><mask><mask><mask><mask><mask><mask><mask>RequestCallback() { public void onError(Request request, Throwable exception) { get().add(new HTML(String + getMessage()));} public void onResponseReceived(Request request, Response response) { get().add(new HTML((((String + getStatusCode()) + String) + getStatusText()) + String));} });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Request",
    "boolean": 1,
    "context": "public class gwt_class_16 { public static void main(String[] arg) { try { RequestBuilder rb = new RequestBuilder(POST, String); sendRequest(null, new RequestCallback() { public void onError(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Request request, Throwable exception) { get().add(new HTML(String + getMessage()));} public void onResponseReceived(Request request, Response response) { get().add(new HTML((((String + getStatusCode()) + String) + getStatusText()) + String));} });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootPanel.get()",
    "boolean": 1,
    "context": "public class gwt_class_16 { public static void main(String[] arg) { try { RequestBuilder rb = new RequestBuilder(POST, String); sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get().add(new HTML(String + getMessage()));} public void onResponseReceived(Request request, Response response) { get().add(new HTML((((String + getStatusCode()) + String) + getStatusText()) + String));} });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.HTML()",
    "boolean": 1,
    "context": "public class gwt_class_16 { public static void main(String[] arg) { try { RequestBuilder rb = new RequestBuilder(POST, String); sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { get().add(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>HTML(String + getMessage()));} public void onResponseReceived(Request request, Response response) { get().add(new HTML((((String + getStatusCode()) + String) + getStatusText()) + String));} });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Request",
    "boolean": 1,
    "context": "public class gwt_class_16 { public static void main(String[] arg) { try { RequestBuilder rb = new RequestBuilder(POST, String); sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { get().add(new HTML(String + getMessage()));} public void onResponseReceived(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Request request, Response response) { get().add(new HTML((((String + getStatusCode()) + String) + getStatusText()) + String));} });} catch (Exception e) { get().add(new HTML(String + getMessage()));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response",
    "boolean": 1,
    "context": "public class gwt_class_16 { public static void main(String[] arg) { try { RequestBuilder rb = new RequestBuilder(POST, String); sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { get().add(new HTML(String + getMessage()));} public void onResponseReceived(Request request, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Response response) { get().add(new HTML((((String + getStatusCode()) + String) + getStatusText()) + String));} });} catch (Exception e) { get().add(new HTML(String + getMessage()));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootPanel.get()",
    "boolean": 1,
    "context": "public class gwt_class_16 { public static void main(String[] arg) { try { RequestBuilder rb = new RequestBuilder(POST, String); sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { get().add(new HTML(String + getMessage()));} public void onResponseReceived(Request request, Response response) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get().add(new HTML((((String + getStatusCode()) + String) + getStatusText()) + String));} });} catch (Exception e) { get().add(new HTML(String + getMessage()));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.HTML()",
    "boolean": 1,
    "context": "public class gwt_class_16 { public static void main(String[] arg) { try { RequestBuilder rb = new RequestBuilder(POST, String); sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { get().add(new HTML(String + getMessage()));} public void onResponseReceived(Request request, Response response) { get().add(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>HTML((((String + getStatusCode()) + String) + getStatusText()) + String));} });} catch (Exception e) { get().add(new HTML(String + getMessage()));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response.getStatusCode()",
    "boolean": 1,
    "context": "public class gwt_class_16 { public static void main(String[] arg) { try { RequestBuilder rb = new RequestBuilder(POST, String); sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { get().add(new HTML(String + getMessage()));} public void onResponseReceived(Request request, Response response) { get().add(new HTML((((String + <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getStatusCode()) + String) + getStatusText()) + String));} });} catch (Exception e) { get().add(new HTML(String + getMessage()));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response.getStatusText()",
    "boolean": 1,
    "context": "public class gwt_class_16 { public static void main(String[] arg) { try { RequestBuilder rb = new RequestBuilder(POST, String); sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { get().add(new HTML(String + getMessage()));} public void onResponseReceived(Request request, Response response) { get().add(new HTML((((String + getStatusCode()) + String) + <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getStatusText()) + String));} });} catch (Exception e) { get().add(new HTML(String + getMessage()));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootPanel.get()",
    "boolean": 1,
    "context": "} public void onResponseReceived(Request request, Response response) { get().add(new HTML((((String + getStatusCode()) + String) + getStatusText()) + String));} });} catch (Exception e) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get().add(new HTML(String + getMessage()));} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.HTML()",
    "boolean": 1,
    "context": "} public void onResponseReceived(Request request, Response response) { get().add(new HTML((((String + getStatusCode()) + String) + getStatusText()) + String));} });} catch (Exception e) { get().add(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>HTML(String + getMessage()));} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Composite",
    "boolean": 1,
    "context": "public class gwt_class_17 extends <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Composite { private String firstName = null;private String lastName = null;private String picSquareUrl = null;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Image",
    "boolean": 1,
    "context": "private String lastName = null;private String picSquareUrl = null;private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Image picSquare = new Image();private Image logo = new Image();private Button logoutButton = new Button(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Image()",
    "boolean": 1,
    "context": "private String lastName = null;private String picSquareUrl = null;private Image picSquare = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Image();private Image logo = new Image();private Button logoutButton = new Button(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Image",
    "boolean": 1,
    "context": "private String picSquareUrl = null;private Image picSquare = new Image();private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Image logo = new Image();private Button logoutButton = new Button(String);private DockPanel panel = new DockPanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Image()",
    "boolean": 1,
    "context": "private String picSquareUrl = null;private Image picSquare = new Image();private Image logo = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Image();private Button logoutButton = new Button(String);private DockPanel panel = new DockPanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button",
    "boolean": 1,
    "context": "private Image picSquare = new Image();private Image logo = new Image();private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Button logoutButton = new Button(String);private DockPanel panel = new DockPanel();private HTML html = new HTML(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Button()",
    "boolean": 1,
    "context": "private Image picSquare = new Image();private Image logo = new Image();private Button logoutButton = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Button(String);private DockPanel panel = new DockPanel();private HTML html = new HTML(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DockPanel",
    "boolean": 1,
    "context": "private Image logo = new Image();private Button logoutButton = new Button(String);private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.DockPanel panel = new DockPanel();private HTML html = new HTML(String);public gwt_class_17() { initProfileImage();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.DockPanel()",
    "boolean": 1,
    "context": "private Image logo = new Image();private Button logoutButton = new Button(String);private DockPanel panel = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>DockPanel();private HTML html = new HTML(String);public gwt_class_17() { initProfileImage();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.HTML",
    "boolean": 1,
    "context": "private Button logoutButton = new Button(String);private DockPanel panel = new DockPanel();private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HTML html = new HTML(String);public gwt_class_17() { initProfileImage();initLogoImage();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.HTML()",
    "boolean": 1,
    "context": "private Button logoutButton = new Button(String);private DockPanel panel = new DockPanel();private HTML html = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>HTML(String);public gwt_class_17() { initProfileImage();initLogoImage();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DockPanel.add()",
    "boolean": 1,
    "context": "public gwt_class_17() { initProfileImage();initLogoImage(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(picSquare, WEST); add(html, CENTER);VerticalPanel verticalPanel = new VerticalPanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui.DockPanel",
    "truth_type": "com.google.gwt.user.client.ui.DockPanel",
    "full_FQN": "com.google.gwt.user.client.ui.DockPanel.WEST",
    "boolean": 1,
    "context": "public gwt_class_17() { initProfileImage();initLogoImage(); add(picSquare, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.WEST); add(html, CENTER);VerticalPanel verticalPanel = new VerticalPanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DockPanel.add()",
    "boolean": 1,
    "context": "this.initLogoImage(); add(picSquare, WEST); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(html, CENTER);VerticalPanel verticalPanel = new VerticalPanel(); add(logo);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui.DockPanel",
    "truth_type": "com.google.gwt.user.client.ui.DockPanel",
    "full_FQN": "com.google.gwt.user.client.ui.DockPanel.CENTER",
    "boolean": 1,
    "context": "this.initLogoImage(); add(picSquare, WEST); add(html, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.CENTER);VerticalPanel verticalPanel = new VerticalPanel(); add(logo);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel",
    "boolean": 1,
    "context": " add(picSquare, WEST); add(html, CENTER);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.VerticalPanel verticalPanel = new VerticalPanel(); add(logo); add(logoutButton);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel()",
    "boolean": 1,
    "context": " add(picSquare, WEST); add(html, CENTER);VerticalPanel verticalPanel = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>VerticalPanel(); add(logo); add(logoutButton);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.add()",
    "boolean": 1,
    "context": " add(html, CENTER);VerticalPanel verticalPanel = new VerticalPanel(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(logo); add(logoutButton); add(verticalPanel, EAST);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.add()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.VerticalPanel verticalPanel = new VerticalPanel(); add(logo); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(logoutButton); add(verticalPanel, EAST);initWidget(panel);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DockPanel.add()",
    "boolean": 1,
    "context": " add(logo); add(logoutButton); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(verticalPanel, EAST);initWidget(panel);} private void initProfileImage() { SandpitImageBundle sib = create(class);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui.DockPanel",
    "truth_type": "com.google.gwt.user.client.ui.DockPanel",
    "full_FQN": "com.google.gwt.user.client.ui.DockPanel.EAST",
    "boolean": 1,
    "context": " add(logo); add(logoutButton); add(verticalPanel, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.EAST);initWidget(panel);} private void initProfileImage() { SandpitImageBundle sib = create(class);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.GWT.create()",
    "boolean": 1,
    "context": " add(verticalPanel, EAST);initWidget(panel);} private void initProfileImage() { SandpitImageBundle sib = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>create(class);AbstractImagePrototype aip = ajaxLoader();applyTo(picSquare);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.AbstractImagePrototype",
    "boolean": 1,
    "context": "initWidget(panel);} private void initProfileImage() { SandpitImageBundle sib = create(class);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.AbstractImagePrototype aip = ajaxLoader();applyTo(picSquare);} private void initLogoImage() { SandpitImageBundle sib = create(class);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.GWT.create()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.AbstractImagePrototype aip = ajaxLoader();applyTo(picSquare);} private void initLogoImage() { SandpitImageBundle sib = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>create(class);AbstractImagePrototype aip = logo(); applyTo(logo);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.AbstractImagePrototype",
    "boolean": 1,
    "context": "sib.applyTo(picSquare);} private void initLogoImage() { SandpitImageBundle sib = create(class);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.AbstractImagePrototype aip = logo(); applyTo(logo);} public interface SandpitImageBundle extends ImageBundle { public AbstractImagePrototype logo();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.AbstractImagePrototype.applyTo()",
    "boolean": 1,
    "context": "} private void initLogoImage() { SandpitImageBundle sib = create(class);AbstractImagePrototype aip = logo(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>applyTo(logo);} public interface SandpitImageBundle extends ImageBundle { public AbstractImagePrototype logo();public void applyTo(Image picSquare);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.ImageBundle",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.AbstractImagePrototype aip = logo(); applyTo(logo);} public interface SandpitImageBundle extends <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ImageBundle { public AbstractImagePrototype logo();public void applyTo(Image picSquare);public AbstractImagePrototype ajaxLoader();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.AbstractImagePrototype",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.AbstractImagePrototype aip = logo(); applyTo(logo);} public interface SandpitImageBundle extends ImageBundle { public <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.AbstractImagePrototype logo();public void applyTo(Image picSquare);public AbstractImagePrototype ajaxLoader();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Image",
    "boolean": 1,
    "context": " applyTo(logo);} public interface SandpitImageBundle extends ImageBundle { public AbstractImagePrototype logo();public void applyTo(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Image picSquare);public AbstractImagePrototype ajaxLoader();} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.AbstractImagePrototype",
    "boolean": 1,
    "context": "} public interface SandpitImageBundle extends ImageBundle { public AbstractImagePrototype logo();public void applyTo(Image picSquare);public <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.AbstractImagePrototype ajaxLoader();} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Composite",
    "boolean": 1,
    "context": "public class gwt_class_18 extends <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Composite { private static StackNavigatorUiBinder uiBinder = create(class);interface StackNavigatorUiBinder extends UiBinder<Widget> {} public gwt_class_18() { initWidget(createAndBindUi(this));} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.GWT.create()",
    "boolean": 1,
    "context": "public class gwt_class_18 extends Composite { private static StackNavigatorUiBinder uiBinder = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>create(class);interface StackNavigatorUiBinder extends UiBinder<Widget> {} public gwt_class_18() { initWidget(createAndBindUi(this));} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.uibinder.client",
    "truth_type": "com.google.gwt.uibinder.client",
    "full_FQN": "com.google.gwt.uibinder.client.UiBinder",
    "boolean": 1,
    "context": "public class gwt_class_18 extends Composite { private static StackNavigatorUiBinder uiBinder = create(class);interface StackNavigatorUiBinder extends <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.UiBinder<Widget> {} public gwt_class_18() { initWidget(createAndBindUi(this));} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Widget",
    "boolean": 1,
    "context": "public class gwt_class_18 extends Composite { private static StackNavigatorUiBinder uiBinder = create(class);interface StackNavigatorUiBinder extends UiBinder<<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Widget> {} public gwt_class_18() { initWidget(createAndBindUi(this));} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui.",
    "truth_type": "com.extjs.gxt.ui.client.widget",
    "full_FQN": "com.extjs.gxt.ui.client.widget.VerticalPanel",
    "boolean": 0,
    "context": "public class gwt_class_19 { private void addStartupBox() { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.VerticalPanel boxPanel = null;Label title = null;VerticalPanel boxContent = new VerticalPanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Label",
    "boolean": 1,
    "context": "public class gwt_class_19 { private void addStartupBox() { VerticalPanel boxPanel = null;<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Label title = null;VerticalPanel boxContent = new VerticalPanel(); setSpacing(10);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel",
    "boolean": 1,
    "context": "public class gwt_class_19 { private void addStartupBox() { VerticalPanel boxPanel = null;Label title = null;<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.VerticalPanel boxContent = new VerticalPanel(); setSpacing(10); setHorizontalAlignment(VerticalPanel);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel()",
    "boolean": 1,
    "context": "public class gwt_class_19 { private void addStartupBox() { VerticalPanel boxPanel = null;Label title = null;VerticalPanel boxContent = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>VerticalPanel(); setSpacing(10); setHorizontalAlignment(VerticalPanel);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.setSpacing()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.Label title = null;VerticalPanel boxContent = new VerticalPanel(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setSpacing(10); setHorizontalAlignment(VerticalPanel);Button but1 = new Button(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.setHorizontalAlignment()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.VerticalPanel boxContent = new VerticalPanel(); setSpacing(10); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setHorizontalAlignment(VerticalPanel);Button but1 = new Button(String); setPixelSize(280, 25);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client..et",
    "truth_type": "com.extjs.gxt.ui.client.widget",
    "full_FQN": "com.extjs.gxt.ui.client.widget.VerticalPanel",
    "boolean": 0,
    "context": "com.google.gwt.user.client.ui.VerticalPanel boxContent = new VerticalPanel(); setSpacing(10); setHorizontalAlignment(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.VerticalPanel);Button but1 = new Button(String); setPixelSize(280, 25);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google..gxt.ui.client.widget.button",
    "truth_type": "com.extjs.gxt.ui.client.widget.button",
    "full_FQN": "com.extjs.gxt.ui.client.widget.button.Button",
    "boolean": 0,
    "context": " setSpacing(10); setHorizontalAlignment(VerticalPanel);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Button but1 = new Button(String); setPixelSize(280, 25);Button but2 = new Button(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gg..ui.client.widget",
    "truth_type": "com.extjs.gxt.ui.client.widget",
    "full_FQN": "com.extjs.gxt.ui.client.widget.button.Button()",
    "boolean": 0,
    "context": " setSpacing(10); setHorizontalAlignment(VerticalPanel);Button but1 = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Button(String); setPixelSize(280, 25);Button but2 = new Button(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.extjs.gxt.ui.client.widget.button",
    "truth_type": "com.extjs.gxt.ui.client.widget.button",
    "full_FQN": "com.extjs.gxt.ui.client.widget.button.Button.setPixelSize()",
    "boolean": 1,
    "context": " setHorizontalAlignment(VerticalPanel);Button but1 = new Button(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setPixelSize(280, 25);Button but2 = new Button(String); setPixelSize(280, 25);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.extjs.gxt.ui.client.widget.button",
    "truth_type": "com.extjs.gxt.ui.client.widget.button",
    "full_FQN": "com.extjs.gxt.ui.client.widget.button.Button",
    "boolean": 1,
    "context": "com.extjs.gxt.ui.client.widget.button.Button but1 = new Button(String); setPixelSize(280, 25);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Button but2 = new Button(String); setPixelSize(280, 25);Button but3 = new Button(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.ext..gxt.ui.client.widget",
    "truth_type": "com.extjs.gxt.ui.client.widget",
    "full_FQN": "com.extjs.gxt.ui.client.widget.button.Button()",
    "boolean": 0,
    "context": "com.extjs.gxt.ui.client.widget.button.Button but1 = new Button(String); setPixelSize(280, 25);Button but2 = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Button(String); setPixelSize(280, 25);Button but3 = new Button(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.extjs.gxt.ui.client.widget.button",
    "truth_type": "com.extjs.gxt.ui.client.widget.button",
    "full_FQN": "com.extjs.gxt.ui.client.widget.button.Button.setPixelSize()",
    "boolean": 1,
    "context": " setPixelSize(280, 25);Button but2 = new Button(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setPixelSize(280, 25);Button but3 = new Button(String); setPixelSize(280, 25);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.googlejs.gxt.ui.client.widget.button",
    "truth_type": "com.extjs.gxt.ui.client.widget.button",
    "full_FQN": "com.extjs.gxt.ui.client.widget.button.Button",
    "boolean": 0,
    "context": "com.extjs.gxt.ui.client.widget.button.Button but2 = new Button(String); setPixelSize(280, 25);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Button but3 = new Button(String); setPixelSize(280, 25); add(but1);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.ggxt.ui.client.widget",
    "truth_type": "com.extjs.gxt.ui.client.widget",
    "full_FQN": "com.extjs.gxt.ui.client.widget.button.Button()",
    "boolean": 0,
    "context": "com.extjs.gxt.ui.client.widget.button.Button but2 = new Button(String); setPixelSize(280, 25);Button but3 = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Button(String); setPixelSize(280, 25); add(but1);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.googlejs.gxt.ui.client.widget.button",
    "truth_type": "com.extjs.gxt.ui.client.widget.button",
    "full_FQN": "com.extjs.gxt.ui.client.widget.button.Button.setPixelSize()",
    "boolean": 0,
    "context": " setPixelSize(280, 25);Button but3 = new Button(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setPixelSize(280, 25); add(but1); add(but2);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.add()",
    "boolean": 1,
    "context": "com.extjs.gxt.ui.client.widget.button.Button but3 = new Button(String); setPixelSize(280, 25); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(but1); add(but2); add(but3);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.add()",
    "boolean": 1,
    "context": " setPixelSize(280, 25); add(but1); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(but2); add(but3); add(title);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.add()",
    "boolean": 1,
    "context": " add(but1); add(but2); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(but3); add(title); add(boxContent);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.clientclient.ui",
    "truth_type": "com.extjs.gxt.ui.client.widget",
    "full_FQN": "com.extjs.gxt.ui.client.widget.VerticalPanel.add()",
    "boolean": 0,
    "context": " add(but2); add(but3); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(title); add(boxContent);get(String).add(boxPanel);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user..client.ui",
    "truth_type": "com.extjs.gxt.ui.client.widget",
    "full_FQN": "com.extjs.gxt.ui.client.widget.VerticalPanel.add()",
    "boolean": 0,
    "context": " add(but3); add(title); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(boxContent);get(String).add(boxPanel);} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootPanel.get()",
    "boolean": 1,
    "context": " add(title); add(boxContent);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get(String).add(boxPanel);} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.junit.client",
    "truth_type": "com.google.gwt.junit.client",
    "full_FQN": "com.google.gwt.junit.client.GWTTestCase",
    "boolean": 1,
    "context": "public class gwt_class_2 extends <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.GWTTestCase { public String getModuleName() { return String;} public void testSimple() { GreetingServiceAsync greetingService = create(class); greetServer(String, new AsyncCallback<String>() { public void onFailure(Throwable caught) { println(caught);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.grebar.shared",
    "truth_type": "aQute.gwt.greeter.shared",
    "full_FQN": "aQute.gwt.greeter.shared.GreetingServiceAsync",
    "boolean": 0,
    "context": "public class gwt_class_2 extends GWTTestCase { public String getModuleName() { return String;} public void testSimple() { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.GreetingServiceAsync greetingService = create(class); greetServer(String, new AsyncCallback<String>() { public void onFailure(Throwable caught) { println(caught);fail(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.GWT.create()",
    "boolean": 1,
    "context": "public class gwt_class_2 extends GWTTestCase { public String getModuleName() { return String;} public void testSimple() { GreetingServiceAsync greetingService = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>create(class); greetServer(String, new AsyncCallback<String>() { public void onFailure(Throwable caught) { println(caught);fail(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.gre..shared.GreetingService",
    "truth_type": "aQute.gwt.greeter.shared.GreetingService",
    "full_FQN": "aQute.gwt.greeter.shared.GreetingService.class",
    "boolean": 0,
    "context": "public class gwt_class_2 extends GWTTestCase { public String getModuleName() { return String;} public void testSimple() { GreetingServiceAsync greetingService = create(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.class); greetServer(String, new AsyncCallback<String>() { public void onFailure(Throwable caught) { println(caught);fail(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.gre..shared",
    "truth_type": "aQute.gwt.greeter.shared",
    "full_FQN": "aQute.gwt.greeter.shared.GreetingServiceAsync.greetServer()",
    "boolean": 0,
    "context": "public class gwt_class_2 extends GWTTestCase { public String getModuleName() { return String;} public void testSimple() { GreetingServiceAsync greetingService = create(class); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>greetServer(String, new AsyncCallback<String>() { public void onFailure(Throwable caught) { println(caught);fail(String);finishTest();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.rpc",
    "truth_type": "com.google.gwt.user.client.rpc",
    "full_FQN": "com.google.gwt.user.client.rpc.AsyncCallback",
    "boolean": 1,
    "context": "public class gwt_class_2 extends GWTTestCase { public String getModuleName() { return String;} public void testSimple() { GreetingServiceAsync greetingService = create(class); greetServer(String, new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.AsyncCallback<String>() { public void onFailure(Throwable caught) { println(caught);fail(String);finishTest();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.EntryPoint",
    "boolean": 1,
    "context": "public class gwt_class_20 implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.EntryPoint { public void onModuleLoad() { Button b = new Button(String, new gwt ClickHandler() { public void onClick(gwt ClickEvent event) { alert(String);} });get().add(b);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button",
    "boolean": 1,
    "context": "public class gwt_class_20 implements EntryPoint { public void onModuleLoad() { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Button b = new Button(String, new gwt ClickHandler() { public void onClick(gwt ClickEvent event) { alert(String);} });get().add(b);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Button()",
    "boolean": 1,
    "context": "public class gwt_class_20 implements EntryPoint { public void onModuleLoad() { Button b = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Button(String, new gwt ClickHandler() { public void onClick(gwt ClickEvent event) { alert(String);} });get().add(b);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": "public class gwt_class_20 implements EntryPoint { public void onModuleLoad() { Button b = new Button(String, new <mask><mask><mask>.gwt ClickHandler() { public void onClick(gwt ClickEvent event) { alert(String);} });get().add(b);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client.ClickEvent.dom",
    "truth_type": "com.google.gwt.event.dom.client.ClickEvent.dom",
    "full_FQN": "com.google.gwt.event.dom.client.ClickEvent.dom.client.ClickHandler()",
    "boolean": 1,
    "context": "public class gwt_class_20 implements EntryPoint { public void onModuleLoad() { Button b = new Button(String, new gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>ClickHandler() { public void onClick(gwt ClickEvent event) { alert(String);} });get().add(b);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": "public class gwt_class_20 implements EntryPoint { public void onModuleLoad() { Button b = new Button(String, new gwt ClickHandler() { public void onClick(<mask><mask><mask>.gwt ClickEvent event) { alert(String);} });get().add(b);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client.ClickEvent.dom.client",
    "truth_type": "com.google.gwt.event.dom.client.ClickEvent.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.ClickEvent.dom.client.ClickEvent",
    "boolean": 1,
    "context": "public class gwt_class_20 implements EntryPoint { public void onModuleLoad() { Button b = new Button(String, new gwt ClickHandler() { public void onClick(gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ClickEvent event) { alert(String);} });get().add(b);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.Window.alert()",
    "boolean": 1,
    "context": "public class gwt_class_20 implements EntryPoint { public void onModuleLoad() { Button b = new Button(String, new gwt ClickHandler() { public void onClick(gwt ClickEvent event) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>alert(String);} });get().add(b);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootPanel.get()",
    "boolean": 1,
    "context": "public class gwt_class_20 implements EntryPoint { public void onModuleLoad() { Button b = new Button(String, new gwt ClickHandler() { public void onClick(gwt ClickEvent event) { alert(String);} });<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get().add(b);} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.PopupPanel",
    "boolean": 1,
    "context": "public class gwt_class_21 { private static class PopUpPanel extends <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.PopupPanel { Button connect = new Button(String);Button delete = new Button(String);Button detail = new Button(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button",
    "boolean": 1,
    "context": "public class gwt_class_21 { private static class PopUpPanel extends PopupPanel { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Button connect = new Button(String);Button delete = new Button(String);Button detail = new Button(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Button()",
    "boolean": 1,
    "context": "public class gwt_class_21 { private static class PopUpPanel extends PopupPanel { Button connect = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Button(String);Button delete = new Button(String);Button detail = new Button(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button",
    "boolean": 1,
    "context": "public class gwt_class_21 { private static class PopUpPanel extends PopupPanel { Button connect = new Button(String);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Button delete = new Button(String);Button detail = new Button(String);public PopUpPanel(final Widget widget) { super(true);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Button()",
    "boolean": 1,
    "context": "public class gwt_class_21 { private static class PopUpPanel extends PopupPanel { Button connect = new Button(String);Button delete = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Button(String);Button detail = new Button(String);public PopUpPanel(final Widget widget) { super(true);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button",
    "boolean": 1,
    "context": "public class gwt_class_21 { private static class PopUpPanel extends PopupPanel { Button connect = new Button(String);Button delete = new Button(String);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Button detail = new Button(String);public PopUpPanel(final Widget widget) { super(true);VerticalPanel vp = new VerticalPanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Button()",
    "boolean": 1,
    "context": "public class gwt_class_21 { private static class PopUpPanel extends PopupPanel { Button connect = new Button(String);Button delete = new Button(String);Button detail = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Button(String);public PopUpPanel(final Widget widget) { super(true);VerticalPanel vp = new VerticalPanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Widget",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.Button delete = new Button(String);Button detail = new Button(String);public PopUpPanel(final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Widget widget) { super(true);VerticalPanel vp = new VerticalPanel(); add(connect);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.Button detail = new Button(String);public PopUpPanel(final Widget widget) { super(true);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.VerticalPanel vp = new VerticalPanel(); add(connect); add(delete);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.Button detail = new Button(String);public PopUpPanel(final Widget widget) { super(true);VerticalPanel vp = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>VerticalPanel(); add(connect); add(delete);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.add()",
    "boolean": 1,
    "context": "public PopUpPanel(final Widget widget) { super(true);VerticalPanel vp = new VerticalPanel(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(connect); add(delete); add(detail);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.add()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.VerticalPanel vp = new VerticalPanel(); add(connect); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(delete); add(detail);setWidget(vp);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.add()",
    "boolean": 1,
    "context": " add(connect); add(delete); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(detail);setWidget(vp);} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Composite",
    "boolean": 1,
    "context": "public class gwt_class_22 extends <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Composite { private static TestViewUiBinder uiBinder = create(class);interface TestViewUiBinder extends UiBinder<VerticalPanel, gwt_class_22> {} @UiField Label testObjectStringLabel;@UiField Label innerObjectStringLabel;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.GWT.create()",
    "boolean": 1,
    "context": "public class gwt_class_22 extends Composite { private static TestViewUiBinder uiBinder = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>create(class);interface TestViewUiBinder extends UiBinder<VerticalPanel, gwt_class_22> {} @UiField Label testObjectStringLabel;@UiField Label innerObjectStringLabel;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.uibinder.client",
    "truth_type": "com.google.gwt.uibinder.client",
    "full_FQN": "com.google.gwt.uibinder.client.UiBinder",
    "boolean": 1,
    "context": "public class gwt_class_22 extends Composite { private static TestViewUiBinder uiBinder = create(class);interface TestViewUiBinder extends <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.UiBinder<VerticalPanel, gwt_class_22> {} @UiField Label testObjectStringLabel;@UiField Label innerObjectStringLabel;@UiField VerticalPanel listObjectsPanel;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel",
    "boolean": 1,
    "context": "public class gwt_class_22 extends Composite { private static TestViewUiBinder uiBinder = create(class);interface TestViewUiBinder extends UiBinder<<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.VerticalPanel, gwt_class_22> {} @UiField Label testObjectStringLabel;@UiField Label innerObjectStringLabel;@UiField VerticalPanel listObjectsPanel;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.uibinder.client",
    "truth_type": "com.google.gwt.uibinder.client",
    "full_FQN": "com.google.gwt.uibinder.client.UiField",
    "boolean": 1,
    "context": "public class gwt_class_22 extends Composite { private static TestViewUiBinder uiBinder = create(class);interface TestViewUiBinder extends UiBinder<VerticalPanel, gwt_class_22> {} @<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.UiField Label testObjectStringLabel;@UiField Label innerObjectStringLabel;@UiField VerticalPanel listObjectsPanel;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Label",
    "boolean": 1,
    "context": "public class gwt_class_22 extends Composite { private static TestViewUiBinder uiBinder = create(class);interface TestViewUiBinder extends UiBinder<VerticalPanel, gwt_class_22> {} @UiField <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Label testObjectStringLabel;@UiField Label innerObjectStringLabel;@UiField VerticalPanel listObjectsPanel;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.uibinder.client",
    "truth_type": "com.google.gwt.uibinder.client",
    "full_FQN": "com.google.gwt.uibinder.client.UiField",
    "boolean": 1,
    "context": "public class gwt_class_22 extends Composite { private static TestViewUiBinder uiBinder = create(class);interface TestViewUiBinder extends UiBinder<VerticalPanel, gwt_class_22> {} @UiField Label testObjectStringLabel;@<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.UiField Label innerObjectStringLabel;@UiField VerticalPanel listObjectsPanel;@UiField Button button;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Label",
    "boolean": 1,
    "context": "public class gwt_class_22 extends Composite { private static TestViewUiBinder uiBinder = create(class);interface TestViewUiBinder extends UiBinder<VerticalPanel, gwt_class_22> {} @UiField Label testObjectStringLabel;@UiField <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Label innerObjectStringLabel;@UiField VerticalPanel listObjectsPanel;@UiField Button button;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.uibinder.client",
    "truth_type": "com.google.gwt.uibinder.client",
    "full_FQN": "com.google.gwt.uibinder.client.UiField",
    "boolean": 1,
    "context": "interface TestViewUiBinder extends UiBinder<VerticalPanel, gwt_class_22> {} @UiField Label testObjectStringLabel;@UiField Label innerObjectStringLabel;@<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.UiField VerticalPanel listObjectsPanel;@UiField Button button;@UiField Label errorMessageLabel;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel",
    "boolean": 1,
    "context": "interface TestViewUiBinder extends UiBinder<VerticalPanel, gwt_class_22> {} @UiField Label testObjectStringLabel;@UiField Label innerObjectStringLabel;@UiField <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.VerticalPanel listObjectsPanel;@UiField Button button;@UiField Label errorMessageLabel;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.uibinder.client",
    "truth_type": "com.google.gwt.uibinder.client",
    "full_FQN": "com.google.gwt.uibinder.client.UiField",
    "boolean": 1,
    "context": "@UiField Label innerObjectStringLabel;@UiField VerticalPanel listObjectsPanel;@<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.UiField Button button;@UiField Label errorMessageLabel;public gwt_class_22(String firstName) { initWidget(createAndBindUi(this));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button",
    "boolean": 1,
    "context": "@UiField Label innerObjectStringLabel;@UiField VerticalPanel listObjectsPanel;@UiField <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Button button;@UiField Label errorMessageLabel;public gwt_class_22(String firstName) { initWidget(createAndBindUi(this));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.uibinder.client",
    "truth_type": "com.google.gwt.uibinder.client",
    "full_FQN": "com.google.gwt.uibinder.client.UiField",
    "boolean": 1,
    "context": "@UiField VerticalPanel listObjectsPanel;@UiField Button button;@<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.UiField Label errorMessageLabel;public gwt_class_22(String firstName) { initWidget(createAndBindUi(this));} @UiHandler(String) void onClick(ClickEvent e) { } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Label",
    "boolean": 1,
    "context": "@UiField VerticalPanel listObjectsPanel;@UiField Button button;@UiField <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Label errorMessageLabel;public gwt_class_22(String firstName) { initWidget(createAndBindUi(this));} @UiHandler(String) void onClick(ClickEvent e) { } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.uibinder",
    "truth_type": "com.google.gwt.uibinder",
    "full_FQN": "com.google.gwt.uibinder.client.UiHandler()",
    "boolean": 1,
    "context": "@UiField Label errorMessageLabel;public gwt_class_22(String firstName) { initWidget(createAndBindUi(this));} @<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>UiHandler(String) void onClick(ClickEvent e) { } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client",
    "truth_type": "com.google.gwt.event.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.ClickEvent",
    "boolean": 1,
    "context": "@UiField Label errorMessageLabel;public gwt_class_22(String firstName) { initWidget(createAndBindUi(this));} @UiHandler(String) void onClick(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ClickEvent e) { } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.UUID.randomUUID()",
    "boolean": 1,
    "context": "public class gwt_class_23 { public static void main(String[] arg) { final String filename = <mask><mask><mask>randomUUID().toString() + String;RequestBuilder rb = new RequestBuilder(POST, String);Object selected;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder",
    "boolean": 1,
    "context": "public class gwt_class_23 { public static void main(String[] arg) { final String filename = randomUUID().toString() + String;<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.RequestBuilder rb = new RequestBuilder(POST, String);Object selected; setRequestData(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http",
    "truth_type": "com.google.gwt.http",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder()",
    "boolean": 1,
    "context": "public class gwt_class_23 { public static void main(String[] arg) { final String filename = randomUUID().toString() + String;RequestBuilder rb = new <mask><mask><mask><mask><mask><mask><mask><mask>RequestBuilder(POST, String);Object selected; setRequestData(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client.RequestBuilder",
    "truth_type": "com.google.gwt.http.client.RequestBuilder",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.POST",
    "boolean": 1,
    "context": "public class gwt_class_23 { public static void main(String[] arg) { final String filename = randomUUID().toString() + String;RequestBuilder rb = new RequestBuilder(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.POST, String);Object selected; setRequestData(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.setRequestData()",
    "boolean": 1,
    "context": "com.google.gwt.http.client.RequestBuilder rb = new RequestBuilder(POST, String);Object selected; <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setRequestData(String); setHeader(String, String); setCallback(new RequestCallback() { @Override public void onResponseReceived(Request request, Response response) { } @Override public void onError(Request request, Throwable exception) { printStackTrace();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.setHeader()",
    "boolean": 1,
    "context": "java.lang.Object selected; setRequestData(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setHeader(String, String); setCallback(new RequestCallback() { @Override public void onResponseReceived(Request request, Response response) { } @Override public void onError(Request request, Throwable exception) { printStackTrace();} });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.setCallback()",
    "boolean": 1,
    "context": " setRequestData(String); setHeader(String, String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setCallback(new RequestCallback() { @Override public void onResponseReceived(Request request, Response response) { } @Override public void onError(Request request, Throwable exception) { printStackTrace();} });try { send();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http",
    "truth_type": "com.google.gwt.http",
    "full_FQN": "com.google.gwt.http.client.RequestCallback()",
    "boolean": 1,
    "context": " setRequestData(String); setHeader(String, String); setCallback(new <mask><mask><mask><mask><mask><mask><mask><mask>RequestCallback() { @Override public void onResponseReceived(Request request, Response response) { } @Override public void onError(Request request, Throwable exception) { printStackTrace();} });try { send();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Request",
    "boolean": 1,
    "context": " setRequestData(String); setHeader(String, String); setCallback(new RequestCallback() { @Override public void onResponseReceived(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Request request, Response response) { } @Override public void onError(Request request, Throwable exception) { printStackTrace();} });try { send();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response",
    "boolean": 1,
    "context": " setRequestData(String); setHeader(String, String); setCallback(new RequestCallback() { @Override public void onResponseReceived(Request request, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Response response) { } @Override public void onError(Request request, Throwable exception) { printStackTrace();} });try { send();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Request",
    "boolean": 1,
    "context": " setRequestData(String); setHeader(String, String); setCallback(new RequestCallback() { @Override public void onResponseReceived(Request request, Response response) { } @Override public void onError(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Request request, Throwable exception) { printStackTrace();} });try { send();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.send()",
    "boolean": 1,
    "context": " setCallback(new RequestCallback() { @Override public void onResponseReceived(Request request, Response response) { } @Override public void onError(Request request, Throwable exception) { printStackTrace();} });try { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>send();} catch (RequestException e) { printStackTrace();} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestException",
    "boolean": 1,
    "context": "} });try { send();} catch (<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.RequestException e) { printStackTrace();} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestException.printStackTrace()",
    "boolean": 1,
    "context": "} });try { send();} catch (RequestException e) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>printStackTrace();} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Composite",
    "boolean": 1,
    "context": "public class gwt_class_24 { public abstract class AbstractNotificationWidget extends <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Composite implements gwt ClickHandler , gwt HasClickHandlers { protected abstract String getUniqueId();@Override public gwt HandlerRegistration addClickHandler(gwt ClickHandler handler) { return addDomHandler(handler, gwt getType());} @Override public void onClick(gwt ClickEvent event) { doClick(getUniqueId());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": "public class gwt_class_24 { public abstract class AbstractNotificationWidget extends Composite implements <mask><mask><mask>.gwt ClickHandler , gwt HasClickHandlers { protected abstract String getUniqueId();@Override public gwt HandlerRegistration addClickHandler(gwt ClickHandler handler) { return addDomHandler(handler, gwt getType());} @Override public void onClick(gwt ClickEvent event) { doClick(getUniqueId());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client.ClickEvent.dom.client",
    "truth_type": "com.google.gwt.event.dom.client.ClickEvent.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.ClickEvent.dom.client.ClickHandler",
    "boolean": 1,
    "context": "public class gwt_class_24 { public abstract class AbstractNotificationWidget extends Composite implements gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ClickHandler , gwt HasClickHandlers { protected abstract String getUniqueId();@Override public gwt HandlerRegistration addClickHandler(gwt ClickHandler handler) { return addDomHandler(handler, gwt getType());} @Override public void onClick(gwt ClickEvent event) { doClick(getUniqueId());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": "public class gwt_class_24 { public abstract class AbstractNotificationWidget extends Composite implements gwt ClickHandler , <mask><mask><mask>.gwt HasClickHandlers { protected abstract String getUniqueId();@Override public gwt HandlerRegistration addClickHandler(gwt ClickHandler handler) { return addDomHandler(handler, gwt getType());} @Override public void onClick(gwt ClickEvent event) { doClick(getUniqueId());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client.ClickEvent.dom.client",
    "truth_type": "com.google.gwt.event.dom.client.ClickEvent.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.ClickEvent.dom.client.HasClickHandlers",
    "boolean": 1,
    "context": "public class gwt_class_24 { public abstract class AbstractNotificationWidget extends Composite implements gwt ClickHandler , gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HasClickHandlers { protected abstract String getUniqueId();@Override public gwt HandlerRegistration addClickHandler(gwt ClickHandler handler) { return addDomHandler(handler, gwt getType());} @Override public void onClick(gwt ClickEvent event) { doClick(getUniqueId());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": "public class gwt_class_24 { public abstract class AbstractNotificationWidget extends Composite implements gwt ClickHandler , gwt HasClickHandlers { protected abstract String getUniqueId();@Override public <mask><mask><mask>.gwt HandlerRegistration addClickHandler(gwt ClickHandler handler) { return addDomHandler(handler, gwt getType());} @Override public void onClick(gwt ClickEvent event) { doClick(getUniqueId());} protected native void doClick(String name);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client.ClickEvent.shared",
    "truth_type": "com.google.gwt.event.dom.client.ClickEvent.shared",
    "full_FQN": "com.google.gwt.event.dom.client.ClickEvent.shared.HandlerRegistration",
    "boolean": 1,
    "context": "public class gwt_class_24 { public abstract class AbstractNotificationWidget extends Composite implements gwt ClickHandler , gwt HasClickHandlers { protected abstract String getUniqueId();@Override public gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HandlerRegistration addClickHandler(gwt ClickHandler handler) { return addDomHandler(handler, gwt getType());} @Override public void onClick(gwt ClickEvent event) { doClick(getUniqueId());} protected native void doClick(String name);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": "public class gwt_class_24 { public abstract class AbstractNotificationWidget extends Composite implements gwt ClickHandler , gwt HasClickHandlers { protected abstract String getUniqueId();@Override public gwt HandlerRegistration addClickHandler(<mask><mask><mask>.gwt ClickHandler handler) { return addDomHandler(handler, gwt getType());} @Override public void onClick(gwt ClickEvent event) { doClick(getUniqueId());} protected native void doClick(String name);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client.ClickEvent.dom.client",
    "truth_type": "com.google.gwt.event.dom.client.ClickEvent.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.ClickEvent.dom.client.ClickHandler",
    "boolean": 1,
    "context": "public class gwt_class_24 { public abstract class AbstractNotificationWidget extends Composite implements gwt ClickHandler , gwt HasClickHandlers { protected abstract String getUniqueId();@Override public gwt HandlerRegistration addClickHandler(gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ClickHandler handler) { return addDomHandler(handler, gwt getType());} @Override public void onClick(gwt ClickEvent event) { doClick(getUniqueId());} protected native void doClick(String name);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": "public class gwt_class_24 { public abstract class AbstractNotificationWidget extends Composite implements gwt ClickHandler , gwt HasClickHandlers { protected abstract String getUniqueId();@Override public gwt HandlerRegistration addClickHandler(gwt ClickHandler handler) { return addDomHandler(handler, <mask><mask><mask>.gwt getType());} @Override public void onClick(gwt ClickEvent event) { doClick(getUniqueId());} protected native void doClick(String name);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client.ClickEvent.dom.client",
    "truth_type": "com.google.gwt.event.dom.client.ClickEvent.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.ClickEvent.dom.client.ClickEvent.getType()",
    "boolean": 1,
    "context": "public class gwt_class_24 { public abstract class AbstractNotificationWidget extends Composite implements gwt ClickHandler , gwt HasClickHandlers { protected abstract String getUniqueId();@Override public gwt HandlerRegistration addClickHandler(gwt ClickHandler handler) { return addDomHandler(handler, gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getType());} @Override public void onClick(gwt ClickEvent event) { doClick(getUniqueId());} protected native void doClick(String name);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": "public class gwt_class_24 { public abstract class AbstractNotificationWidget extends Composite implements gwt ClickHandler , gwt HasClickHandlers { protected abstract String getUniqueId();@Override public gwt HandlerRegistration addClickHandler(gwt ClickHandler handler) { return addDomHandler(handler, gwt getType());} @Override public void onClick(<mask><mask><mask>.gwt ClickEvent event) { doClick(getUniqueId());} protected native void doClick(String name);} public class ErrorNotificationWidget extends AbstractNotificationWidget { private final String uniqueId;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client.ClickEvent.dom.client",
    "truth_type": "com.google.gwt.event.dom.client.ClickEvent.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.ClickEvent.dom.client.ClickEvent",
    "boolean": 1,
    "context": "public class gwt_class_24 { public abstract class AbstractNotificationWidget extends Composite implements gwt ClickHandler , gwt HasClickHandlers { protected abstract String getUniqueId();@Override public gwt HandlerRegistration addClickHandler(gwt ClickHandler handler) { return addDomHandler(handler, gwt getType());} @Override public void onClick(gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ClickEvent event) { doClick(getUniqueId());} protected native void doClick(String name);} public class ErrorNotificationWidget extends AbstractNotificationWidget { private final String uniqueId;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.DOM.createUniqueId()",
    "boolean": 1,
    "context": "} protected native void doClick(String name);} public class ErrorNotificationWidget extends AbstractNotificationWidget { private final String uniqueId;public ErrorNotificationWidget(String title, String message) { uniqueId = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>createUniqueId();Widget w = null;initWidget(w);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Widget",
    "boolean": 1,
    "context": "} public class ErrorNotificationWidget extends AbstractNotificationWidget { private final String uniqueId;public ErrorNotificationWidget(String title, String message) { uniqueId = createUniqueId();<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Widget w = null;initWidget(w);getElement().setId(uniqueId);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button",
    "boolean": 1,
    "context": "public class gwt_class_25 { public void onModuleLoad() { final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Button sendButton = new Button(String);final TextBox nameField = new TextBox(); setText(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Button()",
    "boolean": 1,
    "context": "public class gwt_class_25 { public void onModuleLoad() { final Button sendButton = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Button(String);final TextBox nameField = new TextBox(); setText(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.TextBox",
    "boolean": 1,
    "context": "public class gwt_class_25 { public void onModuleLoad() { final Button sendButton = new Button(String);final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.TextBox nameField = new TextBox(); setText(String);final Label errorLabel = new Label();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.TextBox()",
    "boolean": 1,
    "context": "public class gwt_class_25 { public void onModuleLoad() { final Button sendButton = new Button(String);final TextBox nameField = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>TextBox(); setText(String);final Label errorLabel = new Label();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.TextBox.setText()",
    "boolean": 1,
    "context": "public class gwt_class_25 { public void onModuleLoad() { final Button sendButton = new Button(String);final TextBox nameField = new TextBox(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setText(String);final Label errorLabel = new Label(); addStyleName(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Label",
    "boolean": 1,
    "context": "final TextBox nameField = new TextBox(); setText(String);final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Label errorLabel = new Label(); addStyleName(String);get(String).add(nameField);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Label()",
    "boolean": 1,
    "context": "final TextBox nameField = new TextBox(); setText(String);final Label errorLabel = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Label(); addStyleName(String);get(String).add(nameField);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button.addStyleName()",
    "boolean": 1,
    "context": " setText(String);final Label errorLabel = new Label(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addStyleName(String);get(String).add(nameField);get(String).add(sendButton);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootPanel.get()",
    "boolean": 1,
    "context": "final Label errorLabel = new Label(); addStyleName(String);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get(String).add(nameField);get(String).add(sendButton);get(String).add(errorLabel);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootPanel.get()",
    "boolean": 1,
    "context": " addStyleName(String);get(String).add(nameField);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get(String).add(sendButton);get(String).add(errorLabel); setFocus(true);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootPanel.get()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.RootPanel.get(String).add(nameField);get(String).add(sendButton);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get(String).add(errorLabel); setFocus(true); selectAll();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.TextBox.setFocus()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.RootPanel.get(String).add(sendButton);get(String).add(errorLabel); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setFocus(true); selectAll();final DialogBox dialogBox = new DialogBox();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.TextBox.selectAll()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.RootPanel.get(String).add(errorLabel); setFocus(true); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>selectAll();final DialogBox dialogBox = new DialogBox(); setText(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DialogBox",
    "boolean": 1,
    "context": " setFocus(true); selectAll();final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.DialogBox dialogBox = new DialogBox(); setText(String); setAnimationEnabled(true);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.DialogBox()",
    "boolean": 1,
    "context": " setFocus(true); selectAll();final DialogBox dialogBox = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>DialogBox(); setText(String); setAnimationEnabled(true);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DialogBox.setText()",
    "boolean": 1,
    "context": " selectAll();final DialogBox dialogBox = new DialogBox(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setText(String); setAnimationEnabled(true);final Button closeButton = new Button(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DialogBox.setAnimationEnabled()",
    "boolean": 1,
    "context": "final DialogBox dialogBox = new DialogBox(); setText(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setAnimationEnabled(true);final Button closeButton = new Button(String); getElement().setId(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button",
    "boolean": 1,
    "context": " setText(String); setAnimationEnabled(true);final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Button closeButton = new Button(String); getElement().setId(String);final Label textToServerLabel = new Label();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Button()",
    "boolean": 1,
    "context": " setText(String); setAnimationEnabled(true);final Button closeButton = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Button(String); getElement().setId(String);final Label textToServerLabel = new Label();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button.getElement()",
    "boolean": 1,
    "context": " setAnimationEnabled(true);final Button closeButton = new Button(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getElement().setId(String);final Label textToServerLabel = new Label();final HTML serverResponseLabel = new HTML();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Label",
    "boolean": 1,
    "context": "final Button closeButton = new Button(String); getElement().setId(String);final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Label textToServerLabel = new Label();final HTML serverResponseLabel = new HTML();VerticalPanel dialogVPanel = new VerticalPanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Label()",
    "boolean": 1,
    "context": "final Button closeButton = new Button(String); getElement().setId(String);final Label textToServerLabel = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Label();final HTML serverResponseLabel = new HTML();VerticalPanel dialogVPanel = new VerticalPanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.HTML",
    "boolean": 1,
    "context": " getElement().setId(String);final Label textToServerLabel = new Label();final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HTML serverResponseLabel = new HTML();VerticalPanel dialogVPanel = new VerticalPanel(); addStyleName(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.HTML()",
    "boolean": 1,
    "context": " getElement().setId(String);final Label textToServerLabel = new Label();final HTML serverResponseLabel = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>HTML();VerticalPanel dialogVPanel = new VerticalPanel(); addStyleName(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel",
    "boolean": 1,
    "context": "final Label textToServerLabel = new Label();final HTML serverResponseLabel = new HTML();<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.VerticalPanel dialogVPanel = new VerticalPanel(); addStyleName(String); add(new HTML(String));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel()",
    "boolean": 1,
    "context": "final Label textToServerLabel = new Label();final HTML serverResponseLabel = new HTML();VerticalPanel dialogVPanel = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>VerticalPanel(); addStyleName(String); add(new HTML(String));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.addStyleName()",
    "boolean": 1,
    "context": "final HTML serverResponseLabel = new HTML();VerticalPanel dialogVPanel = new VerticalPanel(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addStyleName(String); add(new HTML(String)); add(textToServerLabel);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.add()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.VerticalPanel dialogVPanel = new VerticalPanel(); addStyleName(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(new HTML(String)); add(textToServerLabel); add(new HTML(String));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.HTML()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.VerticalPanel dialogVPanel = new VerticalPanel(); addStyleName(String); add(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>HTML(String)); add(textToServerLabel); add(new HTML(String));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.add()",
    "boolean": 1,
    "context": " addStyleName(String); add(new HTML(String)); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(textToServerLabel); add(new HTML(String)); add(serverResponseLabel);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.add()",
    "boolean": 1,
    "context": " add(new HTML(String)); add(textToServerLabel); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(new HTML(String)); add(serverResponseLabel); setHorizontalAlignment(ALIGN_RIGHT);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.HTML()",
    "boolean": 1,
    "context": " add(new HTML(String)); add(textToServerLabel); add(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>HTML(String)); add(serverResponseLabel); setHorizontalAlignment(ALIGN_RIGHT);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.add()",
    "boolean": 1,
    "context": " add(textToServerLabel); add(new HTML(String)); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(serverResponseLabel); setHorizontalAlignment(ALIGN_RIGHT); add(closeButton);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.setHorizontalAlignment()",
    "boolean": 1,
    "context": " add(new HTML(String)); add(serverResponseLabel); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setHorizontalAlignment(ALIGN_RIGHT); add(closeButton); setWidget(dialogVPanel);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui.VertupPanel",
    "truth_type": "com.google.gwt.user.client.ui.VerticalPanel",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.ALIGN_RIGHT",
    "boolean": 0,
    "context": " add(new HTML(String)); add(serverResponseLabel); setHorizontalAlignment(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ALIGN_RIGHT); add(closeButton); setWidget(dialogVPanel);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.add()",
    "boolean": 1,
    "context": " add(serverResponseLabel); setHorizontalAlignment(ALIGN_RIGHT); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(closeButton); setWidget(dialogVPanel); addClickHandler(new gwt gwt ClickHandler() { public void onClick(gwt gwt ClickEvent event) { hide();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DialogBox.setWidget()",
    "boolean": 1,
    "context": " setHorizontalAlignment(ALIGN_RIGHT); add(closeButton); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setWidget(dialogVPanel); addClickHandler(new gwt gwt ClickHandler() { public void onClick(gwt gwt ClickEvent event) { hide(); setEnabled(true);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button.addClickHandler()",
    "boolean": 1,
    "context": " add(closeButton); setWidget(dialogVPanel); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addClickHandler(new gwt gwt ClickHandler() { public void onClick(gwt gwt ClickEvent event) { hide(); setEnabled(true); setFocus(true);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": " add(closeButton); setWidget(dialogVPanel); addClickHandler(new <mask><mask><mask>.gwt gwt ClickHandler() { public void onClick(gwt gwt ClickEvent event) { hide(); setEnabled(true); setFocus(true);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": " add(closeButton); setWidget(dialogVPanel); addClickHandler(new gwt <mask><mask><mask>.gwt ClickHandler() { public void onClick(gwt gwt ClickEvent event) { hide(); setEnabled(true); setFocus(true);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client.KeyUpEvent.dom.client.ClickEvent.dom",
    "truth_type": "com.google.gwt.event.dom.client.KeyUpEvent.dom.client.ClickEvent.dom",
    "full_FQN": "com.google.gwt.event.dom.client.KeyUpEvent.dom.client.ClickEvent.dom.client.ClickHandler()",
    "boolean": 1,
    "context": " add(closeButton); setWidget(dialogVPanel); addClickHandler(new gwt gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>ClickHandler() { public void onClick(gwt gwt ClickEvent event) { hide(); setEnabled(true); setFocus(true);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": " add(closeButton); setWidget(dialogVPanel); addClickHandler(new gwt gwt ClickHandler() { public void onClick(<mask><mask><mask>.gwt gwt ClickEvent event) { hide(); setEnabled(true); setFocus(true);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": " add(closeButton); setWidget(dialogVPanel); addClickHandler(new gwt gwt ClickHandler() { public void onClick(gwt <mask><mask><mask>.gwt ClickEvent event) { hide(); setEnabled(true); setFocus(true);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client.KeyUpEvent.dom.client.ClickEvent.dom.client",
    "truth_type": "com.google.gwt.event.dom.client.KeyUpEvent.dom.client.ClickEvent.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.KeyUpEvent.dom.client.ClickEvent.dom.client.ClickEvent",
    "boolean": 1,
    "context": " add(closeButton); setWidget(dialogVPanel); addClickHandler(new gwt gwt ClickHandler() { public void onClick(gwt gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ClickEvent event) { hide(); setEnabled(true); setFocus(true);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DialogBox.hide()",
    "boolean": 1,
    "context": " add(closeButton); setWidget(dialogVPanel); addClickHandler(new gwt gwt ClickHandler() { public void onClick(gwt gwt ClickEvent event) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>hide(); setEnabled(true); setFocus(true);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button.setEnabled()",
    "boolean": 1,
    "context": " setWidget(dialogVPanel); addClickHandler(new gwt gwt ClickHandler() { public void onClick(gwt gwt ClickEvent event) { hide(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setEnabled(true); setFocus(true);} });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button.setFocus()",
    "boolean": 1,
    "context": " addClickHandler(new gwt gwt ClickHandler() { public void onClick(gwt gwt ClickEvent event) { hide(); setEnabled(true); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setFocus(true);} });class MyHandler implements gwt gwt ClickHandler, gwt gwt KeyUpHandler { public void onClick(gwt gwt ClickEvent event) { sendNameToServer();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": " setFocus(true);} });class MyHandler implements <mask><mask><mask>.gwt gwt ClickHandler, gwt gwt KeyUpHandler { public void onClick(gwt gwt ClickEvent event) { sendNameToServer();} public void onKeyUp(gwt gwt KeyUpEvent event) { if  gwt getNativeKeyCode() == gwt gwt KEY_ENTER) { sendNameToServer();} } private void sendNameToServer() { setText(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": " setFocus(true);} });class MyHandler implements gwt <mask><mask><mask>.gwt ClickHandler, gwt gwt KeyUpHandler { public void onClick(gwt gwt ClickEvent event) { sendNameToServer();} public void onKeyUp(gwt gwt KeyUpEvent event) { if  gwt getNativeKeyCode() == gwt gwt KEY_ENTER) { sendNameToServer();} } private void sendNameToServer() { setText(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client.KeyUpEvent.dom.client.ClickEvent.dom.client",
    "truth_type": "com.google.gwt.event.dom.client.KeyUpEvent.dom.client.ClickEvent.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.KeyUpEvent.dom.client.ClickEvent.dom.client.ClickHandler",
    "boolean": 1,
    "context": " setFocus(true);} });class MyHandler implements gwt gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ClickHandler, gwt gwt KeyUpHandler { public void onClick(gwt gwt ClickEvent event) { sendNameToServer();} public void onKeyUp(gwt gwt KeyUpEvent event) { if  gwt getNativeKeyCode() == gwt gwt KEY_ENTER) { sendNameToServer();} } private void sendNameToServer() { setText(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": " setFocus(true);} });class MyHandler implements gwt gwt ClickHandler, <mask><mask><mask>.gwt gwt KeyUpHandler { public void onClick(gwt gwt ClickEvent event) { sendNameToServer();} public void onKeyUp(gwt gwt KeyUpEvent event) { if  gwt getNativeKeyCode() == gwt gwt KEY_ENTER) { sendNameToServer();} } private void sendNameToServer() { setText(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": " setFocus(true);} });class MyHandler implements gwt gwt ClickHandler, gwt <mask><mask><mask>.gwt KeyUpHandler { public void onClick(gwt gwt ClickEvent event) { sendNameToServer();} public void onKeyUp(gwt gwt KeyUpEvent event) { if  gwt getNativeKeyCode() == gwt gwt KEY_ENTER) { sendNameToServer();} } private void sendNameToServer() { setText(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client.KeyUpEvent.dom.client.ClickEvent.dom.client",
    "truth_type": "com.google.gwt.event.dom.client.KeyUpEvent.dom.client.ClickEvent.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.KeyUpEvent.dom.client.ClickEvent.dom.client.KeyUpHandler",
    "boolean": 1,
    "context": " setFocus(true);} });class MyHandler implements gwt gwt ClickHandler, gwt gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.KeyUpHandler { public void onClick(gwt gwt ClickEvent event) { sendNameToServer();} public void onKeyUp(gwt gwt KeyUpEvent event) { if  gwt getNativeKeyCode() == gwt gwt KEY_ENTER) { sendNameToServer();} } private void sendNameToServer() { setText(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": " setFocus(true);} });class MyHandler implements gwt gwt ClickHandler, gwt gwt KeyUpHandler { public void onClick(<mask><mask><mask>.gwt gwt ClickEvent event) { sendNameToServer();} public void onKeyUp(gwt gwt KeyUpEvent event) { if  gwt getNativeKeyCode() == gwt gwt KEY_ENTER) { sendNameToServer();} } private void sendNameToServer() { setText(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": " setFocus(true);} });class MyHandler implements gwt gwt ClickHandler, gwt gwt KeyUpHandler { public void onClick(gwt <mask><mask><mask>.gwt ClickEvent event) { sendNameToServer();} public void onKeyUp(gwt gwt KeyUpEvent event) { if  gwt getNativeKeyCode() == gwt gwt KEY_ENTER) { sendNameToServer();} } private void sendNameToServer() { setText(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client.KeyUpEvent.dom.client.ClickEvent.dom.client",
    "truth_type": "com.google.gwt.event.dom.client.KeyUpEvent.dom.client.ClickEvent.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.KeyUpEvent.dom.client.ClickEvent.dom.client.ClickEvent",
    "boolean": 1,
    "context": " setFocus(true);} });class MyHandler implements gwt gwt ClickHandler, gwt gwt KeyUpHandler { public void onClick(gwt gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ClickEvent event) { sendNameToServer();} public void onKeyUp(gwt gwt KeyUpEvent event) { if  gwt getNativeKeyCode() == gwt gwt KEY_ENTER) { sendNameToServer();} } private void sendNameToServer() { setText(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": "} });class MyHandler implements gwt gwt ClickHandler, gwt gwt KeyUpHandler { public void onClick(gwt gwt ClickEvent event) { sendNameToServer();} public void onKeyUp(<mask><mask><mask>.gwt gwt KeyUpEvent event) { if  gwt getNativeKeyCode() == gwt gwt KEY_ENTER) { sendNameToServer();} } private void sendNameToServer() { setText(String);String textToServer = getText();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": "} });class MyHandler implements gwt gwt ClickHandler, gwt gwt KeyUpHandler { public void onClick(gwt gwt ClickEvent event) { sendNameToServer();} public void onKeyUp(gwt <mask><mask><mask>.gwt KeyUpEvent event) { if  gwt getNativeKeyCode() == gwt gwt KEY_ENTER) { sendNameToServer();} } private void sendNameToServer() { setText(String);String textToServer = getText();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client.KeyUpEvent.dom.client.ClickEvent.dom.client",
    "truth_type": "com.google.gwt.event.dom.client.KeyUpEvent.dom.client.ClickEvent.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.KeyUpEvent.dom.client.ClickEvent.dom.client.KeyUpEvent",
    "boolean": 1,
    "context": "} });class MyHandler implements gwt gwt ClickHandler, gwt gwt KeyUpHandler { public void onClick(gwt gwt ClickEvent event) { sendNameToServer();} public void onKeyUp(gwt gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.KeyUpEvent event) { if  gwt getNativeKeyCode() == gwt gwt KEY_ENTER) { sendNameToServer();} } private void sendNameToServer() { setText(String);String textToServer = getText();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": "} });class MyHandler implements gwt gwt ClickHandler, gwt gwt KeyUpHandler { public void onClick(gwt gwt ClickEvent event) { sendNameToServer();} public void onKeyUp(gwt gwt KeyUpEvent event) { if  <mask><mask><mask>.gwt getNativeKeyCode() == gwt gwt KEY_ENTER) { sendNameToServer();} } private void sendNameToServer() { setText(String);String textToServer = getText();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client.KeyUpEvent.dom.client",
    "truth_type": "com.google.gwt.event.dom.client.KeyUpEvent.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.KeyUpEvent.dom.client.ClickEvent.getNativeKeyCode()",
    "boolean": 1,
    "context": "} });class MyHandler implements gwt gwt ClickHandler, gwt gwt KeyUpHandler { public void onClick(gwt gwt ClickEvent event) { sendNameToServer();} public void onKeyUp(gwt gwt KeyUpEvent event) { if  gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getNativeKeyCode() == gwt gwt KEY_ENTER) { sendNameToServer();} } private void sendNameToServer() { setText(String);String textToServer = getText();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": "} });class MyHandler implements gwt gwt ClickHandler, gwt gwt KeyUpHandler { public void onClick(gwt gwt ClickEvent event) { sendNameToServer();} public void onKeyUp(gwt gwt KeyUpEvent event) { if  gwt getNativeKeyCode() == <mask><mask><mask>.gwt gwt KEY_ENTER) { sendNameToServer();} } private void sendNameToServer() { setText(String);String textToServer = getText();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": "} });class MyHandler implements gwt gwt ClickHandler, gwt gwt KeyUpHandler { public void onClick(gwt gwt ClickEvent event) { sendNameToServer();} public void onKeyUp(gwt gwt KeyUpEvent event) { if  gwt getNativeKeyCode() == gwt <mask><mask><mask>.gwt KEY_ENTER) { sendNameToServer();} } private void sendNameToServer() { setText(String);String textToServer = getText();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.domdom.client.KeyUpEvent.dom.client.ClickEvent.dom.client.KeyEvent",
    "truth_type": "com.google.gwt.event.dom.client.KeyUpEvent.dom.client.ClickEvent.dom.client.KeyCodes",
    "full_FQN": "com.google.gwt.event.dom.client.KeyUpEvent.dom.client.ClickEvent.dom.client.KeyCodes.KEY_ENTER",
    "boolean": 0,
    "context": "} });class MyHandler implements gwt gwt ClickHandler, gwt gwt KeyUpHandler { public void onClick(gwt gwt ClickEvent event) { sendNameToServer();} public void onKeyUp(gwt gwt KeyUpEvent event) { if  gwt getNativeKeyCode() == gwt gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.KEY_ENTER) { sendNameToServer();} } private void sendNameToServer() { setText(String);String textToServer = getText();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Label.setText()",
    "boolean": 1,
    "context": "class MyHandler implements gwt gwt ClickHandler, gwt gwt KeyUpHandler { public void onClick(gwt gwt ClickEvent event) { sendNameToServer();} public void onKeyUp(gwt gwt KeyUpEvent event) { if  gwt getNativeKeyCode() == gwt gwt KEY_ENTER) { sendNameToServer();} } private void sendNameToServer() { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setText(String);String textToServer = getText(); setEnabled(false);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.TextBox.getText()",
    "boolean": 1,
    "context": "} public void onKeyUp(gwt gwt KeyUpEvent event) { if  gwt getNativeKeyCode() == gwt gwt KEY_ENTER) { sendNameToServer();} } private void sendNameToServer() { setText(String);String textToServer = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getText(); setEnabled(false); setText(textToServer);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button.setEnabled()",
    "boolean": 1,
    "context": "} } private void sendNameToServer() { setText(String);String textToServer = getText(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setEnabled(false); setText(textToServer); setText(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Label.setText()",
    "boolean": 1,
    "context": "String textToServer = getText(); setEnabled(false); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setText(textToServer); setText(String);} } MyHandler handler = new MyHandler();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.HTML.setText()",
    "boolean": 1,
    "context": " setEnabled(false); setText(textToServer); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setText(String);} } MyHandler handler = new MyHandler(); addClickHandler(handler);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button.addClickHandler()",
    "boolean": 1,
    "context": " setText(String);} } MyHandler handler = new MyHandler(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addClickHandler(handler); addKeyUpHandler(handler);} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.TextBox.addKeyUpHandler()",
    "boolean": 1,
    "context": "} } MyHandler handler = new MyHandler(); addClickHandler(handler); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addKeyUpHandler(handler);} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.FormPanel",
    "boolean": 1,
    "context": "public class gwt_class_26 { public static void main(String[] arg) { final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.FormPanel formPanel = new FormPanel();get(String).add(formPanel);VerticalPanel openIdContainer = new VerticalPanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.FormPanel()",
    "boolean": 1,
    "context": "public class gwt_class_26 { public static void main(String[] arg) { final FormPanel formPanel = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>FormPanel();get(String).add(formPanel);VerticalPanel openIdContainer = new VerticalPanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootPanel.get()",
    "boolean": 1,
    "context": "public class gwt_class_26 { public static void main(String[] arg) { final FormPanel formPanel = new FormPanel();<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get(String).add(formPanel);VerticalPanel openIdContainer = new VerticalPanel(); add(openIdContainer);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel",
    "boolean": 1,
    "context": "public class gwt_class_26 { public static void main(String[] arg) { final FormPanel formPanel = new FormPanel();get(String).add(formPanel);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.VerticalPanel openIdContainer = new VerticalPanel(); add(openIdContainer);TextBox url = new TextBox();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel()",
    "boolean": 1,
    "context": "public class gwt_class_26 { public static void main(String[] arg) { final FormPanel formPanel = new FormPanel();get(String).add(formPanel);VerticalPanel openIdContainer = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>VerticalPanel(); add(openIdContainer);TextBox url = new TextBox();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.FormPanel.add()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.RootPanel.get(String).add(formPanel);VerticalPanel openIdContainer = new VerticalPanel(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(openIdContainer);TextBox url = new TextBox(); setText(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.TextBox",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.VerticalPanel openIdContainer = new VerticalPanel(); add(openIdContainer);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.TextBox url = new TextBox(); setText(String); setName(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.TextBox()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.VerticalPanel openIdContainer = new VerticalPanel(); add(openIdContainer);TextBox url = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>TextBox(); setText(String); setName(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.TextBox.setText()",
    "boolean": 1,
    "context": " add(openIdContainer);TextBox url = new TextBox(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setText(String); setName(String); add(url);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.TextBox.setName()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.TextBox url = new TextBox(); setText(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setName(String); add(url); setAction(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.add()",
    "boolean": 1,
    "context": " setText(String); setName(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(url); setAction(String); setMethod(METHOD_POST);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.FormPanel.setAction()",
    "boolean": 1,
    "context": " setName(String); add(url); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setAction(String); setMethod(METHOD_POST);Button btn = new Button(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.FormPanel.setMethod()",
    "boolean": 1,
    "context": " add(url); setAction(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setMethod(METHOD_POST);Button btn = new Button(String); addClickListener(new ClickListener() { public void onClick(Widget sender) { submit();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui.FormPanel",
    "truth_type": "com.google.gwt.user.client.ui.FormPanel",
    "full_FQN": "com.google.gwt.user.client.ui.FormPanel.METHOD_POST",
    "boolean": 1,
    "context": " add(url); setAction(String); setMethod(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.METHOD_POST);Button btn = new Button(String); addClickListener(new ClickListener() { public void onClick(Widget sender) { submit();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button",
    "boolean": 1,
    "context": " setAction(String); setMethod(METHOD_POST);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Button btn = new Button(String); addClickListener(new ClickListener() { public void onClick(Widget sender) { submit();} });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Button()",
    "boolean": 1,
    "context": " setAction(String); setMethod(METHOD_POST);Button btn = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Button(String); addClickListener(new ClickListener() { public void onClick(Widget sender) { submit();} });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button.addClickListener()",
    "boolean": 1,
    "context": " setMethod(METHOD_POST);Button btn = new Button(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addClickListener(new ClickListener() { public void onClick(Widget sender) { submit();} }); add(btn);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.ClickListener()",
    "boolean": 1,
    "context": " setMethod(METHOD_POST);Button btn = new Button(String); addClickListener(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>ClickListener() { public void onClick(Widget sender) { submit();} }); add(btn);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Widget",
    "boolean": 1,
    "context": " setMethod(METHOD_POST);Button btn = new Button(String); addClickListener(new ClickListener() { public void onClick(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Widget sender) { submit();} }); add(btn);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.FormPanel.submit()",
    "boolean": 1,
    "context": " setMethod(METHOD_POST);Button btn = new Button(String); addClickListener(new ClickListener() { public void onClick(Widget sender) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>submit();} }); add(btn);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.add()",
    "boolean": 1,
    "context": " addClickListener(new ClickListener() { public void onClick(Widget sender) { submit();} }); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(btn); addFormHandler(new FormHandler() { public void onSubmit(FormSubmitEvent event) { println(String + isCancelled());} public void onSubmitComplete(FormSubmitCompleteEvent event) { println(String + toString());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.FormPanel.addFormHandler()",
    "boolean": 1,
    "context": "} }); add(btn); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addFormHandler(new FormHandler() { public void onSubmit(FormSubmitEvent event) { println(String + isCancelled());} public void onSubmitComplete(FormSubmitCompleteEvent event) { println(String + toString());} });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.FormHandler()",
    "boolean": 1,
    "context": "} }); add(btn); addFormHandler(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>FormHandler() { public void onSubmit(FormSubmitEvent event) { println(String + isCancelled());} public void onSubmitComplete(FormSubmitCompleteEvent event) { println(String + toString());} });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.FormSubmitEvent",
    "boolean": 1,
    "context": "} }); add(btn); addFormHandler(new FormHandler() { public void onSubmit(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.FormSubmitEvent event) { println(String + isCancelled());} public void onSubmitComplete(FormSubmitCompleteEvent event) { println(String + toString());} });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.FormSubmitCompleteEvent.isCancelled()",
    "boolean": 1,
    "context": "} }); add(btn); addFormHandler(new FormHandler() { public void onSubmit(FormSubmitEvent event) { println(String + <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>isCancelled());} public void onSubmitComplete(FormSubmitCompleteEvent event) { println(String + toString());} });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.FormSubmitCompleteEvent",
    "boolean": 1,
    "context": " add(btn); addFormHandler(new FormHandler() { public void onSubmit(FormSubmitEvent event) { println(String + isCancelled());} public void onSubmitComplete(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.FormSubmitCompleteEvent event) { println(String + toString());} });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.FormSubmitCompleteEvent.toString()",
    "boolean": 1,
    "context": " add(btn); addFormHandler(new FormHandler() { public void onSubmit(FormSubmitEvent event) { println(String + isCancelled());} public void onSubmitComplete(FormSubmitCompleteEvent event) { println(String + <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>toString());} });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button",
    "boolean": 1,
    "context": "public class gwt_class_27 { public static void main(String[] arg) { final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Button sendButton = new Button(String); getElement().setId(String);get().getElement().appendChild getElement());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Button()",
    "boolean": 1,
    "context": "public class gwt_class_27 { public static void main(String[] arg) { final Button sendButton = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Button(String); getElement().setId(String);get().getElement().appendChild getElement());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button.getElement()",
    "boolean": 1,
    "context": "public class gwt_class_27 { public static void main(String[] arg) { final Button sendButton = new Button(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getElement().setId(String);get().getElement().appendChild getElement());NodeList buttonElement = get().getElementsByTagName(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootPanel.get()",
    "boolean": 1,
    "context": "public class gwt_class_27 { public static void main(String[] arg) { final Button sendButton = new Button(String); getElement().setId(String);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get().getElement().appendChild getElement());NodeList buttonElement = get().getElementsByTagName(String);if ((buttonElement != null) &&  getLength() > 0)) { getItem(0).setNodeValue(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button.getElement()",
    "boolean": 1,
    "context": "public class gwt_class_27 { public static void main(String[] arg) { final Button sendButton = new Button(String); getElement().setId(String);get().getElement().appendChild <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getElement());NodeList buttonElement = get().getElementsByTagName(String);if ((buttonElement != null) &&  getLength() > 0)) { getItem(0).setNodeValue(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.dom.client",
    "truth_type": "com.google.gwt.dom.client",
    "full_FQN": "com.google.gwt.dom.client.NodeList",
    "boolean": 1,
    "context": " getElement().setId(String);get().getElement().appendChild getElement());<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.NodeList buttonElement = get().getElementsByTagName(String);if ((buttonElement != null) &&  getLength() > 0)) { getItem(0).setNodeValue(String);} else { log(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.dom.client",
    "truth_type": "com.google.gwt.dom.client",
    "full_FQN": "com.google.gwt.dom.client.Document.get()",
    "boolean": 1,
    "context": " getElement().setId(String);get().getElement().appendChild getElement());NodeList buttonElement = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get().getElementsByTagName(String);if ((buttonElement != null) &&  getLength() > 0)) { getItem(0).setNodeValue(String);} else { log(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.dom.client",
    "truth_type": "com.google.gwt.dom.client",
    "full_FQN": "com.google.gwt.dom.client.NodeList.getLength()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.RootPanel.get().getElement().appendChild getElement());NodeList buttonElement = get().getElementsByTagName(String);if ((buttonElement != null) &&  <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getLength() > 0)) { getItem(0).setNodeValue(String);} else { log(String);} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.dom.client",
    "truth_type": "com.google.gwt.dom.client",
    "full_FQN": "com.google.gwt.dom.client.NodeList.getItem()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.RootPanel.get().getElement().appendChild getElement());NodeList buttonElement = get().getElementsByTagName(String);if ((buttonElement != null) &&  getLength() > 0)) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getItem(0).setNodeValue(String);} else { log(String);} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.dev.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.GWT.log()",
    "boolean": 0,
    "context": "com.google.gwt.dom.client.NodeList buttonElement = get().getElementsByTagName(String);if ((buttonElement != null) &&  getLength() > 0)) { getItem(0).setNodeValue(String);} else { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>log(String);} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.EntryPoint",
    "boolean": 1,
    "context": "public class gwt_class_28 { public class Test implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.EntryPoint { private static final String SERVER_URL = String;private static final String SERVER_ERROR = String + (String + String);public void onModuleLoad() { RequestBuilder requestBuilder = new RequestBuilder(GET, SERVER_URL);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder",
    "boolean": 1,
    "context": "public class gwt_class_28 { public class Test implements EntryPoint { private static final String SERVER_URL = String;private static final String SERVER_ERROR = String + (String + String);public void onModuleLoad() { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.RequestBuilder requestBuilder = new RequestBuilder(GET, SERVER_URL);try { sendRequest(null, new Jazz10RequestCallback());} catch (RequestException e) { alert(String + getMessage());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http",
    "truth_type": "com.google.gwt.http",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder()",
    "boolean": 1,
    "context": "public class gwt_class_28 { public class Test implements EntryPoint { private static final String SERVER_URL = String;private static final String SERVER_ERROR = String + (String + String);public void onModuleLoad() { RequestBuilder requestBuilder = new <mask><mask><mask><mask><mask><mask><mask><mask>RequestBuilder(GET, SERVER_URL);try { sendRequest(null, new Jazz10RequestCallback());} catch (RequestException e) { alert(String + getMessage());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client.RequestBuilder",
    "truth_type": "com.google.gwt.http.client.RequestBuilder",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.GET",
    "boolean": 1,
    "context": "public class gwt_class_28 { public class Test implements EntryPoint { private static final String SERVER_URL = String;private static final String SERVER_ERROR = String + (String + String);public void onModuleLoad() { RequestBuilder requestBuilder = new RequestBuilder(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.GET, SERVER_URL);try { sendRequest(null, new Jazz10RequestCallback());} catch (RequestException e) { alert(String + getMessage());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.sample.Devclient",
    "truth_type": "gwt.gwt_class_28.Test",
    "full_FQN": "gwt.gwt_class_28.Test.SERVER_URL",
    "boolean": 0,
    "context": "public class gwt_class_28 { public class Test implements EntryPoint { private static final String SERVER_URL = String;private static final String SERVER_ERROR = String + (String + String);public void onModuleLoad() { RequestBuilder requestBuilder = new RequestBuilder(GET, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.SERVER_URL);try { sendRequest(null, new Jazz10RequestCallback());} catch (RequestException e) { alert(String + getMessage());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.sendRequest()",
    "boolean": 1,
    "context": "private static final String SERVER_ERROR = String + (String + String);public void onModuleLoad() { RequestBuilder requestBuilder = new RequestBuilder(GET, SERVER_URL);try { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>sendRequest(null, new Jazz10RequestCallback());} catch (RequestException e) { alert(String + getMessage());} } class Jazz10RequestCallback implements RequestCallback { public void onError(Request request, Throwable exception) { alert(String + getMessage());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestException",
    "boolean": 1,
    "context": "public void onModuleLoad() { RequestBuilder requestBuilder = new RequestBuilder(GET, SERVER_URL);try { sendRequest(null, new Jazz10RequestCallback());} catch (<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.RequestException e) { alert(String + getMessage());} } class Jazz10RequestCallback implements RequestCallback { public void onError(Request request, Throwable exception) { alert(String + getMessage());} public void onResponseReceived(Request request, Response response) { alert getText());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.Window.alert()",
    "boolean": 1,
    "context": "public void onModuleLoad() { RequestBuilder requestBuilder = new RequestBuilder(GET, SERVER_URL);try { sendRequest(null, new Jazz10RequestCallback());} catch (RequestException e) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>alert(String + getMessage());} } class Jazz10RequestCallback implements RequestCallback { public void onError(Request request, Throwable exception) { alert(String + getMessage());} public void onResponseReceived(Request request, Response response) { alert getText());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestException.getMessage()",
    "boolean": 1,
    "context": "public void onModuleLoad() { RequestBuilder requestBuilder = new RequestBuilder(GET, SERVER_URL);try { sendRequest(null, new Jazz10RequestCallback());} catch (RequestException e) { alert(String + <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getMessage());} } class Jazz10RequestCallback implements RequestCallback { public void onError(Request request, Throwable exception) { alert(String + getMessage());} public void onResponseReceived(Request request, Response response) { alert getText());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestCallback",
    "boolean": 1,
    "context": "try { sendRequest(null, new Jazz10RequestCallback());} catch (RequestException e) { alert(String + getMessage());} } class Jazz10RequestCallback implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.RequestCallback { public void onError(Request request, Throwable exception) { alert(String + getMessage());} public void onResponseReceived(Request request, Response response) { alert getText());} } } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Request",
    "boolean": 1,
    "context": "try { sendRequest(null, new Jazz10RequestCallback());} catch (RequestException e) { alert(String + getMessage());} } class Jazz10RequestCallback implements RequestCallback { public void onError(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Request request, Throwable exception) { alert(String + getMessage());} public void onResponseReceived(Request request, Response response) { alert getText());} } } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.Window.alert()",
    "boolean": 1,
    "context": "try { sendRequest(null, new Jazz10RequestCallback());} catch (RequestException e) { alert(String + getMessage());} } class Jazz10RequestCallback implements RequestCallback { public void onError(Request request, Throwable exception) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>alert(String + getMessage());} public void onResponseReceived(Request request, Response response) { alert getText());} } } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Request",
    "boolean": 1,
    "context": "} catch (RequestException e) { alert(String + getMessage());} } class Jazz10RequestCallback implements RequestCallback { public void onError(Request request, Throwable exception) { alert(String + getMessage());} public void onResponseReceived(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Request request, Response response) { alert getText());} } } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response",
    "boolean": 1,
    "context": "} catch (RequestException e) { alert(String + getMessage());} } class Jazz10RequestCallback implements RequestCallback { public void onError(Request request, Throwable exception) { alert(String + getMessage());} public void onResponseReceived(Request request, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Response response) { alert getText());} } } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.Window",
    "truth_type": "com.google.gwt.user.client.Window",
    "full_FQN": "com.google.gwt.user.client.Window.alert",
    "boolean": 1,
    "context": "} catch (RequestException e) { alert(String + getMessage());} } class Jazz10RequestCallback implements RequestCallback { public void onError(Request request, Throwable exception) { alert(String + getMessage());} public void onResponseReceived(Request request, Response response) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.alert getText());} } } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response.getText()",
    "boolean": 1,
    "context": "} catch (RequestException e) { alert(String + getMessage());} } class Jazz10RequestCallback implements RequestCallback { public void onError(Request request, Throwable exception) { alert(String + getMessage());} public void onResponseReceived(Request request, Response response) { alert <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getText());} } } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.jsonp.client",
    "truth_type": "com.google.gwt.jsonp.client",
    "full_FQN": "com.google.gwt.jsonp.client.JsonpRequestBuilder",
    "boolean": 1,
    "context": "public class gwt_class_29 { private static final String SERVER_URL = String;private static final String SERVER_ERROR = String + (String + String);public void onModuleLoad() { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.JsonpRequestBuilder requestBuilder = new JsonpRequestBuilder();} class Jazz10RequestCallback implements AsyncCallback<Article> { @Override public void onFailure(Throwable caught) { alert(String + getMessage());} @Override public void onSuccess(Article result) { // TODO Auto-generated method stub alert toString());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.jsonp",
    "truth_type": "com.google.gwt.jsonp",
    "full_FQN": "com.google.gwt.jsonp.client.JsonpRequestBuilder()",
    "boolean": 1,
    "context": "public class gwt_class_29 { private static final String SERVER_URL = String;private static final String SERVER_ERROR = String + (String + String);public void onModuleLoad() { JsonpRequestBuilder requestBuilder = new <mask><mask><mask><mask><mask><mask><mask><mask><mask>JsonpRequestBuilder();} class Jazz10RequestCallback implements AsyncCallback<Article> { @Override public void onFailure(Throwable caught) { alert(String + getMessage());} @Override public void onSuccess(Article result) { // TODO Auto-generated method stub alert toString());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.rpc",
    "truth_type": "com.google.gwt.user.client.rpc",
    "full_FQN": "com.google.gwt.user.client.rpc.AsyncCallback",
    "boolean": 1,
    "context": "private static final String SERVER_ERROR = String + (String + String);public void onModuleLoad() { JsonpRequestBuilder requestBuilder = new JsonpRequestBuilder();} class Jazz10RequestCallback implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.AsyncCallback<Article> { @Override public void onFailure(Throwable caught) { alert(String + getMessage());} @Override public void onSuccess(Article result) { // TODO Auto-generated method stub alert toString());} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.net.n.p",
    "truth_type": "org.apache.commons.net.nntp",
    "full_FQN": "org.apache.commons.net.nntp.Article",
    "boolean": 0,
    "context": "private static final String SERVER_ERROR = String + (String + String);public void onModuleLoad() { JsonpRequestBuilder requestBuilder = new JsonpRequestBuilder();} class Jazz10RequestCallback implements AsyncCallback<<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Article> { @Override public void onFailure(Throwable caught) { alert(String + getMessage());} @Override public void onSuccess(Article result) { // TODO Auto-generated method stub alert toString());} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.Window.alert()",
    "boolean": 1,
    "context": "private static final String SERVER_ERROR = String + (String + String);public void onModuleLoad() { JsonpRequestBuilder requestBuilder = new JsonpRequestBuilder();} class Jazz10RequestCallback implements AsyncCallback<Article> { @Override public void onFailure(Throwable caught) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>alert(String + getMessage());} @Override public void onSuccess(Article result) { // TODO Auto-generated method stub alert toString());} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.p",
    "truth_type": "org.apache.commons.net.nntp",
    "full_FQN": "org.apache.commons.net.nntp.Article",
    "boolean": 0,
    "context": "public void onModuleLoad() { JsonpRequestBuilder requestBuilder = new JsonpRequestBuilder();} class Jazz10RequestCallback implements AsyncCallback<Article> { @Override public void onFailure(Throwable caught) { alert(String + getMessage());} @Override public void onSuccess(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Article result) { // TODO Auto-generated method stub alert toString());} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.Window",
    "truth_type": "com.google.gwt.user.client.Window",
    "full_FQN": "com.google.gwt.user.client.Window.alert",
    "boolean": 1,
    "context": "public void onModuleLoad() { JsonpRequestBuilder requestBuilder = new JsonpRequestBuilder();} class Jazz10RequestCallback implements AsyncCallback<Article> { @Override public void onFailure(Throwable caught) { alert(String + getMessage());} @Override public void onSuccess(Article result) { // TODO Auto-generated method stub <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.alert toString());} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.p",
    "truth_type": "org.apache.commons.net.nntp",
    "full_FQN": "org.apache.commons.net.nntp.Article.toString()",
    "boolean": 0,
    "context": "public void onModuleLoad() { JsonpRequestBuilder requestBuilder = new JsonpRequestBuilder();} class Jazz10RequestCallback implements AsyncCallback<Article> { @Override public void onFailure(Throwable caught) { alert(String + getMessage());} @Override public void onSuccess(Article result) { // TODO Auto-generated method stub alert <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>toString());} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.EntryPoint",
    "boolean": 1,
    "context": "public class gwt_class_3 implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.EntryPoint { private static final String SERVER_ERROR = String;TextBox nameTxt = new TextBox();Button btnSave = getBtnSave();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.TextBox",
    "boolean": 1,
    "context": "public class gwt_class_3 implements EntryPoint { private static final String SERVER_ERROR = String;<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.TextBox nameTxt = new TextBox();Button btnSave = getBtnSave();public void onModuleLoad() { get(String).add(nameTxt);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.TextBox()",
    "boolean": 1,
    "context": "public class gwt_class_3 implements EntryPoint { private static final String SERVER_ERROR = String;TextBox nameTxt = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>TextBox();Button btnSave = getBtnSave();public void onModuleLoad() { get(String).add(nameTxt);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button",
    "boolean": 1,
    "context": "public class gwt_class_3 implements EntryPoint { private static final String SERVER_ERROR = String;TextBox nameTxt = new TextBox();<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Button btnSave = getBtnSave();public void onModuleLoad() { get(String).add(nameTxt);get(String).add(btnSave);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootPanel.get()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.TextBox nameTxt = new TextBox();Button btnSave = getBtnSave();public void onModuleLoad() { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get(String).add(nameTxt);get(String).add(btnSave);} private Button getBtnSave() { Button btnSave = new Button(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootPanel.get()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.Button btnSave = getBtnSave();public void onModuleLoad() { get(String).add(nameTxt);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get(String).add(btnSave);} private Button getBtnSave() { Button btnSave = new Button(String);return btnSave;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button",
    "boolean": 1,
    "context": "public void onModuleLoad() { get(String).add(nameTxt);get(String).add(btnSave);} private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Button getBtnSave() { Button btnSave = new Button(String);return btnSave;} void saveData2DB(String name) { AsyncCallback<String> callback = new AsyncCallback<String>() { public void onFailure(Throwable caught) { alert(String + SERVER_ERROR);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button",
    "boolean": 1,
    "context": "public void onModuleLoad() { get(String).add(nameTxt);get(String).add(btnSave);} private Button getBtnSave() { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Button btnSave = new Button(String);return btnSave;} void saveData2DB(String name) { AsyncCallback<String> callback = new AsyncCallback<String>() { public void onFailure(Throwable caught) { alert(String + SERVER_ERROR);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Button()",
    "boolean": 1,
    "context": "public void onModuleLoad() { get(String).add(nameTxt);get(String).add(btnSave);} private Button getBtnSave() { Button btnSave = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Button(String);return btnSave;} void saveData2DB(String name) { AsyncCallback<String> callback = new AsyncCallback<String>() { public void onFailure(Throwable caught) { alert(String + SERVER_ERROR);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.rpc",
    "truth_type": "com.google.gwt.user.client.rpc",
    "full_FQN": "com.google.gwt.user.client.rpc.AsyncCallback",
    "boolean": 1,
    "context": "} private Button getBtnSave() { Button btnSave = new Button(String);return btnSave;} void saveData2DB(String name) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.AsyncCallback<String> callback = new AsyncCallback<String>() { public void onFailure(Throwable caught) { alert(String + SERVER_ERROR);} public void onSuccess(String result) { alert((String + result) + String);} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.rpc",
    "truth_type": "com.google.gwt.user.client.rpc",
    "full_FQN": "com.google.gwt.user.client.rpc.AsyncCallback",
    "boolean": 1,
    "context": "} private Button getBtnSave() { Button btnSave = new Button(String);return btnSave;} void saveData2DB(String name) { AsyncCallback<String> callback = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.AsyncCallback<String>() { public void onFailure(Throwable caught) { alert(String + SERVER_ERROR);} public void onSuccess(String result) { alert((String + result) + String);} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.Window.alert()",
    "boolean": 1,
    "context": "} private Button getBtnSave() { Button btnSave = new Button(String);return btnSave;} void saveData2DB(String name) { AsyncCallback<String> callback = new AsyncCallback<String>() { public void onFailure(Throwable caught) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>alert(String + SERVER_ERROR);} public void onSuccess(String result) { alert((String + result) + String);} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.Window.alert()",
    "boolean": 1,
    "context": "return btnSave;} void saveData2DB(String name) { AsyncCallback<String> callback = new AsyncCallback<String>() { public void onFailure(Throwable caught) { alert(String + SERVER_ERROR);} public void onSuccess(String result) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>alert((String + result) + String);} };} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.TextBox",
    "boolean": 1,
    "context": "public class gwt_class_30 { static <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.TextBox firstName = new TextBox();static TextBox surName = new TextBox();static DialogBox box;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.TextBox()",
    "boolean": 1,
    "context": "public class gwt_class_30 { static TextBox firstName = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>TextBox();static TextBox surName = new TextBox();static DialogBox box;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.TextBox",
    "boolean": 1,
    "context": "public class gwt_class_30 { static TextBox firstName = new TextBox();static <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.TextBox surName = new TextBox();static DialogBox box;public static DialogBox buildNewElecPopup() { DialogBox box = new DialogBox();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.TextBox()",
    "boolean": 1,
    "context": "public class gwt_class_30 { static TextBox firstName = new TextBox();static TextBox surName = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>TextBox();static DialogBox box;public static DialogBox buildNewElecPopup() { DialogBox box = new DialogBox();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DialogBox",
    "boolean": 1,
    "context": "public class gwt_class_30 { static TextBox firstName = new TextBox();static TextBox surName = new TextBox();static <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.DialogBox box;public static DialogBox buildNewElecPopup() { DialogBox box = new DialogBox(); setAutoHideEnabled(true);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DialogBox",
    "boolean": 1,
    "context": "static TextBox surName = new TextBox();static DialogBox box;public static <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.DialogBox buildNewElecPopup() { DialogBox box = new DialogBox(); setAutoHideEnabled(true); setText(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DialogBox",
    "boolean": 1,
    "context": "static TextBox surName = new TextBox();static DialogBox box;public static DialogBox buildNewElecPopup() { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.DialogBox box = new DialogBox(); setAutoHideEnabled(true); setText(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.DialogBox()",
    "boolean": 1,
    "context": "static TextBox surName = new TextBox();static DialogBox box;public static DialogBox buildNewElecPopup() { DialogBox box = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>DialogBox(); setAutoHideEnabled(true); setText(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DialogBox.setAutoHideEnabled()",
    "boolean": 1,
    "context": "static DialogBox box;public static DialogBox buildNewElecPopup() { DialogBox box = new DialogBox(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setAutoHideEnabled(true); setText(String); setAnimationEnabled(true);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DialogBox.setText()",
    "boolean": 1,
    "context": "public static DialogBox buildNewElecPopup() { DialogBox box = new DialogBox(); setAutoHideEnabled(true); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setText(String); setAnimationEnabled(true); setGlassEnabled(true);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DialogBox.setAnimationEnabled()",
    "boolean": 1,
    "context": " setAutoHideEnabled(true); setText(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setAnimationEnabled(true); setGlassEnabled(true);Grid dialogGrid = new Grid(2, 3);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DialogBox.setGlassEnabled()",
    "boolean": 1,
    "context": " setText(String); setAnimationEnabled(true); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setGlassEnabled(true);Grid dialogGrid = new Grid(2, 3); setPixelSize(250, 125);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Grid",
    "boolean": 1,
    "context": " setAnimationEnabled(true); setGlassEnabled(true);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Grid dialogGrid = new Grid(2, 3); setPixelSize(250, 125); setCellPadding(10);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Grid()",
    "boolean": 1,
    "context": " setAnimationEnabled(true); setGlassEnabled(true);Grid dialogGrid = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Grid(2, 3); setPixelSize(250, 125); setCellPadding(10);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Grid.setPixelSize()",
    "boolean": 1,
    "context": " setGlassEnabled(true);Grid dialogGrid = new Grid(2, 3); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setPixelSize(250, 125); setCellPadding(10); setWidget(0, 0, new HTML(String));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Grid.setCellPadding()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.Grid dialogGrid = new Grid(2, 3); setPixelSize(250, 125); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setCellPadding(10); setWidget(0, 0, new HTML(String)); setWidget(0, 1, firstName);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Grid.setWidget()",
    "boolean": 1,
    "context": " setPixelSize(250, 125); setCellPadding(10); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setWidget(0, 0, new HTML(String)); setWidget(0, 1, firstName); setWidget(1, 0, new HTML(String));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.HTML()",
    "boolean": 1,
    "context": " setPixelSize(250, 125); setCellPadding(10); setWidget(0, 0, new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>HTML(String)); setWidget(0, 1, firstName); setWidget(1, 0, new HTML(String));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Grid.setWidget()",
    "boolean": 1,
    "context": " setCellPadding(10); setWidget(0, 0, new HTML(String)); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setWidget(0, 1, firstName); setWidget(1, 0, new HTML(String)); setWidget(1, 1, surName);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Grid.setWidget()",
    "boolean": 1,
    "context": " setWidget(0, 0, new HTML(String)); setWidget(0, 1, firstName); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setWidget(1, 0, new HTML(String)); setWidget(1, 1, surName); add(dialogGrid);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.HTML()",
    "boolean": 1,
    "context": " setWidget(0, 0, new HTML(String)); setWidget(0, 1, firstName); setWidget(1, 0, new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>HTML(String)); setWidget(1, 1, surName); add(dialogGrid);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Grid.setWidget()",
    "boolean": 1,
    "context": " setWidget(0, 1, firstName); setWidget(1, 0, new HTML(String)); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setWidget(1, 1, surName); add(dialogGrid);return box;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DialogBox.add()",
    "boolean": 1,
    "context": " setWidget(1, 0, new HTML(String)); setWidget(1, 1, surName); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(dialogGrid);return box;} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestException",
    "boolean": 1,
    "context": "public class gwt_class_31 { public static void main(String[] arg) throws <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.RequestException { String serverUrl = null;RequestBuilder requestBuilder = new RequestBuilder(POST, encode(serverUrl)); setHeader(String, String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder",
    "boolean": 1,
    "context": "public class gwt_class_31 { public static void main(String[] arg) throws RequestException { String serverUrl = null;<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.RequestBuilder requestBuilder = new RequestBuilder(POST, encode(serverUrl)); setHeader(String, String); setHeader(String, String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http",
    "truth_type": "com.google.gwt.http",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder()",
    "boolean": 1,
    "context": "public class gwt_class_31 { public static void main(String[] arg) throws RequestException { String serverUrl = null;RequestBuilder requestBuilder = new <mask><mask><mask><mask><mask><mask><mask><mask>RequestBuilder(POST, encode(serverUrl)); setHeader(String, String); setHeader(String, String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client.RequestBuilder",
    "truth_type": "com.google.gwt.http.client.RequestBuilder",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.POST",
    "boolean": 1,
    "context": "public class gwt_class_31 { public static void main(String[] arg) throws RequestException { String serverUrl = null;RequestBuilder requestBuilder = new RequestBuilder(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.POST, encode(serverUrl)); setHeader(String, String); setHeader(String, String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.URL.encode()",
    "boolean": 1,
    "context": "public class gwt_class_31 { public static void main(String[] arg) throws RequestException { String serverUrl = null;RequestBuilder requestBuilder = new RequestBuilder(POST, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>encode(serverUrl)); setHeader(String, String); setHeader(String, String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.setHeader()",
    "boolean": 1,
    "context": "public class gwt_class_31 { public static void main(String[] arg) throws RequestException { String serverUrl = null;RequestBuilder requestBuilder = new RequestBuilder(POST, encode(serverUrl)); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setHeader(String, String); setHeader(String, String);String postData = null;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.setHeader()",
    "boolean": 1,
    "context": "com.google.gwt.http.client.RequestBuilder requestBuilder = new RequestBuilder(POST, encode(serverUrl)); setHeader(String, String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setHeader(String, String);String postData = null; sendRequest(postData, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived(Request request, Response response) { } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.sendRequest()",
    "boolean": 1,
    "context": " setHeader(String, String);String postData = null; <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>sendRequest(postData, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived(Request request, Response response) { } });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http",
    "truth_type": "com.google.gwt.http",
    "full_FQN": "com.google.gwt.http.client.RequestCallback()",
    "boolean": 1,
    "context": " setHeader(String, String);String postData = null; sendRequest(postData, new <mask><mask><mask><mask><mask><mask><mask><mask>RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived(Request request, Response response) { } });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Request",
    "boolean": 1,
    "context": " setHeader(String, String);String postData = null; sendRequest(postData, new RequestCallback() { public void onError(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Request request, Throwable exception) { } public void onResponseReceived(Request request, Response response) { } });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Request",
    "boolean": 1,
    "context": " setHeader(String, String);String postData = null; sendRequest(postData, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Request request, Response response) { } });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response",
    "boolean": 1,
    "context": " setHeader(String, String);String postData = null; sendRequest(postData, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived(Request request, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Response response) { } });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder",
    "boolean": 1,
    "context": "public class gwt_class_32 { public static void main(String[] arg) { String url = String;<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.RequestBuilder builder = new RequestBuilder(GET, encode(url));try { Request request = sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived(Request request, Response response) { println getText() + String);if (200 == getStatusCode()) { alert getText());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http",
    "truth_type": "com.google.gwt.http",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder()",
    "boolean": 1,
    "context": "public class gwt_class_32 { public static void main(String[] arg) { String url = String;RequestBuilder builder = new <mask><mask><mask><mask><mask><mask><mask><mask>RequestBuilder(GET, encode(url));try { Request request = sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived(Request request, Response response) { println getText() + String);if (200 == getStatusCode()) { alert getText());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client.RequestBuilder",
    "truth_type": "com.google.gwt.http.client.RequestBuilder",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.GET",
    "boolean": 1,
    "context": "public class gwt_class_32 { public static void main(String[] arg) { String url = String;RequestBuilder builder = new RequestBuilder(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.GET, encode(url));try { Request request = sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived(Request request, Response response) { println getText() + String);if (200 == getStatusCode()) { alert getText());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.URL.encode()",
    "boolean": 1,
    "context": "public class gwt_class_32 { public static void main(String[] arg) { String url = String;RequestBuilder builder = new RequestBuilder(GET, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>encode(url));try { Request request = sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived(Request request, Response response) { println getText() + String);if (200 == getStatusCode()) { alert getText());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Request",
    "boolean": 1,
    "context": "public class gwt_class_32 { public static void main(String[] arg) { String url = String;RequestBuilder builder = new RequestBuilder(GET, encode(url));try { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Request request = sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived(Request request, Response response) { println getText() + String);if (200 == getStatusCode()) { alert getText());} else { alert getText());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.sendRequest()",
    "boolean": 1,
    "context": "public class gwt_class_32 { public static void main(String[] arg) { String url = String;RequestBuilder builder = new RequestBuilder(GET, encode(url));try { Request request = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived(Request request, Response response) { println getText() + String);if (200 == getStatusCode()) { alert getText());} else { alert getText());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http",
    "truth_type": "com.google.gwt.http",
    "full_FQN": "com.google.gwt.http.client.RequestCallback()",
    "boolean": 1,
    "context": "public class gwt_class_32 { public static void main(String[] arg) { String url = String;RequestBuilder builder = new RequestBuilder(GET, encode(url));try { Request request = sendRequest(null, new <mask><mask><mask><mask><mask><mask><mask><mask>RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived(Request request, Response response) { println getText() + String);if (200 == getStatusCode()) { alert getText());} else { alert getText());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Request",
    "boolean": 1,
    "context": "public class gwt_class_32 { public static void main(String[] arg) { String url = String;RequestBuilder builder = new RequestBuilder(GET, encode(url));try { Request request = sendRequest(null, new RequestCallback() { public void onError(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Request request, Throwable exception) { } public void onResponseReceived(Request request, Response response) { println getText() + String);if (200 == getStatusCode()) { alert getText());} else { alert getText());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Request",
    "boolean": 1,
    "context": "public class gwt_class_32 { public static void main(String[] arg) { String url = String;RequestBuilder builder = new RequestBuilder(GET, encode(url));try { Request request = sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Request request, Response response) { println getText() + String);if (200 == getStatusCode()) { alert getText());} else { alert getText());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response",
    "boolean": 1,
    "context": "public class gwt_class_32 { public static void main(String[] arg) { String url = String;RequestBuilder builder = new RequestBuilder(GET, encode(url));try { Request request = sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived(Request request, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Response response) { println getText() + String);if (200 == getStatusCode()) { alert getText());} else { alert getText());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response.getText()",
    "boolean": 1,
    "context": "public class gwt_class_32 { public static void main(String[] arg) { String url = String;RequestBuilder builder = new RequestBuilder(GET, encode(url));try { Request request = sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived(Request request, Response response) { println <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getText() + String);if (200 == getStatusCode()) { alert getText());} else { alert getText());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response.getStatusCode()",
    "boolean": 1,
    "context": "com.google.gwt.http.client.RequestBuilder builder = new RequestBuilder(GET, encode(url));try { Request request = sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived(Request request, Response response) { println getText() + String);if (200 == <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getStatusCode()) { alert getText());} else { alert getText());} } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.Window",
    "truth_type": "com.google.gwt.user.client.Window",
    "full_FQN": "com.google.gwt.user.client.Window.alert",
    "boolean": 1,
    "context": "com.google.gwt.http.client.RequestBuilder builder = new RequestBuilder(GET, encode(url));try { Request request = sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived(Request request, Response response) { println getText() + String);if (200 == getStatusCode()) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.alert getText());} else { alert getText());} } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response.getText()",
    "boolean": 1,
    "context": "com.google.gwt.http.client.RequestBuilder builder = new RequestBuilder(GET, encode(url));try { Request request = sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived(Request request, Response response) { println getText() + String);if (200 == getStatusCode()) { alert <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getText());} else { alert getText());} } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.Window",
    "truth_type": "com.google.gwt.user.client.Window",
    "full_FQN": "com.google.gwt.user.client.Window.alert",
    "boolean": 1,
    "context": "try { Request request = sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived(Request request, Response response) { println getText() + String);if (200 == getStatusCode()) { alert getText());} else { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.alert getText());} } });} catch (RequestException e) { printStackTrace();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response.getText()",
    "boolean": 1,
    "context": "try { Request request = sendRequest(null, new RequestCallback() { public void onError(Request request, Throwable exception) { } public void onResponseReceived(Request request, Response response) { println getText() + String);if (200 == getStatusCode()) { alert getText());} else { alert <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getText());} } });} catch (RequestException e) { printStackTrace();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestException",
    "boolean": 1,
    "context": "} else { alert getText());} } });} catch (<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.RequestException e) { printStackTrace();} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestException.printStackTrace()",
    "boolean": 1,
    "context": "} else { alert getText());} } });} catch (RequestException e) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>printStackTrace();} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.EntryPoint",
    "boolean": 1,
    "context": "public class gwt_class_33 implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.EntryPoint { private DockPanel panel;private List clearables;public void onModuleLoad() { clearables = new ArrayList();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DockPanel",
    "boolean": 1,
    "context": "public class gwt_class_33 implements EntryPoint { private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.DockPanel panel;private List clearables;public void onModuleLoad() { clearables = new ArrayList();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "public class gwt_class_33 implements EntryPoint { private DockPanel panel;private <mask><mask><mask>.List clearables;public void onModuleLoad() { clearables = new ArrayList();initDockPanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList()",
    "boolean": 1,
    "context": "public class gwt_class_33 implements EntryPoint { private DockPanel panel;private List clearables;public void onModuleLoad() { clearables = new <mask><mask><mask>.ArrayList();initDockPanel(); add(buildActionPanel(), SOUTH);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DockPanel.add()",
    "boolean": 1,
    "context": "public void onModuleLoad() { clearables = new ArrayList();initDockPanel(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(buildActionPanel(), SOUTH); add(buildPizzaTypePanel(), WEST); add(buildToppingPanel(), EAST);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui.DockPanel",
    "truth_type": "com.google.gwt.user.client.ui.DockPanel",
    "full_FQN": "com.google.gwt.user.client.ui.DockPanel.SOUTH",
    "boolean": 1,
    "context": "public void onModuleLoad() { clearables = new ArrayList();initDockPanel(); add(buildActionPanel(), <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.SOUTH); add(buildPizzaTypePanel(), WEST); add(buildToppingPanel(), EAST);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DockPanel.add()",
    "boolean": 1,
    "context": "initDockPanel(); add(buildActionPanel(), SOUTH); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(buildPizzaTypePanel(), WEST); add(buildToppingPanel(), EAST);get(String).add(panel);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui.DockPanel",
    "truth_type": "com.google.gwt.user.client.ui.DockPanel",
    "full_FQN": "com.google.gwt.user.client.ui.DockPanel.WEST",
    "boolean": 1,
    "context": "initDockPanel(); add(buildActionPanel(), SOUTH); add(buildPizzaTypePanel(), <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.WEST); add(buildToppingPanel(), EAST);get(String).add(panel);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DockPanel.add()",
    "boolean": 1,
    "context": " add(buildActionPanel(), SOUTH); add(buildPizzaTypePanel(), WEST); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(buildToppingPanel(), EAST);get(String).add(panel);} private void initDockPanel() { panel = new DockPanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui.DockPanel",
    "truth_type": "com.google.gwt.user.client.ui.DockPanel",
    "full_FQN": "com.google.gwt.user.client.ui.DockPanel.EAST",
    "boolean": 1,
    "context": " add(buildActionPanel(), SOUTH); add(buildPizzaTypePanel(), WEST); add(buildToppingPanel(), <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.EAST);get(String).add(panel);} private void initDockPanel() { panel = new DockPanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootPanel.get()",
    "boolean": 1,
    "context": " add(buildPizzaTypePanel(), WEST); add(buildToppingPanel(), EAST);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get(String).add(panel);} private void initDockPanel() { panel = new DockPanel(); setBorderWidth(1);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.DockPanel()",
    "boolean": 1,
    "context": " add(buildToppingPanel(), EAST);get(String).add(panel);} private void initDockPanel() { panel = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>DockPanel(); setBorderWidth(1); setSpacing(5);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DockPanel.setBorderWidth()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.RootPanel.get(String).add(panel);} private void initDockPanel() { panel = new DockPanel(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setBorderWidth(1); setSpacing(5);} public HorizontalPanel buildActionPanel() { HorizontalPanel actions = new HorizontalPanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DockPanel.setSpacing()",
    "boolean": 1,
    "context": "} private void initDockPanel() { panel = new DockPanel(); setBorderWidth(1); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setSpacing(5);} public HorizontalPanel buildActionPanel() { HorizontalPanel actions = new HorizontalPanel(); setSpacing(10);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.HorizontalPanel",
    "boolean": 1,
    "context": " setBorderWidth(1); setSpacing(5);} public <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HorizontalPanel buildActionPanel() { HorizontalPanel actions = new HorizontalPanel(); setSpacing(10);Button clear = new Button(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.HorizontalPanel",
    "boolean": 1,
    "context": " setBorderWidth(1); setSpacing(5);} public HorizontalPanel buildActionPanel() { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HorizontalPanel actions = new HorizontalPanel(); setSpacing(10);Button clear = new Button(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.HorizontalPanel()",
    "boolean": 1,
    "context": " setBorderWidth(1); setSpacing(5);} public HorizontalPanel buildActionPanel() { HorizontalPanel actions = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>HorizontalPanel(); setSpacing(10);Button clear = new Button(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.HorizontalPanel.setSpacing()",
    "boolean": 1,
    "context": " setSpacing(5);} public HorizontalPanel buildActionPanel() { HorizontalPanel actions = new HorizontalPanel(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setSpacing(10);Button clear = new Button(String); addClickListener(new ClearClickListener());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button",
    "boolean": 1,
    "context": "} public HorizontalPanel buildActionPanel() { HorizontalPanel actions = new HorizontalPanel(); setSpacing(10);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Button clear = new Button(String); addClickListener(new ClearClickListener());Button newPizza = new Button(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Button()",
    "boolean": 1,
    "context": "} public HorizontalPanel buildActionPanel() { HorizontalPanel actions = new HorizontalPanel(); setSpacing(10);Button clear = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Button(String); addClickListener(new ClearClickListener());Button newPizza = new Button(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button.addClickListener()",
    "boolean": 1,
    "context": " setSpacing(10);Button clear = new Button(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addClickListener(new ClearClickListener());Button newPizza = new Button(String);Button submitOrder = new Button(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.Button clear = new Button(String); addClickListener(new ClearClickListener());<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Button newPizza = new Button(String);Button submitOrder = new Button(String); add(clear);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Button()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.Button clear = new Button(String); addClickListener(new ClearClickListener());Button newPizza = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Button(String);Button submitOrder = new Button(String); add(clear);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button",
    "boolean": 1,
    "context": " addClickListener(new ClearClickListener());Button newPizza = new Button(String);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Button submitOrder = new Button(String); add(clear); add(newPizza);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Button()",
    "boolean": 1,
    "context": " addClickListener(new ClearClickListener());Button newPizza = new Button(String);Button submitOrder = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Button(String); add(clear); add(newPizza);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.HorizontalPanel.add()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.Button newPizza = new Button(String);Button submitOrder = new Button(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(clear); add(newPizza); add(submitOrder);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.HorizontalPanel.add()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.Button submitOrder = new Button(String); add(clear); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(newPizza); add(submitOrder);return actions;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.HorizontalPanel.add()",
    "boolean": 1,
    "context": " add(clear); add(newPizza); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(submitOrder);return actions;} public static final String[] PIZZA_TYPES = new String[] { String, String, String, String, String };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel",
    "boolean": 1,
    "context": "return actions;} public static final String[] PIZZA_TYPES = new String[] { String, String, String, String, String };private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.VerticalPanel buildPizzaTypePanel() { VerticalPanel pizzaTypes = new VerticalPanel();HTML label = new HTML(String); add(label);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel",
    "boolean": 1,
    "context": "return actions;} public static final String[] PIZZA_TYPES = new String[] { String, String, String, String, String };private VerticalPanel buildPizzaTypePanel() { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.VerticalPanel pizzaTypes = new VerticalPanel();HTML label = new HTML(String); add(label);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel()",
    "boolean": 1,
    "context": "return actions;} public static final String[] PIZZA_TYPES = new String[] { String, String, String, String, String };private VerticalPanel buildPizzaTypePanel() { VerticalPanel pizzaTypes = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>VerticalPanel();HTML label = new HTML(String); add(label);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.HTML",
    "boolean": 1,
    "context": "} public static final String[] PIZZA_TYPES = new String[] { String, String, String, String, String };private VerticalPanel buildPizzaTypePanel() { VerticalPanel pizzaTypes = new VerticalPanel();<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HTML label = new HTML(String); add(label);for (int i = 0; i < length; i++) { RadioButton radio = new RadioButton(String, PIZZA_TYPES[i]);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.HTML()",
    "boolean": 1,
    "context": "} public static final String[] PIZZA_TYPES = new String[] { String, String, String, String, String };private VerticalPanel buildPizzaTypePanel() { VerticalPanel pizzaTypes = new VerticalPanel();HTML label = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>HTML(String); add(label);for (int i = 0; i < length; i++) { RadioButton radio = new RadioButton(String, PIZZA_TYPES[i]);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.add()",
    "boolean": 1,
    "context": "private VerticalPanel buildPizzaTypePanel() { VerticalPanel pizzaTypes = new VerticalPanel();HTML label = new HTML(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(label);for (int i = 0; i < length; i++) { RadioButton radio = new RadioButton(String, PIZZA_TYPES[i]); add(radio);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RadioButton",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.HTML label = new HTML(String); add(label);for (int i = 0; i < length; i++) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.RadioButton radio = new RadioButton(String, PIZZA_TYPES[i]); add(radio); add(radio);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.RadioButton()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.HTML label = new HTML(String); add(label);for (int i = 0; i < length; i++) { RadioButton radio = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>RadioButton(String, PIZZA_TYPES[i]); add(radio); add(radio);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.add()",
    "boolean": 1,
    "context": " add(label);for (int i = 0; i < length; i++) { RadioButton radio = new RadioButton(String, PIZZA_TYPES[i]); <mask><mask><mask>add(radio); add(radio);} return pizzaTypes;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.add()",
    "boolean": 1,
    "context": "for (int i = 0; i < length; i++) { RadioButton radio = new RadioButton(String, PIZZA_TYPES[i]); add(radio); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(radio);} return pizzaTypes;} public static final String[] TOPPINGS = new String[] { };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel",
    "boolean": 1,
    "context": "} return pizzaTypes;} public static final String[] TOPPINGS = new String[] { };private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.VerticalPanel buildToppingPanel() { VerticalPanel toppings = new VerticalPanel(); add(new HTML(String));Grid topGrid = new Grid(length + 1, 3);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel",
    "boolean": 1,
    "context": "} return pizzaTypes;} public static final String[] TOPPINGS = new String[] { };private VerticalPanel buildToppingPanel() { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.VerticalPanel toppings = new VerticalPanel(); add(new HTML(String));Grid topGrid = new Grid(length + 1, 3);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel()",
    "boolean": 1,
    "context": "} return pizzaTypes;} public static final String[] TOPPINGS = new String[] { };private VerticalPanel buildToppingPanel() { VerticalPanel toppings = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>VerticalPanel(); add(new HTML(String));Grid topGrid = new Grid(length + 1, 3);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.add()",
    "boolean": 1,
    "context": "} public static final String[] TOPPINGS = new String[] { };private VerticalPanel buildToppingPanel() { VerticalPanel toppings = new VerticalPanel(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(new HTML(String));Grid topGrid = new Grid(length + 1, 3); setText(0, 0, String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.HTML()",
    "boolean": 1,
    "context": "} public static final String[] TOPPINGS = new String[] { };private VerticalPanel buildToppingPanel() { VerticalPanel toppings = new VerticalPanel(); add(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>HTML(String));Grid topGrid = new Grid(length + 1, 3); setText(0, 0, String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Grid",
    "boolean": 1,
    "context": "private VerticalPanel buildToppingPanel() { VerticalPanel toppings = new VerticalPanel(); add(new HTML(String));<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Grid topGrid = new Grid(length + 1, 3); setText(0, 0, String); setText(0, 1, String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Grid()",
    "boolean": 1,
    "context": "private VerticalPanel buildToppingPanel() { VerticalPanel toppings = new VerticalPanel(); add(new HTML(String));Grid topGrid = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Grid(length + 1, 3); setText(0, 0, String); setText(0, 1, String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Grid.setText()",
    "boolean": 1,
    "context": " add(new HTML(String));Grid topGrid = new Grid(length + 1, 3); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setText(0, 0, String); setText(0, 1, String); setText(0, 2, String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Grid.setText()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.Grid topGrid = new Grid(length + 1, 3); setText(0, 0, String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setText(0, 1, String); setText(0, 2, String);for (int i = 0; i < length; i++) { Button button = new Button(TOPPINGS[i]);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Grid.setText()",
    "boolean": 1,
    "context": " setText(0, 0, String); setText(0, 1, String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setText(0, 2, String);for (int i = 0; i < length; i++) { Button button = new Button(TOPPINGS[i]);CheckBox leftCheckBox = new CheckBox();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button",
    "boolean": 1,
    "context": " setText(0, 1, String); setText(0, 2, String);for (int i = 0; i < length; i++) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Button button = new Button(TOPPINGS[i]);CheckBox leftCheckBox = new CheckBox();CheckBox rightCheckBox = new CheckBox();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Button()",
    "boolean": 1,
    "context": " setText(0, 1, String); setText(0, 2, String);for (int i = 0; i < length; i++) { Button button = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Button(TOPPINGS[i]);CheckBox leftCheckBox = new CheckBox();CheckBox rightCheckBox = new CheckBox();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.CheckBox",
    "boolean": 1,
    "context": " setText(0, 2, String);for (int i = 0; i < length; i++) { Button button = new Button(TOPPINGS[i]);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.CheckBox leftCheckBox = new CheckBox();CheckBox rightCheckBox = new CheckBox(); add(leftCheckBox);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.CheckBox()",
    "boolean": 1,
    "context": " setText(0, 2, String);for (int i = 0; i < length; i++) { Button button = new Button(TOPPINGS[i]);CheckBox leftCheckBox = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>CheckBox();CheckBox rightCheckBox = new CheckBox(); add(leftCheckBox);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.CheckBox",
    "boolean": 1,
    "context": "for (int i = 0; i < length; i++) { Button button = new Button(TOPPINGS[i]);CheckBox leftCheckBox = new CheckBox();<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.CheckBox rightCheckBox = new CheckBox(); add(leftCheckBox); add(rightCheckBox);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.CheckBox()",
    "boolean": 1,
    "context": "for (int i = 0; i < length; i++) { Button button = new Button(TOPPINGS[i]);CheckBox leftCheckBox = new CheckBox();CheckBox rightCheckBox = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>CheckBox(); add(leftCheckBox); add(rightCheckBox);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.add()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.CheckBox leftCheckBox = new CheckBox();CheckBox rightCheckBox = new CheckBox(); <mask><mask><mask>add(leftCheckBox); add(rightCheckBox); addClickListener(new ToppingButtonListener( leftCheckBox, rightCheckBox));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.add()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.CheckBox rightCheckBox = new CheckBox(); add(leftCheckBox); <mask><mask><mask>add(rightCheckBox); addClickListener(new ToppingButtonListener( leftCheckBox, rightCheckBox)); setWidget(i + 1, 0, button);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button.addClickListener()",
    "boolean": 1,
    "context": " add(leftCheckBox); add(rightCheckBox); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addClickListener(new ToppingButtonListener( leftCheckBox, rightCheckBox)); setWidget(i + 1, 0, button); setWidget(i + 1, 1, leftCheckBox);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Grid.setWidget()",
    "boolean": 1,
    "context": " add(rightCheckBox); addClickListener(new ToppingButtonListener( leftCheckBox, rightCheckBox)); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setWidget(i + 1, 0, button); setWidget(i + 1, 1, leftCheckBox); setWidget(i + 1, 2, rightCheckBox);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Grid.setWidget()",
    "boolean": 1,
    "context": " addClickListener(new ToppingButtonListener( leftCheckBox, rightCheckBox)); setWidget(i + 1, 0, button); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setWidget(i + 1, 1, leftCheckBox); setWidget(i + 1, 2, rightCheckBox);} add(topGrid);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Grid.setWidget()",
    "boolean": 1,
    "context": " setWidget(i + 1, 0, button); setWidget(i + 1, 1, leftCheckBox); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setWidget(i + 1, 2, rightCheckBox);} add(topGrid);return toppings;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.add()",
    "boolean": 1,
    "context": " setWidget(i + 1, 1, leftCheckBox); setWidget(i + 1, 2, rightCheckBox);} <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(topGrid);return toppings;} private class ClearClickListener implements ClickListener { public void onClick(Widget sender) { for (Iterator iter = iterator(); hasNext();) { CheckBox cb = (CheckBox) next();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.ClickListener",
    "boolean": 1,
    "context": "} add(topGrid);return toppings;} private class ClearClickListener implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ClickListener { public void onClick(Widget sender) { for (Iterator iter = iterator(); hasNext();) { CheckBox cb = (CheckBox) next(); setChecked(false);} } } private class ToppingButtonListener implements ClickListener { private CheckBox cb1;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Widget",
    "boolean": 1,
    "context": "} add(topGrid);return toppings;} private class ClearClickListener implements ClickListener { public void onClick(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Widget sender) { for (Iterator iter = iterator(); hasNext();) { CheckBox cb = (CheckBox) next(); setChecked(false);} } } private class ToppingButtonListener implements ClickListener { private CheckBox cb1;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator",
    "boolean": 1,
    "context": "} add(topGrid);return toppings;} private class ClearClickListener implements ClickListener { public void onClick(Widget sender) { for (<mask><mask><mask>.Iterator iter = iterator(); hasNext();) { CheckBox cb = (CheckBox) next(); setChecked(false);} } } private class ToppingButtonListener implements ClickListener { private CheckBox cb1;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.iterator()",
    "boolean": 1,
    "context": "} add(topGrid);return toppings;} private class ClearClickListener implements ClickListener { public void onClick(Widget sender) { for (Iterator iter = <mask><mask><mask>iterator(); hasNext();) { CheckBox cb = (CheckBox) next(); setChecked(false);} } } private class ToppingButtonListener implements ClickListener { private CheckBox cb1;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator.hasNext()",
    "boolean": 1,
    "context": "} add(topGrid);return toppings;} private class ClearClickListener implements ClickListener { public void onClick(Widget sender) { for (Iterator iter = iterator(); <mask><mask><mask>hasNext();) { CheckBox cb = (CheckBox) next(); setChecked(false);} } } private class ToppingButtonListener implements ClickListener { private CheckBox cb1;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.CheckBox",
    "boolean": 1,
    "context": "} add(topGrid);return toppings;} private class ClearClickListener implements ClickListener { public void onClick(Widget sender) { for (Iterator iter = iterator(); hasNext();) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.CheckBox cb = (CheckBox) next(); setChecked(false);} } } private class ToppingButtonListener implements ClickListener { private CheckBox cb1;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.CheckBox",
    "boolean": 1,
    "context": "} add(topGrid);return toppings;} private class ClearClickListener implements ClickListener { public void onClick(Widget sender) { for (Iterator iter = iterator(); hasNext();) { CheckBox cb = (<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.CheckBox) next(); setChecked(false);} } } private class ToppingButtonListener implements ClickListener { private CheckBox cb1;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator.next()",
    "boolean": 1,
    "context": "} add(topGrid);return toppings;} private class ClearClickListener implements ClickListener { public void onClick(Widget sender) { for (Iterator iter = iterator(); hasNext();) { CheckBox cb = (CheckBox) <mask><mask><mask>next(); setChecked(false);} } } private class ToppingButtonListener implements ClickListener { private CheckBox cb1;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.CheckBox.setChecked()",
    "boolean": 1,
    "context": "return toppings;} private class ClearClickListener implements ClickListener { public void onClick(Widget sender) { for (Iterator iter = iterator(); hasNext();) { CheckBox cb = (CheckBox) next(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setChecked(false);} } } private class ToppingButtonListener implements ClickListener { private CheckBox cb1;private CheckBox cb2;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.ClickListener",
    "boolean": 1,
    "context": "} private class ClearClickListener implements ClickListener { public void onClick(Widget sender) { for (Iterator iter = iterator(); hasNext();) { CheckBox cb = (CheckBox) next(); setChecked(false);} } } private class ToppingButtonListener implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ClickListener { private CheckBox cb1;private CheckBox cb2;public ToppingButtonListener(CheckBox cb1, CheckBox cb2) { cb1 = cb1;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.CheckBox",
    "boolean": 1,
    "context": "} private class ClearClickListener implements ClickListener { public void onClick(Widget sender) { for (Iterator iter = iterator(); hasNext();) { CheckBox cb = (CheckBox) next(); setChecked(false);} } } private class ToppingButtonListener implements ClickListener { private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.CheckBox cb1;private CheckBox cb2;public ToppingButtonListener(CheckBox cb1, CheckBox cb2) { cb1 = cb1;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.CheckBox",
    "boolean": 1,
    "context": " setChecked(false);} } } private class ToppingButtonListener implements ClickListener { private CheckBox cb1;private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.CheckBox cb2;public ToppingButtonListener(CheckBox cb1, CheckBox cb2) { cb1 = cb1;cb2 = cb2;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.CheckBox",
    "boolean": 1,
    "context": "} } } private class ToppingButtonListener implements ClickListener { private CheckBox cb1;private CheckBox cb2;public ToppingButtonListener(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.CheckBox cb1, CheckBox cb2) { cb1 = cb1;cb2 = cb2;} public void onClick(Widget sender) { boolean unchecked =  isChecked() &&  isChecked();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.CheckBox",
    "boolean": 1,
    "context": "} } } private class ToppingButtonListener implements ClickListener { private CheckBox cb1;private CheckBox cb2;public ToppingButtonListener(CheckBox cb1, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.CheckBox cb2) { cb1 = cb1;cb2 = cb2;} public void onClick(Widget sender) { boolean unchecked =  isChecked() &&  isChecked();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Widget",
    "boolean": 1,
    "context": "public ToppingButtonListener(CheckBox cb1, CheckBox cb2) { cb1 = cb1;cb2 = cb2;} public void onClick(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Widget sender) { boolean unchecked =  isChecked() &&  isChecked(); setChecked(unchecked); setChecked(unchecked);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.CheckBox.isChecked()",
    "boolean": 1,
    "context": "public ToppingButtonListener(CheckBox cb1, CheckBox cb2) { cb1 = cb1;cb2 = cb2;} public void onClick(Widget sender) { boolean unchecked =  <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>isChecked() &&  isChecked(); setChecked(unchecked); setChecked(unchecked);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.CheckBox.isChecked()",
    "boolean": 1,
    "context": "public ToppingButtonListener(CheckBox cb1, CheckBox cb2) { cb1 = cb1;cb2 = cb2;} public void onClick(Widget sender) { boolean unchecked =  isChecked() &&  <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>isChecked(); setChecked(unchecked); setChecked(unchecked);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.CheckBox.setChecked()",
    "boolean": 1,
    "context": "this.cb2 = cb2;} public void onClick(Widget sender) { boolean unchecked =  isChecked() &&  isChecked(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setChecked(unchecked); setChecked(unchecked);} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.CheckBox.setChecked()",
    "boolean": 1,
    "context": "} public void onClick(Widget sender) { boolean unchecked =  isChecked() &&  isChecked(); setChecked(unchecked); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setChecked(unchecked);} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.FormPanel",
    "boolean": 1,
    "context": "public class gwt_class_34 { public static void main(String arg[]){ <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.FormPanel form = null;Button submit = null;form = wrap(getElementById(String));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button",
    "boolean": 1,
    "context": "public class gwt_class_34 { public static void main(String arg[]){ FormPanel form = null;<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Button submit = null;form = wrap(getElementById(String)); setEncoding(ENCODING_MULTIPART);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.FormPanel.wrap()",
    "boolean": 1,
    "context": "public class gwt_class_34 { public static void main(String arg[]){ FormPanel form = null;Button submit = null;form = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>wrap(getElementById(String)); setEncoding(ENCODING_MULTIPART);submit = wrap(getElementById(String));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.DOM.getElementById()",
    "boolean": 1,
    "context": "public class gwt_class_34 { public static void main(String arg[]){ FormPanel form = null;Button submit = null;form = wrap(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getElementById(String)); setEncoding(ENCODING_MULTIPART);submit = wrap(getElementById(String));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.FormPanel.setEncoding()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.Button submit = null;form = wrap(getElementById(String)); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setEncoding(ENCODING_MULTIPART);submit = wrap(getElementById(String)); addClickHandler(new gwt ClickHandler() { public void onClick(gwt ClickEvent event) { } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui.FormPanel",
    "truth_type": "com.google.gwt.user.client.ui.FormPanel",
    "full_FQN": "com.google.gwt.user.client.ui.FormPanel.ENCODING_MULTIPART",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.Button submit = null;form = wrap(getElementById(String)); setEncoding(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ENCODING_MULTIPART);submit = wrap(getElementById(String)); addClickHandler(new gwt ClickHandler() { public void onClick(gwt ClickEvent event) { } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button.wrap()",
    "boolean": 1,
    "context": "form = wrap(getElementById(String)); setEncoding(ENCODING_MULTIPART);submit = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>wrap(getElementById(String)); addClickHandler(new gwt ClickHandler() { public void onClick(gwt ClickEvent event) { } });gwt HandlerRegistration formSubmitHandler = addSubmitHandler(new SubmitHandler(){ public void onSubmit(SubmitEvent event) { } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.DOM.getElementById()",
    "boolean": 1,
    "context": "form = wrap(getElementById(String)); setEncoding(ENCODING_MULTIPART);submit = wrap(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getElementById(String)); addClickHandler(new gwt ClickHandler() { public void onClick(gwt ClickEvent event) { } });gwt HandlerRegistration formSubmitHandler = addSubmitHandler(new SubmitHandler(){ public void onSubmit(SubmitEvent event) { } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button.addClickHandler()",
    "boolean": 1,
    "context": " setEncoding(ENCODING_MULTIPART);submit = wrap(getElementById(String)); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addClickHandler(new gwt ClickHandler() { public void onClick(gwt ClickEvent event) { } });gwt HandlerRegistration formSubmitHandler = addSubmitHandler(new SubmitHandler(){ public void onSubmit(SubmitEvent event) { } });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": " setEncoding(ENCODING_MULTIPART);submit = wrap(getElementById(String)); addClickHandler(new <mask><mask><mask>.gwt ClickHandler() { public void onClick(gwt ClickEvent event) { } });gwt HandlerRegistration formSubmitHandler = addSubmitHandler(new SubmitHandler(){ public void onSubmit(SubmitEvent event) { } });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui.FormPanel.ClickEvent.dom",
    "truth_type": "com.google.gwt.user.client.ui.FormPanel.SubmitEvent.dom",
    "full_FQN": "com.google.gwt.user.client.ui.FormPanel.SubmitEvent.dom.client.ClickHandler()",
    "boolean": 0,
    "context": " setEncoding(ENCODING_MULTIPART);submit = wrap(getElementById(String)); addClickHandler(new gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>ClickHandler() { public void onClick(gwt ClickEvent event) { } });gwt HandlerRegistration formSubmitHandler = addSubmitHandler(new SubmitHandler(){ public void onSubmit(SubmitEvent event) { } });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": " setEncoding(ENCODING_MULTIPART);submit = wrap(getElementById(String)); addClickHandler(new gwt ClickHandler() { public void onClick(<mask><mask><mask>.gwt ClickEvent event) { } });gwt HandlerRegistration formSubmitHandler = addSubmitHandler(new SubmitHandler(){ public void onSubmit(SubmitEvent event) { } });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui.FormPanel.ClickEvent.dom.client",
    "truth_type": "com.google.gwt.user.client.ui.FormPanel.SubmitEvent.dom.client",
    "full_FQN": "com.google.gwt.user.client.ui.FormPanel.SubmitEvent.dom.client.ClickEvent",
    "boolean": 0,
    "context": " setEncoding(ENCODING_MULTIPART);submit = wrap(getElementById(String)); addClickHandler(new gwt ClickHandler() { public void onClick(gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ClickEvent event) { } });gwt HandlerRegistration formSubmitHandler = addSubmitHandler(new SubmitHandler(){ public void onSubmit(SubmitEvent event) { } });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": "submit = wrap(getElementById(String)); addClickHandler(new gwt ClickHandler() { public void onClick(gwt ClickEvent event) { } });<mask><mask><mask>.gwt HandlerRegistration formSubmitHandler = addSubmitHandler(new SubmitHandler(){ public void onSubmit(SubmitEvent event) { } });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui.FormPanel.SubmitEvent.shared",
    "truth_type": "com.google.gwt.user.client.ui.FormPanel.SubmitEvent.shared",
    "full_FQN": "com.google.gwt.user.client.ui.FormPanel.SubmitEvent.shared.HandlerRegistration",
    "boolean": 1,
    "context": "submit = wrap(getElementById(String)); addClickHandler(new gwt ClickHandler() { public void onClick(gwt ClickEvent event) { } });gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HandlerRegistration formSubmitHandler = addSubmitHandler(new SubmitHandler(){ public void onSubmit(SubmitEvent event) { } });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.FormPanel.addSubmitHandler()",
    "boolean": 1,
    "context": "submit = wrap(getElementById(String)); addClickHandler(new gwt ClickHandler() { public void onClick(gwt ClickEvent event) { } });gwt HandlerRegistration formSubmitHandler = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addSubmitHandler(new SubmitHandler(){ public void onSubmit(SubmitEvent event) { } });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.FormPanel.SubmitHandler()",
    "boolean": 1,
    "context": "submit = wrap(getElementById(String)); addClickHandler(new gwt ClickHandler() { public void onClick(gwt ClickEvent event) { } });gwt HandlerRegistration formSubmitHandler = addSubmitHandler(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>SubmitHandler(){ public void onSubmit(SubmitEvent event) { } });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui.FormPanel",
    "truth_type": "com.google.gwt.user.client.ui.FormPanel",
    "full_FQN": "com.google.gwt.user.client.ui.FormPanel.SubmitEvent",
    "boolean": 1,
    "context": "submit = wrap(getElementById(String)); addClickHandler(new gwt ClickHandler() { public void onClick(gwt ClickEvent event) { } });gwt HandlerRegistration formSubmitHandler = addSubmitHandler(new SubmitHandler(){ public void onSubmit(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.SubmitEvent event) { } });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.animation.client",
    "truth_type": "com.google.gwt.animation.client",
    "full_FQN": "com.google.gwt.animation.client.Animation",
    "boolean": 1,
    "context": "public class gwt_class_35 { public class Scroller extends <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Animation { private FlowPanel scroller;private final Element e;public Scroller() { scroller = new FlowPanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.FlowPanel",
    "boolean": 1,
    "context": "public class gwt_class_35 { public class Scroller extends Animation { private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.FlowPanel scroller;private final Element e;public Scroller() { scroller = new FlowPanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.dom.client",
    "truth_type": "com.google.gwt.dom.client",
    "full_FQN": "com.google.gwt.dom.client.Element",
    "boolean": 1,
    "context": "public class gwt_class_35 { public class Scroller extends Animation { private FlowPanel scroller;private final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Element e;public Scroller() { scroller = new FlowPanel();e = getElement();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.FlowPanel()",
    "boolean": 1,
    "context": "public class gwt_class_35 { public class Scroller extends Animation { private FlowPanel scroller;private final Element e;public Scroller() { scroller = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>FlowPanel();e = getElement();} public void scrollTo(int position, int milliseconds) { int scrollStart = getOffsetLeft();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.FlowPanel.getElement()",
    "boolean": 1,
    "context": "private final Element e;public Scroller() { scroller = new FlowPanel();e = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getElement();} public void scrollTo(int position, int milliseconds) { int scrollStart = getOffsetLeft();int scrollStop = position;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.dom.client",
    "truth_type": "com.google.gwt.dom.client",
    "full_FQN": "com.google.gwt.dom.client.Element.getOffsetLeft()",
    "boolean": 1,
    "context": "public Scroller() { scroller = new FlowPanel();e = getElement();} public void scrollTo(int position, int milliseconds) { int scrollStart = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getOffsetLeft();int scrollStop = position;log(((String + scrollStart) + String) + scrollStop);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.GWT.log()",
    "boolean": 1,
    "context": "} public void scrollTo(int position, int milliseconds) { int scrollStart = getOffsetLeft();int scrollStop = position;<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>log(((String + scrollStart) + String) + scrollStop);run(milliseconds);} @Override protected void onUpdate(double progress) { int scrollStart = 0;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.dom.client.Style",
    "truth_type": "com.google.gwt.dom.client.Style",
    "full_FQN": "com.google.gwt.dom.client.Style.Unit",
    "boolean": 1,
    "context": "int scrollStop = 0;double position = scrollStart + (progress * (scrollStop - scrollStart));<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Unit u = null; getStyle().setLeft(position, u);} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.dom.client",
    "truth_type": "com.google.gwt.dom.client",
    "full_FQN": "com.google.gwt.dom.client.Element.getStyle()",
    "boolean": 1,
    "context": "double position = scrollStart + (progress * (scrollStop - scrollStart));Unit u = null; <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getStyle().setLeft(position, u);} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.AbsolutePanel",
    "boolean": 1,
    "context": "int height = 200;int overHeight = 40;<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.AbsolutePanel absPanel = new AbsolutePanel(); setSize(width + String, height + String);SimplePanel underPanel = new SimplePanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.AbsolutePanel()",
    "boolean": 1,
    "context": "int height = 200;int overHeight = 40;AbsolutePanel absPanel = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>AbsolutePanel(); setSize(width + String, height + String);SimplePanel underPanel = new SimplePanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.AbsolutePanel.setSize()",
    "boolean": 1,
    "context": "int overHeight = 40;AbsolutePanel absPanel = new AbsolutePanel(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setSize(width + String, height + String);SimplePanel underPanel = new SimplePanel(); setWidth(width + String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.SimplePanel",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.AbsolutePanel absPanel = new AbsolutePanel(); setSize(width + String, height + String);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.SimplePanel underPanel = new SimplePanel(); setWidth(width + String); setHeight(height + String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.SimplePanel()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.AbsolutePanel absPanel = new AbsolutePanel(); setSize(width + String, height + String);SimplePanel underPanel = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>SimplePanel(); setWidth(width + String); setHeight(height + String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.SimplePanel.setWidth()",
    "boolean": 1,
    "context": " setSize(width + String, height + String);SimplePanel underPanel = new SimplePanel(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setWidth(width + String); setHeight(height + String); getElement().getStyle().setBackgroundColor(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.SimplePanel.setHeight()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.SimplePanel underPanel = new SimplePanel(); setWidth(width + String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setHeight(height + String); getElement().getStyle().setBackgroundColor(String);SimplePanel overPanel = new SimplePanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.SimplePanel.getElement()",
    "boolean": 1,
    "context": " setWidth(width + String); setHeight(height + String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getElement().getStyle().setBackgroundColor(String);SimplePanel overPanel = new SimplePanel(); setWidth(width + String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.SimplePanel",
    "boolean": 1,
    "context": " setHeight(height + String); getElement().getStyle().setBackgroundColor(String);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.SimplePanel overPanel = new SimplePanel(); setWidth(width + String); setHeight(overHeight + String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.SimplePanel()",
    "boolean": 1,
    "context": " setHeight(height + String); getElement().getStyle().setBackgroundColor(String);SimplePanel overPanel = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>SimplePanel(); setWidth(width + String); setHeight(overHeight + String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.SimplePanel.setWidth()",
    "boolean": 1,
    "context": " getElement().getStyle().setBackgroundColor(String);SimplePanel overPanel = new SimplePanel(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setWidth(width + String); setHeight(overHeight + String); getElement().getStyle().setBackgroundColor(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.SimplePanel.setHeight()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.SimplePanel overPanel = new SimplePanel(); setWidth(width + String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setHeight(overHeight + String); getElement().getStyle().setBackgroundColor(String); getElement().getStyle().setProperty(String, String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.SimplePanel.getElement()",
    "boolean": 1,
    "context": " setWidth(width + String); setHeight(overHeight + String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getElement().getStyle().setBackgroundColor(String); getElement().getStyle().setProperty(String, String); add(underPanel, 0, 0);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.SimplePanel.getElement()",
    "boolean": 1,
    "context": " setHeight(overHeight + String); getElement().getStyle().setBackgroundColor(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getElement().getStyle().setProperty(String, String); add(underPanel, 0, 0); add(overPanel, 0, 0);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.AbsolutePanel.add()",
    "boolean": 1,
    "context": " getElement().getStyle().setBackgroundColor(String); getElement().getStyle().setProperty(String, String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(underPanel, 0, 0); add(overPanel, 0, 0);get(String).add(absPanel);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.AbsolutePanel.add()",
    "boolean": 1,
    "context": " getElement().getStyle().setProperty(String, String); add(underPanel, 0, 0); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(overPanel, 0, 0);get(String).add(absPanel); getElement().getStyle().setProperty(String, String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootPanel.get()",
    "boolean": 1,
    "context": " add(underPanel, 0, 0); add(overPanel, 0, 0);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get(String).add(absPanel); getElement().getStyle().setProperty(String, String);} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.AbsolutePanel.getElement()",
    "boolean": 1,
    "context": " add(overPanel, 0, 0);get(String).add(absPanel); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getElement().getStyle().setProperty(String, String);} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.EntryPoint",
    "boolean": 1,
    "context": "public class gwt_class_37 { public class Tesdb3 implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.EntryPoint { String url = String;public void LoadData() throws RequestException { RequestBuilder builder = new RequestBuilder(GET, encode(url)); sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestException",
    "boolean": 1,
    "context": "public class gwt_class_37 { public class Tesdb3 implements EntryPoint { String url = String;public void LoadData() throws <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.RequestException { RequestBuilder builder = new RequestBuilder(GET, encode(url)); sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, Response response) { } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder",
    "boolean": 1,
    "context": "public class gwt_class_37 { public class Tesdb3 implements EntryPoint { String url = String;public void LoadData() throws RequestException { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.RequestBuilder builder = new RequestBuilder(GET, encode(url)); sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, Response response) { } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http",
    "truth_type": "com.google.gwt.http",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder()",
    "boolean": 1,
    "context": "public class gwt_class_37 { public class Tesdb3 implements EntryPoint { String url = String;public void LoadData() throws RequestException { RequestBuilder builder = new <mask><mask><mask><mask><mask><mask><mask><mask>RequestBuilder(GET, encode(url)); sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, Response response) { } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client.RequestBuilder",
    "truth_type": "com.google.gwt.http.client.RequestBuilder",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.GET",
    "boolean": 1,
    "context": "public class gwt_class_37 { public class Tesdb3 implements EntryPoint { String url = String;public void LoadData() throws RequestException { RequestBuilder builder = new RequestBuilder(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.GET, encode(url)); sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, Response response) { } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.URL.encode()",
    "boolean": 1,
    "context": "public class gwt_class_37 { public class Tesdb3 implements EntryPoint { String url = String;public void LoadData() throws RequestException { RequestBuilder builder = new RequestBuilder(GET, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>encode(url)); sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, Response response) { } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.sendRequest()",
    "boolean": 1,
    "context": "public class gwt_class_37 { public class Tesdb3 implements EntryPoint { String url = String;public void LoadData() throws RequestException { RequestBuilder builder = new RequestBuilder(GET, encode(url)); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, Response response) { } });} public void data(JsArray data) { Widget w = null;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http",
    "truth_type": "com.google.gwt.http",
    "full_FQN": "com.google.gwt.http.client.RequestCallback()",
    "boolean": 1,
    "context": "public class gwt_class_37 { public class Tesdb3 implements EntryPoint { String url = String;public void LoadData() throws RequestException { RequestBuilder builder = new RequestBuilder(GET, encode(url)); sendRequest(null, new <mask><mask><mask><mask><mask><mask><mask><mask>RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, Response response) { } });} public void data(JsArray data) { Widget w = null;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Request",
    "boolean": 1,
    "context": "public class gwt_class_37 { public class Tesdb3 implements EntryPoint { String url = String;public void LoadData() throws RequestException { RequestBuilder builder = new RequestBuilder(GET, encode(url)); sendRequest(null, new RequestCallback() { @Override public void onError(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, Response response) { } });} public void data(JsArray data) { Widget w = null;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.Window.alert()",
    "boolean": 1,
    "context": "public class gwt_class_37 { public class Tesdb3 implements EntryPoint { String url = String;public void LoadData() throws RequestException { RequestBuilder builder = new RequestBuilder(GET, encode(url)); sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>alert(String + exception);} public void onResponseReceived(Request request, Response response) { } });} public void data(JsArray data) { Widget w = null;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Request",
    "boolean": 1,
    "context": "public void LoadData() throws RequestException { RequestBuilder builder = new RequestBuilder(GET, encode(url)); sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Request request, Response response) { } });} public void data(JsArray data) { Widget w = null;get().add(new HTML(String));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response",
    "boolean": 1,
    "context": "public void LoadData() throws RequestException { RequestBuilder builder = new RequestBuilder(GET, encode(url)); sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Response response) { } });} public void data(JsArray data) { Widget w = null;get().add(new HTML(String));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.JsArray",
    "boolean": 1,
    "context": " sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, Response response) { } });} public void data(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.JsArray data) { Widget w = null;get().add(new HTML(String));get().add(w);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Widget",
    "boolean": 1,
    "context": " sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, Response response) { } });} public void data(JsArray data) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Widget w = null;get().add(new HTML(String));get().add(w);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootPanel.get()",
    "boolean": 1,
    "context": "} public void onResponseReceived(Request request, Response response) { } });} public void data(JsArray data) { Widget w = null;<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get().add(new HTML(String));get().add(w);} public void onModuleLoad() { try { LoadData();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.HTML()",
    "boolean": 1,
    "context": "} public void onResponseReceived(Request request, Response response) { } });} public void data(JsArray data) { Widget w = null;get().add(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>HTML(String));get().add(w);} public void onModuleLoad() { try { LoadData();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootPanel.get()",
    "boolean": 1,
    "context": "} public void data(JsArray data) { Widget w = null;get().add(new HTML(String));<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get().add(w);} public void onModuleLoad() { try { LoadData();} catch (RequestException e) { printStackTrace();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestException",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.RootPanel.get().add(w);} public void onModuleLoad() { try { LoadData();} catch (<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.RequestException e) { printStackTrace();} } } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestException.printStackTrace()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.RootPanel.get().add(w);} public void onModuleLoad() { try { LoadData();} catch (RequestException e) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>printStackTrace();} } } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Composite",
    "boolean": 1,
    "context": "public class gwt_class_38 { public class AdminMenuAreaView extends <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Composite { private VerticalPanel vPanel;private Hyperlink registerUserLink;public AdminMenuAreaView() { vPanel = new VerticalPanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel",
    "boolean": 1,
    "context": "public class gwt_class_38 { public class AdminMenuAreaView extends Composite { private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.VerticalPanel vPanel;private Hyperlink registerUserLink;public AdminMenuAreaView() { vPanel = new VerticalPanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Hyperlink",
    "boolean": 1,
    "context": "public class gwt_class_38 { public class AdminMenuAreaView extends Composite { private VerticalPanel vPanel;private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Hyperlink registerUserLink;public AdminMenuAreaView() { vPanel = new VerticalPanel();initWidget(vPanel);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel()",
    "boolean": 1,
    "context": "public class gwt_class_38 { public class AdminMenuAreaView extends Composite { private VerticalPanel vPanel;private Hyperlink registerUserLink;public AdminMenuAreaView() { vPanel = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>VerticalPanel();initWidget(vPanel);} public Widget asWidget() { return this;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Widget",
    "boolean": 1,
    "context": "public AdminMenuAreaView() { vPanel = new VerticalPanel();initWidget(vPanel);} public <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Widget asWidget() { return this;} public void addLink(String s) { registerUserLink = new Hyperlink(s, String);this add(registerUserLink);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Hyperlink()",
    "boolean": 1,
    "context": "initWidget(vPanel);} public Widget asWidget() { return this;} public void addLink(String s) { registerUserLink = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Hyperlink(s, String);this add(registerUserLink); setVisible(true);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.add()",
    "boolean": 1,
    "context": "} public Widget asWidget() { return this;} public void addLink(String s) { registerUserLink = new Hyperlink(s, String);this <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(registerUserLink); setVisible(true);} public HasClickHandlers getRegisterUserLink() { return registerUserLink;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Hyperlink.setVisible()",
    "boolean": 1,
    "context": "} public void addLink(String s) { registerUserLink = new Hyperlink(s, String);this add(registerUserLink); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setVisible(true);} public HasClickHandlers getRegisterUserLink() { return registerUserLink;} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client",
    "truth_type": "com.google.gwt.event.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.HasClickHandlers",
    "boolean": 1,
    "context": "this add(registerUserLink); setVisible(true);} public <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HasClickHandlers getRegisterUserLink() { return registerUserLink;} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.server.rpc",
    "truth_type": "com.google.gwt.user.server.rpc",
    "full_FQN": "com.google.gwt.user.server.rpc.RemoteServiceServlet",
    "boolean": 1,
    "context": "public class gwt_class_39 { public class ReportsServiceImpl extends <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.RemoteServiceServlet { public String myMethod(String s) { File f = new File(String);String filename = getName();int length = 0;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File",
    "boolean": 1,
    "context": "public class gwt_class_39 { public class ReportsServiceImpl extends RemoteServiceServlet { public String myMethod(String s) { <mask><mask><mask>.File f = new File(String);String filename = getName();int length = 0;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File()",
    "boolean": 1,
    "context": "public class gwt_class_39 { public class ReportsServiceImpl extends RemoteServiceServlet { public String myMethod(String s) { File f = new <mask><mask><mask>.File(String);String filename = getName();int length = 0;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File.getName()",
    "boolean": 1,
    "context": "public class gwt_class_39 { public class ReportsServiceImpl extends RemoteServiceServlet { public String myMethod(String s) { File f = new File(String);String filename = <mask><mask><mask>getName();int length = 0;try { HttpServletResponse resp = getThreadLocalResponse();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "javax.servlet.http",
    "truth_type": "javax.servlet.http",
    "full_FQN": "javax.servlet.http.HttpServletResponse",
    "boolean": 1,
    "context": "java.lang.String filename = getName();int length = 0;try { <mask><mask><mask><mask><mask><mask><mask><mask>.HttpServletResponse resp = getThreadLocalResponse();ServletOutputStream op = getOutputStream();ServletContext context = getServletConfig().getServletContext();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "javax.servlet",
    "truth_type": "javax.servlet",
    "full_FQN": "javax.servlet.ServletOutputStream",
    "boolean": 1,
    "context": "int length = 0;try { HttpServletResponse resp = getThreadLocalResponse();<mask><mask><mask><mask><mask><mask>.ServletOutputStream op = getOutputStream();ServletContext context = getServletConfig().getServletContext(); setContentType(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "javax.servlet.http",
    "truth_type": "javax.servlet.http",
    "full_FQN": "javax.servlet.http.HttpServletResponse.getOutputStream()",
    "boolean": 1,
    "context": "int length = 0;try { HttpServletResponse resp = getThreadLocalResponse();ServletOutputStream op = <mask><mask><mask><mask><mask><mask><mask><mask>getOutputStream();ServletContext context = getServletConfig().getServletContext(); setContentType(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "javax.servlet",
    "truth_type": "javax.servlet",
    "full_FQN": "javax.servlet.ServletContext",
    "boolean": 1,
    "context": "try { HttpServletResponse resp = getThreadLocalResponse();ServletOutputStream op = getOutputStream();<mask><mask><mask><mask><mask><mask>.ServletContext context = getServletConfig().getServletContext(); setContentType(String); setContentLength(((int)  length())));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "javax.servlet.http",
    "truth_type": "javax.servlet.http",
    "full_FQN": "javax.servlet.http.HttpServletResponse.setContentType()",
    "boolean": 1,
    "context": "javax.servlet.ServletOutputStream op = getOutputStream();ServletContext context = getServletConfig().getServletContext(); <mask><mask><mask><mask><mask><mask><mask><mask>setContentType(String); setContentLength(((int)  length()))); setHeader(String, (Stringutf-8\\'\\'String\");"
  },
  {
    "lib_name": "gwt",
    "pred_type": "javax.servlet.http",
    "truth_type": "javax.servlet.http",
    "full_FQN": "javax.servlet.http.HttpServletResponse.setContentLength()",
    "boolean": 1,
    "context": "javax.servlet.ServletContext context = getServletConfig().getServletContext(); setContentType(String); <mask><mask><mask><mask><mask><mask><mask><mask>setContentLength(((int)  length()))); setHeader(String, (Stringutf-8\\'\\'String\");byte[] bbuf = new byte[1024];"
  },
  {
    "lib_name": "gwt",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File.length()",
    "boolean": 1,
    "context": "javax.servlet.ServletContext context = getServletConfig().getServletContext(); setContentType(String); setContentLength(((int)  <mask><mask><mask>length()))); setHeader(String, (Stringutf-8\\'\\'String\");byte[] bbuf = new byte[1024];"
  },
  {
    "lib_name": "gwt",
    "pred_type": "javax.servlet.http",
    "truth_type": "javax.servlet.http",
    "full_FQN": "javax.servlet.http.HttpServletResponse.setHeader()",
    "boolean": 1,
    "context": " setContentType(String); setContentLength(((int)  length()))); <mask><mask><mask><mask><mask><mask><mask><mask>setHeader(String, (Stringutf-8\\'\\'String\");byte[] bbuf = new byte[1024];DataInputStream in = new DataInputStream(new FileInputStream(f));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataInputStream",
    "boolean": 1,
    "context": " setHeader(String, (Stringutf-8\\'\\'String\");byte[] bbuf = new byte[1024];<mask><mask><mask>.DataInputStream in = new DataInputStream(new FileInputStream(f));while ((in != null) && ((length = read(bbuf)) != (-1))) { write(bbuf, 0, length);} close();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataInputStream()",
    "boolean": 1,
    "context": " setHeader(String, (Stringutf-8\\'\\'String\");byte[] bbuf = new byte[1024];DataInputStream in = new <mask><mask><mask>.DataInputStream(new FileInputStream(f));while ((in != null) && ((length = read(bbuf)) != (-1))) { write(bbuf, 0, length);} close();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileInputStream()",
    "boolean": 1,
    "context": " setHeader(String, (Stringutf-8\\'\\'String\");byte[] bbuf = new byte[1024];DataInputStream in = new DataInputStream(new <mask><mask><mask>.FileInputStream(f));while ((in != null) && ((length = read(bbuf)) != (-1))) { write(bbuf, 0, length);} close();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataInputStream.read()",
    "boolean": 1,
    "context": "byte[] bbuf = new byte[1024];DataInputStream in = new DataInputStream(new FileInputStream(f));while ((in != null) && ((length = <mask><mask><mask>read(bbuf)) != (-1))) { write(bbuf, 0, length);} close(); flush();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "javax.servlet",
    "truth_type": "javax.servlet",
    "full_FQN": "javax.servlet.ServletOutputStream.write()",
    "boolean": 1,
    "context": "byte[] bbuf = new byte[1024];DataInputStream in = new DataInputStream(new FileInputStream(f));while ((in != null) && ((length = read(bbuf)) != (-1))) { <mask><mask><mask><mask><mask><mask>write(bbuf, 0, length);} close(); flush();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataInputStream.close()",
    "boolean": 1,
    "context": "java.io.DataInputStream in = new DataInputStream(new FileInputStream(f));while ((in != null) && ((length = read(bbuf)) != (-1))) { write(bbuf, 0, length);} <mask><mask><mask>close(); flush(); close();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "javax.servlet",
    "truth_type": "javax.servlet",
    "full_FQN": "javax.servlet.ServletOutputStream.flush()",
    "boolean": 1,
    "context": "while ((in != null) && ((length = read(bbuf)) != (-1))) { write(bbuf, 0, length);} close(); <mask><mask><mask><mask><mask><mask>flush(); close();} catch (Exception ex) { printStackTrace();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "javax.servlet",
    "truth_type": "javax.servlet",
    "full_FQN": "javax.servlet.ServletOutputStream.close()",
    "boolean": 1,
    "context": "} close(); flush(); <mask><mask><mask><mask><mask><mask>close();} catch (Exception ex) { printStackTrace();} return String + filename;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Composite",
    "boolean": 1,
    "context": "public class gwt_class_4 { public class MyView extends <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Composite { private VerticalSplitPanel mainPanel = new VerticalSplitPanel();public void CountryFilterView() { setSize(String, String); setSplitPosition(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalSplitPanel",
    "boolean": 1,
    "context": "public class gwt_class_4 { public class MyView extends Composite { private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.VerticalSplitPanel mainPanel = new VerticalSplitPanel();public void CountryFilterView() { setSize(String, String); setSplitPosition(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalSplitPanel()",
    "boolean": 1,
    "context": "public class gwt_class_4 { public class MyView extends Composite { private VerticalSplitPanel mainPanel = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>VerticalSplitPanel();public void CountryFilterView() { setSize(String, String); setSplitPosition(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalSplitPanel.setSize()",
    "boolean": 1,
    "context": "public class gwt_class_4 { public class MyView extends Composite { private VerticalSplitPanel mainPanel = new VerticalSplitPanel();public void CountryFilterView() { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setSize(String, String); setSplitPosition(String);String randomText = String + ((((String + String) + String) + String) + String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalSplitPanel.setSplitPosition()",
    "boolean": 1,
    "context": "public class gwt_class_4 { public class MyView extends Composite { private VerticalSplitPanel mainPanel = new VerticalSplitPanel();public void CountryFilterView() { setSize(String, String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setSplitPosition(String);String randomText = String + ((((String + String) + String) + String) + String); setTopWidget(new HTML(randomText));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalSplitPanel.setTopWidget()",
    "boolean": 1,
    "context": " setSplitPosition(String);String randomText = String + ((((String + String) + String) + String) + String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setTopWidget(new HTML(randomText)); setBottomWidget(new HTML(randomText));initWidget(mainPanel);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.HTML()",
    "boolean": 1,
    "context": " setSplitPosition(String);String randomText = String + ((((String + String) + String) + String) + String); setTopWidget(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>HTML(randomText)); setBottomWidget(new HTML(randomText));initWidget(mainPanel);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalSplitPanel.setBottomWidget()",
    "boolean": 1,
    "context": "java.lang.String randomText = String + ((((String + String) + String) + String) + String); setTopWidget(new HTML(randomText)); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setBottomWidget(new HTML(randomText));initWidget(mainPanel);} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.HTML()",
    "boolean": 1,
    "context": "java.lang.String randomText = String + ((((String + String) + String) + String) + String); setTopWidget(new HTML(randomText)); setBottomWidget(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>HTML(randomText));initWidget(mainPanel);} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.HorizontalPanel",
    "boolean": 1,
    "context": "public class gwt_class_40 { private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HorizontalPanel getSomeGWT() { HorizontalPanel pointsLogoPanel = new HorizontalPanel();for (int i = 0; i < 350; i++) { HorizontalPanel innerContainer = new HorizontalPanel(); add(new Label(String));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.HorizontalPanel",
    "boolean": 1,
    "context": "public class gwt_class_40 { private HorizontalPanel getSomeGWT() { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HorizontalPanel pointsLogoPanel = new HorizontalPanel();for (int i = 0; i < 350; i++) { HorizontalPanel innerContainer = new HorizontalPanel(); add(new Label(String));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.HorizontalPanel()",
    "boolean": 1,
    "context": "public class gwt_class_40 { private HorizontalPanel getSomeGWT() { HorizontalPanel pointsLogoPanel = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>HorizontalPanel();for (int i = 0; i < 350; i++) { HorizontalPanel innerContainer = new HorizontalPanel(); add(new Label(String));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.HorizontalPanel",
    "boolean": 1,
    "context": "public class gwt_class_40 { private HorizontalPanel getSomeGWT() { HorizontalPanel pointsLogoPanel = new HorizontalPanel();for (int i = 0; i < 350; i++) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HorizontalPanel innerContainer = new HorizontalPanel(); add(new Label(String)); add(innerContainer);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.HorizontalPanel()",
    "boolean": 1,
    "context": "public class gwt_class_40 { private HorizontalPanel getSomeGWT() { HorizontalPanel pointsLogoPanel = new HorizontalPanel();for (int i = 0; i < 350; i++) { HorizontalPanel innerContainer = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>HorizontalPanel(); add(new Label(String)); add(innerContainer);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui.",
    "truth_type": "com.extjs.gxt.ui.client.widget",
    "full_FQN": "com.extjs.gxt.ui.client.widget.LayoutContainer.add()",
    "boolean": 0,
    "context": "public class gwt_class_40 { private HorizontalPanel getSomeGWT() { HorizontalPanel pointsLogoPanel = new HorizontalPanel();for (int i = 0; i < 350; i++) { HorizontalPanel innerContainer = new HorizontalPanel(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(new Label(String)); add(innerContainer);} return pointsLogoPanel;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Label()",
    "boolean": 1,
    "context": "public class gwt_class_40 { private HorizontalPanel getSomeGWT() { HorizontalPanel pointsLogoPanel = new HorizontalPanel();for (int i = 0; i < 350; i++) { HorizontalPanel innerContainer = new HorizontalPanel(); add(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Label(String)); add(innerContainer);} return pointsLogoPanel;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.HorizontalPanel.add()",
    "boolean": 1,
    "context": "for (int i = 0; i < 350; i++) { HorizontalPanel innerContainer = new HorizontalPanel(); add(new Label(String)); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(innerContainer);} return pointsLogoPanel;} private LayoutContainer getSomeGXT() { LayoutContainer pointsLogoPanel = new LayoutContainer();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwtxt.ui.client.ui",
    "truth_type": "com.extjs.gxt.ui.client.widget",
    "full_FQN": "com.extjs.gxt.ui.client.widget.LayoutContainer",
    "boolean": 0,
    "context": " add(innerContainer);} return pointsLogoPanel;} private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.LayoutContainer getSomeGXT() { LayoutContainer pointsLogoPanel = new LayoutContainer(); setLayoutOnChange(true);for (int i = 0; i < 350; i++) { LayoutContainer innerContainer = new LayoutContainer();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google..gxt.ui.client.widget",
    "truth_type": "com.extjs.gxt.ui.client.widget",
    "full_FQN": "com.extjs.gxt.ui.client.widget.LayoutContainer",
    "boolean": 0,
    "context": " add(innerContainer);} return pointsLogoPanel;} private LayoutContainer getSomeGXT() { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.LayoutContainer pointsLogoPanel = new LayoutContainer(); setLayoutOnChange(true);for (int i = 0; i < 350; i++) { LayoutContainer innerContainer = new LayoutContainer();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwtxt.ui.client",
    "truth_type": "com.extjs.gxt.ui.client",
    "full_FQN": "com.extjs.gxt.ui.client.widget.LayoutContainer()",
    "boolean": 0,
    "context": " add(innerContainer);} return pointsLogoPanel;} private LayoutContainer getSomeGXT() { LayoutContainer pointsLogoPanel = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>LayoutContainer(); setLayoutOnChange(true);for (int i = 0; i < 350; i++) { LayoutContainer innerContainer = new LayoutContainer();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.HorizontalPanel.setLayoutOnChange()",
    "boolean": 1,
    "context": "} return pointsLogoPanel;} private LayoutContainer getSomeGXT() { LayoutContainer pointsLogoPanel = new LayoutContainer(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setLayoutOnChange(true);for (int i = 0; i < 350; i++) { LayoutContainer innerContainer = new LayoutContainer(); add(innerContainer);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google..gxt.ui.client.widget",
    "truth_type": "com.extjs.gxt.ui.client.widget",
    "full_FQN": "com.extjs.gxt.ui.client.widget.LayoutContainer",
    "boolean": 0,
    "context": "} private LayoutContainer getSomeGXT() { LayoutContainer pointsLogoPanel = new LayoutContainer(); setLayoutOnChange(true);for (int i = 0; i < 350; i++) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.LayoutContainer innerContainer = new LayoutContainer(); add(innerContainer);} return pointsLogoPanel;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt..ui.client",
    "truth_type": "com.extjs.gxt.ui.client",
    "full_FQN": "com.extjs.gxt.ui.client.widget.LayoutContainer()",
    "boolean": 0,
    "context": "} private LayoutContainer getSomeGXT() { LayoutContainer pointsLogoPanel = new LayoutContainer(); setLayoutOnChange(true);for (int i = 0; i < 350; i++) { LayoutContainer innerContainer = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>LayoutContainer(); add(innerContainer);} return pointsLogoPanel;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.HorizontalPanel.add()",
    "boolean": 1,
    "context": " setLayoutOnChange(true);for (int i = 0; i < 350; i++) { LayoutContainer innerContainer = new LayoutContainer(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(innerContainer);} return pointsLogoPanel;} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Composite",
    "boolean": 1,
    "context": "public class gwt_class_41 { public class DownloadFilePanel extends <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Composite { public DownloadFilePanel(final String fileName) { final Element downloadIframe = get(String).getElement();VerticalPanel content = new VerticalPanel(); add(new Label(String + fileName));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.dom.client",
    "truth_type": "com.google.gwt.dom.client",
    "full_FQN": "com.google.gwt.dom.client.Element",
    "boolean": 1,
    "context": "public class gwt_class_41 { public class DownloadFilePanel extends Composite { public DownloadFilePanel(final String fileName) { final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Element downloadIframe = get(String).getElement();VerticalPanel content = new VerticalPanel(); add(new Label(String + fileName));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootPanel.get()",
    "boolean": 1,
    "context": "public class gwt_class_41 { public class DownloadFilePanel extends Composite { public DownloadFilePanel(final String fileName) { final Element downloadIframe = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get(String).getElement();VerticalPanel content = new VerticalPanel(); add(new Label(String + fileName));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel",
    "boolean": 1,
    "context": "public class gwt_class_41 { public class DownloadFilePanel extends Composite { public DownloadFilePanel(final String fileName) { final Element downloadIframe = get(String).getElement();<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.VerticalPanel content = new VerticalPanel(); add(new Label(String + fileName));Button button = new Button(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel()",
    "boolean": 1,
    "context": "public class gwt_class_41 { public class DownloadFilePanel extends Composite { public DownloadFilePanel(final String fileName) { final Element downloadIframe = get(String).getElement();VerticalPanel content = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>VerticalPanel(); add(new Label(String + fileName));Button button = new Button(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.add()",
    "boolean": 1,
    "context": "public class gwt_class_41 { public class DownloadFilePanel extends Composite { public DownloadFilePanel(final String fileName) { final Element downloadIframe = get(String).getElement();VerticalPanel content = new VerticalPanel(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(new Label(String + fileName));Button button = new Button(String); addClickHandler(new gwt ClickHandler() { @Override public void onClick(gwt ClickEvent event) { } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Label()",
    "boolean": 1,
    "context": "public class gwt_class_41 { public class DownloadFilePanel extends Composite { public DownloadFilePanel(final String fileName) { final Element downloadIframe = get(String).getElement();VerticalPanel content = new VerticalPanel(); add(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Label(String + fileName));Button button = new Button(String); addClickHandler(new gwt ClickHandler() { @Override public void onClick(gwt ClickEvent event) { } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.VerticalPanel content = new VerticalPanel(); add(new Label(String + fileName));<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Button button = new Button(String); addClickHandler(new gwt ClickHandler() { @Override public void onClick(gwt ClickEvent event) { } });} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Button()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.VerticalPanel content = new VerticalPanel(); add(new Label(String + fileName));Button button = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Button(String); addClickHandler(new gwt ClickHandler() { @Override public void onClick(gwt ClickEvent event) { } });} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button.addClickHandler()",
    "boolean": 1,
    "context": " add(new Label(String + fileName));Button button = new Button(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addClickHandler(new gwt ClickHandler() { @Override public void onClick(gwt ClickEvent event) { } });} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": " add(new Label(String + fileName));Button button = new Button(String); addClickHandler(new <mask><mask><mask>.gwt ClickHandler() { @Override public void onClick(gwt ClickEvent event) { } });} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client.ClickEvent.dom",
    "truth_type": "com.google.gwt.event.dom.client.ClickEvent.dom",
    "full_FQN": "com.google.gwt.event.dom.client.ClickEvent.dom.client.ClickHandler()",
    "boolean": 1,
    "context": " add(new Label(String + fileName));Button button = new Button(String); addClickHandler(new gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>ClickHandler() { @Override public void onClick(gwt ClickEvent event) { } });} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": " add(new Label(String + fileName));Button button = new Button(String); addClickHandler(new gwt ClickHandler() { @Override public void onClick(<mask><mask><mask>.gwt ClickEvent event) { } });} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client.ClickEvent.dom.client",
    "truth_type": "com.google.gwt.event.dom.client.ClickEvent.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.ClickEvent.dom.client.ClickEvent",
    "boolean": 1,
    "context": " add(new Label(String + fileName));Button button = new Button(String); addClickHandler(new gwt ClickHandler() { @Override public void onClick(gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ClickEvent event) { } });} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.EntryPoint",
    "boolean": 1,
    "context": "public class gwt_class_42 { public class Tesdb3 implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.EntryPoint { String url = String;public void LoadData() throws RequestException { RequestBuilder builder = new RequestBuilder(GET, encode(url)); sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestException",
    "boolean": 1,
    "context": "public class gwt_class_42 { public class Tesdb3 implements EntryPoint { String url = String;public void LoadData() throws <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.RequestException { RequestBuilder builder = new RequestBuilder(GET, encode(url)); sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, Response response) { if (200 == getStatusCode()) { alert(((String + getText()) + String) + getStatusCode());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder",
    "boolean": 1,
    "context": "public class gwt_class_42 { public class Tesdb3 implements EntryPoint { String url = String;public void LoadData() throws RequestException { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.RequestBuilder builder = new RequestBuilder(GET, encode(url)); sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, Response response) { if (200 == getStatusCode()) { alert(((String + getText()) + String) + getStatusCode());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http",
    "truth_type": "com.google.gwt.http",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder()",
    "boolean": 1,
    "context": "public class gwt_class_42 { public class Tesdb3 implements EntryPoint { String url = String;public void LoadData() throws RequestException { RequestBuilder builder = new <mask><mask><mask><mask><mask><mask><mask><mask>RequestBuilder(GET, encode(url)); sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, Response response) { if (200 == getStatusCode()) { alert(((String + getText()) + String) + getStatusCode());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client.RequestBuilder",
    "truth_type": "com.google.gwt.http.client.RequestBuilder",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.GET",
    "boolean": 1,
    "context": "public class gwt_class_42 { public class Tesdb3 implements EntryPoint { String url = String;public void LoadData() throws RequestException { RequestBuilder builder = new RequestBuilder(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.GET, encode(url)); sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, Response response) { if (200 == getStatusCode()) { alert(((String + getText()) + String) + getStatusCode());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.URL.encode()",
    "boolean": 1,
    "context": "public class gwt_class_42 { public class Tesdb3 implements EntryPoint { String url = String;public void LoadData() throws RequestException { RequestBuilder builder = new RequestBuilder(GET, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>encode(url)); sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, Response response) { if (200 == getStatusCode()) { alert(((String + getText()) + String) + getStatusCode());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.sendRequest()",
    "boolean": 1,
    "context": "public class gwt_class_42 { public class Tesdb3 implements EntryPoint { String url = String;public void LoadData() throws RequestException { RequestBuilder builder = new RequestBuilder(GET, encode(url)); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, Response response) { if (200 == getStatusCode()) { alert(((String + getText()) + String) + getStatusCode());} else { alert((((String + getText()) + getStatusText()) + String) + getStatusCode());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http",
    "truth_type": "com.google.gwt.http",
    "full_FQN": "com.google.gwt.http.client.RequestCallback()",
    "boolean": 1,
    "context": "public class gwt_class_42 { public class Tesdb3 implements EntryPoint { String url = String;public void LoadData() throws RequestException { RequestBuilder builder = new RequestBuilder(GET, encode(url)); sendRequest(null, new <mask><mask><mask><mask><mask><mask><mask><mask>RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, Response response) { if (200 == getStatusCode()) { alert(((String + getText()) + String) + getStatusCode());} else { alert((((String + getText()) + getStatusText()) + String) + getStatusCode());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Request",
    "boolean": 1,
    "context": "public class gwt_class_42 { public class Tesdb3 implements EntryPoint { String url = String;public void LoadData() throws RequestException { RequestBuilder builder = new RequestBuilder(GET, encode(url)); sendRequest(null, new RequestCallback() { @Override public void onError(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, Response response) { if (200 == getStatusCode()) { alert(((String + getText()) + String) + getStatusCode());} else { alert((((String + getText()) + getStatusText()) + String) + getStatusCode());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.Window.alert()",
    "boolean": 1,
    "context": "public class gwt_class_42 { public class Tesdb3 implements EntryPoint { String url = String;public void LoadData() throws RequestException { RequestBuilder builder = new RequestBuilder(GET, encode(url)); sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>alert(String + exception);} public void onResponseReceived(Request request, Response response) { if (200 == getStatusCode()) { alert(((String + getText()) + String) + getStatusCode());} else { alert((((String + getText()) + getStatusText()) + String) + getStatusCode());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Request",
    "boolean": 1,
    "context": "public void LoadData() throws RequestException { RequestBuilder builder = new RequestBuilder(GET, encode(url)); sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Request request, Response response) { if (200 == getStatusCode()) { alert(((String + getText()) + String) + getStatusCode());} else { alert((((String + getText()) + getStatusText()) + String) + getStatusCode());} } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response",
    "boolean": 1,
    "context": "public void LoadData() throws RequestException { RequestBuilder builder = new RequestBuilder(GET, encode(url)); sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Response response) { if (200 == getStatusCode()) { alert(((String + getText()) + String) + getStatusCode());} else { alert((((String + getText()) + getStatusText()) + String) + getStatusCode());} } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response.getStatusCode()",
    "boolean": 1,
    "context": "public void LoadData() throws RequestException { RequestBuilder builder = new RequestBuilder(GET, encode(url)); sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, Response response) { if (200 == <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getStatusCode()) { alert(((String + getText()) + String) + getStatusCode());} else { alert((((String + getText()) + getStatusText()) + String) + getStatusCode());} } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.Window.alert()",
    "boolean": 1,
    "context": "public void LoadData() throws RequestException { RequestBuilder builder = new RequestBuilder(GET, encode(url)); sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, Response response) { if (200 == getStatusCode()) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>alert(((String + getText()) + String) + getStatusCode());} else { alert((((String + getText()) + getStatusText()) + String) + getStatusCode());} } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response.getText()",
    "boolean": 1,
    "context": "public void LoadData() throws RequestException { RequestBuilder builder = new RequestBuilder(GET, encode(url)); sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, Response response) { if (200 == getStatusCode()) { alert(((String + <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getText()) + String) + getStatusCode());} else { alert((((String + getText()) + getStatusText()) + String) + getStatusCode());} } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response.getStatusCode()",
    "boolean": 1,
    "context": "public void LoadData() throws RequestException { RequestBuilder builder = new RequestBuilder(GET, encode(url)); sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, Response response) { if (200 == getStatusCode()) { alert(((String + getText()) + String) + <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getStatusCode());} else { alert((((String + getText()) + getStatusText()) + String) + getStatusCode());} } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.Window.alert()",
    "boolean": 1,
    "context": " sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, Response response) { if (200 == getStatusCode()) { alert(((String + getText()) + String) + getStatusCode());} else { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>alert((((String + getText()) + getStatusText()) + String) + getStatusCode());} } });} public void onModuleLoad() { try { LoadData();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response.getText()",
    "boolean": 1,
    "context": " sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, Response response) { if (200 == getStatusCode()) { alert(((String + getText()) + String) + getStatusCode());} else { alert((((String + <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getText()) + getStatusText()) + String) + getStatusCode());} } });} public void onModuleLoad() { try { LoadData();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response.getStatusText()",
    "boolean": 1,
    "context": " sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, Response response) { if (200 == getStatusCode()) { alert(((String + getText()) + String) + getStatusCode());} else { alert((((String + getText()) + <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getStatusText()) + String) + getStatusCode());} } });} public void onModuleLoad() { try { LoadData();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response.getStatusCode()",
    "boolean": 1,
    "context": " sendRequest(null, new RequestCallback() { @Override public void onError(Request request, Throwable exception) { alert(String + exception);} public void onResponseReceived(Request request, Response response) { if (200 == getStatusCode()) { alert(((String + getText()) + String) + getStatusCode());} else { alert((((String + getText()) + getStatusText()) + String) + <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getStatusCode());} } });} public void onModuleLoad() { try { LoadData();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestException",
    "boolean": 1,
    "context": "} } });} public void onModuleLoad() { try { LoadData();} catch (<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.RequestException e) { printStackTrace();} } } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestException.printStackTrace()",
    "boolean": 1,
    "context": "} } });} public void onModuleLoad() { try { LoadData();} catch (RequestException e) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>printStackTrace();} } } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Composite",
    "boolean": 1,
    "context": "public class gwt_class_43 { public class GroupLbl extends <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Composite implements gwt gwt ClickHandler , gwt gwt MouseOutHandler { private Label lbl;private HorizontalPanel hp;public void onClick(gwt gwt ClickEvent event) { setStyleName(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": "public class gwt_class_43 { public class GroupLbl extends Composite implements <mask><mask><mask>.gwt gwt ClickHandler , gwt gwt MouseOutHandler { private Label lbl;private HorizontalPanel hp;public void onClick(gwt gwt ClickEvent event) { setStyleName(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": "public class gwt_class_43 { public class GroupLbl extends Composite implements gwt <mask><mask><mask>.gwt ClickHandler , gwt gwt MouseOutHandler { private Label lbl;private HorizontalPanel hp;public void onClick(gwt gwt ClickEvent event) { setStyleName(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client.ClickEvent.dom.client.MouseOutEvent.dom.client",
    "truth_type": "com.google.gwt.event.dom.client.ClickEvent.dom.client.MouseOutEvent.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.ClickEvent.dom.client.MouseOutEvent.dom.client.ClickHandler",
    "boolean": 1,
    "context": "public class gwt_class_43 { public class GroupLbl extends Composite implements gwt gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ClickHandler , gwt gwt MouseOutHandler { private Label lbl;private HorizontalPanel hp;public void onClick(gwt gwt ClickEvent event) { setStyleName(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": "public class gwt_class_43 { public class GroupLbl extends Composite implements gwt gwt ClickHandler , <mask><mask><mask>.gwt gwt MouseOutHandler { private Label lbl;private HorizontalPanel hp;public void onClick(gwt gwt ClickEvent event) { setStyleName(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": "public class gwt_class_43 { public class GroupLbl extends Composite implements gwt gwt ClickHandler , gwt <mask><mask><mask>.gwt MouseOutHandler { private Label lbl;private HorizontalPanel hp;public void onClick(gwt gwt ClickEvent event) { setStyleName(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client.ClickEvent.dom.client.MouseOutEvent.dom.client",
    "truth_type": "com.google.gwt.event.dom.client.ClickEvent.dom.client.MouseOutEvent.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.ClickEvent.dom.client.MouseOutEvent.dom.client.MouseOutHandler",
    "boolean": 1,
    "context": "public class gwt_class_43 { public class GroupLbl extends Composite implements gwt gwt ClickHandler , gwt gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MouseOutHandler { private Label lbl;private HorizontalPanel hp;public void onClick(gwt gwt ClickEvent event) { setStyleName(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Label",
    "boolean": 1,
    "context": "public class gwt_class_43 { public class GroupLbl extends Composite implements gwt gwt ClickHandler , gwt gwt MouseOutHandler { private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Label lbl;private HorizontalPanel hp;public void onClick(gwt gwt ClickEvent event) { setStyleName(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.HorizontalPanel",
    "boolean": 1,
    "context": "public class gwt_class_43 { public class GroupLbl extends Composite implements gwt gwt ClickHandler , gwt gwt MouseOutHandler { private Label lbl;private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HorizontalPanel hp;public void onClick(gwt gwt ClickEvent event) { setStyleName(String);Object folder = null;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": "public class gwt_class_43 { public class GroupLbl extends Composite implements gwt gwt ClickHandler , gwt gwt MouseOutHandler { private Label lbl;private HorizontalPanel hp;public void onClick(<mask><mask><mask>.gwt gwt ClickEvent event) { setStyleName(String);Object folder = null;if  gwt getSource().equals(folder) || gwt getSource().equals(lbl)) { } } @Override public Widget getWidget() { return hp;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": "public class gwt_class_43 { public class GroupLbl extends Composite implements gwt gwt ClickHandler , gwt gwt MouseOutHandler { private Label lbl;private HorizontalPanel hp;public void onClick(gwt <mask><mask><mask>.gwt ClickEvent event) { setStyleName(String);Object folder = null;if  gwt getSource().equals(folder) || gwt getSource().equals(lbl)) { } } @Override public Widget getWidget() { return hp;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client.ClickEvent.dom.ical.MouseClickEvent.dom.client",
    "truth_type": "com.google.gwt.event.dom.client.ClickEvent.dom.client.MouseOutEvent.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.ClickEvent.dom.client.MouseOutEvent.dom.client.ClickEvent",
    "boolean": 0,
    "context": "public class gwt_class_43 { public class GroupLbl extends Composite implements gwt gwt ClickHandler , gwt gwt MouseOutHandler { private Label lbl;private HorizontalPanel hp;public void onClick(gwt gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ClickEvent event) { setStyleName(String);Object folder = null;if  gwt getSource().equals(folder) || gwt getSource().equals(lbl)) { } } @Override public Widget getWidget() { return hp;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.HorizontalPanel.setStyleName()",
    "boolean": 1,
    "context": "public class gwt_class_43 { public class GroupLbl extends Composite implements gwt gwt ClickHandler , gwt gwt MouseOutHandler { private Label lbl;private HorizontalPanel hp;public void onClick(gwt gwt ClickEvent event) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setStyleName(String);Object folder = null;if  gwt getSource().equals(folder) || gwt getSource().equals(lbl)) { } } @Override public Widget getWidget() { return hp;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": "public void onClick(gwt gwt ClickEvent event) { setStyleName(String);Object folder = null;if  <mask><mask><mask>.gwt getSource().equals(folder) || gwt getSource().equals(lbl)) { } } @Override public Widget getWidget() { return hp;} public void onMouseOut(gwt gwt MouseOutEvent event) { removeStyleName(String);} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client.ClickEvent.dom.client",
    "truth_type": "com.google.gwt.event.dom.client.ClickEvent.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.ClickEvent.dom.client.MouseOutEvent.getSource()",
    "boolean": 1,
    "context": "public void onClick(gwt gwt ClickEvent event) { setStyleName(String);Object folder = null;if  gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getSource().equals(folder) || gwt getSource().equals(lbl)) { } } @Override public Widget getWidget() { return hp;} public void onMouseOut(gwt gwt MouseOutEvent event) { removeStyleName(String);} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": "public void onClick(gwt gwt ClickEvent event) { setStyleName(String);Object folder = null;if  gwt getSource().equals(folder) || <mask><mask><mask>.gwt getSource().equals(lbl)) { } } @Override public Widget getWidget() { return hp;} public void onMouseOut(gwt gwt MouseOutEvent event) { removeStyleName(String);} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client.ClickEvent.dom.client",
    "truth_type": "com.google.gwt.event.dom.client.ClickEvent.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.ClickEvent.dom.client.MouseOutEvent.getSource()",
    "boolean": 1,
    "context": "public void onClick(gwt gwt ClickEvent event) { setStyleName(String);Object folder = null;if  gwt getSource().equals(folder) || gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getSource().equals(lbl)) { } } @Override public Widget getWidget() { return hp;} public void onMouseOut(gwt gwt MouseOutEvent event) { removeStyleName(String);} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Widget",
    "boolean": 1,
    "context": "public void onClick(gwt gwt ClickEvent event) { setStyleName(String);Object folder = null;if  gwt getSource().equals(folder) || gwt getSource().equals(lbl)) { } } @Override public <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Widget getWidget() { return hp;} public void onMouseOut(gwt gwt MouseOutEvent event) { removeStyleName(String);} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": "java.lang.Object folder = null;if  gwt getSource().equals(folder) || gwt getSource().equals(lbl)) { } } @Override public Widget getWidget() { return hp;} public void onMouseOut(<mask><mask><mask>.gwt gwt MouseOutEvent event) { removeStyleName(String);} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": "java.lang.Object folder = null;if  gwt getSource().equals(folder) || gwt getSource().equals(lbl)) { } } @Override public Widget getWidget() { return hp;} public void onMouseOut(gwt <mask><mask><mask>.gwt MouseOutEvent event) { removeStyleName(String);} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client.ClickEvent.domEventical.domClickEvent.dom.client",
    "truth_type": "com.google.gwt.event.dom.client.ClickEvent.dom.client.MouseOutEvent.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.ClickEvent.dom.client.MouseOutEvent.dom.client.MouseOutEvent",
    "boolean": 0,
    "context": "java.lang.Object folder = null;if  gwt getSource().equals(folder) || gwt getSource().equals(lbl)) { } } @Override public Widget getWidget() { return hp;} public void onMouseOut(gwt gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MouseOutEvent event) { removeStyleName(String);} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.HorizontalPanel.removeStyleName()",
    "boolean": 1,
    "context": "java.lang.Object folder = null;if  gwt getSource().equals(folder) || gwt getSource().equals(lbl)) { } } @Override public Widget getWidget() { return hp;} public void onMouseOut(gwt gwt MouseOutEvent event) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>removeStyleName(String);} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.ResizeComposite",
    "boolean": 1,
    "context": "public class gwt_class_44 extends <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ResizeComposite { private static instance = null;public static void getInstance(final AsyncCallback<gwt_class_44> callback) { runAsync(new RunAsyncCallback() { @Override public void onSuccess() { if (instance == null) { instance = new gwt_class_44();} onSuccess(instance);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.rpc",
    "truth_type": "com.google.gwt.user.client.rpc",
    "full_FQN": "com.google.gwt.user.client.rpc.AsyncCallback",
    "boolean": 1,
    "context": "public class gwt_class_44 extends ResizeComposite { private static instance = null;public static void getInstance(final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.AsyncCallback<gwt_class_44> callback) { runAsync(new RunAsyncCallback() { @Override public void onSuccess() { if (instance == null) { instance = new gwt_class_44();} onSuccess(instance);} @Override public void onFailure(Throwable reason) { onFailure(reason);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.GWT.runAsync()",
    "boolean": 1,
    "context": "public class gwt_class_44 extends ResizeComposite { private static instance = null;public static void getInstance(final AsyncCallback<gwt_class_44> callback) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>runAsync(new RunAsyncCallback() { @Override public void onSuccess() { if (instance == null) { instance = new gwt_class_44();} onSuccess(instance);} @Override public void onFailure(Throwable reason) { onFailure(reason);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core",
    "truth_type": "com.google.gwt.core",
    "full_FQN": "com.google.gwt.core.client.RunAsyncCallback()",
    "boolean": 1,
    "context": "public class gwt_class_44 extends ResizeComposite { private static instance = null;public static void getInstance(final AsyncCallback<gwt_class_44> callback) { runAsync(new <mask><mask><mask><mask><mask><mask><mask><mask>RunAsyncCallback() { @Override public void onSuccess() { if (instance == null) { instance = new gwt_class_44();} onSuccess(instance);} @Override public void onFailure(Throwable reason) { onFailure(reason);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.rpc",
    "truth_type": "com.google.gwt.user.client.rpc",
    "full_FQN": "com.google.gwt.user.client.rpc.AsyncCallback.onSuccess()",
    "boolean": 1,
    "context": "public class gwt_class_44 extends ResizeComposite { private static instance = null;public static void getInstance(final AsyncCallback<gwt_class_44> callback) { runAsync(new RunAsyncCallback() { @Override public void onSuccess() { if (instance == null) { instance = new gwt_class_44();} <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>onSuccess(instance);} @Override public void onFailure(Throwable reason) { onFailure(reason);} });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.rpc",
    "truth_type": "com.google.gwt.user.client.rpc",
    "full_FQN": "com.google.gwt.user.client.rpc.AsyncCallback.onFailure()",
    "boolean": 1,
    "context": "public static void getInstance(final AsyncCallback<gwt_class_44> callback) { runAsync(new RunAsyncCallback() { @Override public void onSuccess() { if (instance == null) { instance = new gwt_class_44();} onSuccess(instance);} @Override public void onFailure(Throwable reason) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>onFailure(reason);} });} private gwt_class_44() { DockLayoutPanel dockLayoutPanel = new DockLayoutPanel(EM);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DockLayoutPanel",
    "boolean": 1,
    "context": "} @Override public void onFailure(Throwable reason) { onFailure(reason);} });} private gwt_class_44() { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.DockLayoutPanel dockLayoutPanel = new DockLayoutPanel(EM); addNorth(new Label(String), 7); addWest(new Label(String), 15);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.DockLayoutPanel()",
    "boolean": 1,
    "context": "} @Override public void onFailure(Throwable reason) { onFailure(reason);} });} private gwt_class_44() { DockLayoutPanel dockLayoutPanel = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>DockLayoutPanel(EM); addNorth(new Label(String), 7); addWest(new Label(String), 15);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.dom.client.Style.Unit",
    "truth_type": "com.google.gwt.dom.client.Style.Unit",
    "full_FQN": "com.google.gwt.dom.client.Style.Unit.EM",
    "boolean": 1,
    "context": "} @Override public void onFailure(Throwable reason) { onFailure(reason);} });} private gwt_class_44() { DockLayoutPanel dockLayoutPanel = new DockLayoutPanel(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.EM); addNorth(new Label(String), 7); addWest(new Label(String), 15);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DockLayoutPanel.addNorth()",
    "boolean": 1,
    "context": "} });} private gwt_class_44() { DockLayoutPanel dockLayoutPanel = new DockLayoutPanel(EM); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addNorth(new Label(String), 7); addWest(new Label(String), 15); add(new Label(String));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Label()",
    "boolean": 1,
    "context": "} });} private gwt_class_44() { DockLayoutPanel dockLayoutPanel = new DockLayoutPanel(EM); addNorth(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Label(String), 7); addWest(new Label(String), 15); add(new Label(String));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DockLayoutPanel.addWest()",
    "boolean": 1,
    "context": "} private gwt_class_44() { DockLayoutPanel dockLayoutPanel = new DockLayoutPanel(EM); addNorth(new Label(String), 7); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addWest(new Label(String), 15); add(new Label(String));initWidget(dockLayoutPanel);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Label()",
    "boolean": 1,
    "context": "} private gwt_class_44() { DockLayoutPanel dockLayoutPanel = new DockLayoutPanel(EM); addNorth(new Label(String), 7); addWest(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Label(String), 15); add(new Label(String));initWidget(dockLayoutPanel);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DockLayoutPanel.add()",
    "boolean": 1,
    "context": " addNorth(new Label(String), 7); addWest(new Label(String), 15); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(new Label(String));initWidget(dockLayoutPanel);} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Label()",
    "boolean": 1,
    "context": " addNorth(new Label(String), 7); addWest(new Label(String), 15); add(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Label(String));initWidget(dockLayoutPanel);} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.EntryPoint",
    "boolean": 1,
    "context": "public class gwt_class_45 implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.EntryPoint { @Override public void onModuleLoad() { Label label = new Label(String);Button button = new Button(String); addClickHandler(new gwt ClickHandler() { @Override public void onClick(gwt ClickEvent event) { alert(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Label",
    "boolean": 1,
    "context": "public class gwt_class_45 implements EntryPoint { @Override public void onModuleLoad() { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Label label = new Label(String);Button button = new Button(String); addClickHandler(new gwt ClickHandler() { @Override public void onClick(gwt ClickEvent event) { alert(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Label()",
    "boolean": 1,
    "context": "public class gwt_class_45 implements EntryPoint { @Override public void onModuleLoad() { Label label = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Label(String);Button button = new Button(String); addClickHandler(new gwt ClickHandler() { @Override public void onClick(gwt ClickEvent event) { alert(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button",
    "boolean": 1,
    "context": "public class gwt_class_45 implements EntryPoint { @Override public void onModuleLoad() { Label label = new Label(String);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Button button = new Button(String); addClickHandler(new gwt ClickHandler() { @Override public void onClick(gwt ClickEvent event) { alert(String);} });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.Button()",
    "boolean": 1,
    "context": "public class gwt_class_45 implements EntryPoint { @Override public void onModuleLoad() { Label label = new Label(String);Button button = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>Button(String); addClickHandler(new gwt ClickHandler() { @Override public void onClick(gwt ClickEvent event) { alert(String);} });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Button.addClickHandler()",
    "boolean": 1,
    "context": "public class gwt_class_45 implements EntryPoint { @Override public void onModuleLoad() { Label label = new Label(String);Button button = new Button(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addClickHandler(new gwt ClickHandler() { @Override public void onClick(gwt ClickEvent event) { alert(String);} });get().add(label);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": "public class gwt_class_45 implements EntryPoint { @Override public void onModuleLoad() { Label label = new Label(String);Button button = new Button(String); addClickHandler(new <mask><mask><mask>.gwt ClickHandler() { @Override public void onClick(gwt ClickEvent event) { alert(String);} });get().add(label);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client.ClickEvent.dom",
    "truth_type": "com.google.gwt.event.dom.client.ClickEvent.dom",
    "full_FQN": "com.google.gwt.event.dom.client.ClickEvent.dom.client.ClickHandler()",
    "boolean": 1,
    "context": "public class gwt_class_45 implements EntryPoint { @Override public void onModuleLoad() { Label label = new Label(String);Button button = new Button(String); addClickHandler(new gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>ClickHandler() { @Override public void onClick(gwt ClickEvent event) { alert(String);} });get().add(label);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": "public class gwt_class_45 implements EntryPoint { @Override public void onModuleLoad() { Label label = new Label(String);Button button = new Button(String); addClickHandler(new gwt ClickHandler() { @Override public void onClick(<mask><mask><mask>.gwt ClickEvent event) { alert(String);} });get().add(label);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client.ClickEvent.dom.client",
    "truth_type": "com.google.gwt.event.dom.client.ClickEvent.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.ClickEvent.dom.client.ClickEvent",
    "boolean": 1,
    "context": "public class gwt_class_45 implements EntryPoint { @Override public void onModuleLoad() { Label label = new Label(String);Button button = new Button(String); addClickHandler(new gwt ClickHandler() { @Override public void onClick(gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ClickEvent event) { alert(String);} });get().add(label);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.Window.alert()",
    "boolean": 1,
    "context": "public class gwt_class_45 implements EntryPoint { @Override public void onModuleLoad() { Label label = new Label(String);Button button = new Button(String); addClickHandler(new gwt ClickHandler() { @Override public void onClick(gwt ClickEvent event) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>alert(String);} });get().add(label);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootPanel.get()",
    "boolean": 1,
    "context": " addClickHandler(new gwt ClickHandler() { @Override public void onClick(gwt ClickEvent event) { alert(String);} });<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get().add(label);get().add(button);} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootPanel.get()",
    "boolean": 1,
    "context": "} });get().add(label);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get().add(button);} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel",
    "boolean": 1,
    "context": "public class gwt_class_46 { public static void main(String[] arg) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.VerticalPanel eventDetailWindow = new VerticalPanel();final DialogBox dialogBox2 = new DialogBox(); setText(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel()",
    "boolean": 1,
    "context": "public class gwt_class_46 { public static void main(String[] arg) { VerticalPanel eventDetailWindow = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>VerticalPanel();final DialogBox dialogBox2 = new DialogBox(); setText(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DialogBox",
    "boolean": 1,
    "context": "public class gwt_class_46 { public static void main(String[] arg) { VerticalPanel eventDetailWindow = new VerticalPanel();final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.DialogBox dialogBox2 = new DialogBox(); setText(String); setAnimationEnabled(true);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.DialogBox()",
    "boolean": 1,
    "context": "public class gwt_class_46 { public static void main(String[] arg) { VerticalPanel eventDetailWindow = new VerticalPanel();final DialogBox dialogBox2 = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>DialogBox(); setText(String); setAnimationEnabled(true);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DialogBox.setText()",
    "boolean": 1,
    "context": "public class gwt_class_46 { public static void main(String[] arg) { VerticalPanel eventDetailWindow = new VerticalPanel();final DialogBox dialogBox2 = new DialogBox(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setText(String); setAnimationEnabled(true);final HTML serverResponse3 = new HTML(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DialogBox.setAnimationEnabled()",
    "boolean": 1,
    "context": "final DialogBox dialogBox2 = new DialogBox(); setText(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setAnimationEnabled(true);final HTML serverResponse3 = new HTML(String); addStyleName(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.HTML",
    "boolean": 1,
    "context": " setText(String); setAnimationEnabled(true);final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HTML serverResponse3 = new HTML(String); addStyleName(String); add(serverResponse3);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.HTML()",
    "boolean": 1,
    "context": " setText(String); setAnimationEnabled(true);final HTML serverResponse3 = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>HTML(String); addStyleName(String); add(serverResponse3);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.HTML.addStyleName()",
    "boolean": 1,
    "context": " setAnimationEnabled(true);final HTML serverResponse3 = new HTML(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addStyleName(String); add(serverResponse3); addStyleName(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.add()",
    "boolean": 1,
    "context": "final HTML serverResponse3 = new HTML(String); addStyleName(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(serverResponse3); addStyleName(String); setWidget(eventDetailWindow);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel.addStyleName()",
    "boolean": 1,
    "context": " addStyleName(String); add(serverResponse3); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addStyleName(String); setWidget(eventDetailWindow);get(String).add(eventDetailWindow);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.DialogBox.setWidget()",
    "boolean": 1,
    "context": " add(serverResponse3); addStyleName(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setWidget(eventDetailWindow);get(String).add(eventDetailWindow);} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootPanel.get()",
    "boolean": 1,
    "context": " addStyleName(String); setWidget(eventDetailWindow);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get(String).add(eventDetailWindow);} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.EntryPoint",
    "boolean": 1,
    "context": "public class gwt_class_47 implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.EntryPoint { private static final Unit PCT = null;@Override public void onModuleLoad() { Widget childone = new HTML(String);Widget childtwo = new HTML(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.dom.client.Style",
    "full_FQN": "com.google.gwt.dom.client.Style.Unit",
    "boolean": 0,
    "context": "public class gwt_class_47 implements EntryPoint { private static final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Unit PCT = null;@Override public void onModuleLoad() { Widget childone = new HTML(String);Widget childtwo = new HTML(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Widget",
    "boolean": 1,
    "context": "public class gwt_class_47 implements EntryPoint { private static final Unit PCT = null;@Override public void onModuleLoad() { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Widget childone = new HTML(String);Widget childtwo = new HTML(String);LayoutPanel p = new LayoutPanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.HTML()",
    "boolean": 1,
    "context": "public class gwt_class_47 implements EntryPoint { private static final Unit PCT = null;@Override public void onModuleLoad() { Widget childone = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>HTML(String);Widget childtwo = new HTML(String);LayoutPanel p = new LayoutPanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Widget",
    "boolean": 1,
    "context": "public class gwt_class_47 implements EntryPoint { private static final Unit PCT = null;@Override public void onModuleLoad() { Widget childone = new HTML(String);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Widget childtwo = new HTML(String);LayoutPanel p = new LayoutPanel(); add(childone);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.HTML()",
    "boolean": 1,
    "context": "public class gwt_class_47 implements EntryPoint { private static final Unit PCT = null;@Override public void onModuleLoad() { Widget childone = new HTML(String);Widget childtwo = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>HTML(String);LayoutPanel p = new LayoutPanel(); add(childone);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.LayoutPanel",
    "boolean": 1,
    "context": "@Override public void onModuleLoad() { Widget childone = new HTML(String);Widget childtwo = new HTML(String);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.LayoutPanel p = new LayoutPanel(); add(childone); add(childtwo);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.LayoutPanel()",
    "boolean": 1,
    "context": "@Override public void onModuleLoad() { Widget childone = new HTML(String);Widget childtwo = new HTML(String);LayoutPanel p = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>LayoutPanel(); add(childone); add(childtwo);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.LayoutPanel.add()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.Widget childtwo = new HTML(String);LayoutPanel p = new LayoutPanel(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(childone); add(childtwo); setWidgetLeftWidth(childone, 0, PCT, 50, PCT);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.LayoutPanel.add()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.LayoutPanel p = new LayoutPanel(); add(childone); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(childtwo); setWidgetLeftWidth(childone, 0, PCT, 50, PCT); setWidgetRightWidth(childtwo, 0, PCT, 50, PCT);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.LayoutPanel.setWidgetLeftWidth()",
    "boolean": 1,
    "context": " add(childone); add(childtwo); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setWidgetLeftWidth(childone, 0, PCT, 50, PCT); setWidgetRightWidth(childtwo, 0, PCT, 50, PCT);RootLayoutPanel rp = get();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.LayoutPanel.setWidgetRightWidth()",
    "boolean": 1,
    "context": " add(childtwo); setWidgetLeftWidth(childone, 0, PCT, 50, PCT); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setWidgetRightWidth(childtwo, 0, PCT, 50, PCT);RootLayoutPanel rp = get(); add(p);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootLayoutPanel",
    "boolean": 1,
    "context": " setWidgetLeftWidth(childone, 0, PCT, 50, PCT); setWidgetRightWidth(childtwo, 0, PCT, 50, PCT);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.RootLayoutPanel rp = get(); add(p);} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootLayoutPanel.get()",
    "boolean": 1,
    "context": " setWidgetLeftWidth(childone, 0, PCT, 50, PCT); setWidgetRightWidth(childtwo, 0, PCT, 50, PCT);RootLayoutPanel rp = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get(); add(p);} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootLayoutPanel.add()",
    "boolean": 1,
    "context": " setWidgetRightWidth(childtwo, 0, PCT, 50, PCT);RootLayoutPanel rp = get(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(p);} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.EntryPoint",
    "boolean": 1,
    "context": "public class gwt_class_48 implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.EntryPoint { @Override public void onModuleLoad() { TabBar bar = new TabBar(); addTab(String); addTab(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.TabBar",
    "boolean": 1,
    "context": "public class gwt_class_48 implements EntryPoint { @Override public void onModuleLoad() { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.TabBar bar = new TabBar(); addTab(String); addTab(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.TabBar()",
    "boolean": 1,
    "context": "public class gwt_class_48 implements EntryPoint { @Override public void onModuleLoad() { TabBar bar = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>TabBar(); addTab(String); addTab(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.TabBar.addTab()",
    "boolean": 1,
    "context": "public class gwt_class_48 implements EntryPoint { @Override public void onModuleLoad() { TabBar bar = new TabBar(); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addTab(String); addTab(String); addTab(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.TabBar.addTab()",
    "boolean": 1,
    "context": "public class gwt_class_48 implements EntryPoint { @Override public void onModuleLoad() { TabBar bar = new TabBar(); addTab(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addTab(String); addTab(String); addSelectionHandler(new gwt gwt SelectionHandler() { public void onSelection(gwt gwt SelectionEvent event) { alert(String + gwt getSelectedItem());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.TabBar.addTab()",
    "boolean": 1,
    "context": " addTab(String); addTab(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addTab(String); addSelectionHandler(new gwt gwt SelectionHandler() { public void onSelection(gwt gwt SelectionEvent event) { alert(String + gwt getSelectedItem());} });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.TabBar.addSelectionHandler()",
    "boolean": 1,
    "context": " addTab(String); addTab(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addSelectionHandler(new gwt gwt SelectionHandler() { public void onSelection(gwt gwt SelectionEvent event) { alert(String + gwt getSelectedItem());} }); addBeforeSelectionHandler(new gwt gwt BeforeSelectionHandler() { public void onBeforeSelection(gwt gwt BeforeSelectionEvent event) { gwt cancel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": " addTab(String); addTab(String); addSelectionHandler(new <mask><mask><mask>.gwt gwt SelectionHandler() { public void onSelection(gwt gwt SelectionEvent event) { alert(String + gwt getSelectedItem());} }); addBeforeSelectionHandler(new gwt gwt BeforeSelectionHandler() { public void onBeforeSelection(gwt gwt BeforeSelectionEvent event) { gwt cancel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": " addTab(String); addTab(String); addSelectionHandler(new gwt <mask><mask><mask>.gwt SelectionHandler() { public void onSelection(gwt gwt SelectionEvent event) { alert(String + gwt getSelectedItem());} }); addBeforeSelectionHandler(new gwt gwt BeforeSelectionHandler() { public void onBeforeSelection(gwt gwt BeforeSelectionEvent event) { gwt cancel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.logical.shared.BeforeSelectionEvent.logical.shared.SelectionEvent.logical",
    "truth_type": "com.google.gwt.event.logical.shared.BeforeSelectionEvent.logical.shared.SelectionEvent.logical",
    "full_FQN": "com.google.gwt.event.logical.shared.BeforeSelectionEvent.logical.shared.SelectionEvent.logical.shared.SelectionHandler()",
    "boolean": 1,
    "context": " addTab(String); addTab(String); addSelectionHandler(new gwt gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>SelectionHandler() { public void onSelection(gwt gwt SelectionEvent event) { alert(String + gwt getSelectedItem());} }); addBeforeSelectionHandler(new gwt gwt BeforeSelectionHandler() { public void onBeforeSelection(gwt gwt BeforeSelectionEvent event) { gwt cancel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": " addTab(String); addTab(String); addSelectionHandler(new gwt gwt SelectionHandler() { public void onSelection(<mask><mask><mask>.gwt gwt SelectionEvent event) { alert(String + gwt getSelectedItem());} }); addBeforeSelectionHandler(new gwt gwt BeforeSelectionHandler() { public void onBeforeSelection(gwt gwt BeforeSelectionEvent event) { gwt cancel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": " addTab(String); addTab(String); addSelectionHandler(new gwt gwt SelectionHandler() { public void onSelection(gwt <mask><mask><mask>.gwt SelectionEvent event) { alert(String + gwt getSelectedItem());} }); addBeforeSelectionHandler(new gwt gwt BeforeSelectionHandler() { public void onBeforeSelection(gwt gwt BeforeSelectionEvent event) { gwt cancel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.logical.shared.BeforeSelectionEvent.logical.shared.SelectionEvent.logical.shared",
    "truth_type": "com.google.gwt.event.logical.shared.BeforeSelectionEvent.logical.shared.SelectionEvent.logical.shared",
    "full_FQN": "com.google.gwt.event.logical.shared.BeforeSelectionEvent.logical.shared.SelectionEvent.logical.shared.SelectionEvent",
    "boolean": 1,
    "context": " addTab(String); addTab(String); addSelectionHandler(new gwt gwt SelectionHandler() { public void onSelection(gwt gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.SelectionEvent event) { alert(String + gwt getSelectedItem());} }); addBeforeSelectionHandler(new gwt gwt BeforeSelectionHandler() { public void onBeforeSelection(gwt gwt BeforeSelectionEvent event) { gwt cancel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.Window.alert()",
    "boolean": 1,
    "context": " addTab(String); addTab(String); addSelectionHandler(new gwt gwt SelectionHandler() { public void onSelection(gwt gwt SelectionEvent event) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>alert(String + gwt getSelectedItem());} }); addBeforeSelectionHandler(new gwt gwt BeforeSelectionHandler() { public void onBeforeSelection(gwt gwt BeforeSelectionEvent event) { gwt cancel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": " addTab(String); addTab(String); addSelectionHandler(new gwt gwt SelectionHandler() { public void onSelection(gwt gwt SelectionEvent event) { alert(String + <mask><mask><mask>.gwt getSelectedItem());} }); addBeforeSelectionHandler(new gwt gwt BeforeSelectionHandler() { public void onBeforeSelection(gwt gwt BeforeSelectionEvent event) { gwt cancel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.logical.shared.BeforeSelectionEvent.logical.shared",
    "truth_type": "com.google.gwt.event.logical.shared.BeforeSelectionEvent.logical.shared",
    "full_FQN": "com.google.gwt.event.logical.shared.BeforeSelectionEvent.logical.shared.SelectionEvent.getSelectedItem()",
    "boolean": 1,
    "context": " addTab(String); addTab(String); addSelectionHandler(new gwt gwt SelectionHandler() { public void onSelection(gwt gwt SelectionEvent event) { alert(String + gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getSelectedItem());} }); addBeforeSelectionHandler(new gwt gwt BeforeSelectionHandler() { public void onBeforeSelection(gwt gwt BeforeSelectionEvent event) { gwt cancel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.TabBar.addBeforeSelectionHandler()",
    "boolean": 1,
    "context": " addSelectionHandler(new gwt gwt SelectionHandler() { public void onSelection(gwt gwt SelectionEvent event) { alert(String + gwt getSelectedItem());} }); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addBeforeSelectionHandler(new gwt gwt BeforeSelectionHandler() { public void onBeforeSelection(gwt gwt BeforeSelectionEvent event) { gwt cancel();} });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": " addSelectionHandler(new gwt gwt SelectionHandler() { public void onSelection(gwt gwt SelectionEvent event) { alert(String + gwt getSelectedItem());} }); addBeforeSelectionHandler(new <mask><mask><mask>.gwt gwt BeforeSelectionHandler() { public void onBeforeSelection(gwt gwt BeforeSelectionEvent event) { gwt cancel();} });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": " addSelectionHandler(new gwt gwt SelectionHandler() { public void onSelection(gwt gwt SelectionEvent event) { alert(String + gwt getSelectedItem());} }); addBeforeSelectionHandler(new gwt <mask><mask><mask>.gwt BeforeSelectionHandler() { public void onBeforeSelection(gwt gwt BeforeSelectionEvent event) { gwt cancel();} });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.logical.shared.BeforeSelectionEvent.logical.sharedSeSelectionEvent.logical",
    "truth_type": "com.google.gwt.event.logical.shared.BeforeSelectionEvent.logical.shared.SelectionEvent.logical",
    "full_FQN": "com.google.gwt.event.logical.shared.BeforeSelectionEvent.logical.shared.SelectionEvent.logical.shared.BeforeSelectionHandler()",
    "boolean": 0,
    "context": " addSelectionHandler(new gwt gwt SelectionHandler() { public void onSelection(gwt gwt SelectionEvent event) { alert(String + gwt getSelectedItem());} }); addBeforeSelectionHandler(new gwt gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>BeforeSelectionHandler() { public void onBeforeSelection(gwt gwt BeforeSelectionEvent event) { gwt cancel();} });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": " addSelectionHandler(new gwt gwt SelectionHandler() { public void onSelection(gwt gwt SelectionEvent event) { alert(String + gwt getSelectedItem());} }); addBeforeSelectionHandler(new gwt gwt BeforeSelectionHandler() { public void onBeforeSelection(<mask><mask><mask>.gwt gwt BeforeSelectionEvent event) { gwt cancel();} });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": " addSelectionHandler(new gwt gwt SelectionHandler() { public void onSelection(gwt gwt SelectionEvent event) { alert(String + gwt getSelectedItem());} }); addBeforeSelectionHandler(new gwt gwt BeforeSelectionHandler() { public void onBeforeSelection(gwt <mask><mask><mask>.gwt BeforeSelectionEvent event) { gwt cancel();} });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.logical.shared.BeforeSelectionEvent.logical.shared.SelectionEvent.logical.shared",
    "truth_type": "com.google.gwt.event.logical.shared.BeforeSelectionEvent.logical.shared.SelectionEvent.logical.shared",
    "full_FQN": "com.google.gwt.event.logical.shared.BeforeSelectionEvent.logical.shared.SelectionEvent.logical.shared.BeforeSelectionEvent",
    "boolean": 1,
    "context": " addSelectionHandler(new gwt gwt SelectionHandler() { public void onSelection(gwt gwt SelectionEvent event) { alert(String + gwt getSelectedItem());} }); addBeforeSelectionHandler(new gwt gwt BeforeSelectionHandler() { public void onBeforeSelection(gwt gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.BeforeSelectionEvent event) { gwt cancel();} });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google",
    "truth_type": "com.google",
    "full_FQN": "com.google.gwt",
    "boolean": 1,
    "context": " addSelectionHandler(new gwt gwt SelectionHandler() { public void onSelection(gwt gwt SelectionEvent event) { alert(String + gwt getSelectedItem());} }); addBeforeSelectionHandler(new gwt gwt BeforeSelectionHandler() { public void onBeforeSelection(gwt gwt BeforeSelectionEvent event) { <mask><mask><mask>.gwt cancel();} });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.logical.sharedBeforeSelectionEvent.logicalical.shared",
    "truth_type": "com.google.gwt.event.logical.shared.BeforeSelectionEvent.logical.shared",
    "full_FQN": "com.google.gwt.event.logical.shared.BeforeSelectionEvent.logical.shared.SelectionEvent.cancel()",
    "boolean": 0,
    "context": " addSelectionHandler(new gwt gwt SelectionHandler() { public void onSelection(gwt gwt SelectionEvent event) { alert(String + gwt getSelectedItem());} }); addBeforeSelectionHandler(new gwt gwt BeforeSelectionHandler() { public void onBeforeSelection(gwt gwt BeforeSelectionEvent event) { gwt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>cancel();} });} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.dom.client",
    "truth_type": "com.google.gwt.dom.client",
    "full_FQN": "com.google.gwt.dom.client.BodyElement",
    "boolean": 1,
    "context": "public class gwt_class_49 { private void putElementLinkIDsInList(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.BodyElement elt, ArrayList list) { } private void rewriteLinksIterative() { ArrayList links = new ArrayList();putElementLinkIDsInList(get().getBody(), links);for (int i = 0; i < size(); i++) { Element elt = getElementById(((String)  get(i))));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "public class gwt_class_49 { private void putElementLinkIDsInList(BodyElement elt, <mask><mask><mask>.ArrayList list) { } private void rewriteLinksIterative() { ArrayList links = new ArrayList();putElementLinkIDsInList(get().getBody(), links);for (int i = 0; i < size(); i++) { Element elt = getElementById(((String)  get(i))));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "public class gwt_class_49 { private void putElementLinkIDsInList(BodyElement elt, ArrayList list) { } private void rewriteLinksIterative() { <mask><mask><mask>.ArrayList links = new ArrayList();putElementLinkIDsInList(get().getBody(), links);for (int i = 0; i < size(); i++) { Element elt = getElementById(((String)  get(i))));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList()",
    "boolean": 1,
    "context": "public class gwt_class_49 { private void putElementLinkIDsInList(BodyElement elt, ArrayList list) { } private void rewriteLinksIterative() { ArrayList links = new <mask><mask><mask>.ArrayList();putElementLinkIDsInList(get().getBody(), links);for (int i = 0; i < size(); i++) { Element elt = getElementById(((String)  get(i))));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.dom.client",
    "truth_type": "com.google.gwt.dom.client",
    "full_FQN": "com.google.gwt.dom.client.Document.get()",
    "boolean": 1,
    "context": "public class gwt_class_49 { private void putElementLinkIDsInList(BodyElement elt, ArrayList list) { } private void rewriteLinksIterative() { ArrayList links = new ArrayList();putElementLinkIDsInList(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get().getBody(), links);for (int i = 0; i < size(); i++) { Element elt = getElementById(((String)  get(i))));rewriteLink(elt, String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.size()",
    "boolean": 1,
    "context": "public class gwt_class_49 { private void putElementLinkIDsInList(BodyElement elt, ArrayList list) { } private void rewriteLinksIterative() { ArrayList links = new ArrayList();putElementLinkIDsInList(get().getBody(), links);for (int i = 0; i < <mask><mask><mask>size(); i++) { Element elt = getElementById(((String)  get(i))));rewriteLink(elt, String);} } private void rewriteLink(Element element, String sitename) { String href = getElementProperty(element, String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.dom.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.Element",
    "boolean": 0,
    "context": "public class gwt_class_49 { private void putElementLinkIDsInList(BodyElement elt, ArrayList list) { } private void rewriteLinksIterative() { ArrayList links = new ArrayList();putElementLinkIDsInList(get().getBody(), links);for (int i = 0; i < size(); i++) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Element elt = getElementById(((String)  get(i))));rewriteLink(elt, String);} } private void rewriteLink(Element element, String sitename) { String href = getElementProperty(element, String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.dom.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.DOM.getElementById()",
    "boolean": 0,
    "context": "public class gwt_class_49 { private void putElementLinkIDsInList(BodyElement elt, ArrayList list) { } private void rewriteLinksIterative() { ArrayList links = new ArrayList();putElementLinkIDsInList(get().getBody(), links);for (int i = 0; i < size(); i++) { Element elt = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getElementById(((String)  get(i))));rewriteLink(elt, String);} } private void rewriteLink(Element element, String sitename) { String href = getElementProperty(element, String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.get()",
    "boolean": 1,
    "context": "public class gwt_class_49 { private void putElementLinkIDsInList(BodyElement elt, ArrayList list) { } private void rewriteLinksIterative() { ArrayList links = new ArrayList();putElementLinkIDsInList(get().getBody(), links);for (int i = 0; i < size(); i++) { Element elt = getElementById(((String)  <mask><mask><mask>get(i))));rewriteLink(elt, String);} } private void rewriteLink(Element element, String sitename) { String href = getElementProperty(element, String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.dom.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.Element",
    "boolean": 0,
    "context": "for (int i = 0; i < size(); i++) { Element elt = getElementById(((String)  get(i))));rewriteLink(elt, String);} } private void rewriteLink(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Element element, String sitename) { String href = getElementProperty(element, String);if (null == href) { return;} if (startsWith(String) && (!startsWith((String + sitename) + String))) { setElementProperty(element, String, (String + sitename) + String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.DOM.getElementProperty()",
    "boolean": 1,
    "context": "for (int i = 0; i < size(); i++) { Element elt = getElementById(((String)  get(i))));rewriteLink(elt, String);} } private void rewriteLink(Element element, String sitename) { String href = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getElementProperty(element, String);if (null == href) { return;} if (startsWith(String) && (!startsWith((String + sitename) + String))) { setElementProperty(element, String, (String + sitename) + String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.DOM.setElementProperty()",
    "boolean": 1,
    "context": "} } private void rewriteLink(Element element, String sitename) { String href = getElementProperty(element, String);if (null == href) { return;} if (startsWith(String) && (!startsWith((String + sitename) + String))) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setElementProperty(element, String, (String + sitename) + String);} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.JsArray",
    "boolean": 1,
    "context": "public class gwt_class_5 { private final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.JsArray<JsArrayInteger> popItemFromArray(final JsArray<JsArrayInteger> oldArray) { JsArray<JsArrayInteger> newArray = null;for (int i = 0; i <  length() - 1); i++) { set(i, get(i));} return newArray;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.JsArrayInteger",
    "boolean": 1,
    "context": "public class gwt_class_5 { private final JsArray<<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.JsArrayInteger> popItemFromArray(final JsArray<JsArrayInteger> oldArray) { JsArray<JsArrayInteger> newArray = null;for (int i = 0; i <  length() - 1); i++) { set(i, get(i));} return newArray;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.JsArray",
    "boolean": 1,
    "context": "public class gwt_class_5 { private final JsArray<JsArrayInteger> popItemFromArray(final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.JsArray<JsArrayInteger> oldArray) { JsArray<JsArrayInteger> newArray = null;for (int i = 0; i <  length() - 1); i++) { set(i, get(i));} return newArray;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.JsArrayInteger",
    "boolean": 1,
    "context": "public class gwt_class_5 { private final JsArray<JsArrayInteger> popItemFromArray(final JsArray<<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.JsArrayInteger> oldArray) { JsArray<JsArrayInteger> newArray = null;for (int i = 0; i <  length() - 1); i++) { set(i, get(i));} return newArray;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.JsArray",
    "boolean": 1,
    "context": "public class gwt_class_5 { private final JsArray<JsArrayInteger> popItemFromArray(final JsArray<JsArrayInteger> oldArray) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.JsArray<JsArrayInteger> newArray = null;for (int i = 0; i <  length() - 1); i++) { set(i, get(i));} return newArray;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.JsArrayInteger",
    "boolean": 1,
    "context": "public class gwt_class_5 { private final JsArray<JsArrayInteger> popItemFromArray(final JsArray<JsArrayInteger> oldArray) { JsArray<<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.JsArrayInteger> newArray = null;for (int i = 0; i <  length() - 1); i++) { set(i, get(i));} return newArray;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.JsArray.length()",
    "boolean": 1,
    "context": "public class gwt_class_5 { private final JsArray<JsArrayInteger> popItemFromArray(final JsArray<JsArrayInteger> oldArray) { JsArray<JsArrayInteger> newArray = null;for (int i = 0; i <  <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>length() - 1); i++) { set(i, get(i));} return newArray;} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.JsArray.set()",
    "boolean": 1,
    "context": "public class gwt_class_5 { private final JsArray<JsArrayInteger> popItemFromArray(final JsArray<JsArrayInteger> oldArray) { JsArray<JsArrayInteger> newArray = null;for (int i = 0; i <  length() - 1); i++) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>set(i, get(i));} return newArray;} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.JsArray.get()",
    "boolean": 1,
    "context": "public class gwt_class_5 { private final JsArray<JsArrayInteger> popItemFromArray(final JsArray<JsArrayInteger> oldArray) { JsArray<JsArrayInteger> newArray = null;for (int i = 0; i <  length() - 1); i++) { set(i, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get(i));} return newArray;} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.ComplexPanel",
    "boolean": 1,
    "context": "public class gwt_class_50 { public class ListItem extends <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ComplexPanel implements HasText , HasHTML , HasClickHandlers , HasKeyDownHandlers , HasBlurHandlers { HandlerRegistration clickHandler;public ListItem() { setElement(createElement(String));} public void add(Widget w) { add(w, getElement());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.HasText",
    "boolean": 1,
    "context": "public class gwt_class_50 { public class ListItem extends ComplexPanel implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HasText , HasHTML , HasClickHandlers , HasKeyDownHandlers , HasBlurHandlers { HandlerRegistration clickHandler;public ListItem() { setElement(createElement(String));} public void add(Widget w) { add(w, getElement());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.HasHTML",
    "boolean": 1,
    "context": "public class gwt_class_50 { public class ListItem extends ComplexPanel implements HasText , <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HasHTML , HasClickHandlers , HasKeyDownHandlers , HasBlurHandlers { HandlerRegistration clickHandler;public ListItem() { setElement(createElement(String));} public void add(Widget w) { add(w, getElement());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client",
    "truth_type": "com.google.gwt.event.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.HasClickHandlers",
    "boolean": 1,
    "context": "public class gwt_class_50 { public class ListItem extends ComplexPanel implements HasText , HasHTML , <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HasClickHandlers , HasKeyDownHandlers , HasBlurHandlers { HandlerRegistration clickHandler;public ListItem() { setElement(createElement(String));} public void add(Widget w) { add(w, getElement());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client",
    "truth_type": "com.google.gwt.event.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.HasKeyDownHandlers",
    "boolean": 1,
    "context": "public class gwt_class_50 { public class ListItem extends ComplexPanel implements HasText , HasHTML , HasClickHandlers , <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HasKeyDownHandlers , HasBlurHandlers { HandlerRegistration clickHandler;public ListItem() { setElement(createElement(String));} public void add(Widget w) { add(w, getElement());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client",
    "truth_type": "com.google.gwt.event.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.HasBlurHandlers",
    "boolean": 1,
    "context": "public class gwt_class_50 { public class ListItem extends ComplexPanel implements HasText , HasHTML , HasClickHandlers , HasKeyDownHandlers , <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HasBlurHandlers { HandlerRegistration clickHandler;public ListItem() { setElement(createElement(String));} public void add(Widget w) { add(w, getElement());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.shared",
    "truth_type": "com.google.gwt.event.shared",
    "full_FQN": "com.google.gwt.event.shared.HandlerRegistration",
    "boolean": 1,
    "context": "public class gwt_class_50 { public class ListItem extends ComplexPanel implements HasText , HasHTML , HasClickHandlers , HasKeyDownHandlers , HasBlurHandlers { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HandlerRegistration clickHandler;public ListItem() { setElement(createElement(String));} public void add(Widget w) { add(w, getElement());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.DOM.createElement()",
    "boolean": 1,
    "context": "public class gwt_class_50 { public class ListItem extends ComplexPanel implements HasText , HasHTML , HasClickHandlers , HasKeyDownHandlers , HasBlurHandlers { HandlerRegistration clickHandler;public ListItem() { setElement(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>createElement(String));} public void add(Widget w) { add(w, getElement());} public void insert(Widget w, int beforeIndex) { insert(w, getElement(), beforeIndex, true);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Widget",
    "boolean": 1,
    "context": "public class gwt_class_50 { public class ListItem extends ComplexPanel implements HasText , HasHTML , HasClickHandlers , HasKeyDownHandlers , HasBlurHandlers { HandlerRegistration clickHandler;public ListItem() { setElement(createElement(String));} public void add(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Widget w) { add(w, getElement());} public void insert(Widget w, int beforeIndex) { insert(w, getElement(), beforeIndex, true);} public String getText() { return getInnerText(getElement());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Widget",
    "boolean": 1,
    "context": "public ListItem() { setElement(createElement(String));} public void add(Widget w) { add(w, getElement());} public void insert(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Widget w, int beforeIndex) { insert(w, getElement(), beforeIndex, true);} public String getText() { return getInnerText(getElement());} public void setText(String text) { setInnerText(getElement(), text == null ? String : text);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.DOM.getInnerText()",
    "boolean": 1,
    "context": "} public void add(Widget w) { add(w, getElement());} public void insert(Widget w, int beforeIndex) { insert(w, getElement(), beforeIndex, true);} public String getText() { return <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getInnerText(getElement());} public void setText(String text) { setInnerText(getElement(), text == null ? String : text);} public void setId(String id) { setElementAttribute(getElement(), String, id);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.DOM.setInnerText()",
    "boolean": 1,
    "context": "} public void insert(Widget w, int beforeIndex) { insert(w, getElement(), beforeIndex, true);} public String getText() { return getInnerText(getElement());} public void setText(String text) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setInnerText(getElement(), text == null ? String : text);} public void setId(String id) { setElementAttribute(getElement(), String, id);} public String getHTML() { return getInnerHTML(getElement());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.DOM.setElementAttribute()",
    "boolean": 1,
    "context": "} public String getText() { return getInnerText(getElement());} public void setText(String text) { setInnerText(getElement(), text == null ? String : text);} public void setId(String id) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setElementAttribute(getElement(), String, id);} public String getHTML() { return getInnerHTML(getElement());} public void setHTML(String html) { setInnerHTML(getElement(), html == null ? String : html);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.DOM.getInnerHTML()",
    "boolean": 1,
    "context": "} public void setText(String text) { setInnerText(getElement(), text == null ? String : text);} public void setId(String id) { setElementAttribute(getElement(), String, id);} public String getHTML() { return <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getInnerHTML(getElement());} public void setHTML(String html) { setInnerHTML(getElement(), html == null ? String : html);} public HandlerRegistration addClickHandler(ClickHandler handler) { return addDomHandler(handler, getType());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.DOM.setInnerHTML()",
    "boolean": 1,
    "context": "} public void setId(String id) { setElementAttribute(getElement(), String, id);} public String getHTML() { return getInnerHTML(getElement());} public void setHTML(String html) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setInnerHTML(getElement(), html == null ? String : html);} public HandlerRegistration addClickHandler(ClickHandler handler) { return addDomHandler(handler, getType());} public HandlerRegistration addKeyDownHandler(KeyDownHandler handler) { return addDomHandler(handler, getType());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.shared",
    "truth_type": "com.google.gwt.event.shared",
    "full_FQN": "com.google.gwt.event.shared.HandlerRegistration",
    "boolean": 1,
    "context": "} public String getHTML() { return getInnerHTML(getElement());} public void setHTML(String html) { setInnerHTML(getElement(), html == null ? String : html);} public <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HandlerRegistration addClickHandler(ClickHandler handler) { return addDomHandler(handler, getType());} public HandlerRegistration addKeyDownHandler(KeyDownHandler handler) { return addDomHandler(handler, getType());} public HandlerRegistration addBlurHandler(BlurHandler handler) { return addDomHandler(handler, getType());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client",
    "truth_type": "com.google.gwt.event.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.ClickHandler",
    "boolean": 1,
    "context": "} public String getHTML() { return getInnerHTML(getElement());} public void setHTML(String html) { setInnerHTML(getElement(), html == null ? String : html);} public HandlerRegistration addClickHandler(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ClickHandler handler) { return addDomHandler(handler, getType());} public HandlerRegistration addKeyDownHandler(KeyDownHandler handler) { return addDomHandler(handler, getType());} public HandlerRegistration addBlurHandler(BlurHandler handler) { return addDomHandler(handler, getType());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client",
    "truth_type": "com.google.gwt.event.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.ClickEvent.getType()",
    "boolean": 1,
    "context": "} public String getHTML() { return getInnerHTML(getElement());} public void setHTML(String html) { setInnerHTML(getElement(), html == null ? String : html);} public HandlerRegistration addClickHandler(ClickHandler handler) { return addDomHandler(handler, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getType());} public HandlerRegistration addKeyDownHandler(KeyDownHandler handler) { return addDomHandler(handler, getType());} public HandlerRegistration addBlurHandler(BlurHandler handler) { return addDomHandler(handler, getType());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.shared",
    "truth_type": "com.google.gwt.event.shared",
    "full_FQN": "com.google.gwt.event.shared.HandlerRegistration",
    "boolean": 1,
    "context": "} public void setHTML(String html) { setInnerHTML(getElement(), html == null ? String : html);} public HandlerRegistration addClickHandler(ClickHandler handler) { return addDomHandler(handler, getType());} public <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HandlerRegistration addKeyDownHandler(KeyDownHandler handler) { return addDomHandler(handler, getType());} public HandlerRegistration addBlurHandler(BlurHandler handler) { return addDomHandler(handler, getType());} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client",
    "truth_type": "com.google.gwt.event.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.KeyDownHandler",
    "boolean": 1,
    "context": "} public void setHTML(String html) { setInnerHTML(getElement(), html == null ? String : html);} public HandlerRegistration addClickHandler(ClickHandler handler) { return addDomHandler(handler, getType());} public HandlerRegistration addKeyDownHandler(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.KeyDownHandler handler) { return addDomHandler(handler, getType());} public HandlerRegistration addBlurHandler(BlurHandler handler) { return addDomHandler(handler, getType());} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client",
    "truth_type": "com.google.gwt.event.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.KeyDownEvent.getType()",
    "boolean": 1,
    "context": "} public void setHTML(String html) { setInnerHTML(getElement(), html == null ? String : html);} public HandlerRegistration addClickHandler(ClickHandler handler) { return addDomHandler(handler, getType());} public HandlerRegistration addKeyDownHandler(KeyDownHandler handler) { return addDomHandler(handler, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getType());} public HandlerRegistration addBlurHandler(BlurHandler handler) { return addDomHandler(handler, getType());} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.shared",
    "truth_type": "com.google.gwt.event.shared",
    "full_FQN": "com.google.gwt.event.shared.HandlerRegistration",
    "boolean": 1,
    "context": "} public HandlerRegistration addClickHandler(ClickHandler handler) { return addDomHandler(handler, getType());} public HandlerRegistration addKeyDownHandler(KeyDownHandler handler) { return addDomHandler(handler, getType());} public <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HandlerRegistration addBlurHandler(BlurHandler handler) { return addDomHandler(handler, getType());} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client",
    "truth_type": "com.google.gwt.event.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.BlurHandler",
    "boolean": 1,
    "context": "} public HandlerRegistration addClickHandler(ClickHandler handler) { return addDomHandler(handler, getType());} public HandlerRegistration addKeyDownHandler(KeyDownHandler handler) { return addDomHandler(handler, getType());} public HandlerRegistration addBlurHandler(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.BlurHandler handler) { return addDomHandler(handler, getType());} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.event.dom.client",
    "truth_type": "com.google.gwt.event.dom.client",
    "full_FQN": "com.google.gwt.event.dom.client.BlurEvent.getType()",
    "boolean": 1,
    "context": "} public HandlerRegistration addClickHandler(ClickHandler handler) { return addDomHandler(handler, getType());} public HandlerRegistration addKeyDownHandler(KeyDownHandler handler) { return addDomHandler(handler, getType());} public HandlerRegistration addBlurHandler(BlurHandler handler) { return addDomHandler(handler, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getType());} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Widget",
    "boolean": 1,
    "context": "public class gwt_class_6 { public class TitledPanel extends <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Widget { private Element legend;private Widget content = null;public TitledPanel() { Element fieldset = createFieldSet();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.dom.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.Element",
    "boolean": 0,
    "context": "public class gwt_class_6 { public class TitledPanel extends Widget { private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Element legend;private Widget content = null;public TitledPanel() { Element fieldset = createFieldSet();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Widget",
    "boolean": 1,
    "context": "public class gwt_class_6 { public class TitledPanel extends Widget { private Element legend;private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Widget content = null;public TitledPanel() { Element fieldset = createFieldSet();legend = createLegend();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.dom.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.Element",
    "boolean": 0,
    "context": "public class gwt_class_6 { public class TitledPanel extends Widget { private Element legend;private Widget content = null;public TitledPanel() { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Element fieldset = createFieldSet();legend = createLegend();appendChild(fieldset, legend);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.DOM.createFieldSet()",
    "boolean": 1,
    "context": "public class gwt_class_6 { public class TitledPanel extends Widget { private Element legend;private Widget content = null;public TitledPanel() { Element fieldset = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>createFieldSet();legend = createLegend();appendChild(fieldset, legend);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.dom.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.DOM.createLegend()",
    "boolean": 0,
    "context": "private Widget content = null;public TitledPanel() { Element fieldset = createFieldSet();legend = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>createLegend();appendChild(fieldset, legend);setElement(fieldset);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.DOM.appendChild()",
    "boolean": 1,
    "context": "public TitledPanel() { Element fieldset = createFieldSet();legend = createLegend();<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>appendChild(fieldset, legend);setElement(fieldset);} public TitledPanel(String title) { this();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.DOM.getInnerHTML()",
    "boolean": 1,
    "context": "} public TitledPanel(String title) { this();setTitle(title);} @Override public String getTitle() { return <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getInnerHTML(legend);} @Override public void setTitle(String html) { setInnerHTML(legend, html);} public Widget getContent() { return content;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.DOM.setInnerHTML()",
    "boolean": 1,
    "context": "setTitle(title);} @Override public String getTitle() { return getInnerHTML(legend);} @Override public void setTitle(String html) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setInnerHTML(legend, html);} public Widget getContent() { return content;} public void setContent(Widget content) { if (content != null) { removeChild(getElement(), this getElement());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Widget",
    "boolean": 1,
    "context": "} @Override public String getTitle() { return getInnerHTML(legend);} @Override public void setTitle(String html) { setInnerHTML(legend, html);} public <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Widget getContent() { return content;} public void setContent(Widget content) { if (content != null) { removeChild(getElement(), this getElement());} content = content;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Widget",
    "boolean": 1,
    "context": "} @Override public void setTitle(String html) { setInnerHTML(legend, html);} public Widget getContent() { return content;} public void setContent(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Widget content) { if (content != null) { removeChild(getElement(), this getElement());} content = content;appendChild(getElement(), getElement());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.DOM.removeChild()",
    "boolean": 1,
    "context": "} @Override public void setTitle(String html) { setInnerHTML(legend, html);} public Widget getContent() { return content;} public void setContent(Widget content) { if (content != null) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>removeChild(getElement(), this getElement());} content = content;appendChild(getElement(), getElement());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Widget.getElement()",
    "boolean": 1,
    "context": "} @Override public void setTitle(String html) { setInnerHTML(legend, html);} public Widget getContent() { return content;} public void setContent(Widget content) { if (content != null) { removeChild(getElement(), this <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getElement());} content = content;appendChild(getElement(), getElement());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.DOM.appendChild()",
    "boolean": 1,
    "context": "} public void setContent(Widget content) { if (content != null) { removeChild(getElement(), this getElement());} content = content;<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>appendChild(getElement(), getElement());} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Widget.getElement()",
    "boolean": 1,
    "context": "} public void setContent(Widget content) { if (content != null) { removeChild(getElement(), this getElement());} content = content;appendChild(getElement(), <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getElement());} } };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.core.client",
    "truth_type": "com.google.gwt.core.client",
    "full_FQN": "com.google.gwt.core.client.EntryPoint",
    "boolean": 1,
    "context": "public class gwt_class_7 { public class GWTMemoryIssue implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.EntryPoint { private static final boolean WITH_TABLE = false;private Panel panel;private Timer timer;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Panel",
    "boolean": 1,
    "context": "public class gwt_class_7 { public class GWTMemoryIssue implements EntryPoint { private static final boolean WITH_TABLE = false;private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Panel panel;private Timer timer;private widget Table table;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.Timer",
    "boolean": 1,
    "context": "public class gwt_class_7 { public class GWTMemoryIssue implements EntryPoint { private static final boolean WITH_TABLE = false;private Panel panel;private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Timer timer;private widget Table table;public void onModuleLoad() { RootPanel rootPanel = get();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user..client",
    "truth_type": "com.extjs.gxt.ui.client",
    "full_FQN": "com.extjs.gxt.ui.client.widget",
    "boolean": 0,
    "context": "private Panel panel;private Timer timer;private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.widget Table table;public void onModuleLoad() { RootPanel rootPanel = get();panel = new VerticalPanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui..JtableTable",
    "truth_type": "com.extjs.gxt.ui.client.widget.table.Table",
    "full_FQN": "com.extjs.gxt.ui.client.widget.table.Table.Table",
    "boolean": 0,
    "context": "private Panel panel;private Timer timer;private widget <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Table table;public void onModuleLoad() { RootPanel rootPanel = get();panel = new VerticalPanel();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootPanel",
    "boolean": 1,
    "context": "private Timer timer;private widget Table table;public void onModuleLoad() { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.RootPanel rootPanel = get();panel = new VerticalPanel();this setSize(String, String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootPanel.get()",
    "boolean": 1,
    "context": "private Timer timer;private widget Table table;public void onModuleLoad() { RootPanel rootPanel = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>get();panel = new VerticalPanel();this setSize(String, String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel()",
    "boolean": 1,
    "context": "private widget Table table;public void onModuleLoad() { RootPanel rootPanel = get();panel = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>VerticalPanel();this setSize(String, String); add(panel);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.Panel.setSize()",
    "boolean": 1,
    "context": "public void onModuleLoad() { RootPanel rootPanel = get();panel = new VerticalPanel();this <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setSize(String, String); add(panel);if (WITH_TABLE) { loadTable();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.RootPanel.add()",
    "boolean": 1,
    "context": "this.panel = new VerticalPanel();this setSize(String, String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>add(panel);if (WITH_TABLE) { loadTable();} else { startUpdateTask();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user",
    "truth_type": "com.google.gwt.user",
    "full_FQN": "com.google.gwt.user.client.Timer()",
    "boolean": 1,
    "context": "if (WITH_TABLE) { loadTable();} else { startUpdateTask();} } private void startUpdateTask() { timer = new <mask><mask><mask><mask><mask><mask><mask><mask>Timer() { public void run() { } };this scheduleRepeating(2000);} public void loadTable() { Runnable onLoadCallback = new Runnable() { public void run() { setSize(String, String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.Timer.scheduleRepeating()",
    "boolean": 1,
    "context": "} else { startUpdateTask();} } private void startUpdateTask() { timer = new Timer() { public void run() { } };this <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>scheduleRepeating(2000);} public void loadTable() { Runnable onLoadCallback = new Runnable() { public void run() { setSize(String, String);add(table);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestException",
    "boolean": 1,
    "context": "public class gwt_class_8 { public void main() throws <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.RequestException { RequestBuilder requestBuilder = new RequestBuilder(POST, String); setHeader(String, String); setRequestData(String + String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder",
    "boolean": 1,
    "context": "public class gwt_class_8 { public void main() throws RequestException { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.RequestBuilder requestBuilder = new RequestBuilder(POST, String); setHeader(String, String); setRequestData(String + String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http",
    "truth_type": "com.google.gwt.http",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder()",
    "boolean": 1,
    "context": "public class gwt_class_8 { public void main() throws RequestException { RequestBuilder requestBuilder = new <mask><mask><mask><mask><mask><mask><mask><mask>RequestBuilder(POST, String); setHeader(String, String); setRequestData(String + String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client.RequestBuilder",
    "truth_type": "com.google.gwt.http.client.RequestBuilder",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.POST",
    "boolean": 1,
    "context": "public class gwt_class_8 { public void main() throws RequestException { RequestBuilder requestBuilder = new RequestBuilder(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.POST, String); setHeader(String, String); setRequestData(String + String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.setHeader()",
    "boolean": 1,
    "context": "public class gwt_class_8 { public void main() throws RequestException { RequestBuilder requestBuilder = new RequestBuilder(POST, String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setHeader(String, String); setRequestData(String + String); setCallback(new RequestCallback() { public void onError1(Request request, Throwable exception) { alert(String + getMessage());"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.setRequestData()",
    "boolean": 1,
    "context": "public class gwt_class_8 { public void main() throws RequestException { RequestBuilder requestBuilder = new RequestBuilder(POST, String); setHeader(String, String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setRequestData(String + String); setCallback(new RequestCallback() { public void onError1(Request request, Throwable exception) { alert(String + getMessage());} public void onResponseReceived1(Request request, Response response) { if ( getStatusCode() != SC_UNAUTHORIZED) &&  getStatusCode() != SC_OK)) { onError1(request, new RequestException( getStatusText() + String) + getText()));"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.setCallback()",
    "boolean": 1,
    "context": " setHeader(String, String); setRequestData(String + String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setCallback(new RequestCallback() { public void onError1(Request request, Throwable exception) { alert(String + getMessage());} public void onResponseReceived1(Request request, Response response) { if ( getStatusCode() != SC_UNAUTHORIZED) &&  getStatusCode() != SC_OK)) { onError1(request, new RequestException( getStatusText() + String) + getText()));return;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http",
    "truth_type": "com.google.gwt.http",
    "full_FQN": "com.google.gwt.http.client.RequestCallback()",
    "boolean": 1,
    "context": " setHeader(String, String); setRequestData(String + String); setCallback(new <mask><mask><mask><mask><mask><mask><mask><mask>RequestCallback() { public void onError1(Request request, Throwable exception) { alert(String + getMessage());} public void onResponseReceived1(Request request, Response response) { if ( getStatusCode() != SC_UNAUTHORIZED) &&  getStatusCode() != SC_OK)) { onError1(request, new RequestException( getStatusText() + String) + getText()));return;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Request",
    "boolean": 1,
    "context": " setHeader(String, String); setRequestData(String + String); setCallback(new RequestCallback() { public void onError1(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Request request, Throwable exception) { alert(String + getMessage());} public void onResponseReceived1(Request request, Response response) { if ( getStatusCode() != SC_UNAUTHORIZED) &&  getStatusCode() != SC_OK)) { onError1(request, new RequestException( getStatusText() + String) + getText()));return;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.Window.alert()",
    "boolean": 1,
    "context": " setHeader(String, String); setRequestData(String + String); setCallback(new RequestCallback() { public void onError1(Request request, Throwable exception) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>alert(String + getMessage());} public void onResponseReceived1(Request request, Response response) { if ( getStatusCode() != SC_UNAUTHORIZED) &&  getStatusCode() != SC_OK)) { onError1(request, new RequestException( getStatusText() + String) + getText()));return;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Request",
    "boolean": 1,
    "context": " setRequestData(String + String); setCallback(new RequestCallback() { public void onError1(Request request, Throwable exception) { alert(String + getMessage());} public void onResponseReceived1(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Request request, Response response) { if ( getStatusCode() != SC_UNAUTHORIZED) &&  getStatusCode() != SC_OK)) { onError1(request, new RequestException( getStatusText() + String) + getText()));return;} if  getStatusCode() == SC_UNAUTHORIZED) { alert(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response",
    "boolean": 1,
    "context": " setRequestData(String + String); setCallback(new RequestCallback() { public void onError1(Request request, Throwable exception) { alert(String + getMessage());} public void onResponseReceived1(Request request, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Response response) { if ( getStatusCode() != SC_UNAUTHORIZED) &&  getStatusCode() != SC_OK)) { onError1(request, new RequestException( getStatusText() + String) + getText()));return;} if  getStatusCode() == SC_UNAUTHORIZED) { alert(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response.getStatusCode()",
    "boolean": 1,
    "context": " setRequestData(String + String); setCallback(new RequestCallback() { public void onError1(Request request, Throwable exception) { alert(String + getMessage());} public void onResponseReceived1(Request request, Response response) { if ( <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getStatusCode() != SC_UNAUTHORIZED) &&  getStatusCode() != SC_OK)) { onError1(request, new RequestException( getStatusText() + String) + getText()));return;} if  getStatusCode() == SC_UNAUTHORIZED) { alert(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client.Response",
    "truth_type": "com.google.gwt.http.client.Response",
    "full_FQN": "com.google.gwt.http.client.Response.SC_UNAUTHORIZED",
    "boolean": 1,
    "context": " setRequestData(String + String); setCallback(new RequestCallback() { public void onError1(Request request, Throwable exception) { alert(String + getMessage());} public void onResponseReceived1(Request request, Response response) { if ( getStatusCode() != <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.SC_UNAUTHORIZED) &&  getStatusCode() != SC_OK)) { onError1(request, new RequestException( getStatusText() + String) + getText()));return;} if  getStatusCode() == SC_UNAUTHORIZED) { alert(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response.getStatusCode()",
    "boolean": 1,
    "context": " setRequestData(String + String); setCallback(new RequestCallback() { public void onError1(Request request, Throwable exception) { alert(String + getMessage());} public void onResponseReceived1(Request request, Response response) { if ( getStatusCode() != SC_UNAUTHORIZED) &&  <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getStatusCode() != SC_OK)) { onError1(request, new RequestException( getStatusText() + String) + getText()));return;} if  getStatusCode() == SC_UNAUTHORIZED) { alert(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client.Response",
    "truth_type": "com.google.gwt.http.client.Response",
    "full_FQN": "com.google.gwt.http.client.Response.SC_OK",
    "boolean": 1,
    "context": " setRequestData(String + String); setCallback(new RequestCallback() { public void onError1(Request request, Throwable exception) { alert(String + getMessage());} public void onResponseReceived1(Request request, Response response) { if ( getStatusCode() != SC_UNAUTHORIZED) &&  getStatusCode() != <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.SC_OK)) { onError1(request, new RequestException( getStatusText() + String) + getText()));return;} if  getStatusCode() == SC_UNAUTHORIZED) { alert(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http",
    "truth_type": "com.google.gwt.http",
    "full_FQN": "com.google.gwt.http.client.RequestException()",
    "boolean": 1,
    "context": " setRequestData(String + String); setCallback(new RequestCallback() { public void onError1(Request request, Throwable exception) { alert(String + getMessage());} public void onResponseReceived1(Request request, Response response) { if ( getStatusCode() != SC_UNAUTHORIZED) &&  getStatusCode() != SC_OK)) { onError1(request, new <mask><mask><mask><mask><mask><mask><mask><mask>RequestException( getStatusText() + String) + getText()));return;} if  getStatusCode() == SC_UNAUTHORIZED) { alert(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response.getStatusText()",
    "boolean": 1,
    "context": " setRequestData(String + String); setCallback(new RequestCallback() { public void onError1(Request request, Throwable exception) { alert(String + getMessage());} public void onResponseReceived1(Request request, Response response) { if ( getStatusCode() != SC_UNAUTHORIZED) &&  getStatusCode() != SC_OK)) { onError1(request, new RequestException( <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getStatusText() + String) + getText()));return;} if  getStatusCode() == SC_UNAUTHORIZED) { alert(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response.getText()",
    "boolean": 1,
    "context": " setRequestData(String + String); setCallback(new RequestCallback() { public void onError1(Request request, Throwable exception) { alert(String + getMessage());} public void onResponseReceived1(Request request, Response response) { if ( getStatusCode() != SC_UNAUTHORIZED) &&  getStatusCode() != SC_OK)) { onError1(request, new RequestException( getStatusText() + String) + <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getText()));return;} if  getStatusCode() == SC_UNAUTHORIZED) { alert(String);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response.getStatusCode()",
    "boolean": 1,
    "context": "} public void onResponseReceived1(Request request, Response response) { if ( getStatusCode() != SC_UNAUTHORIZED) &&  getStatusCode() != SC_OK)) { onError1(request, new RequestException( getStatusText() + String) + getText()));return;} if  <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getStatusCode() == SC_UNAUTHORIZED) { alert(String);} else { String height = 800 + String;String width = 600 + String;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client.Response",
    "truth_type": "com.google.gwt.http.client.Response",
    "full_FQN": "com.google.gwt.http.client.Response.SC_UNAUTHORIZED",
    "boolean": 1,
    "context": "} public void onResponseReceived1(Request request, Response response) { if ( getStatusCode() != SC_UNAUTHORIZED) &&  getStatusCode() != SC_OK)) { onError1(request, new RequestException( getStatusText() + String) + getText()));return;} if  getStatusCode() == <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.SC_UNAUTHORIZED) { alert(String);} else { String height = 800 + String;String width = 600 + String;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.Window.alert()",
    "boolean": 1,
    "context": "} public void onResponseReceived1(Request request, Response response) { if ( getStatusCode() != SC_UNAUTHORIZED) &&  getStatusCode() != SC_OK)) { onError1(request, new RequestException( getStatusText() + String) + getText()));return;} if  getStatusCode() == SC_UNAUTHORIZED) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>alert(String);} else { String height = 800 + String;String width = 600 + String;"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.Window.alert()",
    "boolean": 1,
    "context": "} else { String height = 800 + String;String width = 600 + String;<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>alert(String);open(String, String, (((String + height) + String) + width) + String);} } @Override public void onResponseReceived(Request request, Response response) { // TODO Auto-generated method stub } @Override public void onError(Request request, Throwable exception) { // TODO Auto-generated method stub } });"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.Window.open()",
    "boolean": 1,
    "context": "java.lang.String width = 600 + String;alert(String);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>open(String, String, (((String + height) + String) + width) + String);} } @Override public void onResponseReceived(Request request, Response response) { // TODO Auto-generated method stub } @Override public void onError(Request request, Throwable exception) { // TODO Auto-generated method stub } }); send();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Request",
    "boolean": 1,
    "context": "com.google.gwt.user.client.Window.alert(String);open(String, String, (((String + height) + String) + width) + String);} } @Override public void onResponseReceived(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Request request, Response response) { // TODO Auto-generated method stub } @Override public void onError(Request request, Throwable exception) { // TODO Auto-generated method stub } }); send();} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Response",
    "boolean": 1,
    "context": "com.google.gwt.user.client.Window.alert(String);open(String, String, (((String + height) + String) + width) + String);} } @Override public void onResponseReceived(Request request, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Response response) { // TODO Auto-generated method stub } @Override public void onError(Request request, Throwable exception) { // TODO Auto-generated method stub } }); send();} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.Request",
    "boolean": 1,
    "context": "com.google.gwt.user.client.Window.alert(String);open(String, String, (((String + height) + String) + width) + String);} } @Override public void onResponseReceived(Request request, Response response) { // TODO Auto-generated method stub } @Override public void onError(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Request request, Throwable exception) { // TODO Auto-generated method stub } }); send();} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.http.client",
    "truth_type": "com.google.gwt.http.client",
    "full_FQN": "com.google.gwt.http.client.RequestBuilder.send()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.Window.open(String, String, (((String + height) + String) + width) + String);} } @Override public void onResponseReceived(Request request, Response response) { // TODO Auto-generated method stub } @Override public void onError(Request request, Throwable exception) { // TODO Auto-generated method stub } }); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>send();} };"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel",
    "boolean": 1,
    "context": "public class gwt_class_9 { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.VerticalPanel v1 = new VerticalPanel();Command comm = new Command() { @Override public void execute() { } };MenuBar menu = new MenuBar();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.VerticalPanel()",
    "boolean": 1,
    "context": "public class gwt_class_9 { VerticalPanel v1 = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>VerticalPanel();Command comm = new Command() { @Override public void execute() { } };MenuBar menu = new MenuBar();"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.Command",
    "boolean": 1,
    "context": "public class gwt_class_9 { VerticalPanel v1 = new VerticalPanel();<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Command comm = new Command() { @Override public void execute() { } };MenuBar menu = new MenuBar();MenuBar fileBar = new MenuBar(true);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user",
    "truth_type": "com.google.gwt.user",
    "full_FQN": "com.google.gwt.user.client.Command()",
    "boolean": 1,
    "context": "public class gwt_class_9 { VerticalPanel v1 = new VerticalPanel();Command comm = new <mask><mask><mask><mask><mask><mask><mask><mask>Command() { @Override public void execute() { } };MenuBar menu = new MenuBar();MenuBar fileBar = new MenuBar(true);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.MenuBar",
    "boolean": 1,
    "context": "public class gwt_class_9 { VerticalPanel v1 = new VerticalPanel();Command comm = new Command() { @Override public void execute() { } };<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MenuBar menu = new MenuBar();MenuBar fileBar = new MenuBar(true);MenuBar editBar = new MenuBar(true);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.MenuBar()",
    "boolean": 1,
    "context": "public class gwt_class_9 { VerticalPanel v1 = new VerticalPanel();Command comm = new Command() { @Override public void execute() { } };MenuBar menu = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>MenuBar();MenuBar fileBar = new MenuBar(true);MenuBar editBar = new MenuBar(true);"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.MenuBar",
    "boolean": 1,
    "context": "com.google.gwt.user.client.Command comm = new Command() { @Override public void execute() { } };MenuBar menu = new MenuBar();<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MenuBar fileBar = new MenuBar(true);MenuBar editBar = new MenuBar(true);};"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.MenuBar()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.Command comm = new Command() { @Override public void execute() { } };MenuBar menu = new MenuBar();MenuBar fileBar = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>MenuBar(true);MenuBar editBar = new MenuBar(true);};"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client.ui",
    "truth_type": "com.google.gwt.user.client.ui",
    "full_FQN": "com.google.gwt.user.client.ui.MenuBar",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.MenuBar menu = new MenuBar();MenuBar fileBar = new MenuBar(true);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MenuBar editBar = new MenuBar(true);};"
  },
  {
    "lib_name": "gwt",
    "pred_type": "com.google.gwt.user.client",
    "truth_type": "com.google.gwt.user.client",
    "full_FQN": "com.google.gwt.user.client.ui.MenuBar()",
    "boolean": 1,
    "context": "com.google.gwt.user.client.ui.MenuBar menu = new MenuBar();MenuBar fileBar = new MenuBar(true);MenuBar editBar = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>MenuBar(true);};"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class HibernateUtil { private static final <mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory;static { try { // Create the SessionFactory from xml sessionFactory = new AnnotationConfiguration().configure().buildSessionFactory();} catch (Throwable e) { println(String + e);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "hibernate.cfg",
    "full_FQN": "hibernate.cfg.xml",
    "boolean": 0,
    "context": "public class HibernateUtil { private static final SessionFactory sessionFactory;static { try { // Create the SessionFactory from <mask><mask><mask><mask><mask><mask>.xml sessionFactory = new AnnotationConfiguration().configure().buildSessionFactory();} catch (Throwable e) { println(String + e);throw new ExceptionInInitializerError(e);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.cfg.AnnotationConfiguration()",
    "boolean": 1,
    "context": "public class HibernateUtil { private static final SessionFactory sessionFactory;static { try { // Create the SessionFactory from xml sessionFactory = new <mask><mask><mask><mask><mask><mask>AnnotationConfiguration().configure().buildSessionFactory();} catch (Throwable e) { println(String + e);throw new ExceptionInInitializerError(e);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "} catch (Throwable e) { println(String + e);throw new ExceptionInInitializerError(e);} } public static <mask><mask><mask><mask><mask><mask>.SessionFactory getSessionFactory() { return sessionFactory;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "D..istry",
    "truth_type": "library.dao",
    "full_FQN": "library.dao.UserDAO",
    "boolean": 0,
    "context": "public class hibernate_class_1 { public class HibernateUserDAO implements <mask><mask><mask><mask>.UserDAO { private SessionFactory sessionFactory;public HibernateUserDAO() { AnnotationConfiguration annotConf = new AnnotationConfiguration(); addAnnotatedClass(class);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_1 { public class HibernateUserDAO implements UserDAO { private <mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory;public HibernateUserDAO() { AnnotationConfiguration annotConf = new AnnotationConfiguration(); addAnnotatedClass(class);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.AnnotationConfiguration",
    "boolean": 1,
    "context": "public class hibernate_class_1 { public class HibernateUserDAO implements UserDAO { private SessionFactory sessionFactory;public HibernateUserDAO() { <mask><mask><mask><mask><mask><mask><mask><mask>.AnnotationConfiguration annotConf = new AnnotationConfiguration(); addAnnotatedClass(class); configure();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.cfg.AnnotationConfiguration()",
    "boolean": 1,
    "context": "public class hibernate_class_1 { public class HibernateUserDAO implements UserDAO { private SessionFactory sessionFactory;public HibernateUserDAO() { AnnotationConfiguration annotConf = new <mask><mask><mask><mask><mask><mask>AnnotationConfiguration(); addAnnotatedClass(class); configure();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.AnnotationConfiguration.addAnnotatedClass()",
    "boolean": 1,
    "context": "public class hibernate_class_1 { public class HibernateUserDAO implements UserDAO { private SessionFactory sessionFactory;public HibernateUserDAO() { AnnotationConfiguration annotConf = new AnnotationConfiguration(); <mask><mask><mask><mask><mask><mask><mask><mask>addAnnotatedClass(class); configure();sessionFactory = buildSessionFactory();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.lang.Class",
    "truth_type": "library.model.User",
    "full_FQN": "library.model.User.class",
    "boolean": 0,
    "context": "public class hibernate_class_1 { public class HibernateUserDAO implements UserDAO { private SessionFactory sessionFactory;public HibernateUserDAO() { AnnotationConfiguration annotConf = new AnnotationConfiguration(); addAnnotatedClass(<mask><mask><mask><mask><mask>.class); configure();sessionFactory = buildSessionFactory();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.AnnotationConfiguration.configure()",
    "boolean": 1,
    "context": "public HibernateUserDAO() { AnnotationConfiguration annotConf = new AnnotationConfiguration(); addAnnotatedClass(class); <mask><mask><mask><mask><mask><mask><mask><mask>configure();sessionFactory = buildSessionFactory();} public void store(User user) { Session session = openSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.AnnotationConfiguration.buildSessionFactory()",
    "boolean": 1,
    "context": " addAnnotatedClass(class); configure();sessionFactory = <mask><mask><mask><mask><mask><mask><mask><mask>buildSessionFactory();} public void store(User user) { Session session = openSession();Transaction tx = getTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.lang",
    "truth_type": "library.model",
    "full_FQN": "library.model.User",
    "boolean": 0,
    "context": " configure();sessionFactory = buildSessionFactory();} public void store(<mask><mask><mask>.User user) { Session session = openSession();Transaction tx = getTransaction();try { begin();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": " configure();sessionFactory = buildSessionFactory();} public void store(User user) { <mask><mask><mask><mask><mask><mask>.Session session = openSession();Transaction tx = getTransaction();try { begin();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.openSession()",
    "boolean": 1,
    "context": " configure();sessionFactory = buildSessionFactory();} public void store(User user) { Session session = <mask><mask><mask><mask><mask><mask>openSession();Transaction tx = getTransaction();try { begin();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction",
    "boolean": 1,
    "context": "sessionFactory = buildSessionFactory();} public void store(User user) { Session session = openSession();<mask><mask><mask><mask><mask><mask>.Transaction tx = getTransaction();try { begin(); saveOrUpdate(user);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.getTransaction()",
    "boolean": 1,
    "context": "sessionFactory = buildSessionFactory();} public void store(User user) { Session session = openSession();Transaction tx = <mask><mask><mask><mask><mask><mask>getTransaction();try { begin(); saveOrUpdate(user);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.begin()",
    "boolean": 1,
    "context": "} public void store(User user) { Session session = openSession();Transaction tx = getTransaction();try { <mask><mask><mask><mask><mask><mask>begin(); saveOrUpdate(user); commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.saveOrUpdate()",
    "boolean": 1,
    "context": "org.hibernate.Transaction tx = getTransaction();try { begin(); <mask><mask><mask><mask><mask><mask>saveOrUpdate(user); commit();} catch (RuntimeException e) { rollback();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.commit()",
    "boolean": 1,
    "context": "try { begin(); saveOrUpdate(user); <mask><mask><mask><mask><mask><mask>commit();} catch (RuntimeException e) { rollback();throw e;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.rollback()",
    "boolean": 1,
    "context": " saveOrUpdate(user); commit();} catch (RuntimeException e) { <mask><mask><mask><mask><mask><mask>rollback();throw e;} finally { close();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.close()",
    "boolean": 1,
    "context": "} catch (RuntimeException e) { rollback();throw e;} finally { <mask><mask><mask><mask><mask><mask>close();} } @Override public User getUser(int arg0) { return null;} @Override public User getUserByFirstLastName(String arg0, String arg1) { return null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.model",
    "truth_type": "library.model",
    "full_FQN": "library.model.User",
    "boolean": 0,
    "context": "throw e;} finally { close();} } @Override public <mask><mask><mask>.User getUser(int arg0) { return null;} @Override public User getUserByFirstLastName(String arg0, String arg1) { return null;} @Override public User getUserByUsername(String arg0) { return null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "library.model",
    "truth_type": "library.model",
    "full_FQN": "library.model.User",
    "boolean": 1,
    "context": "} finally { close();} } @Override public User getUser(int arg0) { return null;} @Override public <mask><mask><mask>.User getUserByFirstLastName(String arg0, String arg1) { return null;} @Override public User getUserByUsername(String arg0) { return null;} @Override public int saveUser(User arg0) { return 0;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "library.model",
    "truth_type": "library.model",
    "full_FQN": "library.model.User",
    "boolean": 1,
    "context": "} } @Override public User getUser(int arg0) { return null;} @Override public User getUserByFirstLastName(String arg0, String arg1) { return null;} @Override public <mask><mask><mask>.User getUserByUsername(String arg0) { return null;} @Override public int saveUser(User arg0) { return 0;} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.lang",
    "truth_type": "library.model",
    "full_FQN": "library.model.User",
    "boolean": 0,
    "context": "} @Override public User getUserByFirstLastName(String arg0, String arg1) { return null;} @Override public User getUserByUsername(String arg0) { return null;} @Override public int saveUser(<mask><mask><mask>.User arg0) { return 0;} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.Serializable",
    "boolean": 1,
    "context": "public class hibernate_class_10 implements <mask><mask><mask>.Serializable { private String providerId;private String providerName;private static final long serialVersionUID = 81073;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "private String providerName;private static final long serialVersionUID = 81073;public static void load(<mask><mask><mask><mask><mask><mask>.Session session, List<String> values) { hibernate_class_10 ProviderInfo = new hibernate_class_10();setProviderId get(0));setProviderName get(1));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "private String providerName;private static final long serialVersionUID = 81073;public static void load(Session session, <mask><mask><mask>.List<String> values) { hibernate_class_10 ProviderInfo = new hibernate_class_10();setProviderId get(0));setProviderName get(1));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.get()",
    "boolean": 1,
    "context": "private static final long serialVersionUID = 81073;public static void load(Session session, List<String> values) { hibernate_class_10 ProviderInfo = new hibernate_class_10();setProviderId <mask><mask><mask>get(0));setProviderName get(1)); save(ProviderInfo);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.get()",
    "boolean": 1,
    "context": "public static void load(Session session, List<String> values) { hibernate_class_10 ProviderInfo = new hibernate_class_10();setProviderId get(0));setProviderName <mask><mask><mask>get(1)); save(ProviderInfo);} public String getProviderName() { return providerName;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.save()",
    "boolean": 1,
    "context": "ProviderInfo.setProviderId get(0));setProviderName get(1)); <mask><mask><mask><mask><mask><mask>save(ProviderInfo);} public String getProviderName() { return providerName;} public void setProviderName(String name) { providerName = name;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Entity",
    "boolean": 0,
    "context": "public class hibernate_class_11 { @<mask><mask><mask><mask><mask><mask>.Entity @Table(name = String) public class User implements Serializable { private static final long serialVersionUID = 2209767646758652729L;@Id @Column(name = String, nullable = false) private Integer id;@Column(name = String, length = 200, nullable = true) private String name;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Table()",
    "boolean": 0,
    "context": "public class hibernate_class_11 { @Entity @<mask><mask><mask><mask><mask><mask>.Table(name = String) public class User implements Serializable { private static final long serialVersionUID = 2209767646758652729L;@Id @Column(name = String, nullable = false) private Integer id;@Column(name = String, length = 200, nullable = true) private String name;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.Serializable",
    "boolean": 1,
    "context": "public class hibernate_class_11 { @Entity @Table(name = String) public class User implements <mask><mask><mask>.Serializable { private static final long serialVersionUID = 2209767646758652729L;@Id @Column(name = String, nullable = false) private Integer id;@Column(name = String, length = 200, nullable = true) private String name;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Id",
    "boolean": 0,
    "context": "public class hibernate_class_11 { @Entity @Table(name = String) public class User implements Serializable { private static final long serialVersionUID = 2209767646758652729L;@<mask><mask><mask><mask><mask><mask>.Id @Column(name = String, nullable = false) private Integer id;@Column(name = String, length = 200, nullable = true) private String name;@ManyToOne(fetch = EAGER) @JoinColumn(name = String, nullable = false, insertable = false, updatable = false) @ForeignKey(name = String) private UserGroup userGroup;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Column()",
    "boolean": 0,
    "context": "public class hibernate_class_11 { @Entity @Table(name = String) public class User implements Serializable { private static final long serialVersionUID = 2209767646758652729L;@Id @<mask><mask><mask><mask><mask><mask>.Column(name = String, nullable = false) private Integer id;@Column(name = String, length = 200, nullable = true) private String name;@ManyToOne(fetch = EAGER) @JoinColumn(name = String, nullable = false, insertable = false, updatable = false) @ForeignKey(name = String) private UserGroup userGroup;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Column()",
    "boolean": 0,
    "context": "public class hibernate_class_11 { @Entity @Table(name = String) public class User implements Serializable { private static final long serialVersionUID = 2209767646758652729L;@Id @Column(name = String, nullable = false) private Integer id;@<mask><mask><mask><mask><mask><mask>.Column(name = String, length = 200, nullable = true) private String name;@ManyToOne(fetch = EAGER) @JoinColumn(name = String, nullable = false, insertable = false, updatable = false) @ForeignKey(name = String) private UserGroup userGroup;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.ManyToOne()",
    "boolean": 0,
    "context": "@Id @Column(name = String, nullable = false) private Integer id;@Column(name = String, length = 200, nullable = true) private String name;@<mask><mask><mask><mask><mask><mask>.ManyToOne(fetch = EAGER) @JoinColumn(name = String, nullable = false, insertable = false, updatable = false) @ForeignKey(name = String) private UserGroup userGroup;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence.FetchType",
    "truth_type": "javax.persistence.FetchType",
    "full_FQN": "javax.persistence.FetchType.EAGER",
    "boolean": 0,
    "context": "@Id @Column(name = String, nullable = false) private Integer id;@Column(name = String, length = 200, nullable = true) private String name;@ManyToOne(fetch = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.EAGER) @JoinColumn(name = String, nullable = false, insertable = false, updatable = false) @ForeignKey(name = String) private UserGroup userGroup;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.JoinColumn()",
    "boolean": 0,
    "context": "@Id @Column(name = String, nullable = false) private Integer id;@Column(name = String, length = 200, nullable = true) private String name;@ManyToOne(fetch = EAGER) @<mask><mask><mask><mask><mask><mask>.JoinColumn(name = String, nullable = false, insertable = false, updatable = false) @ForeignKey(name = String) private UserGroup userGroup;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.annotations.ForeignKey()",
    "boolean": 1,
    "context": "@Id @Column(name = String, nullable = false) private Integer id;@Column(name = String, length = 200, nullable = true) private String name;@ManyToOne(fetch = EAGER) @JoinColumn(name = String, nullable = false, insertable = false, updatable = false) @<mask><mask><mask><mask><mask><mask>ForeignKey(name = String) private UserGroup userGroup;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.orm.test.scapping.basic",
    "truth_type": "org.apache.directory.api.ldap.aci.UserClass",
    "full_FQN": "org.apache.directory.api.ldap.aci.UserClass.UserGroup",
    "boolean": 0,
    "context": "@Id @Column(name = String, nullable = false) private Integer id;@Column(name = String, length = 200, nullable = true) private String name;@ManyToOne(fetch = EAGER) @JoinColumn(name = String, nullable = false, insertable = false, updatable = false) @ForeignKey(name = String) private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.UserGroup userGroup;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "public class hibernate_class_12 { public void main() { <mask><mask><mask><mask><mask><mask>.Session session = null;try { SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();session = openSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_12 { public void main() { Session session = null;try { <mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();session = openSession();String id = ((String) (getCurrentInstance().getExternalContext().getRequestParameterMap().get(String)));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.cfg.Configuration()",
    "boolean": 1,
    "context": "public class hibernate_class_12 { public void main() { Session session = null;try { SessionFactory sessionFactory = new <mask><mask><mask><mask><mask><mask>Configuration().configure().buildSessionFactory();session = openSession();String id = ((String) (getCurrentInstance().getExternalContext().getRequestParameterMap().get(String)));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.openSession()",
    "boolean": 1,
    "context": "public class hibernate_class_12 { public void main() { Session session = null;try { SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();session = <mask><mask><mask><mask><mask><mask>openSession();String id = ((String) (getCurrentInstance().getExternalContext().getRequestParameterMap().get(String)));Transaction t = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "orgdkandroidjfr.internal",
    "truth_type": "javax.faces.context",
    "full_FQN": "javax.faces.context.FacesContext.getCurrentInstance()",
    "boolean": 0,
    "context": "try { SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();session = openSession();String id = ((String) (<mask><mask><mask><mask><mask><mask><mask>getCurrentInstance().getExternalContext().getRequestParameterMap().get(String)));Transaction t = beginTransaction(); commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction",
    "boolean": 1,
    "context": "session = openSession();String id = ((String) (getCurrentInstance().getExternalContext().getRequestParameterMap().get(String)));<mask><mask><mask><mask><mask><mask>.Transaction t = beginTransaction(); commit();} catch (Exception e) { } finally { close();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.beginTransaction()",
    "boolean": 1,
    "context": "session = openSession();String id = ((String) (getCurrentInstance().getExternalContext().getRequestParameterMap().get(String)));Transaction t = <mask><mask><mask><mask><mask><mask>beginTransaction(); commit();} catch (Exception e) { } finally { close();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.commit()",
    "boolean": 1,
    "context": "java.lang.String id = ((String) (getCurrentInstance().getExternalContext().getRequestParameterMap().get(String)));Transaction t = beginTransaction(); <mask><mask><mask><mask><mask><mask>commit();} catch (Exception e) { } finally { close();} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.close()",
    "boolean": 1,
    "context": "org.hibernate.Transaction t = beginTransaction(); commit();} catch (Exception e) { } finally { <mask><mask><mask><mask><mask><mask>close();} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Entity",
    "boolean": 0,
    "context": "@<mask><mask><mask><mask><mask><mask>.Entity @Table(name = String) public class hibernate_class_13 implements Serializable , Cloneable { @Id @Column(name = String, nullable = false) private Integer countyId;@Id @Column(name = String, length = 25, nullable = false) private String username;@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false, insertable = false, updatable = false) @ForeignKey(name = String) @Column(name = String, length = 50, nullable = true) private String name;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Table()",
    "boolean": 0,
    "context": "@Entity @<mask><mask><mask><mask><mask><mask>.Table(name = String) public class hibernate_class_13 implements Serializable , Cloneable { @Id @Column(name = String, nullable = false) private Integer countyId;@Id @Column(name = String, length = 25, nullable = false) private String username;@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false, insertable = false, updatable = false) @ForeignKey(name = String) @Column(name = String, length = 50, nullable = true) private String name;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.Serializable",
    "boolean": 1,
    "context": "@Entity @Table(name = String) public class hibernate_class_13 implements <mask><mask><mask>.Serializable , Cloneable { @Id @Column(name = String, nullable = false) private Integer countyId;@Id @Column(name = String, length = 25, nullable = false) private String username;@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false, insertable = false, updatable = false) @ForeignKey(name = String) @Column(name = String, length = 50, nullable = true) private String name;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Id",
    "boolean": 0,
    "context": "@Entity @Table(name = String) public class hibernate_class_13 implements Serializable , Cloneable { @<mask><mask><mask><mask><mask><mask>.Id @Column(name = String, nullable = false) private Integer countyId;@Id @Column(name = String, length = 25, nullable = false) private String username;@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false, insertable = false, updatable = false) @ForeignKey(name = String) @Column(name = String, length = 50, nullable = true) private String name;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Column()",
    "boolean": 0,
    "context": "@Entity @Table(name = String) public class hibernate_class_13 implements Serializable , Cloneable { @Id @<mask><mask><mask><mask><mask><mask>.Column(name = String, nullable = false) private Integer countyId;@Id @Column(name = String, length = 25, nullable = false) private String username;@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false, insertable = false, updatable = false) @ForeignKey(name = String) @Column(name = String, length = 50, nullable = true) private String name;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Id",
    "boolean": 0,
    "context": "@Entity @Table(name = String) public class hibernate_class_13 implements Serializable , Cloneable { @Id @Column(name = String, nullable = false) private Integer countyId;@<mask><mask><mask><mask><mask><mask>.Id @Column(name = String, length = 25, nullable = false) private String username;@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false, insertable = false, updatable = false) @ForeignKey(name = String) @Column(name = String, length = 50, nullable = true) private String name;@Column(name = String, length = 30, nullable = true) private String password;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Column()",
    "boolean": 0,
    "context": "@Entity @Table(name = String) public class hibernate_class_13 implements Serializable , Cloneable { @Id @Column(name = String, nullable = false) private Integer countyId;@Id @<mask><mask><mask><mask><mask><mask>.Column(name = String, length = 25, nullable = false) private String username;@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false, insertable = false, updatable = false) @ForeignKey(name = String) @Column(name = String, length = 50, nullable = true) private String name;@Column(name = String, length = 30, nullable = true) private String password;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.ManyToOne()",
    "boolean": 0,
    "context": "@Entity @Table(name = String) public class hibernate_class_13 implements Serializable , Cloneable { @Id @Column(name = String, nullable = false) private Integer countyId;@Id @Column(name = String, length = 25, nullable = false) private String username;@<mask><mask><mask><mask><mask><mask>.ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false, insertable = false, updatable = false) @ForeignKey(name = String) @Column(name = String, length = 50, nullable = true) private String name;@Column(name = String, length = 30, nullable = true) private String password;@Column(name = String, nullable = false) private Integer role;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence.FetchType",
    "truth_type": "javax.persistence.FetchType",
    "full_FQN": "javax.persistence.FetchType.LAZY",
    "boolean": 0,
    "context": "@Entity @Table(name = String) public class hibernate_class_13 implements Serializable , Cloneable { @Id @Column(name = String, nullable = false) private Integer countyId;@Id @Column(name = String, length = 25, nullable = false) private String username;@ManyToOne(fetch = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.LAZY) @JoinColumn(name = String, nullable = false, insertable = false, updatable = false) @ForeignKey(name = String) @Column(name = String, length = 50, nullable = true) private String name;@Column(name = String, length = 30, nullable = true) private String password;@Column(name = String, nullable = false) private Integer role;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.JoinColumn()",
    "boolean": 0,
    "context": "@Entity @Table(name = String) public class hibernate_class_13 implements Serializable , Cloneable { @Id @Column(name = String, nullable = false) private Integer countyId;@Id @Column(name = String, length = 25, nullable = false) private String username;@ManyToOne(fetch = LAZY) @<mask><mask><mask><mask><mask><mask>.JoinColumn(name = String, nullable = false, insertable = false, updatable = false) @ForeignKey(name = String) @Column(name = String, length = 50, nullable = true) private String name;@Column(name = String, length = 30, nullable = true) private String password;@Column(name = String, nullable = false) private Integer role;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.annotations.ForeignKey()",
    "boolean": 1,
    "context": "@Entity @Table(name = String) public class hibernate_class_13 implements Serializable , Cloneable { @Id @Column(name = String, nullable = false) private Integer countyId;@Id @Column(name = String, length = 25, nullable = false) private String username;@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false, insertable = false, updatable = false) @<mask><mask><mask><mask><mask><mask>ForeignKey(name = String) @Column(name = String, length = 50, nullable = true) private String name;@Column(name = String, length = 30, nullable = true) private String password;@Column(name = String, nullable = false) private Integer role;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Column()",
    "boolean": 0,
    "context": "@Entity @Table(name = String) public class hibernate_class_13 implements Serializable , Cloneable { @Id @Column(name = String, nullable = false) private Integer countyId;@Id @Column(name = String, length = 25, nullable = false) private String username;@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false, insertable = false, updatable = false) @ForeignKey(name = String) @<mask><mask><mask><mask><mask><mask>.Column(name = String, length = 50, nullable = true) private String name;@Column(name = String, length = 30, nullable = true) private String password;@Column(name = String, nullable = false) private Integer role;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Column()",
    "boolean": 0,
    "context": "@Id @Column(name = String, length = 25, nullable = false) private String username;@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false, insertable = false, updatable = false) @ForeignKey(name = String) @Column(name = String, length = 50, nullable = true) private String name;@<mask><mask><mask><mask><mask><mask>.Column(name = String, length = 30, nullable = true) private String password;@Column(name = String, nullable = false) private Integer role;@ManyToMany(targetEntity = class, cascade = { PERSIST, MERGE }) @JoinTable(name = String, joinColumns = { @JoinColumn(name = String, referencedColumnName = String), @JoinColumn(name = String, referencedColumnName = String) }, inverseJoinColumns = { @JoinColumn(name = String, referencedColumnName = String) }) private Collection<Permission> permissions;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Column()",
    "boolean": 0,
    "context": "@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false, insertable = false, updatable = false) @ForeignKey(name = String) @Column(name = String, length = 50, nullable = true) private String name;@Column(name = String, length = 30, nullable = true) private String password;@<mask><mask><mask><mask><mask><mask>.Column(name = String, nullable = false) private Integer role;@ManyToMany(targetEntity = class, cascade = { PERSIST, MERGE }) @JoinTable(name = String, joinColumns = { @JoinColumn(name = String, referencedColumnName = String), @JoinColumn(name = String, referencedColumnName = String) }, inverseJoinColumns = { @JoinColumn(name = String, referencedColumnName = String) }) private Collection<Permission> permissions;@OneToMany(fetch = LAZY, mappedBy = String) @IndexColumn(name = String) private List versions;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.ManyToMany()",
    "boolean": 0,
    "context": "@Column(name = String, length = 30, nullable = true) private String password;@Column(name = String, nullable = false) private Integer role;@<mask><mask><mask><mask><mask><mask>.ManyToMany(targetEntity = class, cascade = { PERSIST, MERGE }) @JoinTable(name = String, joinColumns = { @JoinColumn(name = String, referencedColumnName = String), @JoinColumn(name = String, referencedColumnName = String) }, inverseJoinColumns = { @JoinColumn(name = String, referencedColumnName = String) }) private Collection<Permission> permissions;@OneToMany(fetch = LAZY, mappedBy = String) @IndexColumn(name = String) private List versions;};"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.security..List",
    "truth_type": "java.security.Permission",
    "full_FQN": "java.security.Permission.class",
    "boolean": 0,
    "context": "@Column(name = String, length = 30, nullable = true) private String password;@Column(name = String, nullable = false) private Integer role;@ManyToMany(targetEntity = <mask><mask><mask><mask><mask><mask>.class, cascade = { PERSIST, MERGE }) @JoinTable(name = String, joinColumns = { @JoinColumn(name = String, referencedColumnName = String), @JoinColumn(name = String, referencedColumnName = String) }, inverseJoinColumns = { @JoinColumn(name = String, referencedColumnName = String) }) private Collection<Permission> permissions;@OneToMany(fetch = LAZY, mappedBy = String) @IndexColumn(name = String) private List versions;};"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakax.persistence.CascadeType",
    "truth_type": "javax.persistence.CascadeType",
    "full_FQN": "javax.persistence.CascadeType.PERSIST",
    "boolean": 0,
    "context": "@Column(name = String, length = 30, nullable = true) private String password;@Column(name = String, nullable = false) private Integer role;@ManyToMany(targetEntity = class, cascade = { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.PERSIST, MERGE }) @JoinTable(name = String, joinColumns = { @JoinColumn(name = String, referencedColumnName = String), @JoinColumn(name = String, referencedColumnName = String) }, inverseJoinColumns = { @JoinColumn(name = String, referencedColumnName = String) }) private Collection<Permission> permissions;@OneToMany(fetch = LAZY, mappedBy = String) @IndexColumn(name = String) private List versions;};"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence.CascadeType",
    "truth_type": "javax.persistence.CascadeType",
    "full_FQN": "javax.persistence.CascadeType.MERGE",
    "boolean": 0,
    "context": "@Column(name = String, length = 30, nullable = true) private String password;@Column(name = String, nullable = false) private Integer role;@ManyToMany(targetEntity = class, cascade = { PERSIST, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MERGE }) @JoinTable(name = String, joinColumns = { @JoinColumn(name = String, referencedColumnName = String), @JoinColumn(name = String, referencedColumnName = String) }, inverseJoinColumns = { @JoinColumn(name = String, referencedColumnName = String) }) private Collection<Permission> permissions;@OneToMany(fetch = LAZY, mappedBy = String) @IndexColumn(name = String) private List versions;};"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.JoinTable()",
    "boolean": 0,
    "context": "@Column(name = String, length = 30, nullable = true) private String password;@Column(name = String, nullable = false) private Integer role;@ManyToMany(targetEntity = class, cascade = { PERSIST, MERGE }) @<mask><mask><mask><mask><mask><mask>.JoinTable(name = String, joinColumns = { @JoinColumn(name = String, referencedColumnName = String), @JoinColumn(name = String, referencedColumnName = String) }, inverseJoinColumns = { @JoinColumn(name = String, referencedColumnName = String) }) private Collection<Permission> permissions;@OneToMany(fetch = LAZY, mappedBy = String) @IndexColumn(name = String) private List versions;};"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.JoinColumn()",
    "boolean": 0,
    "context": "@Column(name = String, length = 30, nullable = true) private String password;@Column(name = String, nullable = false) private Integer role;@ManyToMany(targetEntity = class, cascade = { PERSIST, MERGE }) @JoinTable(name = String, joinColumns = { @<mask><mask><mask><mask><mask><mask>.JoinColumn(name = String, referencedColumnName = String), @JoinColumn(name = String, referencedColumnName = String) }, inverseJoinColumns = { @JoinColumn(name = String, referencedColumnName = String) }) private Collection<Permission> permissions;@OneToMany(fetch = LAZY, mappedBy = String) @IndexColumn(name = String) private List versions;};"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.JoinColumn()",
    "boolean": 0,
    "context": "@Column(name = String, length = 30, nullable = true) private String password;@Column(name = String, nullable = false) private Integer role;@ManyToMany(targetEntity = class, cascade = { PERSIST, MERGE }) @JoinTable(name = String, joinColumns = { @JoinColumn(name = String, referencedColumnName = String), @<mask><mask><mask><mask><mask><mask>.JoinColumn(name = String, referencedColumnName = String) }, inverseJoinColumns = { @JoinColumn(name = String, referencedColumnName = String) }) private Collection<Permission> permissions;@OneToMany(fetch = LAZY, mappedBy = String) @IndexColumn(name = String) private List versions;};"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.JoinColumn()",
    "boolean": 0,
    "context": "@Column(name = String, length = 30, nullable = true) private String password;@Column(name = String, nullable = false) private Integer role;@ManyToMany(targetEntity = class, cascade = { PERSIST, MERGE }) @JoinTable(name = String, joinColumns = { @JoinColumn(name = String, referencedColumnName = String), @JoinColumn(name = String, referencedColumnName = String) }, inverseJoinColumns = { @<mask><mask><mask><mask><mask><mask>.JoinColumn(name = String, referencedColumnName = String) }) private Collection<Permission> permissions;@OneToMany(fetch = LAZY, mappedBy = String) @IndexColumn(name = String) private List versions;};"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Collection",
    "boolean": 1,
    "context": "@Column(name = String, length = 30, nullable = true) private String password;@Column(name = String, nullable = false) private Integer role;@ManyToMany(targetEntity = class, cascade = { PERSIST, MERGE }) @JoinTable(name = String, joinColumns = { @JoinColumn(name = String, referencedColumnName = String), @JoinColumn(name = String, referencedColumnName = String) }, inverseJoinColumns = { @JoinColumn(name = String, referencedColumnName = String) }) private <mask><mask><mask>.Collection<Permission> permissions;@OneToMany(fetch = LAZY, mappedBy = String) @IndexColumn(name = String) private List versions;};"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.security",
    "truth_type": "java.security",
    "full_FQN": "java.security.Permission",
    "boolean": 1,
    "context": "@Column(name = String, length = 30, nullable = true) private String password;@Column(name = String, nullable = false) private Integer role;@ManyToMany(targetEntity = class, cascade = { PERSIST, MERGE }) @JoinTable(name = String, joinColumns = { @JoinColumn(name = String, referencedColumnName = String), @JoinColumn(name = String, referencedColumnName = String) }, inverseJoinColumns = { @JoinColumn(name = String, referencedColumnName = String) }) private Collection<<mask><mask><mask>.Permission> permissions;@OneToMany(fetch = LAZY, mappedBy = String) @IndexColumn(name = String) private List versions;};"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.OneToMany()",
    "boolean": 0,
    "context": "@Column(name = String, nullable = false) private Integer role;@ManyToMany(targetEntity = class, cascade = { PERSIST, MERGE }) @JoinTable(name = String, joinColumns = { @JoinColumn(name = String, referencedColumnName = String), @JoinColumn(name = String, referencedColumnName = String) }, inverseJoinColumns = { @JoinColumn(name = String, referencedColumnName = String) }) private Collection<Permission> permissions;@<mask><mask><mask><mask><mask><mask>.OneToMany(fetch = LAZY, mappedBy = String) @IndexColumn(name = String) private List versions;};"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence.FetchType",
    "truth_type": "javax.persistence.FetchType",
    "full_FQN": "javax.persistence.FetchType.LAZY",
    "boolean": 0,
    "context": "@Column(name = String, nullable = false) private Integer role;@ManyToMany(targetEntity = class, cascade = { PERSIST, MERGE }) @JoinTable(name = String, joinColumns = { @JoinColumn(name = String, referencedColumnName = String), @JoinColumn(name = String, referencedColumnName = String) }, inverseJoinColumns = { @JoinColumn(name = String, referencedColumnName = String) }) private Collection<Permission> permissions;@OneToMany(fetch = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.LAZY, mappedBy = String) @IndexColumn(name = String) private List versions;};"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.annotations.IndexColumn()",
    "boolean": 1,
    "context": "@Column(name = String, nullable = false) private Integer role;@ManyToMany(targetEntity = class, cascade = { PERSIST, MERGE }) @JoinTable(name = String, joinColumns = { @JoinColumn(name = String, referencedColumnName = String), @JoinColumn(name = String, referencedColumnName = String) }, inverseJoinColumns = { @JoinColumn(name = String, referencedColumnName = String) }) private Collection<Permission> permissions;@OneToMany(fetch = LAZY, mappedBy = String) @<mask><mask><mask><mask><mask><mask>IndexColumn(name = String) private List versions;};"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.List",
    "boolean": 1,
    "context": "@Column(name = String, nullable = false) private Integer role;@ManyToMany(targetEntity = class, cascade = { PERSIST, MERGE }) @JoinTable(name = String, joinColumns = { @JoinColumn(name = String, referencedColumnName = String), @JoinColumn(name = String, referencedColumnName = String) }, inverseJoinColumns = { @JoinColumn(name = String, referencedColumnName = String) }) private Collection<Permission> permissions;@OneToMany(fetch = LAZY, mappedBy = String) @IndexColumn(name = String) private <mask><mask><mask><mask>.List versions;};"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Entity",
    "boolean": 0,
    "context": "public class hibernate_class_14 { @<mask><mask><mask><mask><mask><mask>.Entity @Table(name = String) public class Permission implements Serializable , Cloneable { private static final long serialVersionUID = 7155322069731920447L;@Id @Column(name = String, length = 8, nullable = false) private String PermissionId = String;@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false) @ForeignKey(name = String) @Column(name = String, nullable = true) private Integer permission = 1;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Table()",
    "boolean": 0,
    "context": "public class hibernate_class_14 { @Entity @<mask><mask><mask><mask><mask><mask>.Table(name = String) public class Permission implements Serializable , Cloneable { private static final long serialVersionUID = 7155322069731920447L;@Id @Column(name = String, length = 8, nullable = false) private String PermissionId = String;@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false) @ForeignKey(name = String) @Column(name = String, nullable = true) private Integer permission = 1;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.Serializable",
    "boolean": 1,
    "context": "public class hibernate_class_14 { @Entity @Table(name = String) public class Permission implements <mask><mask><mask>.Serializable , Cloneable { private static final long serialVersionUID = 7155322069731920447L;@Id @Column(name = String, length = 8, nullable = false) private String PermissionId = String;@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false) @ForeignKey(name = String) @Column(name = String, nullable = true) private Integer permission = 1;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Id",
    "boolean": 0,
    "context": "public class hibernate_class_14 { @Entity @Table(name = String) public class Permission implements Serializable , Cloneable { private static final long serialVersionUID = 7155322069731920447L;@<mask><mask><mask><mask><mask><mask>.Id @Column(name = String, length = 8, nullable = false) private String PermissionId = String;@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false) @ForeignKey(name = String) @Column(name = String, nullable = true) private Integer permission = 1;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<Item> items;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Column()",
    "boolean": 0,
    "context": "public class hibernate_class_14 { @Entity @Table(name = String) public class Permission implements Serializable , Cloneable { private static final long serialVersionUID = 7155322069731920447L;@Id @<mask><mask><mask><mask><mask><mask>.Column(name = String, length = 8, nullable = false) private String PermissionId = String;@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false) @ForeignKey(name = String) @Column(name = String, nullable = true) private Integer permission = 1;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<Item> items;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.ManyToOne()",
    "boolean": 0,
    "context": "public class hibernate_class_14 { @Entity @Table(name = String) public class Permission implements Serializable , Cloneable { private static final long serialVersionUID = 7155322069731920447L;@Id @Column(name = String, length = 8, nullable = false) private String PermissionId = String;@<mask><mask><mask><mask><mask><mask>.ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false) @ForeignKey(name = String) @Column(name = String, nullable = true) private Integer permission = 1;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<Item> items;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<User> users;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence.FetchType",
    "truth_type": "javax.persistence.FetchType",
    "full_FQN": "javax.persistence.FetchType.LAZY",
    "boolean": 0,
    "context": "public class hibernate_class_14 { @Entity @Table(name = String) public class Permission implements Serializable , Cloneable { private static final long serialVersionUID = 7155322069731920447L;@Id @Column(name = String, length = 8, nullable = false) private String PermissionId = String;@ManyToOne(fetch = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.LAZY) @JoinColumn(name = String, nullable = false) @ForeignKey(name = String) @Column(name = String, nullable = true) private Integer permission = 1;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<Item> items;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<User> users;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.JoinColumn()",
    "boolean": 0,
    "context": "public class hibernate_class_14 { @Entity @Table(name = String) public class Permission implements Serializable , Cloneable { private static final long serialVersionUID = 7155322069731920447L;@Id @Column(name = String, length = 8, nullable = false) private String PermissionId = String;@ManyToOne(fetch = LAZY) @<mask><mask><mask><mask><mask><mask>.JoinColumn(name = String, nullable = false) @ForeignKey(name = String) @Column(name = String, nullable = true) private Integer permission = 1;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<Item> items;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<User> users;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.annotations.ForeignKey()",
    "boolean": 1,
    "context": "public class hibernate_class_14 { @Entity @Table(name = String) public class Permission implements Serializable , Cloneable { private static final long serialVersionUID = 7155322069731920447L;@Id @Column(name = String, length = 8, nullable = false) private String PermissionId = String;@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false) @<mask><mask><mask><mask><mask><mask>ForeignKey(name = String) @Column(name = String, nullable = true) private Integer permission = 1;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<Item> items;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<User> users;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Column()",
    "boolean": 0,
    "context": "public class hibernate_class_14 { @Entity @Table(name = String) public class Permission implements Serializable , Cloneable { private static final long serialVersionUID = 7155322069731920447L;@Id @Column(name = String, length = 8, nullable = false) private String PermissionId = String;@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false) @ForeignKey(name = String) @<mask><mask><mask><mask><mask><mask>.Column(name = String, nullable = true) private Integer permission = 1;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<Item> items;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<User> users;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.ManyToMany()",
    "boolean": 0,
    "context": "@Id @Column(name = String, length = 8, nullable = false) private String PermissionId = String;@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false) @ForeignKey(name = String) @Column(name = String, nullable = true) private Integer permission = 1;@<mask><mask><mask><mask><mask><mask>.ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<Item> items;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<User> users;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakax.persistence.CascadeType",
    "truth_type": "javax.persistence.CascadeType",
    "full_FQN": "javax.persistence.CascadeType.PERSIST",
    "boolean": 0,
    "context": "@Id @Column(name = String, length = 8, nullable = false) private String PermissionId = String;@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false) @ForeignKey(name = String) @Column(name = String, nullable = true) private Integer permission = 1;@ManyToMany(cascade = { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<Item> items;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<User> users;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakax.persistence.CascadeType",
    "truth_type": "javax.persistence.CascadeType",
    "full_FQN": "javax.persistence.CascadeType.MERGE",
    "boolean": 0,
    "context": "@Id @Column(name = String, length = 8, nullable = false) private String PermissionId = String;@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false) @ForeignKey(name = String) @Column(name = String, nullable = true) private Integer permission = 1;@ManyToMany(cascade = { PERSIST, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MERGE }, mappedBy = String, targetEntity = class) private Collection<Item> items;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<User> users;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.lang.Cl.Data.Type",
    "truth_type": "android.content.ClipData.Item",
    "full_FQN": "android.content.ClipData.Item.class",
    "boolean": 0,
    "context": "@Id @Column(name = String, length = 8, nullable = false) private String PermissionId = String;@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false) @ForeignKey(name = String) @Column(name = String, nullable = true) private Integer permission = 1;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = <mask><mask><mask><mask><mask><mask><mask><mask><mask>.class) private Collection<Item> items;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<User> users;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Collection",
    "boolean": 1,
    "context": "@Id @Column(name = String, length = 8, nullable = false) private String PermissionId = String;@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false) @ForeignKey(name = String) @Column(name = String, nullable = true) private Integer permission = 1;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private <mask><mask><mask>.Collection<Item> items;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<User> users;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "com.content.ClipData",
    "truth_type": "android.content.ClipData",
    "full_FQN": "android.content.ClipData.Item",
    "boolean": 0,
    "context": "@Id @Column(name = String, length = 8, nullable = false) private String PermissionId = String;@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false) @ForeignKey(name = String) @Column(name = String, nullable = true) private Integer permission = 1;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<<mask><mask><mask><mask><mask><mask><mask>.Item> items;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<User> users;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.ManyToMany()",
    "boolean": 0,
    "context": "@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false) @ForeignKey(name = String) @Column(name = String, nullable = true) private Integer permission = 1;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<Item> items;@<mask><mask><mask><mask><mask><mask>.ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<User> users;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakax.persistence.CascadeType",
    "truth_type": "javax.persistence.CascadeType",
    "full_FQN": "javax.persistence.CascadeType.PERSIST",
    "boolean": 0,
    "context": "@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false) @ForeignKey(name = String) @Column(name = String, nullable = true) private Integer permission = 1;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<Item> items;@ManyToMany(cascade = { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<User> users;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "javax.persistence.CascadeType",
    "truth_type": "javax.persistence.CascadeType",
    "full_FQN": "javax.persistence.CascadeType.MERGE",
    "boolean": 1,
    "context": "@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false) @ForeignKey(name = String) @Column(name = String, nullable = true) private Integer permission = 1;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<Item> items;@ManyToMany(cascade = { PERSIST, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MERGE }, mappedBy = String, targetEntity = class) private Collection<User> users;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.lang.User",
    "truth_type": "library.model.User",
    "full_FQN": "library.model.User.class",
    "boolean": 0,
    "context": "@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false) @ForeignKey(name = String) @Column(name = String, nullable = true) private Integer permission = 1;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<Item> items;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = <mask><mask><mask><mask><mask>.class) private Collection<User> users;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Collection",
    "boolean": 1,
    "context": "@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false) @ForeignKey(name = String) @Column(name = String, nullable = true) private Integer permission = 1;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<Item> items;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private <mask><mask><mask>.Collection<User> users;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.lang",
    "truth_type": "library.model",
    "full_FQN": "library.model.User",
    "boolean": 0,
    "context": "@ManyToOne(fetch = LAZY) @JoinColumn(name = String, nullable = false) @ForeignKey(name = String) @Column(name = String, nullable = true) private Integer permission = 1;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<Item> items;@ManyToMany(cascade = { PERSIST, MERGE }, mappedBy = String, targetEntity = class) private Collection<<mask><mask><mask>.User> users;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.Date",
    "boolean": 0,
    "context": "public class hibernate_class_15 { private Long id;private <mask><mask><mask>.Date creationTimeStamp;private String name;private String type;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.Blob",
    "boolean": 1,
    "context": "private Long length;private byte[] content;public void setContentBlob(<mask><mask><mask>.Blob imageBlob) { content = toByteArray(imageBlob);} public Blob getContentBlob() { return createBlob(content);} private byte[] toByteArray(Blob fromBlob) { ByteArrayOutputStream baos = new ByteArrayOutputStream();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.Blob",
    "boolean": 1,
    "context": "private byte[] content;public void setContentBlob(Blob imageBlob) { content = toByteArray(imageBlob);} public <mask><mask><mask>.Blob getContentBlob() { return createBlob(content);} private byte[] toByteArray(Blob fromBlob) { ByteArrayOutputStream baos = new ByteArrayOutputStream();try { return toByteArrayImpl(fromBlob, baos);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.hiberobate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Hibernate.createBlob()",
    "boolean": 0,
    "context": "private byte[] content;public void setContentBlob(Blob imageBlob) { content = toByteArray(imageBlob);} public Blob getContentBlob() { return <mask><mask><mask><mask><mask><mask>createBlob(content);} private byte[] toByteArray(Blob fromBlob) { ByteArrayOutputStream baos = new ByteArrayOutputStream();try { return toByteArrayImpl(fromBlob, baos);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.Blob",
    "boolean": 1,
    "context": "public void setContentBlob(Blob imageBlob) { content = toByteArray(imageBlob);} public Blob getContentBlob() { return createBlob(content);} private byte[] toByteArray(<mask><mask><mask>.Blob fromBlob) { ByteArrayOutputStream baos = new ByteArrayOutputStream();try { return toByteArrayImpl(fromBlob, baos);} catch (SQLException e) { throw new RuntimeException(e);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.ByteArrayOutputStream",
    "boolean": 1,
    "context": "public void setContentBlob(Blob imageBlob) { content = toByteArray(imageBlob);} public Blob getContentBlob() { return createBlob(content);} private byte[] toByteArray(Blob fromBlob) { <mask><mask><mask>.ByteArrayOutputStream baos = new ByteArrayOutputStream();try { return toByteArrayImpl(fromBlob, baos);} catch (SQLException e) { throw new RuntimeException(e);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.ByteArrayOutputStream()",
    "boolean": 1,
    "context": "public void setContentBlob(Blob imageBlob) { content = toByteArray(imageBlob);} public Blob getContentBlob() { return createBlob(content);} private byte[] toByteArray(Blob fromBlob) { ByteArrayOutputStream baos = new <mask><mask><mask>.ByteArrayOutputStream();try { return toByteArrayImpl(fromBlob, baos);} catch (SQLException e) { throw new RuntimeException(e);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.SQLException",
    "boolean": 1,
    "context": "} private byte[] toByteArray(Blob fromBlob) { ByteArrayOutputStream baos = new ByteArrayOutputStream();try { return toByteArrayImpl(fromBlob, baos);} catch (<mask><mask><mask>.SQLException e) { throw new RuntimeException(e);} catch (IOException e) { throw new RuntimeException(e);} finally { if (baos != null) { try { close();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException",
    "boolean": 1,
    "context": "try { return toByteArrayImpl(fromBlob, baos);} catch (SQLException e) { throw new RuntimeException(e);} catch (<mask><mask><mask>.IOException e) { throw new RuntimeException(e);} finally { if (baos != null) { try { close();} catch (IOException ex) { } } } } private byte[] toByteArrayImpl(Blob fromBlob, ByteArrayOutputStream baos) throws SQLException, IOException { byte[] buf = new byte[4000];"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.ByteArrayOutputStream.close()",
    "boolean": 1,
    "context": "} catch (SQLException e) { throw new RuntimeException(e);} catch (IOException e) { throw new RuntimeException(e);} finally { if (baos != null) { try { <mask><mask><mask>close();} catch (IOException ex) { } } } } private byte[] toByteArrayImpl(Blob fromBlob, ByteArrayOutputStream baos) throws SQLException, IOException { byte[] buf = new byte[4000];InputStream is = getBinaryStream();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException",
    "boolean": 1,
    "context": "} catch (IOException e) { throw new RuntimeException(e);} finally { if (baos != null) { try { close();} catch (<mask><mask><mask>.IOException ex) { } } } } private byte[] toByteArrayImpl(Blob fromBlob, ByteArrayOutputStream baos) throws SQLException, IOException { byte[] buf = new byte[4000];InputStream is = getBinaryStream();try { for (; ;) { int dataSize = read(buf);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.Blob",
    "boolean": 1,
    "context": "} catch (IOException e) { throw new RuntimeException(e);} finally { if (baos != null) { try { close();} catch (IOException ex) { } } } } private byte[] toByteArrayImpl(<mask><mask><mask>.Blob fromBlob, ByteArrayOutputStream baos) throws SQLException, IOException { byte[] buf = new byte[4000];InputStream is = getBinaryStream();try { for (; ;) { int dataSize = read(buf);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.ByteArrayOutputStream",
    "boolean": 1,
    "context": "} catch (IOException e) { throw new RuntimeException(e);} finally { if (baos != null) { try { close();} catch (IOException ex) { } } } } private byte[] toByteArrayImpl(Blob fromBlob, <mask><mask><mask>.ByteArrayOutputStream baos) throws SQLException, IOException { byte[] buf = new byte[4000];InputStream is = getBinaryStream();try { for (; ;) { int dataSize = read(buf);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.SQLException",
    "boolean": 1,
    "context": "} catch (IOException e) { throw new RuntimeException(e);} finally { if (baos != null) { try { close();} catch (IOException ex) { } } } } private byte[] toByteArrayImpl(Blob fromBlob, ByteArrayOutputStream baos) throws <mask><mask><mask>.SQLException, IOException { byte[] buf = new byte[4000];InputStream is = getBinaryStream();try { for (; ;) { int dataSize = read(buf);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException",
    "boolean": 1,
    "context": "} catch (IOException e) { throw new RuntimeException(e);} finally { if (baos != null) { try { close();} catch (IOException ex) { } } } } private byte[] toByteArrayImpl(Blob fromBlob, ByteArrayOutputStream baos) throws SQLException, <mask><mask><mask>.IOException { byte[] buf = new byte[4000];InputStream is = getBinaryStream();try { for (; ;) { int dataSize = read(buf);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.InputStream",
    "boolean": 1,
    "context": "} finally { if (baos != null) { try { close();} catch (IOException ex) { } } } } private byte[] toByteArrayImpl(Blob fromBlob, ByteArrayOutputStream baos) throws SQLException, IOException { byte[] buf = new byte[4000];<mask><mask><mask>.InputStream is = getBinaryStream();try { for (; ;) { int dataSize = read(buf);if (dataSize == (-1)) { break;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.Blob.getBinaryStream()",
    "boolean": 1,
    "context": "} finally { if (baos != null) { try { close();} catch (IOException ex) { } } } } private byte[] toByteArrayImpl(Blob fromBlob, ByteArrayOutputStream baos) throws SQLException, IOException { byte[] buf = new byte[4000];InputStream is = <mask><mask><mask>getBinaryStream();try { for (; ;) { int dataSize = read(buf);if (dataSize == (-1)) { break;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.InputStream.read()",
    "boolean": 1,
    "context": "} catch (IOException ex) { } } } } private byte[] toByteArrayImpl(Blob fromBlob, ByteArrayOutputStream baos) throws SQLException, IOException { byte[] buf = new byte[4000];InputStream is = getBinaryStream();try { for (; ;) { int dataSize = <mask><mask><mask>read(buf);if (dataSize == (-1)) { break;} write(buf, 0, dataSize);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.ByteArrayOutputStream.write()",
    "boolean": 1,
    "context": "try { for (; ;) { int dataSize = read(buf);if (dataSize == (-1)) { break;} <mask><mask><mask>write(buf, 0, dataSize);} } finally { if (is != null) { try { close();} catch (IOException ex) { } } } return toByteArray();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.InputStream.close()",
    "boolean": 1,
    "context": "if (dataSize == (-1)) { break;} write(buf, 0, dataSize);} } finally { if (is != null) { try { <mask><mask><mask>close();} catch (IOException ex) { } } } return toByteArray();} public Date getCreationTimeStamp() { return creationTimeStamp;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException",
    "boolean": 1,
    "context": "} write(buf, 0, dataSize);} } finally { if (is != null) { try { close();} catch (<mask><mask><mask>.IOException ex) { } } } return toByteArray();} public Date getCreationTimeStamp() { return creationTimeStamp;} public void setCreationTimeStamp(Date creationTimeStamp) { creationTimeStamp = creationTimeStamp;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.ByteArrayOutputStream.toByteArray()",
    "boolean": 1,
    "context": "} write(buf, 0, dataSize);} } finally { if (is != null) { try { close();} catch (IOException ex) { } } } return <mask><mask><mask>toByteArray();} public Date getCreationTimeStamp() { return creationTimeStamp;} public void setCreationTimeStamp(Date creationTimeStamp) { creationTimeStamp = creationTimeStamp;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.Date",
    "boolean": 1,
    "context": "} } finally { if (is != null) { try { close();} catch (IOException ex) { } } } return toByteArray();} public <mask><mask><mask>.Date getCreationTimeStamp() { return creationTimeStamp;} public void setCreationTimeStamp(Date creationTimeStamp) { creationTimeStamp = creationTimeStamp;} public String getDescription() { return description;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.Date",
    "boolean": 0,
    "context": "} catch (IOException ex) { } } } return toByteArray();} public Date getCreationTimeStamp() { return creationTimeStamp;} public void setCreationTimeStamp(<mask><mask><mask>.Date creationTimeStamp) { creationTimeStamp = creationTimeStamp;} public String getDescription() { return description;} public void setDescription(String description) { description = description;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "public class hibernate_class_16 { public class Events { <mask><mask><mask><mask><mask><mask>.Session hibernateSession;public void setHibernateSession(Session hibernateSession) throws Exception { hibernateSession = hibernateSession;} public void sethibernateSession(Session hibernateSession) throws Exception { hibernateSession = hibernateSession;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "public class hibernate_class_16 { public class Events { Session hibernateSession;public void setHibernateSession(<mask><mask><mask><mask><mask><mask>.Session hibernateSession) throws Exception { hibernateSession = hibernateSession;} public void sethibernateSession(Session hibernateSession) throws Exception { hibernateSession = hibernateSession;} @SuppressWarnings(String) public String execute() { List<Event> events = createQuery(String).list();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "public class hibernate_class_16 { public class Events { Session hibernateSession;public void setHibernateSession(Session hibernateSession) throws Exception { hibernateSession = hibernateSession;} public void sethibernateSession(<mask><mask><mask><mask><mask><mask>.Session hibernateSession) throws Exception { hibernateSession = hibernateSession;} @SuppressWarnings(String) public String execute() { List<Event> events = createQuery(String).list();for (Event theEvent : events) { } return String;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "public void setHibernateSession(Session hibernateSession) throws Exception { hibernateSession = hibernateSession;} public void sethibernateSession(Session hibernateSession) throws Exception { hibernateSession = hibernateSession;} @SuppressWarnings(String) public String execute() { <mask><mask><mask>.List<Event> events = createQuery(String).list();for (Event theEvent : events) { } return String;} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Event",
    "boolean": 1,
    "context": "public void setHibernateSession(Session hibernateSession) throws Exception { hibernateSession = hibernateSession;} public void sethibernateSession(Session hibernateSession) throws Exception { hibernateSession = hibernateSession;} @SuppressWarnings(String) public String execute() { List<<mask><mask><mask><mask>.Event> events = createQuery(String).list();for (Event theEvent : events) { } return String;} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.createQuery()",
    "boolean": 1,
    "context": "public void setHibernateSession(Session hibernateSession) throws Exception { hibernateSession = hibernateSession;} public void sethibernateSession(Session hibernateSession) throws Exception { hibernateSession = hibernateSession;} @SuppressWarnings(String) public String execute() { List<Event> events = <mask><mask><mask><mask><mask><mask>createQuery(String).list();for (Event theEvent : events) { } return String;} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Event",
    "boolean": 1,
    "context": "} public void sethibernateSession(Session hibernateSession) throws Exception { hibernateSession = hibernateSession;} @SuppressWarnings(String) public String execute() { List<Event> events = createQuery(String).list();for (<mask><mask><mask><mask>.Event theEvent : events) { } return String;} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "private static final String SHARD_CFG_1 = String;private static final String SHARDED_TABLE = String;public <mask><mask><mask><mask><mask><mask>.SessionFactory createSessionFactory() throws NamingException { Configuration prototypeConfig = new Configuration().configure(SHARD_CFG_0); addResource(SHARDED_TABLE);List<ShardConfiguration> shardConfigs = new ArrayList<ShardConfiguration>();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernaming",
    "truth_type": "javax.naming",
    "full_FQN": "javax.naming.NamingException",
    "boolean": 0,
    "context": "private static final String SHARD_CFG_1 = String;private static final String SHARDED_TABLE = String;public SessionFactory createSessionFactory() throws <mask><mask><mask><mask><mask><mask>.NamingException { Configuration prototypeConfig = new Configuration().configure(SHARD_CFG_0); addResource(SHARDED_TABLE);List<ShardConfiguration> shardConfigs = new ArrayList<ShardConfiguration>();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.Configuration",
    "boolean": 1,
    "context": "private static final String SHARD_CFG_1 = String;private static final String SHARDED_TABLE = String;public SessionFactory createSessionFactory() throws NamingException { <mask><mask><mask><mask><mask><mask><mask><mask>.Configuration prototypeConfig = new Configuration().configure(SHARD_CFG_0); addResource(SHARDED_TABLE);List<ShardConfiguration> shardConfigs = new ArrayList<ShardConfiguration>();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.cfg.Configuration()",
    "boolean": 1,
    "context": "private static final String SHARD_CFG_1 = String;private static final String SHARDED_TABLE = String;public SessionFactory createSessionFactory() throws NamingException { Configuration prototypeConfig = new <mask><mask><mask><mask><mask><mask>Configuration().configure(SHARD_CFG_0); addResource(SHARDED_TABLE);List<ShardConfiguration> shardConfigs = new ArrayList<ShardConfiguration>();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.Configuration.addResource()",
    "boolean": 1,
    "context": "private static final String SHARDED_TABLE = String;public SessionFactory createSessionFactory() throws NamingException { Configuration prototypeConfig = new Configuration().configure(SHARD_CFG_0); <mask><mask><mask><mask><mask><mask><mask><mask>addResource(SHARDED_TABLE);List<ShardConfiguration> shardConfigs = new ArrayList<ShardConfiguration>(); add(buildShardConfig(SHARD_CFG_0));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "public SessionFactory createSessionFactory() throws NamingException { Configuration prototypeConfig = new Configuration().configure(SHARD_CFG_0); addResource(SHARDED_TABLE);<mask><mask><mask>.List<ShardConfiguration> shardConfigs = new ArrayList<ShardConfiguration>(); add(buildShardConfig(SHARD_CFG_0)); add(buildShardConfig(SHARD_CFG_1));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.sh..cfg",
    "truth_type": "org.hibernate.shards.cfg",
    "full_FQN": "org.hibernate.shards.cfg.ShardConfiguration",
    "boolean": 0,
    "context": "public SessionFactory createSessionFactory() throws NamingException { Configuration prototypeConfig = new Configuration().configure(SHARD_CFG_0); addResource(SHARDED_TABLE);List<<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ShardConfiguration> shardConfigs = new ArrayList<ShardConfiguration>(); add(buildShardConfig(SHARD_CFG_0)); add(buildShardConfig(SHARD_CFG_1));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "public SessionFactory createSessionFactory() throws NamingException { Configuration prototypeConfig = new Configuration().configure(SHARD_CFG_0); addResource(SHARDED_TABLE);List<ShardConfiguration> shardConfigs = new <mask><mask><mask>.ArrayList<ShardConfiguration>(); add(buildShardConfig(SHARD_CFG_0)); add(buildShardConfig(SHARD_CFG_1));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.sh..cfg",
    "truth_type": "org.hibernate.shards.cfg",
    "full_FQN": "org.hibernate.shards.cfg.ShardConfiguration",
    "boolean": 0,
    "context": "public SessionFactory createSessionFactory() throws NamingException { Configuration prototypeConfig = new Configuration().configure(SHARD_CFG_0); addResource(SHARDED_TABLE);List<ShardConfiguration> shardConfigs = new ArrayList<<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ShardConfiguration>(); add(buildShardConfig(SHARD_CFG_0)); add(buildShardConfig(SHARD_CFG_1));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.add()",
    "boolean": 1,
    "context": " addResource(SHARDED_TABLE);List<ShardConfiguration> shardConfigs = new ArrayList<ShardConfiguration>(); <mask><mask><mask>add(buildShardConfig(SHARD_CFG_0)); add(buildShardConfig(SHARD_CFG_1));ShardStrategyFactory shardStrategyFactory = buildShardStrategyFactory();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.add()",
    "boolean": 1,
    "context": "java.util.List<ShardConfiguration> shardConfigs = new ArrayList<ShardConfiguration>(); add(buildShardConfig(SHARD_CFG_0)); <mask><mask><mask>add(buildShardConfig(SHARD_CFG_1));ShardStrategyFactory shardStrategyFactory = buildShardStrategyFactory();ShardedConfiguration shardedConfig = new ShardedConfiguration(prototypeConfig, shardConfigs, shardStrategyFactory);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.boot..spi",
    "truth_type": "org.hibernate.shards.strategy",
    "full_FQN": "org.hibernate.shards.strategy.ShardStrategyFactory",
    "boolean": 0,
    "context": " add(buildShardConfig(SHARD_CFG_0)); add(buildShardConfig(SHARD_CFG_1));<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ShardStrategyFactory shardStrategyFactory = buildShardStrategyFactory();ShardedConfiguration shardedConfig = new ShardedConfiguration(prototypeConfig, shardConfigs, shardStrategyFactory);return buildShardedSessionFactory();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.shards",
    "truth_type": "org.hibernate.shards",
    "full_FQN": "org.hibernate.shards.ShardedConfiguration",
    "boolean": 1,
    "context": " add(buildShardConfig(SHARD_CFG_1));ShardStrategyFactory shardStrategyFactory = buildShardStrategyFactory();<mask><mask><mask><mask><mask><mask><mask><mask><mask>.ShardedConfiguration shardedConfig = new ShardedConfiguration(prototypeConfig, shardConfigs, shardStrategyFactory);return buildShardedSessionFactory();} private ShardStrategyFactory buildShardStrategyFactory() { ShardStrategyFactory shardStrategyFactory = new ShardStrategyFactory() { public ShardStrategy newShardStrategy1(List<ShardId> shardIds) { RoundRobinShardLoadBalancer loadBalancer = new RoundRobinShardLoadBalancer(shardIds);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.shards.ShardedConfiguration()",
    "boolean": 1,
    "context": " add(buildShardConfig(SHARD_CFG_1));ShardStrategyFactory shardStrategyFactory = buildShardStrategyFactory();ShardedConfiguration shardedConfig = new <mask><mask><mask><mask><mask><mask>ShardedConfiguration(prototypeConfig, shardConfigs, shardStrategyFactory);return buildShardedSessionFactory();} private ShardStrategyFactory buildShardStrategyFactory() { ShardStrategyFactory shardStrategyFactory = new ShardStrategyFactory() { public ShardStrategy newShardStrategy1(List<ShardId> shardIds) { RoundRobinShardLoadBalancer loadBalancer = new RoundRobinShardLoadBalancer(shardIds);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.shards",
    "truth_type": "org.hibernate.shards",
    "full_FQN": "org.hibernate.shards.ShardedConfiguration.buildShardedSessionFactory()",
    "boolean": 1,
    "context": "org.hibernate.shards.strategy.ShardStrategyFactory shardStrategyFactory = buildShardStrategyFactory();ShardedConfiguration shardedConfig = new ShardedConfiguration(prototypeConfig, shardConfigs, shardStrategyFactory);return <mask><mask><mask><mask><mask><mask><mask><mask><mask>buildShardedSessionFactory();} private ShardStrategyFactory buildShardStrategyFactory() { ShardStrategyFactory shardStrategyFactory = new ShardStrategyFactory() { public ShardStrategy newShardStrategy1(List<ShardId> shardIds) { RoundRobinShardLoadBalancer loadBalancer = new RoundRobinShardLoadBalancer(shardIds);ShardSelectionStrategy pss = new RoundRobinShardSelectionStrategy(loadBalancer);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.shards.strategy",
    "truth_type": "org.hibernate.shards.strategy",
    "full_FQN": "org.hibernate.shards.strategy.ShardStrategyFactory",
    "boolean": 1,
    "context": "org.hibernate.shards.ShardedConfiguration shardedConfig = new ShardedConfiguration(prototypeConfig, shardConfigs, shardStrategyFactory);return buildShardedSessionFactory();} private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ShardStrategyFactory buildShardStrategyFactory() { ShardStrategyFactory shardStrategyFactory = new ShardStrategyFactory() { public ShardStrategy newShardStrategy1(List<ShardId> shardIds) { RoundRobinShardLoadBalancer loadBalancer = new RoundRobinShardLoadBalancer(shardIds);ShardSelectionStrategy pss = new RoundRobinShardSelectionStrategy(loadBalancer);ShardResolutionStrategy prs = new AllShardsShardResolutionStrategy(shardIds);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.shards.strategy",
    "truth_type": "org.hibernate.shards.strategy",
    "full_FQN": "org.hibernate.shards.strategy.ShardStrategyFactory",
    "boolean": 1,
    "context": "org.hibernate.shards.ShardedConfiguration shardedConfig = new ShardedConfiguration(prototypeConfig, shardConfigs, shardStrategyFactory);return buildShardedSessionFactory();} private ShardStrategyFactory buildShardStrategyFactory() { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ShardStrategyFactory shardStrategyFactory = new ShardStrategyFactory() { public ShardStrategy newShardStrategy1(List<ShardId> shardIds) { RoundRobinShardLoadBalancer loadBalancer = new RoundRobinShardLoadBalancer(shardIds);ShardSelectionStrategy pss = new RoundRobinShardSelectionStrategy(loadBalancer);ShardResolutionStrategy prs = new AllShardsShardResolutionStrategy(shardIds);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.shards",
    "truth_type": "org.hibernate.shards",
    "full_FQN": "org.hibernate.shards.strategy.ShardStrategyFactory()",
    "boolean": 1,
    "context": "org.hibernate.shards.ShardedConfiguration shardedConfig = new ShardedConfiguration(prototypeConfig, shardConfigs, shardStrategyFactory);return buildShardedSessionFactory();} private ShardStrategyFactory buildShardStrategyFactory() { ShardStrategyFactory shardStrategyFactory = new <mask><mask><mask><mask><mask><mask><mask><mask><mask>ShardStrategyFactory() { public ShardStrategy newShardStrategy1(List<ShardId> shardIds) { RoundRobinShardLoadBalancer loadBalancer = new RoundRobinShardLoadBalancer(shardIds);ShardSelectionStrategy pss = new RoundRobinShardSelectionStrategy(loadBalancer);ShardResolutionStrategy prs = new AllShardsShardResolutionStrategy(shardIds);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.shards.stri",
    "truth_type": "org.hibernate.shards.strategy",
    "full_FQN": "org.hibernate.shards.strategy.ShardStrategy",
    "boolean": 0,
    "context": "org.hibernate.shards.ShardedConfiguration shardedConfig = new ShardedConfiguration(prototypeConfig, shardConfigs, shardStrategyFactory);return buildShardedSessionFactory();} private ShardStrategyFactory buildShardStrategyFactory() { ShardStrategyFactory shardStrategyFactory = new ShardStrategyFactory() { public <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ShardStrategy newShardStrategy1(List<ShardId> shardIds) { RoundRobinShardLoadBalancer loadBalancer = new RoundRobinShardLoadBalancer(shardIds);ShardSelectionStrategy pss = new RoundRobinShardSelectionStrategy(loadBalancer);ShardResolutionStrategy prs = new AllShardsShardResolutionStrategy(shardIds);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "org.hibernate.shards.ShardedConfiguration shardedConfig = new ShardedConfiguration(prototypeConfig, shardConfigs, shardStrategyFactory);return buildShardedSessionFactory();} private ShardStrategyFactory buildShardStrategyFactory() { ShardStrategyFactory shardStrategyFactory = new ShardStrategyFactory() { public ShardStrategy newShardStrategy1(<mask><mask><mask>.List<ShardId> shardIds) { RoundRobinShardLoadBalancer loadBalancer = new RoundRobinShardLoadBalancer(shardIds);ShardSelectionStrategy pss = new RoundRobinShardSelectionStrategy(loadBalancer);ShardResolutionStrategy prs = new AllShardsShardResolutionStrategy(shardIds);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.ax.systemio.sputable",
    "truth_type": "org.hibernate.shards",
    "full_FQN": "org.hibernate.shards.ShardId",
    "boolean": 0,
    "context": "org.hibernate.shards.ShardedConfiguration shardedConfig = new ShardedConfiguration(prototypeConfig, shardConfigs, shardStrategyFactory);return buildShardedSessionFactory();} private ShardStrategyFactory buildShardStrategyFactory() { ShardStrategyFactory shardStrategyFactory = new ShardStrategyFactory() { public ShardStrategy newShardStrategy1(List<<mask><mask><mask><mask><mask><mask><mask><mask><mask>.ShardId> shardIds) { RoundRobinShardLoadBalancer loadBalancer = new RoundRobinShardLoadBalancer(shardIds);ShardSelectionStrategy pss = new RoundRobinShardSelectionStrategy(loadBalancer);ShardResolutionStrategy prs = new AllShardsShardResolutionStrategy(shardIds);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.shards.strategy",
    "truth_type": "org.hibernate.shards.loadbalance",
    "full_FQN": "org.hibernate.shards.loadbalance.RoundRobinShardLoadBalancer",
    "boolean": 0,
    "context": "org.hibernate.shards.ShardedConfiguration shardedConfig = new ShardedConfiguration(prototypeConfig, shardConfigs, shardStrategyFactory);return buildShardedSessionFactory();} private ShardStrategyFactory buildShardStrategyFactory() { ShardStrategyFactory shardStrategyFactory = new ShardStrategyFactory() { public ShardStrategy newShardStrategy1(List<ShardId> shardIds) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.RoundRobinShardLoadBalancer loadBalancer = new RoundRobinShardLoadBalancer(shardIds);ShardSelectionStrategy pss = new RoundRobinShardSelectionStrategy(loadBalancer);ShardResolutionStrategy prs = new AllShardsShardResolutionStrategy(shardIds);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.shards",
    "truth_type": "org.hibernate.shards",
    "full_FQN": "org.hibernate.shards.loadbalance.RoundRobinShardLoadBalancer()",
    "boolean": 1,
    "context": "org.hibernate.shards.ShardedConfiguration shardedConfig = new ShardedConfiguration(prototypeConfig, shardConfigs, shardStrategyFactory);return buildShardedSessionFactory();} private ShardStrategyFactory buildShardStrategyFactory() { ShardStrategyFactory shardStrategyFactory = new ShardStrategyFactory() { public ShardStrategy newShardStrategy1(List<ShardId> shardIds) { RoundRobinShardLoadBalancer loadBalancer = new <mask><mask><mask><mask><mask><mask><mask><mask><mask>RoundRobinShardLoadBalancer(shardIds);ShardSelectionStrategy pss = new RoundRobinShardSelectionStrategy(loadBalancer);ShardResolutionStrategy prs = new AllShardsShardResolutionStrategy(shardIds);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.shards.strategy.selection",
    "truth_type": "org.hibernate.shards.strategy.selection",
    "full_FQN": "org.hibernate.shards.strategy.selection.ShardSelectionStrategy",
    "boolean": 1,
    "context": "return buildShardedSessionFactory();} private ShardStrategyFactory buildShardStrategyFactory() { ShardStrategyFactory shardStrategyFactory = new ShardStrategyFactory() { public ShardStrategy newShardStrategy1(List<ShardId> shardIds) { RoundRobinShardLoadBalancer loadBalancer = new RoundRobinShardLoadBalancer(shardIds);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ShardSelectionStrategy pss = new RoundRobinShardSelectionStrategy(loadBalancer);ShardResolutionStrategy prs = new AllShardsShardResolutionStrategy(shardIds);ShardAccessStrategy pas = new SequentialShardAccessStrategy();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.shards.strategy",
    "truth_type": "org.hibernate.shards.strategy",
    "full_FQN": "org.hibernate.shards.strategy.selection.RoundRobinShardSelectionStrategy()",
    "boolean": 1,
    "context": "return buildShardedSessionFactory();} private ShardStrategyFactory buildShardStrategyFactory() { ShardStrategyFactory shardStrategyFactory = new ShardStrategyFactory() { public ShardStrategy newShardStrategy1(List<ShardId> shardIds) { RoundRobinShardLoadBalancer loadBalancer = new RoundRobinShardLoadBalancer(shardIds);ShardSelectionStrategy pss = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>RoundRobinShardSelectionStrategy(loadBalancer);ShardResolutionStrategy prs = new AllShardsShardResolutionStrategy(shardIds);ShardAccessStrategy pas = new SequentialShardAccessStrategy();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.shards.strategy.internal",
    "truth_type": "org.hibernate.shards.strategy.resolution",
    "full_FQN": "org.hibernate.shards.strategy.resolution.ShardResolutionStrategy",
    "boolean": 0,
    "context": "} private ShardStrategyFactory buildShardStrategyFactory() { ShardStrategyFactory shardStrategyFactory = new ShardStrategyFactory() { public ShardStrategy newShardStrategy1(List<ShardId> shardIds) { RoundRobinShardLoadBalancer loadBalancer = new RoundRobinShardLoadBalancer(shardIds);ShardSelectionStrategy pss = new RoundRobinShardSelectionStrategy(loadBalancer);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ShardResolutionStrategy prs = new AllShardsShardResolutionStrategy(shardIds);ShardAccessStrategy pas = new SequentialShardAccessStrategy();return new ShardStrategyImpl(pss, prs, pas);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.shards.strategy",
    "truth_type": "org.hibernate.shards.strategy",
    "full_FQN": "org.hibernate.shards.strategy.resolution.AllShardsShardResolutionStrategy()",
    "boolean": 1,
    "context": "} private ShardStrategyFactory buildShardStrategyFactory() { ShardStrategyFactory shardStrategyFactory = new ShardStrategyFactory() { public ShardStrategy newShardStrategy1(List<ShardId> shardIds) { RoundRobinShardLoadBalancer loadBalancer = new RoundRobinShardLoadBalancer(shardIds);ShardSelectionStrategy pss = new RoundRobinShardSelectionStrategy(loadBalancer);ShardResolutionStrategy prs = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>AllShardsShardResolutionStrategy(shardIds);ShardAccessStrategy pas = new SequentialShardAccessStrategy();return new ShardStrategyImpl(pss, prs, pas);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.shards.strategy.access",
    "truth_type": "org.hibernate.shards.strategy.access",
    "full_FQN": "org.hibernate.shards.strategy.access.ShardAccessStrategy",
    "boolean": 1,
    "context": "org.hibernate.shards.strategy.selection.ShardSelectionStrategy pss = new RoundRobinShardSelectionStrategy(loadBalancer);ShardResolutionStrategy prs = new AllShardsShardResolutionStrategy(shardIds);<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ShardAccessStrategy pas = new SequentialShardAccessStrategy();return new ShardStrategyImpl(pss, prs, pas);} @Override public ShardStrategy newShardStrategy(List<ShardId> arg0) { return null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.shards.strategy",
    "truth_type": "org.hibernate.shards.strategy",
    "full_FQN": "org.hibernate.shards.strategy.access.SequentialShardAccessStrategy()",
    "boolean": 1,
    "context": "org.hibernate.shards.strategy.selection.ShardSelectionStrategy pss = new RoundRobinShardSelectionStrategy(loadBalancer);ShardResolutionStrategy prs = new AllShardsShardResolutionStrategy(shardIds);ShardAccessStrategy pas = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>SequentialShardAccessStrategy();return new ShardStrategyImpl(pss, prs, pas);} @Override public ShardStrategy newShardStrategy(List<ShardId> arg0) { return null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.shards",
    "truth_type": "org.hibernate.shards",
    "full_FQN": "org.hibernate.shards.strategy.ShardStrategyImpl()",
    "boolean": 1,
    "context": "org.hibernate.shards.strategy.resolution.ShardResolutionStrategy prs = new AllShardsShardResolutionStrategy(shardIds);ShardAccessStrategy pas = new SequentialShardAccessStrategy();return new <mask><mask><mask><mask><mask><mask><mask><mask><mask>ShardStrategyImpl(pss, prs, pas);} @Override public ShardStrategy newShardStrategy(List<ShardId> arg0) { return null;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.sh...i",
    "truth_type": "org.hibernate.shards.strategy",
    "full_FQN": "org.hibernate.shards.strategy.ShardStrategy",
    "boolean": 0,
    "context": "org.hibernate.shards.strategy.access.ShardAccessStrategy pas = new SequentialShardAccessStrategy();return new ShardStrategyImpl(pss, prs, pas);} @Override public <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ShardStrategy newShardStrategy(List<ShardId> arg0) { return null;} };return shardStrategyFactory;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "org.hibernate.shards.strategy.access.ShardAccessStrategy pas = new SequentialShardAccessStrategy();return new ShardStrategyImpl(pss, prs, pas);} @Override public ShardStrategy newShardStrategy(<mask><mask><mask>.List<ShardId> arg0) { return null;} };return shardStrategyFactory;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "javax.securityio.spi",
    "truth_type": "org.hibernate.shards",
    "full_FQN": "org.hibernate.shards.ShardId",
    "boolean": 0,
    "context": "org.hibernate.shards.strategy.access.ShardAccessStrategy pas = new SequentialShardAccessStrategy();return new ShardStrategyImpl(pss, prs, pas);} @Override public ShardStrategy newShardStrategy(List<<mask><mask><mask><mask><mask><mask><mask><mask><mask>.ShardId> arg0) { return null;} };return shardStrategyFactory;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.engine.spi",
    "truth_type": "org.hibernate.shards.cfg",
    "full_FQN": "org.hibernate.shards.cfg.ShardConfiguration",
    "boolean": 0,
    "context": "} };return shardStrategyFactory;} private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ShardConfiguration buildShardConfig(String configFile) { Configuration config = new Configuration().configure(configFile);return new ConfigurationToShardConfigurationAdapter(config);} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.Configuration",
    "boolean": 1,
    "context": "} };return shardStrategyFactory;} private ShardConfiguration buildShardConfig(String configFile) { <mask><mask><mask><mask><mask><mask><mask><mask>.Configuration config = new Configuration().configure(configFile);return new ConfigurationToShardConfigurationAdapter(config);} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.cfg.Configuration()",
    "boolean": 1,
    "context": "} };return shardStrategyFactory;} private ShardConfiguration buildShardConfig(String configFile) { Configuration config = new <mask><mask><mask><mask><mask><mask>Configuration().configure(configFile);return new ConfigurationToShardConfigurationAdapter(config);} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfgect",
    "truth_type": "org.hibernate.shards",
    "full_FQN": "org.hibernate.shards.cfg.ConfigurationToShardConfigurationAdapter()",
    "boolean": 0,
    "context": "return shardStrategyFactory;} private ShardConfiguration buildShardConfig(String configFile) { Configuration config = new Configuration().configure(configFile);return new <mask><mask><mask><mask><mask><mask><mask><mask><mask>ConfigurationToShardConfigurationAdapter(config);} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_18 { private static final <mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory = buildSessionFactory();private static SessionFactory buildSessionFactory() { try { Configuration configuration = new Configuration().configure();return buildSessionFactory();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_18 { private static final SessionFactory sessionFactory = buildSessionFactory();private static <mask><mask><mask><mask><mask><mask>.SessionFactory buildSessionFactory() { try { Configuration configuration = new Configuration().configure();return buildSessionFactory();} catch (Throwable ex) { println(String + ex);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.Configuration",
    "boolean": 1,
    "context": "public class hibernate_class_18 { private static final SessionFactory sessionFactory = buildSessionFactory();private static SessionFactory buildSessionFactory() { try { <mask><mask><mask><mask><mask><mask><mask><mask>.Configuration configuration = new Configuration().configure();return buildSessionFactory();} catch (Throwable ex) { println(String + ex);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.cfg.Configuration()",
    "boolean": 1,
    "context": "public class hibernate_class_18 { private static final SessionFactory sessionFactory = buildSessionFactory();private static SessionFactory buildSessionFactory() { try { Configuration configuration = new <mask><mask><mask><mask><mask><mask>Configuration().configure();return buildSessionFactory();} catch (Throwable ex) { println(String + ex);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.Configuration.buildSessionFactory()",
    "boolean": 1,
    "context": "public class hibernate_class_18 { private static final SessionFactory sessionFactory = buildSessionFactory();private static SessionFactory buildSessionFactory() { try { Configuration configuration = new Configuration().configure();return <mask><mask><mask><mask><mask><mask><mask><mask>buildSessionFactory();} catch (Throwable ex) { println(String + ex);throw new ExceptionInInitializerError(ex);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "} catch (Throwable ex) { println(String + ex);throw new ExceptionInInitializerError(ex);} } public static <mask><mask><mask><mask><mask><mask>.SessionFactory getSessionFactory1() { return sessionFactory;} private static final SessionFactory sessionFactory1 = buildSessionFactory();private static SessionFactory buildSessionFactory1() { try { Configuration configuration = new Configuration().configure();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "throw new ExceptionInInitializerError(ex);} } public static SessionFactory getSessionFactory1() { return sessionFactory;} private static final <mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory1 = buildSessionFactory();private static SessionFactory buildSessionFactory1() { try { Configuration configuration = new Configuration().configure();return buildSessionFactory();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "} } public static SessionFactory getSessionFactory1() { return sessionFactory;} private static final SessionFactory sessionFactory1 = buildSessionFactory();private static <mask><mask><mask><mask><mask><mask>.SessionFactory buildSessionFactory1() { try { Configuration configuration = new Configuration().configure();return buildSessionFactory();} catch (Throwable ex) { println(String + ex);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.Configuration",
    "boolean": 1,
    "context": "} } public static SessionFactory getSessionFactory1() { return sessionFactory;} private static final SessionFactory sessionFactory1 = buildSessionFactory();private static SessionFactory buildSessionFactory1() { try { <mask><mask><mask><mask><mask><mask><mask><mask>.Configuration configuration = new Configuration().configure();return buildSessionFactory();} catch (Throwable ex) { println(String + ex);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.cfg.Configuration()",
    "boolean": 1,
    "context": "} } public static SessionFactory getSessionFactory1() { return sessionFactory;} private static final SessionFactory sessionFactory1 = buildSessionFactory();private static SessionFactory buildSessionFactory1() { try { Configuration configuration = new <mask><mask><mask><mask><mask><mask>Configuration().configure();return buildSessionFactory();} catch (Throwable ex) { println(String + ex);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.Configuration.buildSessionFactory()",
    "boolean": 1,
    "context": "} private static final SessionFactory sessionFactory1 = buildSessionFactory();private static SessionFactory buildSessionFactory1() { try { Configuration configuration = new Configuration().configure();return <mask><mask><mask><mask><mask><mask><mask><mask>buildSessionFactory();} catch (Throwable ex) { println(String + ex);throw new ExceptionInInitializerError(ex);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "} catch (Throwable ex) { println(String + ex);throw new ExceptionInInitializerError(ex);} } public static <mask><mask><mask><mask><mask><mask>.SessionFactory getSessionFactory() { return sessionFactory;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Entity",
    "boolean": 0,
    "context": "@<mask><mask><mask><mask><mask><mask>.Entity @Table(appliesTo = TABLE_NAME, indexes = { @Index(name = String, columnNames = { XDN, DFN }) }) public class hibernate_class_19 { public static final String TABLE_NAME = String;public static final String XDN = String;public static final String DFN = String;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.annotations.Table()",
    "boolean": 1,
    "context": "@Entity @<mask><mask><mask><mask><mask><mask>Table(appliesTo = TABLE_NAME, indexes = { @Index(name = String, columnNames = { XDN, DFN }) }) public class hibernate_class_19 { public static final String TABLE_NAME = String;public static final String XDN = String;public static final String DFN = String;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.annotations.Index()",
    "boolean": 1,
    "context": "@Entity @Table(appliesTo = TABLE_NAME, indexes = { @<mask><mask><mask><mask><mask><mask>Index(name = String, columnNames = { XDN, DFN }) }) public class hibernate_class_19 { public static final String TABLE_NAME = String;public static final String XDN = String;public static final String DFN = String;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.GeneratedValue",
    "boolean": 0,
    "context": "public static final String XDN = String;public static final String DFN = String;@<mask><mask><mask><mask><mask><mask>.GeneratedValue private long Id;@Column(name = XDN) private long xdn;@Column(name = DFN) private long dfn;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Column()",
    "boolean": 0,
    "context": "public static final String DFN = String;@GeneratedValue private long Id;@<mask><mask><mask><mask><mask><mask>.Column(name = XDN) private long xdn;@Column(name = DFN) private long dfn;@Column private String address;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Column()",
    "boolean": 0,
    "context": "@GeneratedValue private long Id;@Column(name = XDN) private long xdn;@<mask><mask><mask><mask><mask><mask>.Column(name = DFN) private long dfn;@Column private String address;public long getId() { return Id;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Column",
    "boolean": 0,
    "context": "@Column(name = XDN) private long xdn;@Column(name = DFN) private long dfn;@<mask><mask><mask><mask><mask><mask>.Column private String address;public long getId() { return Id;} public void setId(long id) { Id = id;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Entity",
    "boolean": 0,
    "context": "public class hibernate_class_2 { @<mask><mask><mask><mask><mask><mask>.Entity @Cache(usage = READ_WRITE) public class Part implements Serializable { private int id;private String name;private static final long serialVersionUID = 1L;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.annotations.Cache()",
    "boolean": 1,
    "context": "public class hibernate_class_2 { @Entity @<mask><mask><mask><mask><mask><mask>Cache(usage = READ_WRITE) public class Part implements Serializable { private int id;private String name;private static final long serialVersionUID = 1L;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.annotations.CacheConcurrencyStrategy",
    "truth_type": "org.hibernate.annotations.CacheConcurrencyStrategy",
    "full_FQN": "org.hibernate.annotations.CacheConcurrencyStrategy.READ_WRITE",
    "boolean": 1,
    "context": "public class hibernate_class_2 { @Entity @Cache(usage = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.READ_WRITE) public class Part implements Serializable { private int id;private String name;private static final long serialVersionUID = 1L;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.Serializable",
    "boolean": 1,
    "context": "public class hibernate_class_2 { @Entity @Cache(usage = READ_WRITE) public class Part implements <mask><mask><mask>.Serializable { private int id;private String name;private static final long serialVersionUID = 1L;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "private static final long serialVersionUID = 1L;private Part mainPart;private <mask><mask><mask>.List<Part> parts;public Part() { super();} @Id public int getId() { return id;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Id",
    "boolean": 0,
    "context": "private List<Part> parts;public Part() { super();} @<mask><mask><mask><mask><mask><mask>.Id public int getId() { return id;} public void setId(int id) { id = id;} @Column(name = String) public String getName() { return name;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Column()",
    "boolean": 0,
    "context": "} @Id public int getId() { return id;} public void setId(int id) { id = id;} @<mask><mask><mask><mask><mask><mask>.Column(name = String) public String getName() { return name;} public void setName(String name) { name = name;} @ManyToOne(cascade = ALL) public Part getMainPart() { return mainPart;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.ManyToOne()",
    "boolean": 0,
    "context": "} @Column(name = String) public String getName() { return name;} public void setName(String name) { name = name;} @<mask><mask><mask><mask><mask><mask>.ManyToOne(cascade = ALL) public Part getMainPart() { return mainPart;} public void setMainPart(Part mainPart) { mainPart = mainPart;} @OneToMany(cascade = ALL) @JoinColumn(name = String, referencedColumnName = String) @Cache(usage = READ_WRITE) public List<Part> getParts() { return parts;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.OneToMany()",
    "boolean": 0,
    "context": "} @ManyToOne(cascade = ALL) public Part getMainPart() { return mainPart;} public void setMainPart(Part mainPart) { mainPart = mainPart;} @<mask><mask><mask><mask><mask><mask>.OneToMany(cascade = ALL) @JoinColumn(name = String, referencedColumnName = String) @Cache(usage = READ_WRITE) public List<Part> getParts() { return parts;} public void setParts(List<Part> parts) { parts = parts;} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.JoinColumn()",
    "boolean": 0,
    "context": "} @ManyToOne(cascade = ALL) public Part getMainPart() { return mainPart;} public void setMainPart(Part mainPart) { mainPart = mainPart;} @OneToMany(cascade = ALL) @<mask><mask><mask><mask><mask><mask>.JoinColumn(name = String, referencedColumnName = String) @Cache(usage = READ_WRITE) public List<Part> getParts() { return parts;} public void setParts(List<Part> parts) { parts = parts;} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.annotations.Cache()",
    "boolean": 1,
    "context": "} @ManyToOne(cascade = ALL) public Part getMainPart() { return mainPart;} public void setMainPart(Part mainPart) { mainPart = mainPart;} @OneToMany(cascade = ALL) @JoinColumn(name = String, referencedColumnName = String) @<mask><mask><mask><mask><mask><mask>Cache(usage = READ_WRITE) public List<Part> getParts() { return parts;} public void setParts(List<Part> parts) { parts = parts;} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.annotations.CacheConcurrencyStrategy",
    "truth_type": "org.hibernate.annotations.CacheConcurrencyStrategy",
    "full_FQN": "org.hibernate.annotations.CacheConcurrencyStrategy.READ_WRITE",
    "boolean": 1,
    "context": "} @ManyToOne(cascade = ALL) public Part getMainPart() { return mainPart;} public void setMainPart(Part mainPart) { mainPart = mainPart;} @OneToMany(cascade = ALL) @JoinColumn(name = String, referencedColumnName = String) @Cache(usage = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.READ_WRITE) public List<Part> getParts() { return parts;} public void setParts(List<Part> parts) { parts = parts;} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "} @ManyToOne(cascade = ALL) public Part getMainPart() { return mainPart;} public void setMainPart(Part mainPart) { mainPart = mainPart;} @OneToMany(cascade = ALL) @JoinColumn(name = String, referencedColumnName = String) @Cache(usage = READ_WRITE) public <mask><mask><mask>.List<Part> getParts() { return parts;} public void setParts(List<Part> parts) { parts = parts;} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "} public void setMainPart(Part mainPart) { mainPart = mainPart;} @OneToMany(cascade = ALL) @JoinColumn(name = String, referencedColumnName = String) @Cache(usage = READ_WRITE) public List<Part> getParts() { return parts;} public void setParts(<mask><mask><mask>.List<Part> parts) { parts = parts;} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_20 { private static final <mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory;static { try { sessionFactory = new AnnotationConfiguration().configure().buildSessionFactory();} catch (Throwable e) { println(String + e);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.cfg.AnnotationConfiguration()",
    "boolean": 1,
    "context": "public class hibernate_class_20 { private static final SessionFactory sessionFactory;static { try { sessionFactory = new <mask><mask><mask><mask><mask><mask>AnnotationConfiguration().configure().buildSessionFactory();} catch (Throwable e) { println(String + e);throw new ExceptionInInitializerError(e);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "} catch (Throwable e) { println(String + e);throw new ExceptionInInitializerError(e);} } public static <mask><mask><mask><mask><mask><mask>.SessionFactory getSessionFactory() { return sessionFactory;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "public class hibernate_class_21 { public static void main(String[] args) { <mask><mask><mask><mask><mask><mask>.Session session = null;SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();session = openSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_21 { public static void main(String[] args) { Session session = null;<mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();session = openSession();Transaction transaction = getTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.cfg.Configuration()",
    "boolean": 1,
    "context": "public class hibernate_class_21 { public static void main(String[] args) { Session session = null;SessionFactory sessionFactory = new <mask><mask><mask><mask><mask><mask>Configuration().configure().buildSessionFactory();session = openSession();Transaction transaction = getTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.openSession()",
    "boolean": 1,
    "context": "public class hibernate_class_21 { public static void main(String[] args) { Session session = null;SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();session = <mask><mask><mask><mask><mask><mask>openSession();Transaction transaction = getTransaction();try { begin();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction",
    "boolean": 1,
    "context": "org.hibernate.SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();session = openSession();<mask><mask><mask><mask><mask><mask>.Transaction transaction = getTransaction();try { begin(); commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.getTransaction()",
    "boolean": 1,
    "context": "org.hibernate.SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();session = openSession();Transaction transaction = <mask><mask><mask><mask><mask><mask>getTransaction();try { begin(); commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.begin()",
    "boolean": 1,
    "context": "session = openSession();Transaction transaction = getTransaction();try { <mask><mask><mask><mask><mask><mask>begin(); commit();} catch (Exception e) { printStackTrace();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.commit()",
    "boolean": 1,
    "context": "org.hibernate.Transaction transaction = getTransaction();try { begin(); <mask><mask><mask><mask><mask><mask>commit();} catch (Exception e) { printStackTrace();} finally { close();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.close()",
    "boolean": 1,
    "context": " commit();} catch (Exception e) { printStackTrace();} finally { <mask><mask><mask><mask><mask><mask>close();} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "com.google.gwt.thirdparty.json",
    "truth_type": "com.google.gwt.thirdparty.json",
    "full_FQN": "com.google.gwt.thirdparty.json.JSONObject",
    "boolean": 1,
    "context": "public class hibernate_class_22 { public <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.JSONObject check() { Session session = null;JSONObject check = new JSONObject();try { SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "public class hibernate_class_22 { public JSONObject check() { <mask><mask><mask><mask><mask><mask>.Session session = null;JSONObject check = new JSONObject();try { SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "com.google.gwt.thirdparty.json",
    "truth_type": "com.google.gwt.thirdparty.json",
    "full_FQN": "com.google.gwt.thirdparty.json.JSONObject",
    "boolean": 1,
    "context": "public class hibernate_class_22 { public JSONObject check() { Session session = null;<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.JSONObject check = new JSONObject();try { SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();session = openSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "com.google.gwt.thirdparty",
    "truth_type": "com.google.gwt.thirdparty",
    "full_FQN": "com.google.gwt.thirdparty.json.JSONObject()",
    "boolean": 1,
    "context": "public class hibernate_class_22 { public JSONObject check() { Session session = null;JSONObject check = new <mask><mask><mask><mask><mask><mask><mask><mask><mask>JSONObject();try { SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();session = openSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_22 { public JSONObject check() { Session session = null;JSONObject check = new JSONObject();try { <mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();session = openSession();String username = null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.cfg.Configuration()",
    "boolean": 1,
    "context": "public class hibernate_class_22 { public JSONObject check() { Session session = null;JSONObject check = new JSONObject();try { SessionFactory sessionFactory = new <mask><mask><mask><mask><mask><mask>Configuration().configure().buildSessionFactory();session = openSession();String username = null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.openSession()",
    "boolean": 1,
    "context": "com.google.gwt.thirdparty.json.JSONObject check = new JSONObject();try { SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();session = <mask><mask><mask><mask><mask><mask>openSession();String username = null;boolean justusername = false;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "j.arta.nate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Query",
    "boolean": 0,
    "context": "boolean justusername = false;if (justusername) { String hquery = String;<mask><mask><mask><mask><mask><mask>.Query query = createQuery(hquery); setString(0, username);String user = ((String)  uniqueResult()));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.createQuery()",
    "boolean": 1,
    "context": "boolean justusername = false;if (justusername) { String hquery = String;Query query = <mask><mask><mask><mask><mask><mask>createQuery(hquery); setString(0, username);String user = ((String)  uniqueResult()));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Query.setString()",
    "boolean": 1,
    "context": "if (justusername) { String hquery = String;Query query = createQuery(hquery); <mask><mask><mask><mask><mask><mask>setString(0, username);String user = ((String)  uniqueResult()));if (user == null) { put(String, String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Query.uniqueResult()",
    "boolean": 1,
    "context": "org.hibernate.Query query = createQuery(hquery); setString(0, username);String user = ((String)  <mask><mask><mask><mask><mask><mask>uniqueResult()));if (user == null) { put(String, String);} else { put(String, String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "com.google.gwt.thirdparty.json",
    "truth_type": "com.google.gwt.thirdparty.json",
    "full_FQN": "com.google.gwt.thirdparty.json.JSONObject.put()",
    "boolean": 1,
    "context": " setString(0, username);String user = ((String)  uniqueResult()));if (user == null) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>put(String, String);} else { put(String, String);} put(String, true);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "com.google.gwt.thirdparty.json",
    "truth_type": "com.google.gwt.thirdparty.json",
    "full_FQN": "com.google.gwt.thirdparty.json.JSONObject.put()",
    "boolean": 1,
    "context": "java.lang.String user = ((String)  uniqueResult()));if (user == null) { put(String, String);} else { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>put(String, String);} put(String, true);} else { String hquery = String;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "com.google.gwt.thirdparty.json",
    "truth_type": "com.google.gwt.thirdparty.json",
    "full_FQN": "com.google.gwt.thirdparty.json.JSONObject.put()",
    "boolean": 1,
    "context": "if (user == null) { put(String, String);} else { put(String, String);} <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>put(String, true);} else { String hquery = String;Query query = createQuery(hquery);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Query",
    "boolean": 1,
    "context": "} put(String, true);} else { String hquery = String;<mask><mask><mask><mask><mask><mask>.Query query = createQuery(hquery); setString(String, username);String password = null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.createQuery()",
    "boolean": 1,
    "context": "} put(String, true);} else { String hquery = String;Query query = <mask><mask><mask><mask><mask><mask>createQuery(hquery); setString(String, username);String password = null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Query.setString()",
    "boolean": 1,
    "context": "} else { String hquery = String;Query query = createQuery(hquery); <mask><mask><mask><mask><mask><mask>setString(String, username);String password = null; setString(String, password);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Query.setString()",
    "boolean": 1,
    "context": " setString(String, username);String password = null; <mask><mask><mask><mask><mask><mask>setString(String, password);String user = ((String)  uniqueResult()));if (user == null) { put(String, false);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Query.uniqueResult()",
    "boolean": 1,
    "context": "java.lang.String password = null; setString(String, password);String user = ((String)  <mask><mask><mask><mask><mask><mask>uniqueResult()));if (user == null) { put(String, false);} else { put(String, true);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "com.google.gwt.thirdparty.json",
    "truth_type": "com.google.gwt.thirdparty.json",
    "full_FQN": "com.google.gwt.thirdparty.json.JSONObject.put()",
    "boolean": 1,
    "context": " setString(String, password);String user = ((String)  uniqueResult()));if (user == null) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>put(String, false);} else { put(String, true);} put(String, false);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "com.google.gwt.thirdparty.json",
    "truth_type": "com.google.gwt.thirdparty.json",
    "full_FQN": "com.google.gwt.thirdparty.json.JSONObject.put()",
    "boolean": 1,
    "context": "java.lang.String user = ((String)  uniqueResult()));if (user == null) { put(String, false);} else { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>put(String, true);} put(String, false);} } catch (Exception e) { println getMessage());"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "com.google.gwt.thirdparty.json",
    "truth_type": "com.google.gwt.thirdparty.json",
    "full_FQN": "com.google.gwt.thirdparty.json.JSONObject.put()",
    "boolean": 1,
    "context": "if (user == null) { put(String, false);} else { put(String, true);} <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>put(String, false);} } catch (Exception e) { println getMessage());} finally { flush();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.flush()",
    "boolean": 1,
    "context": "} put(String, false);} } catch (Exception e) { println getMessage());} finally { <mask><mask><mask><mask><mask><mask>flush(); close();} return check;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.close()",
    "boolean": 1,
    "context": "} } catch (Exception e) { println getMessage());} finally { flush(); <mask><mask><mask><mask><mask><mask>close();} return check;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "public class hibernate_class_23 { private static final ThreadLocal<<mask><mask><mask><mask><mask><mask>.Session> threadLocal = new ThreadLocal<Session>();private static Configuration configuration = new AnnotationConfiguration();private static SessionFactory sessionFactory;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "public class hibernate_class_23 { private static final ThreadLocal<Session> threadLocal = new ThreadLocal<<mask><mask><mask><mask><mask><mask>.Session>();private static Configuration configuration = new AnnotationConfiguration();private static SessionFactory sessionFactory;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.Configuration",
    "boolean": 1,
    "context": "public class hibernate_class_23 { private static final ThreadLocal<Session> threadLocal = new ThreadLocal<Session>();private static <mask><mask><mask><mask><mask><mask><mask><mask>.Configuration configuration = new AnnotationConfiguration();private static SessionFactory sessionFactory;static { try { String configFile = String;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.cfg.AnnotationConfiguration()",
    "boolean": 1,
    "context": "public class hibernate_class_23 { private static final ThreadLocal<Session> threadLocal = new ThreadLocal<Session>();private static Configuration configuration = new <mask><mask><mask><mask><mask><mask>AnnotationConfiguration();private static SessionFactory sessionFactory;static { try { String configFile = String;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_23 { private static final ThreadLocal<Session> threadLocal = new ThreadLocal<Session>();private static Configuration configuration = new AnnotationConfiguration();private static <mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory;static { try { String configFile = String; configure(configFile);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.Configuration.configure()",
    "boolean": 1,
    "context": "private static SessionFactory sessionFactory;static { try { String configFile = String; <mask><mask><mask><mask><mask><mask><mask><mask>configure(configFile);sessionFactory = buildSessionFactory();} catch (Exception e) { } } private hibernate_class_23() { } public static Session getSession() throws HibernateException { Session session = ((Session)  get()));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.Configuration.buildSessionFactory()",
    "boolean": 1,
    "context": "static { try { String configFile = String; configure(configFile);sessionFactory = <mask><mask><mask><mask><mask><mask><mask><mask>buildSessionFactory();} catch (Exception e) { } } private hibernate_class_23() { } public static Session getSession() throws HibernateException { Session session = ((Session)  get()));if ((session == null) || ( isOpen())) { if (sessionFactory == null) { } session = (sessionFactory != null) ? openSession() : null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": " configure(configFile);sessionFactory = buildSessionFactory();} catch (Exception e) { } } private hibernate_class_23() { } public static <mask><mask><mask><mask><mask><mask>.Session getSession() throws HibernateException { Session session = ((Session)  get()));if ((session == null) || ( isOpen())) { if (sessionFactory == null) { } session = (sessionFactory != null) ? openSession() : null; set(session);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.HibernateException",
    "boolean": 1,
    "context": " configure(configFile);sessionFactory = buildSessionFactory();} catch (Exception e) { } } private hibernate_class_23() { } public static Session getSession() throws <mask><mask><mask><mask><mask><mask>.HibernateException { Session session = ((Session)  get()));if ((session == null) || ( isOpen())) { if (sessionFactory == null) { } session = (sessionFactory != null) ? openSession() : null; set(session);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": " configure(configFile);sessionFactory = buildSessionFactory();} catch (Exception e) { } } private hibernate_class_23() { } public static Session getSession() throws HibernateException { <mask><mask><mask><mask><mask><mask>.Session session = ((Session)  get()));if ((session == null) || ( isOpen())) { if (sessionFactory == null) { } session = (sessionFactory != null) ? openSession() : null; set(session);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": " configure(configFile);sessionFactory = buildSessionFactory();} catch (Exception e) { } } private hibernate_class_23() { } public static Session getSession() throws HibernateException { Session session = ((<mask><mask><mask><mask><mask><mask>.Session)  get()));if ((session == null) || ( isOpen())) { if (sessionFactory == null) { } session = (sessionFactory != null) ? openSession() : null; set(session);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.isOpen()",
    "boolean": 1,
    "context": "sessionFactory = buildSessionFactory();} catch (Exception e) { } } private hibernate_class_23() { } public static Session getSession() throws HibernateException { Session session = ((Session)  get()));if ((session == null) || ( <mask><mask><mask><mask><mask><mask>isOpen())) { if (sessionFactory == null) { } session = (sessionFactory != null) ? openSession() : null; set(session);} return session;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.openSession()",
    "boolean": 1,
    "context": "sessionFactory = buildSessionFactory();} catch (Exception e) { } } private hibernate_class_23() { } public static Session getSession() throws HibernateException { Session session = ((Session)  get()));if ((session == null) || ( isOpen())) { if (sessionFactory == null) { } session = (sessionFactory != null) ? <mask><mask><mask><mask><mask><mask>openSession() : null; set(session);} return session;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.Configuration",
    "boolean": 1,
    "context": "public class hibernate_class_24 { public static class HibernateInvocationHandler implements InvocationHandler { private final <mask><mask><mask><mask><mask><mask><mask><mask>.Configuration config;private SessionFactory realSessionFactory;public HibernateInvocationHandler(Configuration config) { config = config;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_24 { public static class HibernateInvocationHandler implements InvocationHandler { private final Configuration config;private <mask><mask><mask><mask><mask><mask>.SessionFactory realSessionFactory;public HibernateInvocationHandler(Configuration config) { config = config;} public Object invoke1(Object proxy, Method method, Object[] args) throws Throwable { if (false) { hashCode();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.Configuration",
    "boolean": 1,
    "context": "public class hibernate_class_24 { public static class HibernateInvocationHandler implements InvocationHandler { private final Configuration config;private SessionFactory realSessionFactory;public HibernateInvocationHandler(<mask><mask><mask><mask><mask><mask><mask><mask>.Configuration config) { config = config;} public Object invoke1(Object proxy, Method method, Object[] args) throws Throwable { if (false) { hashCode();} println(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "} public Object invoke1(Object proxy, Method method, Object[] args) throws Throwable { if (false) { hashCode();} println(String);synchronized(this) { if (realSessionFactory == null) { <mask><mask><mask><mask><mask><mask>.SessionFactory sf = null;try { println(String);sf = this buildSessionFactory();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.Configuration.buildSessionFactory()",
    "boolean": 1,
    "context": "synchronized(this) { if (realSessionFactory == null) { SessionFactory sf = null;try { println(String);sf = this <mask><mask><mask><mask><mask><mask><mask><mask>buildSessionFactory();} catch (RuntimeException e) { println(String);sf = null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.annotapping",
    "truth_type": "org.hibernate.annotations",
    "full_FQN": "org.hibernate.annotations.Entity",
    "boolean": 0,
    "context": "public class hibernate_class_25 { @<mask><mask><mask><mask><mask><mask><mask><mask><mask>.Entity public class A { private Integer id;private B b;public A() { super();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Id",
    "boolean": 0,
    "context": "private B b;public A() { super();} @<mask><mask><mask><mask><mask><mask>.Id @GeneratedValue public Integer getId() { return id;} public void setId(Integer id) { id = id;} @OneToOne(cascade = ALL) public B getB() { return b;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.GeneratedValue",
    "boolean": 0,
    "context": "private B b;public A() { super();} @Id @<mask><mask><mask><mask><mask><mask>.GeneratedValue public Integer getId() { return id;} public void setId(Integer id) { id = id;} @OneToOne(cascade = ALL) public B getB() { return b;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.OneToOne()",
    "boolean": 0,
    "context": "} @Id @GeneratedValue public Integer getId() { return id;} public void setId(Integer id) { id = id;} @<mask><mask><mask><mask><mask><mask>.OneToOne(cascade = ALL) public B getB() { return b;} public void setB(B b) { b = b;} } @Entity public class B { private Integer id;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence.CascadeType",
    "truth_type": "javax.persistence.CascadeType",
    "full_FQN": "javax.persistence.CascadeType.ALL",
    "boolean": 0,
    "context": "} @Id @GeneratedValue public Integer getId() { return id;} public void setId(Integer id) { id = id;} @OneToOne(cascade = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ALL) public B getB() { return b;} public void setB(B b) { b = b;} } @Entity public class B { private Integer id;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.mapping",
    "truth_type": "org.hibernate.annotations",
    "full_FQN": "org.hibernate.annotations.Entity",
    "boolean": 0,
    "context": "} @OneToOne(cascade = ALL) public B getB() { return b;} public void setB(B b) { b = b;} } @<mask><mask><mask><mask><mask><mask><mask><mask><mask>.Entity public class B { private Integer id;public B() { super();} @Id @GeneratedValue public Integer getId() { return id;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Id",
    "boolean": 0,
    "context": "} } @Entity public class B { private Integer id;public B() { super();} @<mask><mask><mask><mask><mask><mask>.Id @GeneratedValue public Integer getId() { return id;} public void setId(Integer id) { id = id;} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.GeneratedValue",
    "boolean": 0,
    "context": "} } @Entity public class B { private Integer id;public B() { super();} @Id @<mask><mask><mask><mask><mask><mask>.GeneratedValue public Integer getId() { return id;} public void setId(Integer id) { id = id;} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_26 { private <mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory;public static void main(String[] args) { hibernate_class_26 d = new hibernate_class_26();run3();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "public static void main(String[] args) { hibernate_class_26 d = new hibernate_class_26();run3();} public void run3() { <mask><mask><mask><mask><mask><mask>.Session session = getSession(); beginTransaction();createEntities(session);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.beginTransaction()",
    "boolean": 1,
    "context": "d.run3();} public void run3() { Session session = getSession(); <mask><mask><mask><mask><mask><mask>beginTransaction();createEntities(session); getTransaction().commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.getTransaction()",
    "boolean": 1,
    "context": " beginTransaction();createEntities(session); <mask><mask><mask><mask><mask><mask>getTransaction().commit();println(String);session = getSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.beginTransaction()",
    "boolean": 1,
    "context": "java.lang.System.out.println(String);session = getSession(); <mask><mask><mask><mask><mask><mask>beginTransaction();Query query = createQuery(String);List results = list();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Query",
    "boolean": 1,
    "context": "session = getSession(); beginTransaction();<mask><mask><mask><mask><mask><mask>.Query query = createQuery(String);List results = list();for (int i = 0; i < size(); i++) { println((String + i) + String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.createQuery()",
    "boolean": 1,
    "context": "session = getSession(); beginTransaction();Query query = <mask><mask><mask><mask><mask><mask>createQuery(String);List results = list();for (int i = 0; i < size(); i++) { println((String + i) + String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": " beginTransaction();Query query = createQuery(String);<mask><mask><mask>.List results = list();for (int i = 0; i < size(); i++) { println((String + i) + String);A a = ((A)  get(i)));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Query.list()",
    "boolean": 1,
    "context": " beginTransaction();Query query = createQuery(String);List results = <mask><mask><mask><mask><mask><mask>list();for (int i = 0; i < size(); i++) { println((String + i) + String);A a = ((A)  get(i)));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.size()",
    "boolean": 1,
    "context": "org.hibernate.Query query = createQuery(String);List results = list();for (int i = 0; i < <mask><mask><mask>size(); i++) { println((String + i) + String);A a = ((A)  get(i)));println(String + i);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.get()",
    "boolean": 1,
    "context": "java.util.List results = list();for (int i = 0; i < size(); i++) { println((String + i) + String);A a = ((A)  <mask><mask><mask>get(i)));println(String + i);println(toString());"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.getTransaction()",
    "boolean": 1,
    "context": "java.lang.System.out.println(String + i);println(toString());} <mask><mask><mask><mask><mask><mask>getTransaction().commit();} public void createEntities(Session session) { for (int i = 0; i < 2; i++) { A a = new A();B b = new B();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "java.lang.System.out.println(toString());} getTransaction().commit();} public void createEntities(<mask><mask><mask><mask><mask><mask>.Session session) { for (int i = 0; i < 2; i++) { A a = new A();B b = new B();setB(b);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.save()",
    "boolean": 1,
    "context": "B b = new B();setB(b); <mask><mask><mask><mask><mask><mask>save(a);} } public Session getSession() { if (sessionFactory == null) { AnnotationConfiguration config = new AnnotationConfiguration(); addAnnotatedClass(class);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "a.setB(b); save(a);} } public <mask><mask><mask><mask><mask><mask>.Session getSession() { if (sessionFactory == null) { AnnotationConfiguration config = new AnnotationConfiguration(); addAnnotatedClass(class); addAnnotatedClass(class);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.AnnotationConfiguration",
    "boolean": 1,
    "context": "a.setB(b); save(a);} } public Session getSession() { if (sessionFactory == null) { <mask><mask><mask><mask><mask><mask><mask><mask>.AnnotationConfiguration config = new AnnotationConfiguration(); addAnnotatedClass(class); addAnnotatedClass(class);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.cfg.AnnotationConfiguration()",
    "boolean": 1,
    "context": "a.setB(b); save(a);} } public Session getSession() { if (sessionFactory == null) { AnnotationConfiguration config = new <mask><mask><mask><mask><mask><mask>AnnotationConfiguration(); addAnnotatedClass(class); addAnnotatedClass(class);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.AnnotationConfiguration.addAnnotatedClass()",
    "boolean": 1,
    "context": " save(a);} } public Session getSession() { if (sessionFactory == null) { AnnotationConfiguration config = new AnnotationConfiguration(); <mask><mask><mask><mask><mask><mask><mask><mask>addAnnotatedClass(class); addAnnotatedClass(class); configure();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.AnnotationConfiguration.addAnnotatedClass()",
    "boolean": 1,
    "context": "} } public Session getSession() { if (sessionFactory == null) { AnnotationConfiguration config = new AnnotationConfiguration(); addAnnotatedClass(class); <mask><mask><mask><mask><mask><mask><mask><mask>addAnnotatedClass(class); configure();new SchemaExport(config).create(true, true);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.AnnotationConfiguration.configure()",
    "boolean": 1,
    "context": " addAnnotatedClass(class); addAnnotatedClass(class); <mask><mask><mask><mask><mask><mask><mask><mask>configure();new SchemaExport(config).create(true, true);sessionFactory = buildSessionFactory();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.tool",
    "truth_type": "org.hibernate.tool",
    "full_FQN": "org.hibernate.tool.hbm2ddl.SchemaExport()",
    "boolean": 1,
    "context": " addAnnotatedClass(class); configure();new <mask><mask><mask><mask><mask><mask><mask><mask>SchemaExport(config).create(true, true);sessionFactory = buildSessionFactory();} Session session = getCurrentSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.AnnotationConfiguration.buildSessionFactory()",
    "boolean": 1,
    "context": " configure();new SchemaExport(config).create(true, true);sessionFactory = <mask><mask><mask><mask><mask><mask><mask><mask>buildSessionFactory();} Session session = getCurrentSession();return session;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "new SchemaExport(config).create(true, true);sessionFactory = buildSessionFactory();} <mask><mask><mask><mask><mask><mask>.Session session = getCurrentSession();return session;} public class A { private Integer id;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.getCurrentSession()",
    "boolean": 1,
    "context": "new SchemaExport(config).create(true, true);sessionFactory = buildSessionFactory();} Session session = <mask><mask><mask><mask><mask><mask>getCurrentSession();return session;} public class A { private Integer id;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Id",
    "boolean": 0,
    "context": "private B b;public A() { super();} @<mask><mask><mask><mask><mask><mask>.Id @GeneratedValue public Integer getId() { return id;} public void setId(Integer id) { id = id;} public B getB() { return b;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.GeneratedValue",
    "boolean": 0,
    "context": "private B b;public A() { super();} @Id @<mask><mask><mask><mask><mask><mask>.GeneratedValue public Integer getId() { return id;} public void setId(Integer id) { id = id;} public B getB() { return b;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.h.nate.annotations",
    "truth_type": "org.hibernate.annotations",
    "full_FQN": "org.hibernate.annotations.Entity",
    "boolean": 0,
    "context": "} public B getB() { return b;} public void setB(B b) { b = b;} } @<mask><mask><mask><mask><mask><mask><mask><mask><mask>.Entity public class B { private Integer id;public B() { super();} @Id @GeneratedValue public Integer getId() { return id;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Id",
    "boolean": 0,
    "context": "} } @Entity public class B { private Integer id;public B() { super();} @<mask><mask><mask><mask><mask><mask>.Id @GeneratedValue public Integer getId() { return id;} public void setId(Integer id) { id = id;} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.GeneratedValue",
    "boolean": 0,
    "context": "} } @Entity public class B { private Integer id;public B() { super();} @Id @<mask><mask><mask><mask><mask><mask>.GeneratedValue public Integer getId() { return id;} public void setId(Integer id) { id = id;} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "public class hibernate_class_27 { public static <mask><mask><mask>.List<ProjectAssignment> getAllResources() { List<ProjectAssignment> projectMasters;Session session = getSessionFactory().openSession();Query query = createQuery(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "public class hibernate_class_27 { public static List<ProjectAssignment> getAllResources() { <mask><mask><mask>.List<ProjectAssignment> projectMasters;Session session = getSessionFactory().openSession();Query query = createQuery(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "public class hibernate_class_27 { public static List<ProjectAssignment> getAllResources() { List<ProjectAssignment> projectMasters;<mask><mask><mask><mask><mask><mask>.Session session = getSessionFactory().openSession();Query query = createQuery(String);projectMasters = ((List<ProjectAssignment>)  list()));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.internal.nScope",
    "truth_type": "hibernate.HibernateUtil",
    "full_FQN": "hibernate.HibernateUtil.getSessionFactory()",
    "boolean": 0,
    "context": "public class hibernate_class_27 { public static List<ProjectAssignment> getAllResources() { List<ProjectAssignment> projectMasters;Session session = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.getSessionFactory().openSession();Query query = createQuery(String);projectMasters = ((List<ProjectAssignment>)  list()));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Query",
    "boolean": 1,
    "context": "public class hibernate_class_27 { public static List<ProjectAssignment> getAllResources() { List<ProjectAssignment> projectMasters;Session session = getSessionFactory().openSession();<mask><mask><mask><mask><mask><mask>.Query query = createQuery(String);projectMasters = ((List<ProjectAssignment>)  list())); close();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.createQuery()",
    "boolean": 1,
    "context": "public class hibernate_class_27 { public static List<ProjectAssignment> getAllResources() { List<ProjectAssignment> projectMasters;Session session = getSessionFactory().openSession();Query query = <mask><mask><mask><mask><mask><mask>createQuery(String);projectMasters = ((List<ProjectAssignment>)  list())); close();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "org.hibernate.Session session = getSessionFactory().openSession();Query query = createQuery(String);projectMasters = ((<mask><mask><mask>.List<ProjectAssignment>)  list())); close();return projectMasters;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Query.list()",
    "boolean": 1,
    "context": "org.hibernate.Session session = getSessionFactory().openSession();Query query = createQuery(String);projectMasters = ((List<ProjectAssignment>)  <mask><mask><mask><mask><mask><mask>list())); close();return projectMasters;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.close()",
    "boolean": 1,
    "context": "org.hibernate.Query query = createQuery(String);projectMasters = ((List<ProjectAssignment>)  list())); <mask><mask><mask><mask><mask><mask>close();return projectMasters;} public class ProjectAssignment implements Serializable { private short aid;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.Serializable",
    "boolean": 1,
    "context": " close();return projectMasters;} public class ProjectAssignment implements <mask><mask><mask>.Serializable { private short aid;private String pid;private String userName;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Entity",
    "boolean": 0,
    "context": "@<mask><mask><mask><mask><mask><mask>.Entity public class hibernate_class_28 implements Serializable { @Id @GeneratedValue(strategy = AUTO) private int id;@ManyToOne @JoinColumn(name = String) private User user;@OneToMany(targetEntity = class) @JoinColumn(name = String) @IndexColumn(name = String, base = 0) private List<> comments = new ArrayList<>();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.Serializable",
    "boolean": 1,
    "context": "@Entity public class hibernate_class_28 implements <mask><mask><mask>.Serializable { @Id @GeneratedValue(strategy = AUTO) private int id;@ManyToOne @JoinColumn(name = String) private User user;@OneToMany(targetEntity = class) @JoinColumn(name = String) @IndexColumn(name = String, base = 0) private List<> comments = new ArrayList<>();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Id",
    "boolean": 0,
    "context": "@Entity public class hibernate_class_28 implements Serializable { @<mask><mask><mask><mask><mask><mask>.Id @GeneratedValue(strategy = AUTO) private int id;@ManyToOne @JoinColumn(name = String) private User user;@OneToMany(targetEntity = class) @JoinColumn(name = String) @IndexColumn(name = String, base = 0) private List<> comments = new ArrayList<>();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakax.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.GeneratedValue()",
    "boolean": 0,
    "context": "@Entity public class hibernate_class_28 implements Serializable { @Id @<mask><mask><mask><mask><mask><mask>.GeneratedValue(strategy = AUTO) private int id;@ManyToOne @JoinColumn(name = String) private User user;@OneToMany(targetEntity = class) @JoinColumn(name = String) @IndexColumn(name = String, base = 0) private List<> comments = new ArrayList<>();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence.GenerationType",
    "truth_type": "javax.persistence.GenerationType",
    "full_FQN": "javax.persistence.GenerationType.AUTO",
    "boolean": 0,
    "context": "@Entity public class hibernate_class_28 implements Serializable { @Id @GeneratedValue(strategy = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.AUTO) private int id;@ManyToOne @JoinColumn(name = String) private User user;@OneToMany(targetEntity = class) @JoinColumn(name = String) @IndexColumn(name = String, base = 0) private List<> comments = new ArrayList<>();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.ManyToOne",
    "boolean": 0,
    "context": "@Entity public class hibernate_class_28 implements Serializable { @Id @GeneratedValue(strategy = AUTO) private int id;@<mask><mask><mask><mask><mask><mask>.ManyToOne @JoinColumn(name = String) private User user;@OneToMany(targetEntity = class) @JoinColumn(name = String) @IndexColumn(name = String, base = 0) private List<> comments = new ArrayList<>();@Column(name = String, length = 10) private int articleId;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.JoinColumn()",
    "boolean": 0,
    "context": "@Entity public class hibernate_class_28 implements Serializable { @Id @GeneratedValue(strategy = AUTO) private int id;@ManyToOne @<mask><mask><mask><mask><mask><mask>.JoinColumn(name = String) private User user;@OneToMany(targetEntity = class) @JoinColumn(name = String) @IndexColumn(name = String, base = 0) private List<> comments = new ArrayList<>();@Column(name = String, length = 10) private int articleId;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.lang",
    "truth_type": "library.model",
    "full_FQN": "library.model.User",
    "boolean": 0,
    "context": "@Entity public class hibernate_class_28 implements Serializable { @Id @GeneratedValue(strategy = AUTO) private int id;@ManyToOne @JoinColumn(name = String) private <mask><mask><mask>.User user;@OneToMany(targetEntity = class) @JoinColumn(name = String) @IndexColumn(name = String, base = 0) private List<> comments = new ArrayList<>();@Column(name = String, length = 10) private int articleId;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.OneToMany()",
    "boolean": 0,
    "context": "@Entity public class hibernate_class_28 implements Serializable { @Id @GeneratedValue(strategy = AUTO) private int id;@ManyToOne @JoinColumn(name = String) private User user;@<mask><mask><mask><mask><mask><mask>.OneToMany(targetEntity = class) @JoinColumn(name = String) @IndexColumn(name = String, base = 0) private List<> comments = new ArrayList<>();@Column(name = String, length = 10) private int articleId;@Column(name = String, length = 8192) private String text;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.JoinColumn()",
    "boolean": 0,
    "context": "@Entity public class hibernate_class_28 implements Serializable { @Id @GeneratedValue(strategy = AUTO) private int id;@ManyToOne @JoinColumn(name = String) private User user;@OneToMany(targetEntity = class) @<mask><mask><mask><mask><mask><mask>.JoinColumn(name = String) @IndexColumn(name = String, base = 0) private List<> comments = new ArrayList<>();@Column(name = String, length = 10) private int articleId;@Column(name = String, length = 8192) private String text;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.annotations.IndexColumn()",
    "boolean": 1,
    "context": "@Entity public class hibernate_class_28 implements Serializable { @Id @GeneratedValue(strategy = AUTO) private int id;@ManyToOne @JoinColumn(name = String) private User user;@OneToMany(targetEntity = class) @JoinColumn(name = String) @<mask><mask><mask><mask><mask><mask>IndexColumn(name = String, base = 0) private List<> comments = new ArrayList<>();@Column(name = String, length = 10) private int articleId;@Column(name = String, length = 8192) private String text;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "@Entity public class hibernate_class_28 implements Serializable { @Id @GeneratedValue(strategy = AUTO) private int id;@ManyToOne @JoinColumn(name = String) private User user;@OneToMany(targetEntity = class) @JoinColumn(name = String) @IndexColumn(name = String, base = 0) private <mask><mask><mask>.List<> comments = new ArrayList<>();@Column(name = String, length = 10) private int articleId;@Column(name = String, length = 8192) private String text;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "@Entity public class hibernate_class_28 implements Serializable { @Id @GeneratedValue(strategy = AUTO) private int id;@ManyToOne @JoinColumn(name = String) private User user;@OneToMany(targetEntity = class) @JoinColumn(name = String) @IndexColumn(name = String, base = 0) private List<> comments = new <mask><mask><mask>.ArrayList<>();@Column(name = String, length = 10) private int articleId;@Column(name = String, length = 8192) private String text;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Column()",
    "boolean": 0,
    "context": "@ManyToOne @JoinColumn(name = String) private User user;@OneToMany(targetEntity = class) @JoinColumn(name = String) @IndexColumn(name = String, base = 0) private List<> comments = new ArrayList<>();@<mask><mask><mask><mask><mask><mask>.Column(name = String, length = 10) private int articleId;@Column(name = String, length = 8192) private String text;public int getArticleId() { return articleId;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Column()",
    "boolean": 0,
    "context": "@OneToMany(targetEntity = class) @JoinColumn(name = String) @IndexColumn(name = String, base = 0) private List<> comments = new ArrayList<>();@Column(name = String, length = 10) private int articleId;@<mask><mask><mask><mask><mask><mask>.Column(name = String, length = 8192) private String text;public int getArticleId() { return articleId;} public void setArticleId(int articleId) { articleId = articleId;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.lang",
    "truth_type": "library.model",
    "full_FQN": "library.model.User",
    "boolean": 0,
    "context": "} public String getText() { return text;} public void setText(String text) { text = text;} public <mask><mask><mask>.User getUser() { return user;} public void setUser(User user) { user = user;} @Override public String toString() { return (((((((((String + String) + articleId) + String) + String) + id) + String) + String) + text) + String) + String;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.lang",
    "truth_type": "library.model",
    "full_FQN": "library.model.User",
    "boolean": 0,
    "context": "} public void setText(String text) { text = text;} public User getUser() { return user;} public void setUser(<mask><mask><mask>.User user) { user = user;} @Override public String toString() { return (((((((((String + String) + articleId) + String) + String) + id) + String) + String) + text) + String) + String;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public abstract class hibernate_class_29<T> { private Class<T> domainClass;private <mask><mask><mask><mask><mask><mask>.SessionFactory sf;public hibernate_class_29(Class<T> domainClass) { domainClass = domainClass;} public SessionFactory getSessionFactory() { return sf;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "private SessionFactory sf;public hibernate_class_29(Class<T> domainClass) { domainClass = domainClass;} public <mask><mask><mask><mask><mask><mask>.SessionFactory getSessionFactory() { return sf;} public void setSessionFactory(SessionFactory sf) { sf = sf;} public void delete(T object) { getSession().delete(object);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public hibernate_class_29(Class<T> domainClass) { domainClass = domainClass;} public SessionFactory getSessionFactory() { return sf;} public void setSessionFactory(<mask><mask><mask><mask><mask><mask>.SessionFactory sf) { sf = sf;} public void delete(T object) { getSession().delete(object);} @SuppressWarnings(String) public T load(long id) { return ((T) (getSession().get(domainClass, id)));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "} @SuppressWarnings(String) public T load(long id) { return ((T) (getSession().get(domainClass, id)));} public void save(T object) { getSession().saveOrUpdate(object);} @SuppressWarnings(String) public <mask><mask><mask>.List<T> findAll() { Criteria criteria = getSession().createCriteria(domainClass);List<T> r = ((List<T>)  list()));return r;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "j.arta.nistence",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Criteria",
    "boolean": 0,
    "context": "} @SuppressWarnings(String) public T load(long id) { return ((T) (getSession().get(domainClass, id)));} public void save(T object) { getSession().saveOrUpdate(object);} @SuppressWarnings(String) public List<T> findAll() { <mask><mask><mask><mask><mask><mask>.Criteria criteria = getSession().createCriteria(domainClass);List<T> r = ((List<T>)  list()));return r;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "} public void save(T object) { getSession().saveOrUpdate(object);} @SuppressWarnings(String) public List<T> findAll() { Criteria criteria = getSession().createCriteria(domainClass);<mask><mask><mask>.List<T> r = ((List<T>)  list()));return r;} public int countAll() { Criteria criteria = getSession().createCriteria(domainClass);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "} public void save(T object) { getSession().saveOrUpdate(object);} @SuppressWarnings(String) public List<T> findAll() { Criteria criteria = getSession().createCriteria(domainClass);List<T> r = ((<mask><mask><mask>.List<T>)  list()));return r;} public int countAll() { Criteria criteria = getSession().createCriteria(domainClass);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.h.nate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Criteria.list()",
    "boolean": 0,
    "context": "} public void save(T object) { getSession().saveOrUpdate(object);} @SuppressWarnings(String) public List<T> findAll() { Criteria criteria = getSession().createCriteria(domainClass);List<T> r = ((List<T>)  <mask><mask><mask><mask><mask><mask>list()));return r;} public int countAll() { Criteria criteria = getSession().createCriteria(domainClass);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.nistence",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Criteria",
    "boolean": 0,
    "context": "java.util.List<T> r = ((List<T>)  list()));return r;} public int countAll() { <mask><mask><mask><mask><mask><mask>.Criteria criteria = getSession().createCriteria(domainClass); setProjection(rowCount());return ((Integer)  uniqueResult()));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.arta.nistence",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Criteria.setProjection()",
    "boolean": 0,
    "context": "return r;} public int countAll() { Criteria criteria = getSession().createCriteria(domainClass); <mask><mask><mask><mask><mask><mask>setProjection(rowCount());return ((Integer)  uniqueResult()));} public Session getSession() { return getCurrentSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.Entitypa",
    "truth_type": "org.hibernate.criterion",
    "full_FQN": "org.hibernate.criterion.Projections.rowCount()",
    "boolean": 0,
    "context": "return r;} public int countAll() { Criteria criteria = getSession().createCriteria(domainClass); setProjection(<mask><mask><mask><mask><mask><mask><mask><mask><mask>rowCount());return ((Integer)  uniqueResult()));} public Session getSession() { return getCurrentSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Criteria.uniqueResult()",
    "boolean": 1,
    "context": "} public int countAll() { Criteria criteria = getSession().createCriteria(domainClass); setProjection(rowCount());return ((Integer)  <mask><mask><mask><mask><mask><mask>uniqueResult()));} public Session getSession() { return getCurrentSession();} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": " setProjection(rowCount());return ((Integer)  uniqueResult()));} public <mask><mask><mask><mask><mask><mask>.Session getSession() { return getCurrentSession();} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.getCurrentSession()",
    "boolean": 1,
    "context": " setProjection(rowCount());return ((Integer)  uniqueResult()));} public Session getSession() { return <mask><mask><mask><mask><mask><mask>getCurrentSession();} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.dialect",
    "truth_type": "org.hibernate.dialect",
    "full_FQN": "org.hibernate.dialect.Dialect",
    "boolean": 1,
    "context": "public class hibernate_class_3 { public class SQLiteDialect extends <mask><mask><mask><mask><mask><mask><mask><mask><mask>.Dialect { public SQLiteDialect() { super();registerColumnType(BIT, String);registerColumnType(TINYINT, String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql.Types",
    "truth_type": "java.sql.Types",
    "full_FQN": "java.sql.Types.BIT",
    "boolean": 1,
    "context": "public class hibernate_class_3 { public class SQLiteDialect extends Dialect { public SQLiteDialect() { super();registerColumnType(<mask><mask><mask><mask><mask>.BIT, String);registerColumnType(TINYINT, String);registerColumnType(SMALLINT, String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql.Types",
    "truth_type": "java.sql.Types",
    "full_FQN": "java.sql.Types.TINYINT",
    "boolean": 1,
    "context": "public class hibernate_class_3 { public class SQLiteDialect extends Dialect { public SQLiteDialect() { super();registerColumnType(BIT, String);registerColumnType(<mask><mask><mask><mask><mask>.TINYINT, String);registerColumnType(SMALLINT, String);registerColumnType(INTEGER, String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql.Types",
    "truth_type": "java.sql.Types",
    "full_FQN": "java.sql.Types.SMALLINT",
    "boolean": 1,
    "context": "registerColumnType(BIT, String);registerColumnType(TINYINT, String);registerColumnType(<mask><mask><mask><mask><mask>.SMALLINT, String);registerColumnType(INTEGER, String);registerColumnType(BIGINT, String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql.Types",
    "truth_type": "java.sql.Types",
    "full_FQN": "java.sql.Types.INTEGER",
    "boolean": 1,
    "context": "registerColumnType(TINYINT, String);registerColumnType(SMALLINT, String);registerColumnType(<mask><mask><mask><mask><mask>.INTEGER, String);registerColumnType(BIGINT, String);registerColumnType(FLOAT, String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql.Types",
    "truth_type": "java.sql.Types",
    "full_FQN": "java.sql.Types.BIGINT",
    "boolean": 1,
    "context": "registerColumnType(SMALLINT, String);registerColumnType(INTEGER, String);registerColumnType(<mask><mask><mask><mask><mask>.BIGINT, String);registerColumnType(FLOAT, String);registerColumnType(REAL, String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql.Types",
    "truth_type": "java.sql.Types",
    "full_FQN": "java.sql.Types.FLOAT",
    "boolean": 1,
    "context": "registerColumnType(INTEGER, String);registerColumnType(BIGINT, String);registerColumnType(<mask><mask><mask><mask><mask>.FLOAT, String);registerColumnType(REAL, String);registerColumnType(DOUBLE, String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql.Types",
    "truth_type": "java.sql.Types",
    "full_FQN": "java.sql.Types.REAL",
    "boolean": 1,
    "context": "registerColumnType(BIGINT, String);registerColumnType(FLOAT, String);registerColumnType(<mask><mask><mask><mask><mask>.REAL, String);registerColumnType(DOUBLE, String);registerColumnType(NUMERIC, String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql.Types",
    "truth_type": "java.sql.Types",
    "full_FQN": "java.sql.Types.DOUBLE",
    "boolean": 1,
    "context": "registerColumnType(FLOAT, String);registerColumnType(REAL, String);registerColumnType(<mask><mask><mask><mask><mask>.DOUBLE, String);registerColumnType(NUMERIC, String);registerColumnType(DECIMAL, String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql.Types",
    "truth_type": "java.sql.Types",
    "full_FQN": "java.sql.Types.NUMERIC",
    "boolean": 1,
    "context": "registerColumnType(REAL, String);registerColumnType(DOUBLE, String);registerColumnType(<mask><mask><mask><mask><mask>.NUMERIC, String);registerColumnType(DECIMAL, String);registerColumnType(CHAR, String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql.Types",
    "truth_type": "java.sql.Types",
    "full_FQN": "java.sql.Types.DECIMAL",
    "boolean": 1,
    "context": "registerColumnType(DOUBLE, String);registerColumnType(NUMERIC, String);registerColumnType(<mask><mask><mask><mask><mask>.DECIMAL, String);registerColumnType(CHAR, String);registerColumnType(VARCHAR, String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql.Types",
    "truth_type": "java.sql.Types",
    "full_FQN": "java.sql.Types.CHAR",
    "boolean": 1,
    "context": "registerColumnType(NUMERIC, String);registerColumnType(DECIMAL, String);registerColumnType(<mask><mask><mask><mask><mask>.CHAR, String);registerColumnType(VARCHAR, String);registerColumnType(LONGVARCHAR, String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql.Types",
    "truth_type": "java.sql.Types",
    "full_FQN": "java.sql.Types.VARCHAR",
    "boolean": 1,
    "context": "registerColumnType(DECIMAL, String);registerColumnType(CHAR, String);registerColumnType(<mask><mask><mask><mask><mask>.VARCHAR, String);registerColumnType(LONGVARCHAR, String);registerColumnType(DATE, String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql.Types",
    "truth_type": "java.sql.Types",
    "full_FQN": "java.sql.Types.LONGVARCHAR",
    "boolean": 1,
    "context": "registerColumnType(CHAR, String);registerColumnType(VARCHAR, String);registerColumnType(<mask><mask><mask><mask><mask>.LONGVARCHAR, String);registerColumnType(DATE, String);registerColumnType(TIME, String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql.Types",
    "truth_type": "java.sql.Types",
    "full_FQN": "java.sql.Types.DATE",
    "boolean": 1,
    "context": "registerColumnType(VARCHAR, String);registerColumnType(LONGVARCHAR, String);registerColumnType(<mask><mask><mask><mask><mask>.DATE, String);registerColumnType(TIME, String);registerColumnType(TIMESTAMP, String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql.Types",
    "truth_type": "java.sql.Types",
    "full_FQN": "java.sql.Types.TIME",
    "boolean": 1,
    "context": "registerColumnType(LONGVARCHAR, String);registerColumnType(DATE, String);registerColumnType(<mask><mask><mask><mask><mask>.TIME, String);registerColumnType(TIMESTAMP, String);registerColumnType(BINARY, String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql.Types",
    "truth_type": "java.sql.Types",
    "full_FQN": "java.sql.Types.TIMESTAMP",
    "boolean": 1,
    "context": "registerColumnType(DATE, String);registerColumnType(TIME, String);registerColumnType(<mask><mask><mask><mask><mask>.TIMESTAMP, String);registerColumnType(BINARY, String);registerColumnType(VARBINARY, String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql.Types",
    "truth_type": "java.sql.Types",
    "full_FQN": "java.sql.Types.BINARY",
    "boolean": 1,
    "context": "registerColumnType(TIME, String);registerColumnType(TIMESTAMP, String);registerColumnType(<mask><mask><mask><mask><mask>.BINARY, String);registerColumnType(VARBINARY, String);registerColumnType(LONGVARBINARY, String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql.Types",
    "truth_type": "java.sql.Types",
    "full_FQN": "java.sql.Types.VARBINARY",
    "boolean": 1,
    "context": "registerColumnType(TIMESTAMP, String);registerColumnType(BINARY, String);registerColumnType(<mask><mask><mask><mask><mask>.VARBINARY, String);registerColumnType(LONGVARBINARY, String);// registerColumnType(NULL, String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql.Types",
    "truth_type": "java.sql.Types",
    "full_FQN": "java.sql.Types.LONGVARBINARY",
    "boolean": 1,
    "context": "registerColumnType(BINARY, String);registerColumnType(VARBINARY, String);registerColumnType(<mask><mask><mask><mask><mask>.LONGVARBINARY, String);// registerColumnType(NULL, String);registerColumnType(BLOB, String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql.Types",
    "truth_type": "java.sql.Types",
    "full_FQN": "java.sql.Types.BLOB",
    "boolean": 1,
    "context": "registerColumnType(LONGVARBINARY, String);// registerColumnType(NULL, String);registerColumnType(<mask><mask><mask><mask><mask>.BLOB, String);registerColumnType(CLOB, String);registerColumnType(BOOLEAN, String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql.Types",
    "truth_type": "java.sql.Types",
    "full_FQN": "java.sql.Types.CLOB",
    "boolean": 1,
    "context": "// registerColumnType(NULL, String);registerColumnType(BLOB, String);registerColumnType(<mask><mask><mask><mask><mask>.CLOB, String);registerColumnType(BOOLEAN, String);registerFunction(String, new VarArgsSQLFunction(STRING, String, String, String));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.sql.Types",
    "truth_type": "java.sql.Types",
    "full_FQN": "java.sql.Types.BOOLEAN",
    "boolean": 1,
    "context": "registerColumnType(BLOB, String);registerColumnType(CLOB, String);registerColumnType(<mask><mask><mask><mask><mask>.BOOLEAN, String);registerFunction(String, new VarArgsSQLFunction(STRING, String, String, String));registerFunction(String, new SQLFunctionTemplate(INTEGER, String));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.dialect",
    "truth_type": "org.hibernate.dialect",
    "full_FQN": "org.hibernate.dialect.function.VarArgsSQLFunction()",
    "boolean": 1,
    "context": "registerColumnType(CLOB, String);registerColumnType(BOOLEAN, String);registerFunction(String, new <mask><mask><mask><mask><mask><mask><mask><mask><mask>VarArgsSQLFunction(STRING, String, String, String));registerFunction(String, new SQLFunctionTemplate(INTEGER, String));registerFunction(String, new StandardSQLFunction(String, STRING));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.Hiber.ate",
    "truth_type": "org.hibernate.Hibernate",
    "full_FQN": "org.hibernate.Hibernate.STRING",
    "boolean": 0,
    "context": "registerColumnType(CLOB, String);registerColumnType(BOOLEAN, String);registerFunction(String, new VarArgsSQLFunction(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.STRING, String, String, String));registerFunction(String, new SQLFunctionTemplate(INTEGER, String));registerFunction(String, new StandardSQLFunction(String, STRING));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.dialect",
    "truth_type": "org.hibernate.dialect",
    "full_FQN": "org.hibernate.dialect.function.SQLFunctionTemplate()",
    "boolean": 1,
    "context": "registerColumnType(BOOLEAN, String);registerFunction(String, new VarArgsSQLFunction(STRING, String, String, String));registerFunction(String, new <mask><mask><mask><mask><mask><mask><mask><mask><mask>SQLFunctionTemplate(INTEGER, String));registerFunction(String, new StandardSQLFunction(String, STRING));registerFunction(String, new StandardSQLFunction(String, STRING));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.dialect.Type",
    "truth_type": "org.hibernate.Hibernate",
    "full_FQN": "org.hibernate.Hibernate.INTEGER",
    "boolean": 0,
    "context": "registerColumnType(BOOLEAN, String);registerFunction(String, new VarArgsSQLFunction(STRING, String, String, String));registerFunction(String, new SQLFunctionTemplate(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.INTEGER, String));registerFunction(String, new StandardSQLFunction(String, STRING));registerFunction(String, new StandardSQLFunction(String, STRING));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.dialect",
    "truth_type": "org.hibernate.dialect",
    "full_FQN": "org.hibernate.dialect.function.StandardSQLFunction()",
    "boolean": 1,
    "context": "registerFunction(String, new VarArgsSQLFunction(STRING, String, String, String));registerFunction(String, new SQLFunctionTemplate(INTEGER, String));registerFunction(String, new <mask><mask><mask><mask><mask><mask><mask><mask><mask>StandardSQLFunction(String, STRING));registerFunction(String, new StandardSQLFunction(String, STRING));} public boolean supportsIdentityColumns() { return true;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.Hibernate",
    "truth_type": "org.hibernate.Hibernate",
    "full_FQN": "org.hibernate.Hibernate.STRING",
    "boolean": 1,
    "context": "registerFunction(String, new VarArgsSQLFunction(STRING, String, String, String));registerFunction(String, new SQLFunctionTemplate(INTEGER, String));registerFunction(String, new StandardSQLFunction(String, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.STRING));registerFunction(String, new StandardSQLFunction(String, STRING));} public boolean supportsIdentityColumns() { return true;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.dialect",
    "truth_type": "org.hibernate.dialect",
    "full_FQN": "org.hibernate.dialect.function.StandardSQLFunction()",
    "boolean": 1,
    "context": "registerFunction(String, new SQLFunctionTemplate(INTEGER, String));registerFunction(String, new StandardSQLFunction(String, STRING));registerFunction(String, new <mask><mask><mask><mask><mask><mask><mask><mask><mask>StandardSQLFunction(String, STRING));} public boolean supportsIdentityColumns() { return true;} public boolean hasDataTypeInIdentityColumn() { return false;// As specify in NHibernate dialect } public String getIdentityColumnString() { return String;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.Hibernate",
    "truth_type": "org.hibernate.Hibernate",
    "full_FQN": "org.hibernate.Hibernate.STRING",
    "boolean": 1,
    "context": "registerFunction(String, new SQLFunctionTemplate(INTEGER, String));registerFunction(String, new StandardSQLFunction(String, STRING));registerFunction(String, new StandardSQLFunction(String, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.STRING));} public boolean supportsIdentityColumns() { return true;} public boolean hasDataTypeInIdentityColumn() { return false;// As specify in NHibernate dialect } public String getIdentityColumnString() { return String;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Entity",
    "boolean": 0,
    "context": "@<mask><mask><mask><mask><mask><mask>.Entity @Table(name = String) @NamedQueries({ @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String) }) public class hibernate_class_30 implements Serializable { private static final long serialVersionUID = 1L;@Basic(optional = false) @Column(name = String) private String firstName;@Basic(optional = false) @Column(name = String) private String lastName;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "javarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Table()",
    "boolean": 0,
    "context": "@Entity @<mask><mask><mask><mask><mask><mask>.Table(name = String) @NamedQueries({ @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String) }) public class hibernate_class_30 implements Serializable { private static final long serialVersionUID = 1L;@Basic(optional = false) @Column(name = String) private String firstName;@Basic(optional = false) @Column(name = String) private String lastName;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "javax.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.NamedQueries()",
    "boolean": 1,
    "context": "@Entity @Table(name = String) @<mask><mask><mask><mask><mask><mask>.NamedQueries({ @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String) }) public class hibernate_class_30 implements Serializable { private static final long serialVersionUID = 1L;@Basic(optional = false) @Column(name = String) private String firstName;@Basic(optional = false) @Column(name = String) private String lastName;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "javax.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.NamedQuery()",
    "boolean": 1,
    "context": "@Entity @Table(name = String) @NamedQueries({ @<mask><mask><mask><mask><mask><mask>.NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String) }) public class hibernate_class_30 implements Serializable { private static final long serialVersionUID = 1L;@Basic(optional = false) @Column(name = String) private String firstName;@Basic(optional = false) @Column(name = String) private String lastName;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "javax.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.NamedQuery()",
    "boolean": 1,
    "context": "@Entity @Table(name = String) @NamedQueries({ @NamedQuery(name = String, query = String), @<mask><mask><mask><mask><mask><mask>.NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String) }) public class hibernate_class_30 implements Serializable { private static final long serialVersionUID = 1L;@Basic(optional = false) @Column(name = String) private String firstName;@Basic(optional = false) @Column(name = String) private String lastName;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "javax.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.NamedQuery()",
    "boolean": 1,
    "context": "@Entity @Table(name = String) @NamedQueries({ @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @<mask><mask><mask><mask><mask><mask>.NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String) }) public class hibernate_class_30 implements Serializable { private static final long serialVersionUID = 1L;@Basic(optional = false) @Column(name = String) private String firstName;@Basic(optional = false) @Column(name = String) private String lastName;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "javax.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.NamedQuery()",
    "boolean": 1,
    "context": "@Entity @Table(name = String) @NamedQueries({ @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @<mask><mask><mask><mask><mask><mask>.NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String) }) public class hibernate_class_30 implements Serializable { private static final long serialVersionUID = 1L;@Basic(optional = false) @Column(name = String) private String firstName;@Basic(optional = false) @Column(name = String) private String lastName;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "javax.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.NamedQuery()",
    "boolean": 1,
    "context": "@Entity @Table(name = String) @NamedQueries({ @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @<mask><mask><mask><mask><mask><mask>.NamedQuery(name = String, query = String) }) public class hibernate_class_30 implements Serializable { private static final long serialVersionUID = 1L;@Basic(optional = false) @Column(name = String) private String firstName;@Basic(optional = false) @Column(name = String) private String lastName;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.Serializable",
    "boolean": 1,
    "context": "@Entity @Table(name = String) @NamedQueries({ @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String) }) public class hibernate_class_30 implements <mask><mask><mask>.Serializable { private static final long serialVersionUID = 1L;@Basic(optional = false) @Column(name = String) private String firstName;@Basic(optional = false) @Column(name = String) private String lastName;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Basic()",
    "boolean": 0,
    "context": "@Entity @Table(name = String) @NamedQueries({ @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String) }) public class hibernate_class_30 implements Serializable { private static final long serialVersionUID = 1L;@<mask><mask><mask><mask><mask><mask>.Basic(optional = false) @Column(name = String) private String firstName;@Basic(optional = false) @Column(name = String) private String lastName;@Id @Basic(optional = false) @Column(name = String) private String email;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Column()",
    "boolean": 0,
    "context": "@Entity @Table(name = String) @NamedQueries({ @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String) }) public class hibernate_class_30 implements Serializable { private static final long serialVersionUID = 1L;@Basic(optional = false) @<mask><mask><mask><mask><mask><mask>.Column(name = String) private String firstName;@Basic(optional = false) @Column(name = String) private String lastName;@Id @Basic(optional = false) @Column(name = String) private String email;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Basic()",
    "boolean": 0,
    "context": "@Entity @Table(name = String) @NamedQueries({ @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String) }) public class hibernate_class_30 implements Serializable { private static final long serialVersionUID = 1L;@Basic(optional = false) @Column(name = String) private String firstName;@<mask><mask><mask><mask><mask><mask>.Basic(optional = false) @Column(name = String) private String lastName;@Id @Basic(optional = false) @Column(name = String) private String email;@Basic(optional = false) @Column(name = String) private String password;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jjarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Column()",
    "boolean": 0,
    "context": "@Entity @Table(name = String) @NamedQueries({ @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String), @NamedQuery(name = String, query = String) }) public class hibernate_class_30 implements Serializable { private static final long serialVersionUID = 1L;@Basic(optional = false) @Column(name = String) private String firstName;@Basic(optional = false) @<mask><mask><mask><mask><mask><mask>.Column(name = String) private String lastName;@Id @Basic(optional = false) @Column(name = String) private String email;@Basic(optional = false) @Column(name = String) private String password;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Id",
    "boolean": 0,
    "context": "@Basic(optional = false) @Column(name = String) private String firstName;@Basic(optional = false) @Column(name = String) private String lastName;@<mask><mask><mask><mask><mask><mask>.Id @Basic(optional = false) @Column(name = String) private String email;@Basic(optional = false) @Column(name = String) private String password;public hibernate_class_30() { } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Basic()",
    "boolean": 0,
    "context": "@Basic(optional = false) @Column(name = String) private String firstName;@Basic(optional = false) @Column(name = String) private String lastName;@Id @<mask><mask><mask><mask><mask><mask>.Basic(optional = false) @Column(name = String) private String email;@Basic(optional = false) @Column(name = String) private String password;public hibernate_class_30() { } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "javarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Column()",
    "boolean": 0,
    "context": "@Basic(optional = false) @Column(name = String) private String firstName;@Basic(optional = false) @Column(name = String) private String lastName;@Id @Basic(optional = false) @<mask><mask><mask><mask><mask><mask>.Column(name = String) private String email;@Basic(optional = false) @Column(name = String) private String password;public hibernate_class_30() { } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Basic()",
    "boolean": 0,
    "context": "@Basic(optional = false) @Column(name = String) private String lastName;@Id @Basic(optional = false) @Column(name = String) private String email;@<mask><mask><mask><mask><mask><mask>.Basic(optional = false) @Column(name = String) private String password;public hibernate_class_30() { } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Column()",
    "boolean": 0,
    "context": "@Basic(optional = false) @Column(name = String) private String lastName;@Id @Basic(optional = false) @Column(name = String) private String email;@Basic(optional = false) @<mask><mask><mask><mask><mask><mask>.Column(name = String) private String password;public hibernate_class_30() { } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "public class hibernate_class_31 { public static <mask><mask><mask>.List<?> getData() { SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();Session session = getCurrentSession();List<?> result = null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_31 { public static List<?> getData() { <mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();Session session = getCurrentSession();List<?> result = null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.cfg.Configuration()",
    "boolean": 1,
    "context": "public class hibernate_class_31 { public static List<?> getData() { SessionFactory sessionFactory = new <mask><mask><mask><mask><mask><mask>Configuration().configure().buildSessionFactory();Session session = getCurrentSession();List<?> result = null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "public class hibernate_class_31 { public static List<?> getData() { SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();<mask><mask><mask><mask><mask><mask>.Session session = getCurrentSession();List<?> result = null;try { beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.getCurrentSession()",
    "boolean": 1,
    "context": "public class hibernate_class_31 { public static List<?> getData() { SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();Session session = <mask><mask><mask><mask><mask><mask>getCurrentSession();List<?> result = null;try { beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "public class hibernate_class_31 { public static List<?> getData() { SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();Session session = getCurrentSession();<mask><mask><mask>.List<?> result = null;try { beginTransaction();Query query = createQuery(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.beginTransaction()",
    "boolean": 1,
    "context": "org.hibernate.Session session = getCurrentSession();List<?> result = null;try { <mask><mask><mask><mask><mask><mask>beginTransaction();Query query = createQuery(String);result = list();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.nate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Query",
    "boolean": 0,
    "context": "java.util.List<?> result = null;try { beginTransaction();<mask><mask><mask><mask><mask><mask>.Query query = createQuery(String);result = list(); getTransaction().commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.createQuery()",
    "boolean": 1,
    "context": "java.util.List<?> result = null;try { beginTransaction();Query query = <mask><mask><mask><mask><mask><mask>createQuery(String);result = list(); getTransaction().commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Query.list()",
    "boolean": 1,
    "context": "try { beginTransaction();Query query = createQuery(String);result = <mask><mask><mask><mask><mask><mask>list(); getTransaction().commit(); setReadOnly(true);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.getTransaction()",
    "boolean": 1,
    "context": "org.hibernate.Query query = createQuery(String);result = list(); <mask><mask><mask><mask><mask><mask>getTransaction().commit(); setReadOnly(true); setMaxResults(50);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Query.setReadOnly()",
    "boolean": 1,
    "context": "result = list(); getTransaction().commit(); <mask><mask><mask><mask><mask><mask>setReadOnly(true); setMaxResults(50); flush();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Query.setMaxResults()",
    "boolean": 1,
    "context": " getTransaction().commit(); setReadOnly(true); <mask><mask><mask><mask><mask><mask>setMaxResults(50); flush(); close();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.flush()",
    "boolean": 1,
    "context": " setReadOnly(true); setMaxResults(50); <mask><mask><mask><mask><mask><mask>flush(); close();} catch (Exception e) { printStackTrace();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.close()",
    "boolean": 1,
    "context": " setMaxResults(50); flush(); <mask><mask><mask><mask><mask><mask>close();} catch (Exception e) { printStackTrace();} return result;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Entity",
    "boolean": 0,
    "context": "@<mask><mask><mask><mask><mask><mask>.Entity @Table(name = String) @Table(appliesTo = String, indexes = { @Index(name = String, columnNames = { String, String, String, String, String }) }) public class hibernate_class_32 { @Id @GeneratedValue Long id;String job;String version;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakax.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Table()",
    "boolean": 0,
    "context": "@Entity @<mask><mask><mask><mask><mask><mask>.Table(name = String) @Table(appliesTo = String, indexes = { @Index(name = String, columnNames = { String, String, String, String, String }) }) public class hibernate_class_32 { @Id @GeneratedValue Long id;String job;String version;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Table()",
    "boolean": 0,
    "context": "@Entity @Table(name = String) @<mask><mask><mask><mask><mask><mask>.Table(appliesTo = String, indexes = { @Index(name = String, columnNames = { String, String, String, String, String }) }) public class hibernate_class_32 { @Id @GeneratedValue Long id;String job;String version;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.annotations.Index()",
    "boolean": 1,
    "context": "@Entity @Table(name = String) @Table(appliesTo = String, indexes = { @<mask><mask><mask><mask><mask><mask>Index(name = String, columnNames = { String, String, String, String, String }) }) public class hibernate_class_32 { @Id @GeneratedValue Long id;String job;String version;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Id",
    "boolean": 0,
    "context": "@Entity @Table(name = String) @Table(appliesTo = String, indexes = { @Index(name = String, columnNames = { String, String, String, String, String }) }) public class hibernate_class_32 { @<mask><mask><mask><mask><mask><mask>.Id @GeneratedValue Long id;String job;String version;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.GeneratedValue",
    "boolean": 0,
    "context": "@Entity @Table(name = String) @Table(appliesTo = String, indexes = { @Index(name = String, columnNames = { String, String, String, String, String }) }) public class hibernate_class_32 { @Id @<mask><mask><mask><mask><mask><mask>.GeneratedValue Long id;String job;String version;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_33 { private static hibernate_class_33 instance = null;private <mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory;public static hibernate_class_33 getInstance() { if (instance == null) { instance = new hibernate_class_33().init();} return instance;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public static hibernate_class_33 getInstance() { if (instance == null) { instance = new hibernate_class_33().init();} return instance;} public <mask><mask><mask><mask><mask><mask>.SessionFactory getSessionFactory() { return sessionFactory;} public Session getSession() { return this openSession();} private hibernate_class_33 init() { hibernate Configuration cfg = new hibernate Configuration();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "} return instance;} public SessionFactory getSessionFactory() { return sessionFactory;} public <mask><mask><mask><mask><mask><mask>.Session getSession() { return this openSession();} private hibernate_class_33 init() { hibernate Configuration cfg = new hibernate Configuration(); hibernate setProperties(getProperties());"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.openSession()",
    "boolean": 1,
    "context": "} return instance;} public SessionFactory getSessionFactory() { return sessionFactory;} public Session getSession() { return this <mask><mask><mask><mask><mask><mask>openSession();} private hibernate_class_33 init() { hibernate Configuration cfg = new hibernate Configuration(); hibernate setProperties(getProperties());"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg.Configuration",
    "truth_type": "org.hibernate.cfg.Configuration",
    "full_FQN": "org.hibernate.cfg.Configuration.Configuration",
    "boolean": 1,
    "context": "} public SessionFactory getSessionFactory() { return sessionFactory;} public Session getSession() { return this openSession();} private hibernate_class_33 init() { hibernate <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Configuration cfg = new hibernate Configuration(); hibernate setProperties(getProperties()); hibernate configure();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.Configuration.Configuration()",
    "boolean": 1,
    "context": "} public SessionFactory getSessionFactory() { return sessionFactory;} public Session getSession() { return this openSession();} private hibernate_class_33 init() { hibernate Configuration cfg = new hibernate <mask><mask><mask><mask><mask><mask><mask><mask>Configuration(); hibernate setProperties(getProperties()); hibernate configure();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg.Configuration",
    "truth_type": "org.hibernate.cfg.Configuration",
    "full_FQN": "org.hibernate.cfg.Configuration.Configuration.setProperties()",
    "boolean": 1,
    "context": "} public Session getSession() { return this openSession();} private hibernate_class_33 init() { hibernate Configuration cfg = new hibernate Configuration(); hibernate <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setProperties(getProperties()); hibernate configure();SessionFactory sessions = buildSessionFactory();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg.Configuration",
    "truth_type": "org.hibernate.cfg.Configuration",
    "full_FQN": "org.hibernate.cfg.Configuration.Configuration.configure()",
    "boolean": 1,
    "context": "} private hibernate_class_33 init() { hibernate Configuration cfg = new hibernate Configuration(); hibernate setProperties(getProperties()); hibernate <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>configure();SessionFactory sessions = buildSessionFactory();sessionFactory = configure().buildSessionFactory();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": " hibernate setProperties(getProperties()); hibernate configure();<mask><mask><mask><mask><mask><mask>.SessionFactory sessions = buildSessionFactory();sessionFactory = configure().buildSessionFactory();return this;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.Configuration.buildSessionFactory()",
    "boolean": 1,
    "context": " hibernate setProperties(getProperties()); hibernate configure();SessionFactory sessions = <mask><mask><mask><mask><mask><mask><mask><mask>buildSessionFactory();sessionFactory = configure().buildSessionFactory();return this;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.Configuration.configure()",
    "boolean": 1,
    "context": " hibernate configure();SessionFactory sessions = buildSessionFactory();sessionFactory = <mask><mask><mask><mask><mask><mask><mask><mask>configure().buildSessionFactory();return this;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "public class hibernate_class_34 { public void testUserClassAndUsers() { println(String);<mask><mask><mask><mask><mask><mask>.Session newSession = null;println(String);Transaction t1 = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction",
    "boolean": 1,
    "context": "org.hibernate.Session newSession = null;println(String);<mask><mask><mask><mask><mask><mask>.Transaction t1 = beginTransaction(); commit();println(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.beginTransaction()",
    "boolean": 1,
    "context": "org.hibernate.Session newSession = null;println(String);Transaction t1 = <mask><mask><mask><mask><mask><mask>beginTransaction(); commit();println(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.commit()",
    "boolean": 1,
    "context": "java.lang.System.out.println(String);Transaction t1 = beginTransaction(); <mask><mask><mask><mask><mask><mask>commit();println(String);Transaction t2 = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction",
    "boolean": 1,
    "context": " commit();println(String);<mask><mask><mask><mask><mask><mask>.Transaction t2 = beginTransaction(); commit();println(StringUserClass 1\\String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.beginTransaction()",
    "boolean": 1,
    "context": " commit();println(String);Transaction t2 = <mask><mask><mask><mask><mask><mask>beginTransaction(); commit();println(StringUserClass 1\\String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.commit()",
    "boolean": 1,
    "context": "java.lang.System.out.println(String);Transaction t2 = beginTransaction(); <mask><mask><mask><mask><mask><mask>commit();println(StringUserClass 1\\String);Transaction t3 = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction",
    "boolean": 1,
    "context": " commit();println(StringUserClass 1\\String);<mask><mask><mask><mask><mask><mask>.Transaction t3 = beginTransaction(); commit(); close();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.beginTransaction()",
    "boolean": 1,
    "context": " commit();println(StringUserClass 1\\String);Transaction t3 = <mask><mask><mask><mask><mask><mask>beginTransaction(); commit(); close();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.commit()",
    "boolean": 1,
    "context": "java.lang.System.out.println(StringUserClass 1\\String);Transaction t3 = beginTransaction(); <mask><mask><mask><mask><mask><mask>commit(); close();} public static void main(String[] args) { hibernate_class_34 instance = new hibernate_class_34();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.close()",
    "boolean": 1,
    "context": "org.hibernate.Transaction t3 = beginTransaction(); commit(); <mask><mask><mask><mask><mask><mask>close();} public static void main(String[] args) { hibernate_class_34 instance = new hibernate_class_34();testUserClassAndUsers();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibern.uration",
    "truth_type": "org.apache.log4j",
    "full_FQN": "org.apache.log4j.BasicConfigurator.configure()",
    "boolean": 0,
    "context": "public class hibernate_class_35 { public static void main(String[] args) { <mask><mask><mask><mask><mask><mask><mask>configure();Session session = getSessionFactory().openSession();Transaction transaction = null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "public class hibernate_class_35 { public static void main(String[] args) { configure();<mask><mask><mask><mask><mask><mask>.Session session = getSessionFactory().openSession();Transaction transaction = null;try { transaction = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.internal.UtScope",
    "truth_type": "hibernate.HibernateUtil",
    "full_FQN": "hibernate.HibernateUtil.getSessionFactory()",
    "boolean": 0,
    "context": "public class hibernate_class_35 { public static void main(String[] args) { configure();Session session = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.getSessionFactory().openSession();Transaction transaction = null;try { transaction = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction",
    "boolean": 1,
    "context": "public class hibernate_class_35 { public static void main(String[] args) { configure();Session session = getSessionFactory().openSession();<mask><mask><mask><mask><mask><mask>.Transaction transaction = null;try { transaction = beginTransaction();Query query = createQuery(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.beginTransaction()",
    "boolean": 1,
    "context": "org.hibernate.Session session = getSessionFactory().openSession();Transaction transaction = null;try { transaction = <mask><mask><mask><mask><mask><mask>beginTransaction();Query query = createQuery(String);List list = list();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "orgakarta.nate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Query",
    "boolean": 0,
    "context": "org.hibernate.Transaction transaction = null;try { transaction = beginTransaction();<mask><mask><mask><mask><mask><mask>.Query query = createQuery(String);List list = list();for (Iterator it = iterator(); hasNext();) { } commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.createQuery()",
    "boolean": 1,
    "context": "org.hibernate.Transaction transaction = null;try { transaction = beginTransaction();Query query = <mask><mask><mask><mask><mask><mask>createQuery(String);List list = list();for (Iterator it = iterator(); hasNext();) { } commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "try { transaction = beginTransaction();Query query = createQuery(String);<mask><mask><mask>.List list = list();for (Iterator it = iterator(); hasNext();) { } commit();} catch (HibernateException e) { if (transaction != null) { rollback();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Query.list()",
    "boolean": 1,
    "context": "try { transaction = beginTransaction();Query query = createQuery(String);List list = <mask><mask><mask><mask><mask><mask>list();for (Iterator it = iterator(); hasNext();) { } commit();} catch (HibernateException e) { if (transaction != null) { rollback();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator",
    "boolean": 1,
    "context": "org.hibernate.Query query = createQuery(String);List list = list();for (<mask><mask><mask>.Iterator it = iterator(); hasNext();) { } commit();} catch (HibernateException e) { if (transaction != null) { rollback();} printStackTrace();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.iterator()",
    "boolean": 1,
    "context": "org.hibernate.Query query = createQuery(String);List list = list();for (Iterator it = <mask><mask><mask>iterator(); hasNext();) { } commit();} catch (HibernateException e) { if (transaction != null) { rollback();} printStackTrace();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator.hasNext()",
    "boolean": 1,
    "context": "org.hibernate.Query query = createQuery(String);List list = list();for (Iterator it = iterator(); <mask><mask><mask>hasNext();) { } commit();} catch (HibernateException e) { if (transaction != null) { rollback();} printStackTrace();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.commit()",
    "boolean": 1,
    "context": "org.hibernate.Query query = createQuery(String);List list = list();for (Iterator it = iterator(); hasNext();) { } <mask><mask><mask><mask><mask><mask>commit();} catch (HibernateException e) { if (transaction != null) { rollback();} printStackTrace();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.HibernateException",
    "boolean": 1,
    "context": "java.util.List list = list();for (Iterator it = iterator(); hasNext();) { } commit();} catch (<mask><mask><mask><mask><mask><mask>.HibernateException e) { if (transaction != null) { rollback();} printStackTrace();} finally { close();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.rollback()",
    "boolean": 1,
    "context": "java.util.List list = list();for (Iterator it = iterator(); hasNext();) { } commit();} catch (HibernateException e) { if (transaction != null) { <mask><mask><mask><mask><mask><mask>rollback();} printStackTrace();} finally { close();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.HibernateException.printStackTrace()",
    "boolean": 1,
    "context": "for (Iterator it = iterator(); hasNext();) { } commit();} catch (HibernateException e) { if (transaction != null) { rollback();} <mask><mask><mask><mask><mask><mask>printStackTrace();} finally { close();} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.close()",
    "boolean": 1,
    "context": "} catch (HibernateException e) { if (transaction != null) { rollback();} printStackTrace();} finally { <mask><mask><mask><mask><mask><mask>close();} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "public class hibernate_class_36 { public static void main(String[] args) { <mask><mask><mask><mask><mask><mask>.Session session = null;SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();Transaction tx = null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_36 { public static void main(String[] args) { Session session = null;<mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();Transaction tx = null;try { session = openSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.cfg.Configuration()",
    "boolean": 1,
    "context": "public class hibernate_class_36 { public static void main(String[] args) { Session session = null;SessionFactory sessionFactory = new <mask><mask><mask><mask><mask><mask>Configuration().configure().buildSessionFactory();Transaction tx = null;try { session = openSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction",
    "boolean": 1,
    "context": "public class hibernate_class_36 { public static void main(String[] args) { Session session = null;SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();<mask><mask><mask><mask><mask><mask>.Transaction tx = null;try { session = openSession();tx = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.openSession()",
    "boolean": 1,
    "context": "org.hibernate.SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();Transaction tx = null;try { session = <mask><mask><mask><mask><mask><mask>openSession();tx = beginTransaction(); commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.beginTransaction()",
    "boolean": 1,
    "context": "org.hibernate.Transaction tx = null;try { session = openSession();tx = <mask><mask><mask><mask><mask><mask>beginTransaction(); commit();} catch (Exception e) { printStackTrace();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.commit()",
    "boolean": 1,
    "context": "try { session = openSession();tx = beginTransaction(); <mask><mask><mask><mask><mask><mask>commit();} catch (Exception e) { printStackTrace();} finally { close();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.close()",
    "boolean": 1,
    "context": " commit();} catch (Exception e) { printStackTrace();} finally { <mask><mask><mask><mask><mask><mask>close();} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "public class hibernate_class_37 { public static void test() { String c = String;<mask><mask><mask><mask><mask><mask>.Session session = getSession(); beginTransaction(); save(c);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.beginTransaction()",
    "boolean": 1,
    "context": "public class hibernate_class_37 { public static void test() { String c = String;Session session = getSession(); <mask><mask><mask><mask><mask><mask>beginTransaction(); save(c); getTransaction().commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.save()",
    "boolean": 1,
    "context": "org.hibernate.Session session = getSession(); beginTransaction(); <mask><mask><mask><mask><mask><mask>save(c); getTransaction().commit();} public static void main(String[] args) { test();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.getTransaction()",
    "boolean": 1,
    "context": " beginTransaction(); save(c); <mask><mask><mask><mask><mask><mask>getTransaction().commit();} public static void main(String[] args) { test();} public static class HibernateUtil { private static final SessionFactory sessionFactory;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": " getTransaction().commit();} public static void main(String[] args) { test();} public static class HibernateUtil { private static final <mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory;static { try { sessionFactory = new AnnotationConfiguration().configure().buildSessionFactory();} catch (Throwable ex) { throw new ExceptionInInitializerError(ex);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.cfg.AnnotationConfiguration()",
    "boolean": 1,
    "context": "} public static void main(String[] args) { test();} public static class HibernateUtil { private static final SessionFactory sessionFactory;static { try { sessionFactory = new <mask><mask><mask><mask><mask><mask>AnnotationConfiguration().configure().buildSessionFactory();} catch (Throwable ex) { throw new ExceptionInInitializerError(ex);} } public static Session getSession() throws HibernateException { return openSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "static { try { sessionFactory = new AnnotationConfiguration().configure().buildSessionFactory();} catch (Throwable ex) { throw new ExceptionInInitializerError(ex);} } public static <mask><mask><mask><mask><mask><mask>.Session getSession() throws HibernateException { return openSession();} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.HibernateException",
    "boolean": 1,
    "context": "static { try { sessionFactory = new AnnotationConfiguration().configure().buildSessionFactory();} catch (Throwable ex) { throw new ExceptionInInitializerError(ex);} } public static Session getSession() throws <mask><mask><mask><mask><mask><mask>.HibernateException { return openSession();} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_38 { public static void main( args) { <mask><mask><mask><mask><mask><mask>.SessionFactory sessionFact = new Configuration().configure().buildSessionFactory();Session ses = openSession();Transaction tx = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.cfg.Configuration()",
    "boolean": 1,
    "context": "public class hibernate_class_38 { public static void main( args) { SessionFactory sessionFact = new <mask><mask><mask><mask><mask><mask>Configuration().configure().buildSessionFactory();Session ses = openSession();Transaction tx = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "public class hibernate_class_38 { public static void main( args) { SessionFactory sessionFact = new Configuration().configure().buildSessionFactory();<mask><mask><mask><mask><mask><mask>.Session ses = openSession();Transaction tx = beginTransaction();String bean = String;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.openSession()",
    "boolean": 1,
    "context": "public class hibernate_class_38 { public static void main( args) { SessionFactory sessionFact = new Configuration().configure().buildSessionFactory();Session ses = <mask><mask><mask><mask><mask><mask>openSession();Transaction tx = beginTransaction();String bean = String;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction",
    "boolean": 1,
    "context": "public class hibernate_class_38 { public static void main( args) { SessionFactory sessionFact = new Configuration().configure().buildSessionFactory();Session ses = openSession();<mask><mask><mask><mask><mask><mask>.Transaction tx = beginTransaction();String bean = String; save(bean);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.beginTransaction()",
    "boolean": 1,
    "context": "public class hibernate_class_38 { public static void main( args) { SessionFactory sessionFact = new Configuration().configure().buildSessionFactory();Session ses = openSession();Transaction tx = <mask><mask><mask><mask><mask><mask>beginTransaction();String bean = String; save(bean);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.save()",
    "boolean": 1,
    "context": "org.hibernate.Transaction tx = beginTransaction();String bean = String; <mask><mask><mask><mask><mask><mask>save(bean); commit(); close();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.commit()",
    "boolean": 1,
    "context": "java.lang.String bean = String; save(bean); <mask><mask><mask><mask><mask><mask>commit(); close();} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.close()",
    "boolean": 1,
    "context": " save(bean); commit(); <mask><mask><mask><mask><mask><mask>close();} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "j.h.n...annotation",
    "truth_type": "org.springframework.transaction.annotation",
    "full_FQN": "org.springframework.transaction.annotation.Transactional",
    "boolean": 0,
    "context": "public class hibernate_class_39 { @<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Transactional @SuppressWarnings(String) public class GenericDaoImpl<T, ID extends Serializable> implements GenericDao<T, ID> { private SessionFactory sessionFactory;public void setSessionFactory(final SessionFactory sessionFactory) { sessionFactory = sessionFactory;} public ID create(final T newInstance) { ID id = null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.Serializable",
    "boolean": 1,
    "context": "public class hibernate_class_39 { @Transactional @SuppressWarnings(String) public class GenericDaoImpl<T, ID extends <mask><mask><mask>.Serializable> implements GenericDao<T, ID> { private SessionFactory sessionFactory;public void setSessionFactory(final SessionFactory sessionFactory) { sessionFactory = sessionFactory;} public ID create(final T newInstance) { ID id = null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.ance",
    "truth_type": "org.appfuse.dao",
    "full_FQN": "org.appfuse.dao.GenericDao",
    "boolean": 0,
    "context": "public class hibernate_class_39 { @Transactional @SuppressWarnings(String) public class GenericDaoImpl<T, ID extends Serializable> implements <mask><mask><mask><mask><mask><mask><mask><mask>.GenericDao<T, ID> { private SessionFactory sessionFactory;public void setSessionFactory(final SessionFactory sessionFactory) { sessionFactory = sessionFactory;} public ID create(final T newInstance) { ID id = null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_39 { @Transactional @SuppressWarnings(String) public class GenericDaoImpl<T, ID extends Serializable> implements GenericDao<T, ID> { private <mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory;public void setSessionFactory(final SessionFactory sessionFactory) { sessionFactory = sessionFactory;} public ID create(final T newInstance) { ID id = null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_39 { @Transactional @SuppressWarnings(String) public class GenericDaoImpl<T, ID extends Serializable> implements GenericDao<T, ID> { private SessionFactory sessionFactory;public void setSessionFactory(final <mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory) { sessionFactory = sessionFactory;} public ID create(final T newInstance) { ID id = null;final Session session = openSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "public void setSessionFactory(final SessionFactory sessionFactory) { sessionFactory = sessionFactory;} public ID create(final T newInstance) { ID id = null;final <mask><mask><mask><mask><mask><mask>.Session session = openSession();final Transaction tx = beginTransaction();try { id = ((ID)  save(newInstance)));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.openSession()",
    "boolean": 1,
    "context": "public void setSessionFactory(final SessionFactory sessionFactory) { sessionFactory = sessionFactory;} public ID create(final T newInstance) { ID id = null;final Session session = <mask><mask><mask><mask><mask><mask>openSession();final Transaction tx = beginTransaction();try { id = ((ID)  save(newInstance)));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction",
    "boolean": 1,
    "context": "} public ID create(final T newInstance) { ID id = null;final Session session = openSession();final <mask><mask><mask><mask><mask><mask>.Transaction tx = beginTransaction();try { id = ((ID)  save(newInstance))); commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.beginTransaction()",
    "boolean": 1,
    "context": "} public ID create(final T newInstance) { ID id = null;final Session session = openSession();final Transaction tx = <mask><mask><mask><mask><mask><mask>beginTransaction();try { id = ((ID)  save(newInstance))); commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.save()",
    "boolean": 1,
    "context": "final Session session = openSession();final Transaction tx = beginTransaction();try { id = ((ID)  <mask><mask><mask><mask><mask><mask>save(newInstance))); commit(); close();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.commit()",
    "boolean": 1,
    "context": "final Transaction tx = beginTransaction();try { id = ((ID)  save(newInstance))); <mask><mask><mask><mask><mask><mask>commit(); close();} catch (final Exception e) { if (tx != null) { rollback();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.close()",
    "boolean": 1,
    "context": "try { id = ((ID)  save(newInstance))); commit(); <mask><mask><mask><mask><mask><mask>close();} catch (final Exception e) { if (tx != null) { rollback();} printStackTrace();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.rollback()",
    "boolean": 1,
    "context": " commit(); close();} catch (final Exception e) { if (tx != null) { <mask><mask><mask><mask><mask><mask>rollback();} printStackTrace();} finally { if  isOpen()) { close();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.isOpen()",
    "boolean": 1,
    "context": "} catch (final Exception e) { if (tx != null) { rollback();} printStackTrace();} finally { if  <mask><mask><mask><mask><mask><mask>isOpen()) { close();} } return id;} public T read(final ID primaryKey) { T id = null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.close()",
    "boolean": 1,
    "context": "} catch (final Exception e) { if (tx != null) { rollback();} printStackTrace();} finally { if  isOpen()) { <mask><mask><mask><mask><mask><mask>close();} } return id;} public T read(final ID primaryKey) { T id = null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "} } return id;} public T read(final ID primaryKey) { T id = null;final <mask><mask><mask><mask><mask><mask>.Session session = openSession();final Transaction tx = beginTransaction();try { id = ((T)  get(String, primaryKey)));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.openSession()",
    "boolean": 1,
    "context": "} } return id;} public T read(final ID primaryKey) { T id = null;final Session session = <mask><mask><mask><mask><mask><mask>openSession();final Transaction tx = beginTransaction();try { id = ((T)  get(String, primaryKey)));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction",
    "boolean": 1,
    "context": "} public T read(final ID primaryKey) { T id = null;final Session session = openSession();final <mask><mask><mask><mask><mask><mask>.Transaction tx = beginTransaction();try { id = ((T)  get(String, primaryKey))); commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.beginTransaction()",
    "boolean": 1,
    "context": "} public T read(final ID primaryKey) { T id = null;final Session session = openSession();final Transaction tx = <mask><mask><mask><mask><mask><mask>beginTransaction();try { id = ((T)  get(String, primaryKey))); commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.get()",
    "boolean": 1,
    "context": "final Session session = openSession();final Transaction tx = beginTransaction();try { id = ((T)  <mask><mask><mask><mask><mask><mask>get(String, primaryKey))); commit(); close();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.commit()",
    "boolean": 1,
    "context": "final Transaction tx = beginTransaction();try { id = ((T)  get(String, primaryKey))); <mask><mask><mask><mask><mask><mask>commit(); close();} catch (final Exception e) { if (tx != null) { rollback();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.close()",
    "boolean": 1,
    "context": "try { id = ((T)  get(String, primaryKey))); commit(); <mask><mask><mask><mask><mask><mask>close();} catch (final Exception e) { if (tx != null) { rollback();} printStackTrace();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.rollback()",
    "boolean": 1,
    "context": " commit(); close();} catch (final Exception e) { if (tx != null) { <mask><mask><mask><mask><mask><mask>rollback();} printStackTrace();} finally { if  isOpen()) { close();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.isOpen()",
    "boolean": 1,
    "context": "} catch (final Exception e) { if (tx != null) { rollback();} printStackTrace();} finally { if  <mask><mask><mask><mask><mask><mask>isOpen()) { close();} } return id;} public void update(final T transientObject) { final Session session = openSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.close()",
    "boolean": 1,
    "context": "} catch (final Exception e) { if (tx != null) { rollback();} printStackTrace();} finally { if  isOpen()) { <mask><mask><mask><mask><mask><mask>close();} } return id;} public void update(final T transientObject) { final Session session = openSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "} finally { if  isOpen()) { close();} } return id;} public void update(final T transientObject) { final <mask><mask><mask><mask><mask><mask>.Session session = openSession();final Transaction tx = beginTransaction();try { saveOrUpdate(transientObject);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.openSession()",
    "boolean": 1,
    "context": "} finally { if  isOpen()) { close();} } return id;} public void update(final T transientObject) { final Session session = <mask><mask><mask><mask><mask><mask>openSession();final Transaction tx = beginTransaction();try { saveOrUpdate(transientObject);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction",
    "boolean": 1,
    "context": "} } return id;} public void update(final T transientObject) { final Session session = openSession();final <mask><mask><mask><mask><mask><mask>.Transaction tx = beginTransaction();try { saveOrUpdate(transientObject); commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.beginTransaction()",
    "boolean": 1,
    "context": "} } return id;} public void update(final T transientObject) { final Session session = openSession();final Transaction tx = <mask><mask><mask><mask><mask><mask>beginTransaction();try { saveOrUpdate(transientObject); commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.saveOrUpdate()",
    "boolean": 1,
    "context": "} public void update(final T transientObject) { final Session session = openSession();final Transaction tx = beginTransaction();try { <mask><mask><mask><mask><mask><mask>saveOrUpdate(transientObject); commit(); close();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.commit()",
    "boolean": 1,
    "context": "final Transaction tx = beginTransaction();try { saveOrUpdate(transientObject); <mask><mask><mask><mask><mask><mask>commit(); close();} catch (final Exception e) { if (tx != null) { rollback();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.close()",
    "boolean": 1,
    "context": "try { saveOrUpdate(transientObject); commit(); <mask><mask><mask><mask><mask><mask>close();} catch (final Exception e) { if (tx != null) { rollback();} printStackTrace();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.rollback()",
    "boolean": 1,
    "context": " commit(); close();} catch (final Exception e) { if (tx != null) { <mask><mask><mask><mask><mask><mask>rollback();} printStackTrace();} finally { if  isOpen()) { close();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.isOpen()",
    "boolean": 1,
    "context": "} catch (final Exception e) { if (tx != null) { rollback();} printStackTrace();} finally { if  <mask><mask><mask><mask><mask><mask>isOpen()) { close();} } } public void delete(final T persistentObject) { final Session session = openSession();final Transaction tx = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.close()",
    "boolean": 1,
    "context": "} catch (final Exception e) { if (tx != null) { rollback();} printStackTrace();} finally { if  isOpen()) { <mask><mask><mask><mask><mask><mask>close();} } } public void delete(final T persistentObject) { final Session session = openSession();final Transaction tx = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "} printStackTrace();} finally { if  isOpen()) { close();} } } public void delete(final T persistentObject) { final <mask><mask><mask><mask><mask><mask>.Session session = openSession();final Transaction tx = beginTransaction();try { delete(persistentObject);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.openSession()",
    "boolean": 1,
    "context": "} printStackTrace();} finally { if  isOpen()) { close();} } } public void delete(final T persistentObject) { final Session session = <mask><mask><mask><mask><mask><mask>openSession();final Transaction tx = beginTransaction();try { delete(persistentObject);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction",
    "boolean": 1,
    "context": "} finally { if  isOpen()) { close();} } } public void delete(final T persistentObject) { final Session session = openSession();final <mask><mask><mask><mask><mask><mask>.Transaction tx = beginTransaction();try { delete(persistentObject); commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.beginTransaction()",
    "boolean": 1,
    "context": "} finally { if  isOpen()) { close();} } } public void delete(final T persistentObject) { final Session session = openSession();final Transaction tx = <mask><mask><mask><mask><mask><mask>beginTransaction();try { delete(persistentObject); commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.delete()",
    "boolean": 1,
    "context": "} } } public void delete(final T persistentObject) { final Session session = openSession();final Transaction tx = beginTransaction();try { <mask><mask><mask><mask><mask><mask>delete(persistentObject); commit(); close();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.commit()",
    "boolean": 1,
    "context": "final Transaction tx = beginTransaction();try { delete(persistentObject); <mask><mask><mask><mask><mask><mask>commit(); close();} catch (final Exception e) { if (tx != null) { rollback();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.close()",
    "boolean": 1,
    "context": "try { delete(persistentObject); commit(); <mask><mask><mask><mask><mask><mask>close();} catch (final Exception e) { if (tx != null) { rollback();} printStackTrace();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.rollback()",
    "boolean": 1,
    "context": " commit(); close();} catch (final Exception e) { if (tx != null) { <mask><mask><mask><mask><mask><mask>rollback();} printStackTrace();} finally { if  isOpen()) { close();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.isOpen()",
    "boolean": 1,
    "context": "} catch (final Exception e) { if (tx != null) { rollback();} printStackTrace();} finally { if  <mask><mask><mask><mask><mask><mask>isOpen()) { close();} } } @Override public boolean exists(ID arg0) { return false;} @Override public List<T> findByNamedQuery(String arg0, Map<String, Object> arg1) { return null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.close()",
    "boolean": 1,
    "context": "} catch (final Exception e) { if (tx != null) { rollback();} printStackTrace();} finally { if  isOpen()) { <mask><mask><mask><mask><mask><mask>close();} } } @Override public boolean exists(ID arg0) { return false;} @Override public List<T> findByNamedQuery(String arg0, Map<String, Object> arg1) { return null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "} finally { if  isOpen()) { close();} } } @Override public boolean exists(ID arg0) { return false;} @Override public <mask><mask><mask>.List<T> findByNamedQuery(String arg0, Map<String, Object> arg1) { return null;} @Override public T get(ID arg0) { return null;} @Override public List<T> getAll() { return null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map",
    "boolean": 1,
    "context": "} finally { if  isOpen()) { close();} } } @Override public boolean exists(ID arg0) { return false;} @Override public List<T> findByNamedQuery(String arg0, <mask><mask><mask>.Map<String, Object> arg1) { return null;} @Override public T get(ID arg0) { return null;} @Override public List<T> getAll() { return null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "} @Override public List<T> findByNamedQuery(String arg0, Map<String, Object> arg1) { return null;} @Override public T get(ID arg0) { return null;} @Override public <mask><mask><mask>.List<T> getAll() { return null;} @Override public List<T> getAllDistinct() { return null;} @Override public void reindex() { } @Override public void reindexAll(boolean arg0) { } @Override public void remove(ID arg0) { } @Override public T save(T arg0) { return null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "} @Override public T get(ID arg0) { return null;} @Override public List<T> getAll() { return null;} @Override public <mask><mask><mask>.List<T> getAllDistinct() { return null;} @Override public void reindex() { } @Override public void reindexAll(boolean arg0) { } @Override public void remove(ID arg0) { } @Override public T save(T arg0) { return null;} @Override public List<T> search(String arg0) throws SearchException { return null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "} @Override public List<T> getAllDistinct() { return null;} @Override public void reindex() { } @Override public void reindexAll(boolean arg0) { } @Override public void remove(ID arg0) { } @Override public T save(T arg0) { return null;} @Override public <mask><mask><mask>.List<T> search(String arg0) throws SearchException { return null;} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "javax.naming.directory",
    "truth_type": "org.appfuse.dao",
    "full_FQN": "org.appfuse.dao.SearchException",
    "boolean": 0,
    "context": "} @Override public List<T> getAllDistinct() { return null;} @Override public void reindex() { } @Override public void reindexAll(boolean arg0) { } @Override public void remove(ID arg0) { } @Override public T save(T arg0) { return null;} @Override public List<T> search(String arg0) throws <mask><mask><mask><mask><mask><mask><mask><mask>.SearchException { return null;} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_4 { private static final <mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory;static { try { sessionFactory = new Configuration().configure().buildSessionFactory();} catch (HibernateException he) { println(he);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.cfg.Configuration()",
    "boolean": 1,
    "context": "public class hibernate_class_4 { private static final SessionFactory sessionFactory;static { try { sessionFactory = new <mask><mask><mask><mask><mask><mask>Configuration().configure().buildSessionFactory();} catch (HibernateException he) { println(he);throw new ExceptionInInitializerError(he);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.HibernateException",
    "boolean": 1,
    "context": "public class hibernate_class_4 { private static final SessionFactory sessionFactory;static { try { sessionFactory = new Configuration().configure().buildSessionFactory();} catch (<mask><mask><mask><mask><mask><mask>.HibernateException he) { println(he);throw new ExceptionInInitializerError(he);} } public static SessionFactory getSessionFactory() { return sessionFactory;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "} catch (HibernateException he) { println(he);throw new ExceptionInInitializerError(he);} } public static <mask><mask><mask><mask><mask><mask>.SessionFactory getSessionFactory() { return sessionFactory;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "public class hibernate_class_40 { public static void main(String[] args) { <mask><mask><mask><mask><mask><mask>.Session session = null;try { SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();session = openSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_40 { public static void main(String[] args) { Session session = null;try { <mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();session = openSession();println(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.cfg.Configuration()",
    "boolean": 1,
    "context": "public class hibernate_class_40 { public static void main(String[] args) { Session session = null;try { SessionFactory sessionFactory = new <mask><mask><mask><mask><mask><mask>Configuration().configure().buildSessionFactory();session = openSession();println(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.openSession()",
    "boolean": 1,
    "context": "public class hibernate_class_40 { public static void main(String[] args) { Session session = null;try { SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();session = <mask><mask><mask><mask><mask><mask>openSession();println(String);Query q = getNamedQuery(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Query",
    "boolean": 1,
    "context": "session = openSession();println(String);<mask><mask><mask><mask><mask><mask>.Query q = getNamedQuery(String);print(String);List l = list();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.getNamedQuery()",
    "boolean": 1,
    "context": "session = openSession();println(String);Query q = <mask><mask><mask><mask><mask><mask>getNamedQuery(String);print(String);List l = list();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "org.hibernate.Query q = getNamedQuery(String);print(String);<mask><mask><mask>.List l = list();for (Iterator it = iterator(); hasNext();) { Object[] row = ((Object[])  next()));println(length);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Query.list()",
    "boolean": 1,
    "context": "org.hibernate.Query q = getNamedQuery(String);print(String);List l = <mask><mask><mask><mask><mask><mask>list();for (Iterator it = iterator(); hasNext();) { Object[] row = ((Object[])  next()));println(length);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator",
    "boolean": 1,
    "context": "java.lang.System.out.print(String);List l = list();for (<mask><mask><mask>.Iterator it = iterator(); hasNext();) { Object[] row = ((Object[])  next()));println(length);} } catch (Exception e) { printStackTrace();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.iterator()",
    "boolean": 1,
    "context": "java.lang.System.out.print(String);List l = list();for (Iterator it = <mask><mask><mask>iterator(); hasNext();) { Object[] row = ((Object[])  next()));println(length);} } catch (Exception e) { printStackTrace();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator.hasNext()",
    "boolean": 1,
    "context": "java.lang.System.out.print(String);List l = list();for (Iterator it = iterator(); <mask><mask><mask>hasNext();) { Object[] row = ((Object[])  next()));println(length);} } catch (Exception e) { printStackTrace();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator.next()",
    "boolean": 1,
    "context": "java.lang.System.out.print(String);List l = list();for (Iterator it = iterator(); hasNext();) { Object[] row = ((Object[])  <mask><mask><mask>next()));println(length);} } catch (Exception e) { printStackTrace();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.flush()",
    "boolean": 1,
    "context": "java.lang.System.out.println(length);} } catch (Exception e) { printStackTrace();} finally { <mask><mask><mask><mask><mask><mask>flush(); close();} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.close()",
    "boolean": 1,
    "context": "} } catch (Exception e) { printStackTrace();} finally { flush(); <mask><mask><mask><mask><mask><mask>close();} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.mapping",
    "truth_type": "org.hibernate.mapping",
    "full_FQN": "org.hibernate.mapping.List",
    "boolean": 1,
    "context": "public class hibernate_class_41 { @SuppressWarnings(String) public static <mask><mask><mask><mask><mask><mask><mask><mask><mask>.List list(Class<?> className, int start, int limit, String[] searchFilter) { Session session = getSessionFactory().openSession();Transaction transaction = null;try { transaction = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "public class hibernate_class_41 { @SuppressWarnings(String) public static List list(Class<?> className, int start, int limit, String[] searchFilter) { <mask><mask><mask><mask><mask><mask>.Session session = getSessionFactory().openSession();Transaction transaction = null;try { transaction = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.internal.nScope",
    "truth_type": "hibernate.HibernateUtil",
    "full_FQN": "hibernate.HibernateUtil.getSessionFactory()",
    "boolean": 0,
    "context": "public class hibernate_class_41 { @SuppressWarnings(String) public static List list(Class<?> className, int start, int limit, String[] searchFilter) { Session session = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.getSessionFactory().openSession();Transaction transaction = null;try { transaction = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction",
    "boolean": 1,
    "context": "public class hibernate_class_41 { @SuppressWarnings(String) public static List list(Class<?> className, int start, int limit, String[] searchFilter) { Session session = getSessionFactory().openSession();<mask><mask><mask><mask><mask><mask>.Transaction transaction = null;try { transaction = beginTransaction();Criteria criteria = createCriteria(className);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.beginTransaction()",
    "boolean": 1,
    "context": "public class hibernate_class_41 { @SuppressWarnings(String) public static List list(Class<?> className, int start, int limit, String[] searchFilter) { Session session = getSessionFactory().openSession();Transaction transaction = null;try { transaction = <mask><mask><mask><mask><mask><mask>beginTransaction();Criteria criteria = createCriteria(className); setFirstResult(start);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Criteria",
    "boolean": 0,
    "context": "org.hibernate.Transaction transaction = null;try { transaction = beginTransaction();<mask><mask><mask><mask><mask><mask>.Criteria criteria = createCriteria(className); setFirstResult(start); setMaxResults(limit);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.createCriteria()",
    "boolean": 1,
    "context": "org.hibernate.Transaction transaction = null;try { transaction = beginTransaction();Criteria criteria = <mask><mask><mask><mask><mask><mask>createCriteria(className); setFirstResult(start); setMaxResults(limit);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Criteria.setFirstResult()",
    "boolean": 1,
    "context": "try { transaction = beginTransaction();Criteria criteria = createCriteria(className); <mask><mask><mask><mask><mask><mask>setFirstResult(start); setMaxResults(limit);for (String sf : searchFilter) { String[] values = null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "j.arta.persate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Criteria.setMaxResults()",
    "boolean": 0,
    "context": "org.hibernate.Criteria criteria = createCriteria(className); setFirstResult(start); <mask><mask><mask><mask><mask><mask>setMaxResults(limit);for (String sf : searchFilter) { String[] values = null;if (values == null) { if (length == 1) { add(eq(sf, values[0]));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.artaibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Criteria.add()",
    "boolean": 0,
    "context": " setMaxResults(limit);for (String sf : searchFilter) { String[] values = null;if (values == null) { if (length == 1) { <mask><mask><mask><mask><mask><mask>add(eq(sf, values[0]));} else { add(in(sf, values));} } } commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.criteria",
    "truth_type": "org.hibernate.criterion",
    "full_FQN": "org.hibernate.criterion.Restrictions.eq()",
    "boolean": 0,
    "context": " setMaxResults(limit);for (String sf : searchFilter) { String[] values = null;if (values == null) { if (length == 1) { add(<mask><mask><mask><mask><mask><mask><mask><mask><mask>eq(sf, values[0]));} else { add(in(sf, values));} } } commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Criteria.add()",
    "boolean": 0,
    "context": "for (String sf : searchFilter) { String[] values = null;if (values == null) { if (length == 1) { add(eq(sf, values[0]));} else { <mask><mask><mask><mask><mask><mask>add(in(sf, values));} } } commit();} catch (Exception e) { rollback();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.criteria",
    "truth_type": "org.hibernate.criterion",
    "full_FQN": "org.hibernate.criterion.Restrictions.in()",
    "boolean": 0,
    "context": "for (String sf : searchFilter) { String[] values = null;if (values == null) { if (length == 1) { add(eq(sf, values[0]));} else { add(<mask><mask><mask><mask><mask><mask><mask><mask><mask>in(sf, values));} } } commit();} catch (Exception e) { rollback();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.commit()",
    "boolean": 1,
    "context": "if (values == null) { if (length == 1) { add(eq(sf, values[0]));} else { add(in(sf, values));} } } <mask><mask><mask><mask><mask><mask>commit();} catch (Exception e) { rollback(); printStackTrace();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.rollback()",
    "boolean": 1,
    "context": "} else { add(in(sf, values));} } } commit();} catch (Exception e) { <mask><mask><mask><mask><mask><mask>rollback(); printStackTrace();} finally { close();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.close()",
    "boolean": 1,
    "context": "} catch (Exception e) { rollback(); printStackTrace();} finally { <mask><mask><mask><mask><mask><mask>close();} return null;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.commons.logging",
    "truth_type": "org.apache.commons.logging",
    "full_FQN": "org.apache.commons.logging.Log",
    "boolean": 1,
    "context": "public class hibernate_class_42 { private static final <mask><mask><mask><mask><mask><mask><mask><mask><mask>.Log log = getLog(class);private final SessionFactory sessionFactory = getSessionFactory();protected SessionFactory getSessionFactory() { try { return ((SessionFactory) (new InitialContext().lookup(String)));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.commons.logging",
    "truth_type": "org.apache.commons.logging",
    "full_FQN": "org.apache.commons.logging.LogFactory.getLog()",
    "boolean": 1,
    "context": "public class hibernate_class_42 { private static final Log log = <mask><mask><mask><mask><mask><mask><mask><mask><mask>getLog(class);private final SessionFactory sessionFactory = getSessionFactory();protected SessionFactory getSessionFactory() { try { return ((SessionFactory) (new InitialContext().lookup(String)));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_42 { private static final Log log = getLog(class);private final <mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory = getSessionFactory();protected SessionFactory getSessionFactory() { try { return ((SessionFactory) (new InitialContext().lookup(String)));} catch (Exception e) { error(String, e);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_42 { private static final Log log = getLog(class);private final SessionFactory sessionFactory = getSessionFactory();protected <mask><mask><mask><mask><mask><mask>.SessionFactory getSessionFactory() { try { return ((SessionFactory) (new InitialContext().lookup(String)));} catch (Exception e) { error(String, e);throw new IllegalStateException(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_42 { private static final Log log = getLog(class);private final SessionFactory sessionFactory = getSessionFactory();protected SessionFactory getSessionFactory() { try { return ((<mask><mask><mask><mask><mask><mask>.SessionFactory) (new InitialContext().lookup(String)));} catch (Exception e) { error(String, e);throw new IllegalStateException(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "javax.naming",
    "full_FQN": "javax.naming.InitialContext()",
    "boolean": 0,
    "context": "public class hibernate_class_42 { private static final Log log = getLog(class);private final SessionFactory sessionFactory = getSessionFactory();protected SessionFactory getSessionFactory() { try { return ((SessionFactory) (new <mask><mask><mask><mask><mask><mask>.InitialContext().lookup(String)));} catch (Exception e) { error(String, e);throw new IllegalStateException(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.getCurrentSession()",
    "boolean": 1,
    "context": "throw new IllegalStateException(String);} } public void persist() { debug(String);try { <mask><mask><mask><mask><mask><mask>getCurrentSession().persist(String);debug(String);} catch (RuntimeException re) { error(String, re);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.getCurrentSession()",
    "boolean": 1,
    "context": "throw re;} } public void attachDirty() { debug(String);try { <mask><mask><mask><mask><mask><mask>getCurrentSession().saveOrUpdate(String);debug(String);} catch (RuntimeException re) { error(String, re);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.getCurrentSession()",
    "boolean": 1,
    "context": "throw re;} } public void attachClean() { debug(String);try { <mask><mask><mask><mask><mask><mask>getCurrentSession().lock(String, sessionFactory, null);debug(String);} catch (RuntimeException re) { error(String, re);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.getCurrentSession()",
    "boolean": 1,
    "context": "throw re;} } public void delete() { debug(String);try { <mask><mask><mask><mask><mask><mask>getCurrentSession().delete(String);debug(String);} catch (RuntimeException re) { error(String, re);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "} catch (RuntimeException re) { error(String, re);throw re;} } public <mask><mask><mask>.List findByExample() { debug(String);try { Object instance = null;List results = getCurrentSession().createCriteria(String).add(create(instance)).list();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "} } public List findByExample() { debug(String);try { Object instance = null;<mask><mask><mask>.List results = getCurrentSession().createCriteria(String).add(create(instance)).list();debug(String + size());return results;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.getCurrentSession()",
    "boolean": 1,
    "context": "} } public List findByExample() { debug(String);try { Object instance = null;List results = <mask><mask><mask><mask><mask><mask>getCurrentSession().createCriteria(String).add(create(instance)).list();debug(String + size());return results;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.jatial",
    "truth_type": "org.hibernate.criterion",
    "full_FQN": "org.hibernate.criterion.Example.create()",
    "boolean": 0,
    "context": "} } public List findByExample() { debug(String);try { Object instance = null;List results = getCurrentSession().createCriteria(String).add(<mask><mask><mask><mask><mask><mask><mask><mask><mask>create(instance)).list();debug(String + size());return results;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.size()",
    "boolean": 1,
    "context": "try { Object instance = null;List results = getCurrentSession().createCriteria(String).add(create(instance)).list();debug(String + <mask><mask><mask>size());return results;} catch (RuntimeException re) { error(String, re);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.jboss.logging",
    "truth_type": "org.apache.log4j",
    "full_FQN": "org.apache.log4j.Logger",
    "boolean": 0,
    "context": "public class hibernate_class_43 { private static <mask><mask><mask><mask><mask><mask><mask>.Logger log = getLogger(class);private static SessionFactory sessionFactory;private static String confFile = String;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apacheboss.logging",
    "truth_type": "org.apache.log4j",
    "full_FQN": "org.apache.log4j.Logger.getLogger()",
    "boolean": 0,
    "context": "public class hibernate_class_43 { private static Logger log = <mask><mask><mask><mask><mask><mask><mask>getLogger(class);private static SessionFactory sessionFactory;private static String confFile = String;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_43 { private static Logger log = getLogger(class);private static <mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory;private static String confFile = String;private static final ThreadLocal<Session> threadSession = new ThreadLocal<Session>();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "private static SessionFactory sessionFactory;private static String confFile = String;private static final ThreadLocal<<mask><mask><mask><mask><mask><mask>.Session> threadSession = new ThreadLocal<Session>();private hibernate_class_43() { } public static void buildSessionFactory() { Configuration configuration = new Configuration();synchronized(class) { if (sessionFactory == null) { try { Properties properties = new Properties();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "private static SessionFactory sessionFactory;private static String confFile = String;private static final ThreadLocal<Session> threadSession = new ThreadLocal<<mask><mask><mask><mask><mask><mask>.Session>();private hibernate_class_43() { } public static void buildSessionFactory() { Configuration configuration = new Configuration();synchronized(class) { if (sessionFactory == null) { try { Properties properties = new Properties();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.Configuration",
    "boolean": 1,
    "context": "private static String confFile = String;private static final ThreadLocal<Session> threadSession = new ThreadLocal<Session>();private hibernate_class_43() { } public static void buildSessionFactory() { <mask><mask><mask><mask><mask><mask><mask><mask>.Configuration configuration = new Configuration();synchronized(class) { if (sessionFactory == null) { try { Properties properties = new Properties(); load(getClassLoader().getResourceAsStream(confFile));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.cfg.Configuration()",
    "boolean": 1,
    "context": "private static String confFile = String;private static final ThreadLocal<Session> threadSession = new ThreadLocal<Session>();private hibernate_class_43() { } public static void buildSessionFactory() { Configuration configuration = new <mask><mask><mask><mask><mask><mask>Configuration();synchronized(class) { if (sessionFactory == null) { try { Properties properties = new Properties(); load(getClassLoader().getResourceAsStream(confFile));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Properties",
    "boolean": 1,
    "context": "private static final ThreadLocal<Session> threadSession = new ThreadLocal<Session>();private hibernate_class_43() { } public static void buildSessionFactory() { Configuration configuration = new Configuration();synchronized(class) { if (sessionFactory == null) { try { <mask><mask><mask>.Properties properties = new Properties(); load(getClassLoader().getResourceAsStream(confFile)); setProperties(properties);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Properties()",
    "boolean": 1,
    "context": "private static final ThreadLocal<Session> threadSession = new ThreadLocal<Session>();private hibernate_class_43() { } public static void buildSessionFactory() { Configuration configuration = new Configuration();synchronized(class) { if (sessionFactory == null) { try { Properties properties = new <mask><mask><mask>.Properties(); load(getClassLoader().getResourceAsStream(confFile)); setProperties(properties);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Properties.load()",
    "boolean": 1,
    "context": "private hibernate_class_43() { } public static void buildSessionFactory() { Configuration configuration = new Configuration();synchronized(class) { if (sessionFactory == null) { try { Properties properties = new Properties(); <mask><mask><mask>load(getClassLoader().getResourceAsStream(confFile)); setProperties(properties);} catch (Exception e) { fatal(String + confFile);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.Configuration.setProperties()",
    "boolean": 1,
    "context": "synchronized(class) { if (sessionFactory == null) { try { Properties properties = new Properties(); load(getClassLoader().getResourceAsStream(confFile)); <mask><mask><mask><mask><mask><mask><mask><mask>setProperties(properties);} catch (Exception e) { fatal(String + confFile);throw new RuntimeException(String + confFile, e);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.Configuration.configure()",
    "boolean": 1,
    "context": "} catch (Exception e) { fatal(String + confFile);throw new RuntimeException(String + confFile, e);} sessionFactory = <mask><mask><mask><mask><mask><mask><mask><mask>configure().buildSessionFactory();} } } public static SessionFactory getSessionFactory() { if (sessionFactory == null) { buildSessionFactory();} return sessionFactory;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "throw new RuntimeException(String + confFile, e);} sessionFactory = configure().buildSessionFactory();} } } public static <mask><mask><mask><mask><mask><mask>.SessionFactory getSessionFactory() { if (sessionFactory == null) { buildSessionFactory();} return sessionFactory;} public static Session getCurrentSession() { if (!getSessionFactory().getCurrentSession().isOpen()) { getSessionFactory().openSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "} } } public static SessionFactory getSessionFactory() { if (sessionFactory == null) { buildSessionFactory();} return sessionFactory;} public static <mask><mask><mask><mask><mask><mask>.Session getCurrentSession() { if (!getSessionFactory().getCurrentSession().isOpen()) { getSessionFactory().openSession();} return getSessionFactory().getCurrentSession();} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.servlet.action",
    "truth_type": "org.apache.struts.actions",
    "full_FQN": "org.apache.struts.actions.DispatchAction",
    "boolean": 0,
    "context": "public class hibernate_class_44 extends <mask><mask><mask><mask><mask><mask><mask><mask>.DispatchAction { public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { if (isDebugEnabled()) { debug(String);} try { } catch (Exception ex) { printStackTrace();return findForward(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.servuts.action",
    "truth_type": "org.apache.struts.action",
    "full_FQN": "org.apache.struts.action.ActionForward",
    "boolean": 0,
    "context": "public class hibernate_class_44 extends DispatchAction { public <mask><mask><mask><mask><mask><mask><mask><mask>.ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { if (isDebugEnabled()) { debug(String);} try { } catch (Exception ex) { printStackTrace();return findForward(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.struts.action",
    "truth_type": "org.apache.struts.action",
    "full_FQN": "org.apache.struts.action.ActionMapping",
    "boolean": 1,
    "context": "public class hibernate_class_44 extends DispatchAction { public ActionForward add(<mask><mask><mask><mask><mask><mask><mask><mask>.ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { if (isDebugEnabled()) { debug(String);} try { } catch (Exception ex) { printStackTrace();return findForward(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.servlet.action",
    "truth_type": "org.apache.struts.action",
    "full_FQN": "org.apache.struts.action.ActionForm",
    "boolean": 0,
    "context": "public class hibernate_class_44 extends DispatchAction { public ActionForward add(ActionMapping mapping, <mask><mask><mask><mask><mask><mask><mask><mask>.ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { if (isDebugEnabled()) { debug(String);} try { } catch (Exception ex) { printStackTrace();return findForward(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "javax.servlet.http",
    "truth_type": "javax.servlet.http",
    "full_FQN": "javax.servlet.http.HttpServletRequest",
    "boolean": 1,
    "context": "public class hibernate_class_44 extends DispatchAction { public ActionForward add(ActionMapping mapping, ActionForm form, <mask><mask><mask><mask><mask><mask><mask><mask>.HttpServletRequest request, HttpServletResponse response) throws Exception { if (isDebugEnabled()) { debug(String);} try { } catch (Exception ex) { printStackTrace();return findForward(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "javax.servlet.http",
    "truth_type": "javax.servlet.http",
    "full_FQN": "javax.servlet.http.HttpServletResponse",
    "boolean": 1,
    "context": "public class hibernate_class_44 extends DispatchAction { public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, <mask><mask><mask><mask><mask><mask><mask><mask>.HttpServletResponse response) throws Exception { if (isDebugEnabled()) { debug(String);} try { } catch (Exception ex) { printStackTrace();return findForward(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.struts.action",
    "truth_type": "org.apache.struts.action",
    "full_FQN": "org.apache.struts.action.ActionMapping.findForward()",
    "boolean": 1,
    "context": "public class hibernate_class_44 extends DispatchAction { public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { if (isDebugEnabled()) { debug(String);} try { } catch (Exception ex) { printStackTrace();return <mask><mask><mask><mask><mask><mask><mask><mask>findForward(String);} return findForward(String);} public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { SessionFactory sessionFactory = null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.struts.action",
    "truth_type": "org.apache.struts.action",
    "full_FQN": "org.apache.struts.action.ActionMapping.findForward()",
    "boolean": 1,
    "context": "} try { } catch (Exception ex) { printStackTrace();return findForward(String);} return <mask><mask><mask><mask><mask><mask><mask><mask>findForward(String);} public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { SessionFactory sessionFactory = null;Session session = null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.servlet.action",
    "truth_type": "org.apache.struts.action",
    "full_FQN": "org.apache.struts.action.ActionForward",
    "boolean": 0,
    "context": "return findForward(String);} return findForward(String);} public <mask><mask><mask><mask><mask><mask><mask><mask>.ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { SessionFactory sessionFactory = null;Session session = null;println(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.struts.action",
    "truth_type": "org.apache.struts.action",
    "full_FQN": "org.apache.struts.action.ActionMapping",
    "boolean": 1,
    "context": "return findForward(String);} return findForward(String);} public ActionForward save(<mask><mask><mask><mask><mask><mask><mask><mask>.ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { SessionFactory sessionFactory = null;Session session = null;println(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.ax.servlet.action",
    "truth_type": "org.apache.struts.action",
    "full_FQN": "org.apache.struts.action.ActionForm",
    "boolean": 0,
    "context": "return findForward(String);} return findForward(String);} public ActionForward save(ActionMapping mapping, <mask><mask><mask><mask><mask><mask><mask><mask>.ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { SessionFactory sessionFactory = null;Session session = null;println(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "javax.servlet.http",
    "truth_type": "javax.servlet.http",
    "full_FQN": "javax.servlet.http.HttpServletRequest",
    "boolean": 1,
    "context": "return findForward(String);} return findForward(String);} public ActionForward save(ActionMapping mapping, ActionForm form, <mask><mask><mask><mask><mask><mask><mask><mask>.HttpServletRequest request, HttpServletResponse response) throws Exception { SessionFactory sessionFactory = null;Session session = null;println(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "javax.servlet.http",
    "truth_type": "javax.servlet.http",
    "full_FQN": "javax.servlet.http.HttpServletResponse",
    "boolean": 1,
    "context": "return findForward(String);} return findForward(String);} public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, <mask><mask><mask><mask><mask><mask><mask><mask>.HttpServletResponse response) throws Exception { SessionFactory sessionFactory = null;Session session = null;println(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "return findForward(String);} return findForward(String);} public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { <mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory = null;Session session = null;println(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "} return findForward(String);} public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { SessionFactory sessionFactory = null;<mask><mask><mask><mask><mask><mask>.Session session = null;println(String);try { sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "org.hibernate.Session session = null;println(String);try { sessionFactory = ((<mask><mask><mask><mask><mask><mask>.SessionFactory) (getServletContext().getAttribute(String)));session = openSession();Transaction tx = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.openSession()",
    "boolean": 1,
    "context": "java.lang.System.out.println(String);try { sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));session = <mask><mask><mask><mask><mask><mask>openSession();Transaction tx = beginTransaction();println(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction",
    "boolean": 1,
    "context": "try { sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));session = openSession();<mask><mask><mask><mask><mask><mask>.Transaction tx = beginTransaction();println(String); commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.beginTransaction()",
    "boolean": 1,
    "context": "try { sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));session = openSession();Transaction tx = <mask><mask><mask><mask><mask><mask>beginTransaction();println(String); commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.commit()",
    "boolean": 1,
    "context": "org.hibernate.Transaction tx = beginTransaction();println(String); <mask><mask><mask><mask><mask><mask>commit();} catch (Exception e) { printStackTrace();} return findForward(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.struts.action",
    "truth_type": "org.apache.struts.action",
    "full_FQN": "org.apache.struts.action.ActionMapping.findForward()",
    "boolean": 1,
    "context": " commit();} catch (Exception e) { printStackTrace();} return <mask><mask><mask><mask><mask><mask><mask><mask>findForward(String);} public ActionForward search(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { println(String);SessionFactory sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.servlet.action",
    "truth_type": "org.apache.struts.action",
    "full_FQN": "org.apache.struts.action.ActionForward",
    "boolean": 0,
    "context": "} catch (Exception e) { printStackTrace();} return findForward(String);} public <mask><mask><mask><mask><mask><mask><mask><mask>.ActionForward search(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { println(String);SessionFactory sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));HttpSession session1 = getSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.struts.action",
    "truth_type": "org.apache.struts.action",
    "full_FQN": "org.apache.struts.action.ActionMapping",
    "boolean": 1,
    "context": "} catch (Exception e) { printStackTrace();} return findForward(String);} public ActionForward search(<mask><mask><mask><mask><mask><mask><mask><mask>.ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { println(String);SessionFactory sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));HttpSession session1 = getSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.servlet.action",
    "truth_type": "org.apache.struts.action",
    "full_FQN": "org.apache.struts.action.ActionForm",
    "boolean": 0,
    "context": "} catch (Exception e) { printStackTrace();} return findForward(String);} public ActionForward search(ActionMapping mapping, <mask><mask><mask><mask><mask><mask><mask><mask>.ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { println(String);SessionFactory sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));HttpSession session1 = getSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "javax.servlet.http",
    "truth_type": "javax.servlet.http",
    "full_FQN": "javax.servlet.http.HttpServletRequest",
    "boolean": 1,
    "context": "} catch (Exception e) { printStackTrace();} return findForward(String);} public ActionForward search(ActionMapping mapping, ActionForm form, <mask><mask><mask><mask><mask><mask><mask><mask>.HttpServletRequest request, HttpServletResponse response) throws Exception { println(String);SessionFactory sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));HttpSession session1 = getSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "javax.servlet.http",
    "truth_type": "javax.servlet.http",
    "full_FQN": "javax.servlet.http.HttpServletResponse",
    "boolean": 1,
    "context": "} catch (Exception e) { printStackTrace();} return findForward(String);} public ActionForward search(ActionMapping mapping, ActionForm form, HttpServletRequest request, <mask><mask><mask><mask><mask><mask><mask><mask>.HttpServletResponse response) throws Exception { println(String);SessionFactory sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));HttpSession session1 = getSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "} return findForward(String);} public ActionForward search(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { println(String);<mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));HttpSession session1 = getSession();Session session = openSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "} return findForward(String);} public ActionForward search(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { println(String);SessionFactory sessionFactory = ((<mask><mask><mask><mask><mask><mask>.SessionFactory) (getServletContext().getAttribute(String)));HttpSession session1 = getSession();Session session = openSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.h.nate.http",
    "truth_type": "javax.servlet.http",
    "full_FQN": "javax.servlet.http.HttpSession",
    "boolean": 0,
    "context": "} public ActionForward search(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { println(String);SessionFactory sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));<mask><mask><mask><mask><mask><mask><mask><mask>.HttpSession session1 = getSession();Session session = openSession();Transaction tx = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "javax.servlet.http",
    "truth_type": "javax.servlet.http",
    "full_FQN": "javax.servlet.http.HttpServletRequest.getSession()",
    "boolean": 1,
    "context": "} public ActionForward search(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { println(String);SessionFactory sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));HttpSession session1 = <mask><mask><mask><mask><mask><mask><mask><mask>getSession();Session session = openSession();Transaction tx = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "org.hibernate.SessionFactory sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));HttpSession session1 = getSession();<mask><mask><mask><mask><mask><mask>.Session session = openSession();Transaction tx = beginTransaction();println(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.openSession()",
    "boolean": 1,
    "context": "org.hibernate.SessionFactory sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));HttpSession session1 = getSession();Session session = <mask><mask><mask><mask><mask><mask>openSession();Transaction tx = beginTransaction();println(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction",
    "boolean": 1,
    "context": "javax.servlet.http.HttpSession session1 = getSession();Session session = openSession();<mask><mask><mask><mask><mask><mask>.Transaction tx = beginTransaction();println(String);String name = null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.beginTransaction()",
    "boolean": 1,
    "context": "javax.servlet.http.HttpSession session1 = getSession();Session session = openSession();Transaction tx = <mask><mask><mask><mask><mask><mask>beginTransaction();println(String);String name = null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "j.artaibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Query",
    "boolean": 0,
    "context": "java.lang.String createby = null;try { String SQL_QUERY = String;<mask><mask><mask><mask><mask><mask>.Query query = createQuery(SQL_QUERY); setParameter(String, name); setParameter(String, status);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.createQuery()",
    "boolean": 1,
    "context": "java.lang.String createby = null;try { String SQL_QUERY = String;Query query = <mask><mask><mask><mask><mask><mask>createQuery(SQL_QUERY); setParameter(String, name); setParameter(String, status);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Query.setParameter()",
    "boolean": 1,
    "context": "try { String SQL_QUERY = String;Query query = createQuery(SQL_QUERY); <mask><mask><mask><mask><mask><mask>setParameter(String, name); setParameter(String, status); setParameter(String, createby);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Query.setParameter()",
    "boolean": 1,
    "context": "org.hibernate.Query query = createQuery(SQL_QUERY); setParameter(String, name); <mask><mask><mask><mask><mask><mask>setParameter(String, status); setParameter(String, createby);ArrayList al = new ArrayList();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Query.setParameter()",
    "boolean": 1,
    "context": " setParameter(String, name); setParameter(String, status); <mask><mask><mask><mask><mask><mask>setParameter(String, createby);ArrayList al = new ArrayList();for (Iterator i = iterate(); hasNext();) { } println(String + size());"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": " setParameter(String, status); setParameter(String, createby);<mask><mask><mask>.ArrayList al = new ArrayList();for (Iterator i = iterate(); hasNext();) { } println(String + size()); setAttribute(String, al);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList()",
    "boolean": 1,
    "context": " setParameter(String, status); setParameter(String, createby);ArrayList al = new <mask><mask><mask>.ArrayList();for (Iterator i = iterate(); hasNext();) { } println(String + size()); setAttribute(String, al);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator",
    "boolean": 1,
    "context": " setParameter(String, createby);ArrayList al = new ArrayList();for (<mask><mask><mask>.Iterator i = iterate(); hasNext();) { } println(String + size()); setAttribute(String, al);} catch (Exception e) { printStackTrace();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Query.iterate()",
    "boolean": 1,
    "context": " setParameter(String, createby);ArrayList al = new ArrayList();for (Iterator i = <mask><mask><mask><mask><mask><mask>iterate(); hasNext();) { } println(String + size()); setAttribute(String, al);} catch (Exception e) { printStackTrace();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator.hasNext()",
    "boolean": 1,
    "context": " setParameter(String, createby);ArrayList al = new ArrayList();for (Iterator i = iterate(); <mask><mask><mask>hasNext();) { } println(String + size()); setAttribute(String, al);} catch (Exception e) { printStackTrace();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.size()",
    "boolean": 1,
    "context": " setParameter(String, createby);ArrayList al = new ArrayList();for (Iterator i = iterate(); hasNext();) { } println(String + <mask><mask><mask>size()); setAttribute(String, al);} catch (Exception e) { printStackTrace();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.netate.http",
    "truth_type": "javax.servlet.http",
    "full_FQN": "javax.servlet.http.HttpSession.setAttribute()",
    "boolean": 0,
    "context": "java.util.ArrayList al = new ArrayList();for (Iterator i = iterate(); hasNext();) { } println(String + size()); <mask><mask><mask><mask><mask><mask><mask><mask>setAttribute(String, al);} catch (Exception e) { printStackTrace();return findForward(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.struts.action",
    "truth_type": "org.apache.struts.action",
    "full_FQN": "org.apache.struts.action.ActionMapping.findForward()",
    "boolean": 1,
    "context": " setAttribute(String, al);} catch (Exception e) { printStackTrace();return <mask><mask><mask><mask><mask><mask><mask><mask>findForward(String);} println(String);return findForward(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.struts.action",
    "truth_type": "org.apache.struts.action",
    "full_FQN": "org.apache.struts.action.ActionMapping.findForward()",
    "boolean": 1,
    "context": "return findForward(String);} println(String);return <mask><mask><mask><mask><mask><mask><mask><mask>findForward(String);} public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { SessionFactory sessionFactory = null;Session session = null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.servuts.action",
    "truth_type": "org.apache.struts.action",
    "full_FQN": "org.apache.struts.action.ActionForward",
    "boolean": 0,
    "context": "} println(String);return findForward(String);} public <mask><mask><mask><mask><mask><mask><mask><mask>.ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { SessionFactory sessionFactory = null;Session session = null;if (isDebugEnabled()) { debug(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.struts.action",
    "truth_type": "org.apache.struts.action",
    "full_FQN": "org.apache.struts.action.ActionMapping",
    "boolean": 1,
    "context": "} println(String);return findForward(String);} public ActionForward edit(<mask><mask><mask><mask><mask><mask><mask><mask>.ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { SessionFactory sessionFactory = null;Session session = null;if (isDebugEnabled()) { debug(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.servlet.action",
    "truth_type": "org.apache.struts.action",
    "full_FQN": "org.apache.struts.action.ActionForm",
    "boolean": 0,
    "context": "} println(String);return findForward(String);} public ActionForward edit(ActionMapping mapping, <mask><mask><mask><mask><mask><mask><mask><mask>.ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { SessionFactory sessionFactory = null;Session session = null;if (isDebugEnabled()) { debug(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "javax.servlet.http",
    "truth_type": "javax.servlet.http",
    "full_FQN": "javax.servlet.http.HttpServletRequest",
    "boolean": 1,
    "context": "} println(String);return findForward(String);} public ActionForward edit(ActionMapping mapping, ActionForm form, <mask><mask><mask><mask><mask><mask><mask><mask>.HttpServletRequest request, HttpServletResponse response) throws Exception { SessionFactory sessionFactory = null;Session session = null;if (isDebugEnabled()) { debug(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "javax.servlet.http",
    "truth_type": "javax.servlet.http",
    "full_FQN": "javax.servlet.http.HttpServletResponse",
    "boolean": 1,
    "context": "} println(String);return findForward(String);} public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, <mask><mask><mask><mask><mask><mask><mask><mask>.HttpServletResponse response) throws Exception { SessionFactory sessionFactory = null;Session session = null;if (isDebugEnabled()) { debug(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "} println(String);return findForward(String);} public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { <mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory = null;Session session = null;if (isDebugEnabled()) { debug(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "return findForward(String);} public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { SessionFactory sessionFactory = null;<mask><mask><mask><mask><mask><mask>.Session session = null;if (isDebugEnabled()) { debug(String);} try { sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "org.hibernate.Session session = null;if (isDebugEnabled()) { debug(String);} try { sessionFactory = ((<mask><mask><mask><mask><mask><mask>.SessionFactory) (getServletContext().getAttribute(String)));session = openSession();Transaction transaction = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.openSession()",
    "boolean": 1,
    "context": "if (isDebugEnabled()) { debug(String);} try { sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));session = <mask><mask><mask><mask><mask><mask>openSession();Transaction transaction = beginTransaction();String qstring = String;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction",
    "boolean": 1,
    "context": "} try { sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));session = openSession();<mask><mask><mask><mask><mask><mask>.Transaction transaction = beginTransaction();String qstring = String;Query query = createQuery(qstring);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.beginTransaction()",
    "boolean": 1,
    "context": "} try { sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));session = openSession();Transaction transaction = <mask><mask><mask><mask><mask><mask>beginTransaction();String qstring = String;Query query = createQuery(qstring);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Query",
    "boolean": 0,
    "context": "org.hibernate.Transaction transaction = beginTransaction();String qstring = String;<mask><mask><mask><mask><mask><mask>.Query query = createQuery(qstring);ArrayList all = new ArrayList();println(String + size());"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.createQuery()",
    "boolean": 1,
    "context": "org.hibernate.Transaction transaction = beginTransaction();String qstring = String;Query query = <mask><mask><mask><mask><mask><mask>createQuery(qstring);ArrayList all = new ArrayList();println(String + size());"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "java.lang.String qstring = String;Query query = createQuery(qstring);<mask><mask><mask>.ArrayList all = new ArrayList();println(String + size());Set purchaseArray = new HashSet();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList()",
    "boolean": 1,
    "context": "java.lang.String qstring = String;Query query = createQuery(qstring);ArrayList all = new <mask><mask><mask>.ArrayList();println(String + size());Set purchaseArray = new HashSet();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.size()",
    "boolean": 1,
    "context": "org.hibernate.Query query = createQuery(qstring);ArrayList all = new ArrayList();println(String + <mask><mask><mask>size());Set purchaseArray = new HashSet(); flush();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Set",
    "boolean": 1,
    "context": "java.util.ArrayList all = new ArrayList();println(String + size());<mask><mask><mask>.Set purchaseArray = new HashSet(); flush();} catch (Exception e) { printStackTrace();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.HashSet()",
    "boolean": 1,
    "context": "java.util.ArrayList all = new ArrayList();println(String + size());Set purchaseArray = new <mask><mask><mask>.HashSet(); flush();} catch (Exception e) { printStackTrace();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.flush()",
    "boolean": 1,
    "context": "java.lang.System.out.println(String + size());Set purchaseArray = new HashSet(); <mask><mask><mask><mask><mask><mask>flush();} catch (Exception e) { printStackTrace();return findForward(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.struts.action",
    "truth_type": "org.apache.struts.action",
    "full_FQN": "org.apache.struts.action.ActionMapping.findForward()",
    "boolean": 1,
    "context": " flush();} catch (Exception e) { printStackTrace();return <mask><mask><mask><mask><mask><mask><mask><mask>findForward(String);} println(String);return findForward(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.struts.action",
    "truth_type": "org.apache.struts.action",
    "full_FQN": "org.apache.struts.action.ActionMapping.findForward()",
    "boolean": 1,
    "context": "return findForward(String);} println(String);return <mask><mask><mask><mask><mask><mask><mask><mask>findForward(String);} public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { try { SessionFactory sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));Session session = openSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.servlet.action",
    "truth_type": "org.apache.struts.action",
    "full_FQN": "org.apache.struts.action.ActionForward",
    "boolean": 0,
    "context": "} println(String);return findForward(String);} public <mask><mask><mask><mask><mask><mask><mask><mask>.ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { try { SessionFactory sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));Session session = openSession();Transaction tx = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.struts.action",
    "truth_type": "org.apache.struts.action",
    "full_FQN": "org.apache.struts.action.ActionMapping",
    "boolean": 1,
    "context": "} println(String);return findForward(String);} public ActionForward delete(<mask><mask><mask><mask><mask><mask><mask><mask>.ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { try { SessionFactory sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));Session session = openSession();Transaction tx = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.servlet.action",
    "truth_type": "org.apache.struts.action",
    "full_FQN": "org.apache.struts.action.ActionForm",
    "boolean": 0,
    "context": "} println(String);return findForward(String);} public ActionForward delete(ActionMapping mapping, <mask><mask><mask><mask><mask><mask><mask><mask>.ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { try { SessionFactory sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));Session session = openSession();Transaction tx = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "javax.servlet.http",
    "truth_type": "javax.servlet.http",
    "full_FQN": "javax.servlet.http.HttpServletRequest",
    "boolean": 1,
    "context": "} println(String);return findForward(String);} public ActionForward delete(ActionMapping mapping, ActionForm form, <mask><mask><mask><mask><mask><mask><mask><mask>.HttpServletRequest request, HttpServletResponse response) throws Exception { try { SessionFactory sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));Session session = openSession();Transaction tx = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "javax.servlet.http",
    "truth_type": "javax.servlet.http",
    "full_FQN": "javax.servlet.http.HttpServletResponse",
    "boolean": 1,
    "context": "} println(String);return findForward(String);} public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, <mask><mask><mask><mask><mask><mask><mask><mask>.HttpServletResponse response) throws Exception { try { SessionFactory sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));Session session = openSession();Transaction tx = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "} println(String);return findForward(String);} public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { try { <mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));Session session = openSession();Transaction tx = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "} println(String);return findForward(String);} public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { try { SessionFactory sessionFactory = ((<mask><mask><mask><mask><mask><mask>.SessionFactory) (getServletContext().getAttribute(String)));Session session = openSession();Transaction tx = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "return findForward(String);} public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { try { SessionFactory sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));<mask><mask><mask><mask><mask><mask>.Session session = openSession();Transaction tx = beginTransaction(); commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.openSession()",
    "boolean": 1,
    "context": "return findForward(String);} public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { try { SessionFactory sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));Session session = <mask><mask><mask><mask><mask><mask>openSession();Transaction tx = beginTransaction(); commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction",
    "boolean": 1,
    "context": "} public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { try { SessionFactory sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));Session session = openSession();<mask><mask><mask><mask><mask><mask>.Transaction tx = beginTransaction(); commit();} catch (Exception e) { printStackTrace();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.beginTransaction()",
    "boolean": 1,
    "context": "} public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { try { SessionFactory sessionFactory = ((SessionFactory) (getServletContext().getAttribute(String)));Session session = openSession();Transaction tx = <mask><mask><mask><mask><mask><mask>beginTransaction(); commit();} catch (Exception e) { printStackTrace();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.commit()",
    "boolean": 1,
    "context": "org.hibernate.Session session = openSession();Transaction tx = beginTransaction(); <mask><mask><mask><mask><mask><mask>commit();} catch (Exception e) { printStackTrace();return findForward(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.struts.action",
    "truth_type": "org.apache.struts.action",
    "full_FQN": "org.apache.struts.action.ActionMapping.findForward()",
    "boolean": 1,
    "context": " commit();} catch (Exception e) { printStackTrace();return <mask><mask><mask><mask><mask><mask><mask><mask>findForward(String);} println(String);return findForward(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.struts.action",
    "truth_type": "org.apache.struts.action",
    "full_FQN": "org.apache.struts.action.ActionMapping.findForward()",
    "boolean": 1,
    "context": "return findForward(String);} println(String);return <mask><mask><mask><mask><mask><mask><mask><mask>findForward(String);} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_45 { public static void main(String[] args) { <mask><mask><mask><mask><mask><mask>.SessionFactory factory = new AnnotationConfiguration().configure().buildSessionFactory();Session session = openSession(); beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.cfg.AnnotationConfiguration()",
    "boolean": 1,
    "context": "public class hibernate_class_45 { public static void main(String[] args) { SessionFactory factory = new <mask><mask><mask><mask><mask><mask>AnnotationConfiguration().configure().buildSessionFactory();Session session = openSession(); beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "public class hibernate_class_45 { public static void main(String[] args) { SessionFactory factory = new AnnotationConfiguration().configure().buildSessionFactory();<mask><mask><mask><mask><mask><mask>.Session session = openSession(); beginTransaction(); save(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.openSession()",
    "boolean": 1,
    "context": "public class hibernate_class_45 { public static void main(String[] args) { SessionFactory factory = new AnnotationConfiguration().configure().buildSessionFactory();Session session = <mask><mask><mask><mask><mask><mask>openSession(); beginTransaction(); save(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.beginTransaction()",
    "boolean": 1,
    "context": "public class hibernate_class_45 { public static void main(String[] args) { SessionFactory factory = new AnnotationConfiguration().configure().buildSessionFactory();Session session = openSession(); <mask><mask><mask><mask><mask><mask>beginTransaction(); save(String); getTransaction().commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.save()",
    "boolean": 1,
    "context": "org.hibernate.Session session = openSession(); beginTransaction(); <mask><mask><mask><mask><mask><mask>save(String); getTransaction().commit(); close();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.getTransaction()",
    "boolean": 1,
    "context": " beginTransaction(); save(String); <mask><mask><mask><mask><mask><mask>getTransaction().commit(); close();} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.close()",
    "boolean": 1,
    "context": " save(String); getTransaction().commit(); <mask><mask><mask><mask><mask><mask>close();} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.HibernateException",
    "boolean": 1,
    "context": "static { try { me = new hibernate_class_46();} catch (Exception e) { printStackTrace();} } private hibernate_class_46() throws <mask><mask><mask><mask><mask><mask>.HibernateException, JDBCException { } public Session currentSession() throws Exception { Session s = ((Session) (get()));if (s != null) { setCacheMode(REFRESH);} if (s == null) { s = openSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.JDBCException",
    "boolean": 1,
    "context": "static { try { me = new hibernate_class_46();} catch (Exception e) { printStackTrace();} } private hibernate_class_46() throws HibernateException, <mask><mask><mask><mask><mask><mask>.JDBCException { } public Session currentSession() throws Exception { Session s = ((Session) (get()));if (s != null) { setCacheMode(REFRESH);} if (s == null) { s = openSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "static { try { me = new hibernate_class_46();} catch (Exception e) { printStackTrace();} } private hibernate_class_46() throws HibernateException, JDBCException { } public <mask><mask><mask><mask><mask><mask>.Session currentSession() throws Exception { Session s = ((Session) (get()));if (s != null) { setCacheMode(REFRESH);} if (s == null) { s = openSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "static { try { me = new hibernate_class_46();} catch (Exception e) { printStackTrace();} } private hibernate_class_46() throws HibernateException, JDBCException { } public Session currentSession() throws Exception { <mask><mask><mask><mask><mask><mask>.Session s = ((Session) (get()));if (s != null) { setCacheMode(REFRESH);} if (s == null) { s = openSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "static { try { me = new hibernate_class_46();} catch (Exception e) { printStackTrace();} } private hibernate_class_46() throws HibernateException, JDBCException { } public Session currentSession() throws Exception { Session s = ((<mask><mask><mask><mask><mask><mask>.Session) (get()));if (s != null) { setCacheMode(REFRESH);} if (s == null) { s = openSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.setCacheMode()",
    "boolean": 1,
    "context": "} catch (Exception e) { printStackTrace();} } private hibernate_class_46() throws HibernateException, JDBCException { } public Session currentSession() throws Exception { Session s = ((Session) (get()));if (s != null) { <mask><mask><mask><mask><mask><mask>setCacheMode(REFRESH);} if (s == null) { s = openSession();set(s);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "set(s);} return s;} public void setSessionFactory(<mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory) { } public static Session openSession() { Session session = null;return session;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "set(s);} return s;} public void setSessionFactory(SessionFactory sessionFactory) { } public static <mask><mask><mask><mask><mask><mask>.Session openSession() { Session session = null;return session;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "set(s);} return s;} public void setSessionFactory(SessionFactory sessionFactory) { } public static Session openSession() { <mask><mask><mask><mask><mask><mask>.Session session = null;return session;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_47 { public static boolean registerEvent() { <mask><mask><mask><mask><mask><mask>.SessionFactory sf = getSessionFactory();Transaction t = null;try { Session s = openSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.internal.UtScope",
    "truth_type": "hibernate.HibernateUtil",
    "full_FQN": "hibernate.HibernateUtil.getSessionFactory()",
    "boolean": 0,
    "context": "public class hibernate_class_47 { public static boolean registerEvent() { SessionFactory sf = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.getSessionFactory();Transaction t = null;try { Session s = openSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction",
    "boolean": 1,
    "context": "public class hibernate_class_47 { public static boolean registerEvent() { SessionFactory sf = getSessionFactory();<mask><mask><mask><mask><mask><mask>.Transaction t = null;try { Session s = openSession();t = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "public class hibernate_class_47 { public static boolean registerEvent() { SessionFactory sf = getSessionFactory();Transaction t = null;try { <mask><mask><mask><mask><mask><mask>.Session s = openSession();t = beginTransaction(); persist(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.openSession()",
    "boolean": 1,
    "context": "public class hibernate_class_47 { public static boolean registerEvent() { SessionFactory sf = getSessionFactory();Transaction t = null;try { Session s = <mask><mask><mask><mask><mask><mask>openSession();t = beginTransaction(); persist(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.beginTransaction()",
    "boolean": 1,
    "context": "org.hibernate.Transaction t = null;try { Session s = openSession();t = <mask><mask><mask><mask><mask><mask>beginTransaction(); persist(String); commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.persist()",
    "boolean": 1,
    "context": "try { Session s = openSession();t = beginTransaction(); <mask><mask><mask><mask><mask><mask>persist(String); commit();return true;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.commit()",
    "boolean": 1,
    "context": "t = beginTransaction(); persist(String); <mask><mask><mask><mask><mask><mask>commit();return true;} catch (Exception ex) { println(String + getMessage());"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.rollback()",
    "boolean": 1,
    "context": "return true;} catch (Exception ex) { println(String + getMessage());if (t != null) { <mask><mask><mask><mask><mask><mask>rollback();} return false;} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "com.google.gwt.engine.internal",
    "truth_type": "net.sf.gilead.gwt",
    "full_FQN": "net.sf.gilead.gwt.PersistentRemoteService",
    "boolean": 0,
    "context": "public abstract class hibernate_class_48 extends <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.PersistentRemoteService implements GreetingService { private static final long serialVersionUID = 1L;private HibernateUtil gileadHibernateUtil = new HibernateUtil();public hibernate_class_48() { SessionFactory session = null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.ance.spclient",
    "truth_type": "aQute.gwt.greeter.shared",
    "full_FQN": "aQute.gwt.greeter.shared.GreetingService",
    "boolean": 0,
    "context": "public abstract class hibernate_class_48 extends PersistentRemoteService implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.GreetingService { private static final long serialVersionUID = 1L;private HibernateUtil gileadHibernateUtil = new HibernateUtil();public hibernate_class_48() { SessionFactory session = null;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.sf.gatead.core.hibernate",
    "truth_type": "net.sf.gilead.core.hibernate",
    "full_FQN": "net.sf.gilead.core.hibernate.HibernateUtil",
    "boolean": 0,
    "context": "public abstract class hibernate_class_48 extends PersistentRemoteService implements GreetingService { private static final long serialVersionUID = 1L;private <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HibernateUtil gileadHibernateUtil = new HibernateUtil();public hibernate_class_48() { SessionFactory session = null; setSessionFactory(session);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.sfibernatead.core",
    "truth_type": "net.sf.gilead.core",
    "full_FQN": "net.sf.gilead.core.hibernate.HibernateUtil()",
    "boolean": 0,
    "context": "public abstract class hibernate_class_48 extends PersistentRemoteService implements GreetingService { private static final long serialVersionUID = 1L;private HibernateUtil gileadHibernateUtil = new <mask><mask><mask><mask><mask><mask><mask><mask><mask>HibernateUtil();public hibernate_class_48() { SessionFactory session = null; setSessionFactory(session);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public abstract class hibernate_class_48 extends PersistentRemoteService implements GreetingService { private static final long serialVersionUID = 1L;private HibernateUtil gileadHibernateUtil = new HibernateUtil();public hibernate_class_48() { <mask><mask><mask><mask><mask><mask>.SessionFactory session = null; setSessionFactory(session);PersistentBeanManager persistentBeanManager = new PersistentBeanManager();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.sfibernatead...hibernate",
    "truth_type": "net.sf.gilead.core.hibernate",
    "full_FQN": "net.sf.gilead.core.hibernate.HibernateUtil.setSessionFactory()",
    "boolean": 0,
    "context": "private HibernateUtil gileadHibernateUtil = new HibernateUtil();public hibernate_class_48() { SessionFactory session = null; <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setSessionFactory(session);PersistentBeanManager persistentBeanManager = new PersistentBeanManager(); setPersistenceUtil(gileadHibernateUtil);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.sf.gateld.core",
    "truth_type": "net.sf.gilead.core",
    "full_FQN": "net.sf.gilead.core.PersistentBeanManager",
    "boolean": 0,
    "context": "public hibernate_class_48() { SessionFactory session = null; setSessionFactory(session);<mask><mask><mask><mask><mask><mask><mask><mask><mask>.PersistentBeanManager persistentBeanManager = new PersistentBeanManager(); setPersistenceUtil(gileadHibernateUtil); setProxyStore(new StatelessProxyStore());"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.sf.gatead",
    "truth_type": "net.sf.gilead",
    "full_FQN": "net.sf.gilead.core.PersistentBeanManager()",
    "boolean": 0,
    "context": "public hibernate_class_48() { SessionFactory session = null; setSessionFactory(session);PersistentBeanManager persistentBeanManager = new <mask><mask><mask><mask><mask><mask><mask>PersistentBeanManager(); setPersistenceUtil(gileadHibernateUtil); setProxyStore(new StatelessProxyStore());"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.sf.gatead.core",
    "truth_type": "net.sf.gilead.core",
    "full_FQN": "net.sf.gilead.core.PersistentBeanManager.setPersistenceUtil()",
    "boolean": 0,
    "context": " setSessionFactory(session);PersistentBeanManager persistentBeanManager = new PersistentBeanManager(); <mask><mask><mask><mask><mask><mask><mask><mask><mask>setPersistenceUtil(gileadHibernateUtil); setProxyStore(new StatelessProxyStore());setBeanManager(persistentBeanManager);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.sf.gatead.core",
    "truth_type": "net.sf.gilead.core",
    "full_FQN": "net.sf.gilead.core.PersistentBeanManager.setProxyStore()",
    "boolean": 0,
    "context": "net.sf.gilead.core.PersistentBeanManager persistentBeanManager = new PersistentBeanManager(); setPersistenceUtil(gileadHibernateUtil); <mask><mask><mask><mask><mask><mask><mask><mask><mask>setProxyStore(new StatelessProxyStore());setBeanManager(persistentBeanManager);} public String greetServer(String S) { Session session = getSessionFactory().openSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.orm.testCode",
    "truth_type": "net.sf.gilead.core.store",
    "full_FQN": "net.sf.gilead.core.store.stateless.StatelessProxyStore()",
    "boolean": 0,
    "context": "net.sf.gilead.core.PersistentBeanManager persistentBeanManager = new PersistentBeanManager(); setPersistenceUtil(gileadHibernateUtil); setProxyStore(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>StatelessProxyStore());setBeanManager(persistentBeanManager);} public String greetServer(String S) { Session session = getSessionFactory().openSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": " setProxyStore(new StatelessProxyStore());setBeanManager(persistentBeanManager);} public String greetServer(String S) { <mask><mask><mask><mask><mask><mask>.Session session = getSessionFactory().openSession();Transaction tr = beginTransaction(); save(S);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.proxy.requestibercontainer.hand",
    "truth_type": "net.sf.gilead.core.hibernate",
    "full_FQN": "net.sf.gilead.core.hibernate.HibernateUtil.getSessionFactory()",
    "boolean": 0,
    "context": " setProxyStore(new StatelessProxyStore());setBeanManager(persistentBeanManager);} public String greetServer(String S) { Session session = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getSessionFactory().openSession();Transaction tr = beginTransaction(); save(S);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction",
    "boolean": 1,
    "context": "setBeanManager(persistentBeanManager);} public String greetServer(String S) { Session session = getSessionFactory().openSession();<mask><mask><mask><mask><mask><mask>.Transaction tr = beginTransaction(); save(S); commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.beginTransaction()",
    "boolean": 1,
    "context": "setBeanManager(persistentBeanManager);} public String greetServer(String S) { Session session = getSessionFactory().openSession();Transaction tr = <mask><mask><mask><mask><mask><mask>beginTransaction(); save(S); commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.save()",
    "boolean": 1,
    "context": "} public String greetServer(String S) { Session session = getSessionFactory().openSession();Transaction tr = beginTransaction(); <mask><mask><mask><mask><mask><mask>save(S); commit(); close();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.commit()",
    "boolean": 1,
    "context": "org.hibernate.Transaction tr = beginTransaction(); save(S); <mask><mask><mask><mask><mask><mask>commit(); close();return S;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.close()",
    "boolean": 1,
    "context": " save(S); commit(); <mask><mask><mask><mask><mask><mask>close();return S;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Entity",
    "boolean": 0,
    "context": "@<mask><mask><mask><mask><mask><mask>.Entity public class hibernate_class_49 implements Serializable { private static final long serialVersionUID = 1L;private String username;private String password;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.Serializable",
    "boolean": 1,
    "context": "@Entity public class hibernate_class_49 implements <mask><mask><mask>.Serializable { private static final long serialVersionUID = 1L;private String username;private String password;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Version",
    "boolean": 0,
    "context": "private String password;private Integer VERSION;@<mask><mask><mask><mask><mask><mask>.Version public Integer getVERSION() { return VERSION;} public void setVERSION(Integer vERSION) { VERSION = vERSION;} @NaturalId public String getUsername() { return username;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.annotations",
    "truth_type": "org.hibernate.annotations",
    "full_FQN": "org.hibernate.annotations.NaturalId",
    "boolean": 1,
    "context": "@Version public Integer getVERSION() { return VERSION;} public void setVERSION(Integer vERSION) { VERSION = vERSION;} @<mask><mask><mask><mask><mask><mask><mask><mask><mask>.NaturalId public String getUsername() { return username;} public void setUsername(String username) { username = username;} public String getPassword() { return password;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_5 { private static final <mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory = buildSessionFactory();private static SessionFactory buildSessionFactory() { try { return new Configuration().configure().buildSessionFactory();} catch (Throwable ex) { println(String + ex);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_5 { private static final SessionFactory sessionFactory = buildSessionFactory();private static <mask><mask><mask><mask><mask><mask>.SessionFactory buildSessionFactory() { try { return new Configuration().configure().buildSessionFactory();} catch (Throwable ex) { println(String + ex);throw new ExceptionInInitializerError(ex);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.cfg.Configuration()",
    "boolean": 1,
    "context": "public class hibernate_class_5 { private static final SessionFactory sessionFactory = buildSessionFactory();private static SessionFactory buildSessionFactory() { try { return new <mask><mask><mask><mask><mask><mask>Configuration().configure().buildSessionFactory();} catch (Throwable ex) { println(String + ex);throw new ExceptionInInitializerError(ex);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "} catch (Throwable ex) { println(String + ex);throw new ExceptionInInitializerError(ex);} } public static <mask><mask><mask><mask><mask><mask>.SessionFactory getSessionFactory() { return sessionFactory;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_50 { private <mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory;public void setSessionFactory(SessionFactory sessionFactory) { sessionFactory = sessionFactory;} public SessionFactory getSessionFactory() { return sessionFactory;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_50 { private SessionFactory sessionFactory;public void setSessionFactory(<mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory) { sessionFactory = sessionFactory;} public SessionFactory getSessionFactory() { return sessionFactory;} @SuppressWarnings(String) public List<Name> getAll() { Session session = this getCurrentSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_50 { private SessionFactory sessionFactory;public void setSessionFactory(SessionFactory sessionFactory) { sessionFactory = sessionFactory;} public <mask><mask><mask><mask><mask><mask>.SessionFactory getSessionFactory() { return sessionFactory;} @SuppressWarnings(String) public List<Name> getAll() { Session session = this getCurrentSession();List<Name> names = ((List<Name>)  createQuery(String).list()));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "public void setSessionFactory(SessionFactory sessionFactory) { sessionFactory = sessionFactory;} public SessionFactory getSessionFactory() { return sessionFactory;} @SuppressWarnings(String) public <mask><mask><mask>.List<Name> getAll() { Session session = this getCurrentSession();List<Name> names = ((List<Name>)  createQuery(String).list()));return names;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "javax.naming",
    "truth_type": "javax.naming",
    "full_FQN": "javax.naming.Name",
    "boolean": 1,
    "context": "public void setSessionFactory(SessionFactory sessionFactory) { sessionFactory = sessionFactory;} public SessionFactory getSessionFactory() { return sessionFactory;} @SuppressWarnings(String) public List<<mask><mask><mask><mask><mask><mask>.Name> getAll() { Session session = this getCurrentSession();List<Name> names = ((List<Name>)  createQuery(String).list()));return names;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "public void setSessionFactory(SessionFactory sessionFactory) { sessionFactory = sessionFactory;} public SessionFactory getSessionFactory() { return sessionFactory;} @SuppressWarnings(String) public List<Name> getAll() { <mask><mask><mask><mask><mask><mask>.Session session = this getCurrentSession();List<Name> names = ((List<Name>)  createQuery(String).list()));return names;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.getCurrentSession()",
    "boolean": 1,
    "context": "public void setSessionFactory(SessionFactory sessionFactory) { sessionFactory = sessionFactory;} public SessionFactory getSessionFactory() { return sessionFactory;} @SuppressWarnings(String) public List<Name> getAll() { Session session = this <mask><mask><mask><mask><mask><mask>getCurrentSession();List<Name> names = ((List<Name>)  createQuery(String).list()));return names;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "} public SessionFactory getSessionFactory() { return sessionFactory;} @SuppressWarnings(String) public List<Name> getAll() { Session session = this getCurrentSession();<mask><mask><mask>.List<Name> names = ((List<Name>)  createQuery(String).list()));return names;} public void save(Name name) { Session session = this getCurrentSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "javax.naming",
    "truth_type": "javax.naming",
    "full_FQN": "javax.naming.Name",
    "boolean": 1,
    "context": "} public SessionFactory getSessionFactory() { return sessionFactory;} @SuppressWarnings(String) public List<Name> getAll() { Session session = this getCurrentSession();List<<mask><mask><mask><mask><mask><mask>.Name> names = ((List<Name>)  createQuery(String).list()));return names;} public void save(Name name) { Session session = this getCurrentSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "} public SessionFactory getSessionFactory() { return sessionFactory;} @SuppressWarnings(String) public List<Name> getAll() { Session session = this getCurrentSession();List<Name> names = ((<mask><mask><mask>.List<Name>)  createQuery(String).list()));return names;} public void save(Name name) { Session session = this getCurrentSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "javax.naming",
    "truth_type": "javax.naming",
    "full_FQN": "javax.naming.Name",
    "boolean": 1,
    "context": "} public SessionFactory getSessionFactory() { return sessionFactory;} @SuppressWarnings(String) public List<Name> getAll() { Session session = this getCurrentSession();List<Name> names = ((List<<mask><mask><mask><mask><mask><mask>.Name>)  createQuery(String).list()));return names;} public void save(Name name) { Session session = this getCurrentSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.createQuery()",
    "boolean": 1,
    "context": "} public SessionFactory getSessionFactory() { return sessionFactory;} @SuppressWarnings(String) public List<Name> getAll() { Session session = this getCurrentSession();List<Name> names = ((List<Name>)  <mask><mask><mask><mask><mask><mask>createQuery(String).list()));return names;} public void save(Name name) { Session session = this getCurrentSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "javax.naming",
    "truth_type": "javax.naming",
    "full_FQN": "javax.naming.Name",
    "boolean": 1,
    "context": "java.util.List<Name> names = ((List<Name>)  createQuery(String).list()));return names;} public void save(<mask><mask><mask><mask><mask><mask>.Name name) { Session session = this getCurrentSession(); saveOrUpdate(name); flush();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "java.util.List<Name> names = ((List<Name>)  createQuery(String).list()));return names;} public void save(Name name) { <mask><mask><mask><mask><mask><mask>.Session session = this getCurrentSession(); saveOrUpdate(name); flush();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.getCurrentSession()",
    "boolean": 1,
    "context": "java.util.List<Name> names = ((List<Name>)  createQuery(String).list()));return names;} public void save(Name name) { Session session = this <mask><mask><mask><mask><mask><mask>getCurrentSession(); saveOrUpdate(name); flush();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.saveOrUpdate()",
    "boolean": 1,
    "context": "return names;} public void save(Name name) { Session session = this getCurrentSession(); <mask><mask><mask><mask><mask><mask>saveOrUpdate(name); flush();} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.flush()",
    "boolean": 1,
    "context": "} public void save(Name name) { Session session = this getCurrentSession(); saveOrUpdate(name); <mask><mask><mask><mask><mask><mask>flush();} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.MalformedURLException",
    "boolean": 1,
    "context": "public class hibernate_class_6 { public static void main(final String[] args) throws <mask><mask><mask>.MalformedURLException { File baseDir = new File(String);hibernate_class_6 importer = new hibernate_class_6();hibernate Configuration config = setupDb(baseDir);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File",
    "boolean": 1,
    "context": "public class hibernate_class_6 { public static void main(final String[] args) throws MalformedURLException { <mask><mask><mask>.File baseDir = new File(String);hibernate_class_6 importer = new hibernate_class_6();hibernate Configuration config = setupDb(baseDir);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File()",
    "boolean": 1,
    "context": "public class hibernate_class_6 { public static void main(final String[] args) throws MalformedURLException { File baseDir = new <mask><mask><mask>.File(String);hibernate_class_6 importer = new hibernate_class_6();hibernate Configuration config = setupDb(baseDir);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg.Configuration",
    "truth_type": "org.hibernate.cfg.Configuration",
    "full_FQN": "org.hibernate.cfg.Configuration.Configuration",
    "boolean": 1,
    "context": "public class hibernate_class_6 { public static void main(final String[] args) throws MalformedURLException { File baseDir = new File(String);hibernate_class_6 importer = new hibernate_class_6();hibernate <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Configuration config = setupDb(baseDir);if (config != null) { importContents(new File(baseDir, String), config);} } private void importContents(final File file, final hibernate Configuration config) throws MalformedURLException { SessionFactory sessionFactory = hibernate buildSessionFactory();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File()",
    "boolean": 1,
    "context": "hibernate_class_6 importer = new hibernate_class_6();hibernate Configuration config = setupDb(baseDir);if (config != null) { importContents(new <mask><mask><mask>.File(baseDir, String), config);} } private void importContents(final File file, final hibernate Configuration config) throws MalformedURLException { SessionFactory sessionFactory = hibernate buildSessionFactory();Session session = openSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File",
    "boolean": 1,
    "context": "org.hibernate Configuration config = setupDb(baseDir);if (config != null) { importContents(new File(baseDir, String), config);} } private void importContents(final <mask><mask><mask>.File file, final hibernate Configuration config) throws MalformedURLException { SessionFactory sessionFactory = hibernate buildSessionFactory();Session session = openSession();Transaction tx = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg.Configuration",
    "truth_type": "org.hibernate.cfg.Configuration",
    "full_FQN": "org.hibernate.cfg.Configuration.Configuration",
    "boolean": 1,
    "context": "org.hibernate Configuration config = setupDb(baseDir);if (config != null) { importContents(new File(baseDir, String), config);} } private void importContents(final File file, final hibernate <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Configuration config) throws MalformedURLException { SessionFactory sessionFactory = hibernate buildSessionFactory();Session session = openSession();Transaction tx = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.net",
    "truth_type": "java.net",
    "full_FQN": "java.net.MalformedURLException",
    "boolean": 1,
    "context": "org.hibernate Configuration config = setupDb(baseDir);if (config != null) { importContents(new File(baseDir, String), config);} } private void importContents(final File file, final hibernate Configuration config) throws <mask><mask><mask>.MalformedURLException { SessionFactory sessionFactory = hibernate buildSessionFactory();Session session = openSession();Transaction tx = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "org.hibernate Configuration config = setupDb(baseDir);if (config != null) { importContents(new File(baseDir, String), config);} } private void importContents(final File file, final hibernate Configuration config) throws MalformedURLException { <mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory = hibernate buildSessionFactory();Session session = openSession();Transaction tx = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg.Configuration",
    "truth_type": "org.hibernate.cfg.Configuration",
    "full_FQN": "org.hibernate.cfg.Configuration.Configuration.buildSessionFactory()",
    "boolean": 1,
    "context": "org.hibernate Configuration config = setupDb(baseDir);if (config != null) { importContents(new File(baseDir, String), config);} } private void importContents(final File file, final hibernate Configuration config) throws MalformedURLException { SessionFactory sessionFactory = hibernate <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>buildSessionFactory();Session session = openSession();Transaction tx = beginTransaction();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "if (config != null) { importContents(new File(baseDir, String), config);} } private void importContents(final File file, final hibernate Configuration config) throws MalformedURLException { SessionFactory sessionFactory = hibernate buildSessionFactory();<mask><mask><mask><mask><mask><mask>.Session session = openSession();Transaction tx = beginTransaction();Session dom4jSession = getSession(DOM4J);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.openSession()",
    "boolean": 1,
    "context": "if (config != null) { importContents(new File(baseDir, String), config);} } private void importContents(final File file, final hibernate Configuration config) throws MalformedURLException { SessionFactory sessionFactory = hibernate buildSessionFactory();Session session = <mask><mask><mask><mask><mask><mask>openSession();Transaction tx = beginTransaction();Session dom4jSession = getSession(DOM4J);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction",
    "boolean": 1,
    "context": "} } private void importContents(final File file, final hibernate Configuration config) throws MalformedURLException { SessionFactory sessionFactory = hibernate buildSessionFactory();Session session = openSession();<mask><mask><mask><mask><mask><mask>.Transaction tx = beginTransaction();Session dom4jSession = getSession(DOM4J);SAXReader saxReader = new SAXReader();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.beginTransaction()",
    "boolean": 1,
    "context": "} } private void importContents(final File file, final hibernate Configuration config) throws MalformedURLException { SessionFactory sessionFactory = hibernate buildSessionFactory();Session session = openSession();Transaction tx = <mask><mask><mask><mask><mask><mask>beginTransaction();Session dom4jSession = getSession(DOM4J);SAXReader saxReader = new SAXReader();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "org.hibernate.Session session = openSession();Transaction tx = beginTransaction();<mask><mask><mask><mask><mask><mask>.Session dom4jSession = getSession(DOM4J);SAXReader saxReader = new SAXReader();try { Document document = read(file);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.getSession()",
    "boolean": 1,
    "context": "org.hibernate.Session session = openSession();Transaction tx = beginTransaction();Session dom4jSession = <mask><mask><mask><mask><mask><mask>getSession(DOM4J);SAXReader saxReader = new SAXReader();try { Document document = read(file);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.xml.io",
    "truth_type": "org.dom4j.io",
    "full_FQN": "org.dom4j.io.SAXReader",
    "boolean": 0,
    "context": "org.hibernate.Transaction tx = beginTransaction();Session dom4jSession = getSession(DOM4J);<mask><mask><mask><mask><mask><mask><mask>.SAXReader saxReader = new SAXReader();try { Document document = read(file);List list = selectNodes(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.xml",
    "truth_type": "org.dom4j",
    "full_FQN": "org.dom4j.io.SAXReader()",
    "boolean": 0,
    "context": "org.hibernate.Transaction tx = beginTransaction();Session dom4jSession = getSession(DOM4J);SAXReader saxReader = new <mask><mask><mask><mask><mask>SAXReader();try { Document document = read(file);List list = selectNodes(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.ax.java",
    "truth_type": "org.dom4j",
    "full_FQN": "org.dom4j.Document",
    "boolean": 0,
    "context": "org.hibernate.Session dom4jSession = getSession(DOM4J);SAXReader saxReader = new SAXReader();try { <mask><mask><mask><mask><mask>.Document document = read(file);List list = selectNodes(String);Iterator iter = iterator();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.apache.xml.io",
    "truth_type": "org.dom4j.io",
    "full_FQN": "org.dom4j.io.SAXReader.read()",
    "boolean": 0,
    "context": "org.hibernate.Session dom4jSession = getSession(DOM4J);SAXReader saxReader = new SAXReader();try { Document document = <mask><mask><mask><mask><mask><mask><mask>read(file);List list = selectNodes(String);Iterator iter = iterator();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "org.dom4j.io.SAXReader saxReader = new SAXReader();try { Document document = read(file);<mask><mask><mask>.List list = selectNodes(String);Iterator iter = iterator();while  hasNext()) { Object personObj = next();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.ax.java",
    "truth_type": "org.dom4j",
    "full_FQN": "org.dom4j.Document.selectNodes()",
    "boolean": 0,
    "context": "org.dom4j.io.SAXReader saxReader = new SAXReader();try { Document document = read(file);List list = <mask><mask><mask><mask><mask>selectNodes(String);Iterator iter = iterator();while  hasNext()) { Object personObj = next();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator",
    "boolean": 1,
    "context": "try { Document document = read(file);List list = selectNodes(String);<mask><mask><mask>.Iterator iter = iterator();while  hasNext()) { Object personObj = next();} flush();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.iterator()",
    "boolean": 1,
    "context": "try { Document document = read(file);List list = selectNodes(String);Iterator iter = <mask><mask><mask>iterator();while  hasNext()) { Object personObj = next();} flush();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator.hasNext()",
    "boolean": 1,
    "context": "java.util.List list = selectNodes(String);Iterator iter = iterator();while  <mask><mask><mask>hasNext()) { Object personObj = next();} flush(); commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator.next()",
    "boolean": 1,
    "context": "java.util.List list = selectNodes(String);Iterator iter = iterator();while  hasNext()) { Object personObj = <mask><mask><mask>next();} flush(); commit();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.flush()",
    "boolean": 1,
    "context": "java.util.Iterator iter = iterator();while  hasNext()) { Object personObj = next();} <mask><mask><mask><mask><mask><mask>flush(); commit(); close();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Transaction.commit()",
    "boolean": 1,
    "context": "while  hasNext()) { Object personObj = next();} flush(); <mask><mask><mask><mask><mask><mask>commit(); close();} catch (HibernateException e) { printStackTrace();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.close()",
    "boolean": 1,
    "context": "} flush(); commit(); <mask><mask><mask><mask><mask><mask>close();} catch (HibernateException e) { printStackTrace();} catch (DocumentException e) { printStackTrace();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.HibernateException",
    "boolean": 1,
    "context": " commit(); close();} catch (<mask><mask><mask><mask><mask><mask>.HibernateException e) { printStackTrace();} catch (DocumentException e) { printStackTrace();} } private hibernate Configuration setupDb(final File baseDir) throws HibernateException { hibernate Configuration cfg = new hibernate Configuration();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.HibernateException.printStackTrace()",
    "boolean": 1,
    "context": " commit(); close();} catch (HibernateException e) { <mask><mask><mask><mask><mask><mask>printStackTrace();} catch (DocumentException e) { printStackTrace();} } private hibernate Configuration setupDb(final File baseDir) throws HibernateException { hibernate Configuration cfg = new hibernate Configuration();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "javax.sql",
    "truth_type": "org.dom4j",
    "full_FQN": "org.dom4j.DocumentException",
    "boolean": 0,
    "context": " close();} catch (HibernateException e) { printStackTrace();} catch (<mask><mask><mask><mask><mask>.DocumentException e) { printStackTrace();} } private hibernate Configuration setupDb(final File baseDir) throws HibernateException { hibernate Configuration cfg = new hibernate Configuration(); hibernate addFile(new File(baseDir, String));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.HibernateException.printStackTrace()",
    "boolean": 1,
    "context": " close();} catch (HibernateException e) { printStackTrace();} catch (DocumentException e) { <mask><mask><mask><mask><mask><mask>printStackTrace();} } private hibernate Configuration setupDb(final File baseDir) throws HibernateException { hibernate Configuration cfg = new hibernate Configuration(); hibernate addFile(new File(baseDir, String));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg.Configuration",
    "truth_type": "org.hibernate.cfg.Configuration",
    "full_FQN": "org.hibernate.cfg.Configuration.Configuration",
    "boolean": 1,
    "context": "} catch (HibernateException e) { printStackTrace();} catch (DocumentException e) { printStackTrace();} } private hibernate <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Configuration setupDb(final File baseDir) throws HibernateException { hibernate Configuration cfg = new hibernate Configuration(); hibernate addFile(new File(baseDir, String)); hibernate addFile(new File(baseDir, String));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File",
    "boolean": 1,
    "context": "} catch (HibernateException e) { printStackTrace();} catch (DocumentException e) { printStackTrace();} } private hibernate Configuration setupDb(final <mask><mask><mask>.File baseDir) throws HibernateException { hibernate Configuration cfg = new hibernate Configuration(); hibernate addFile(new File(baseDir, String)); hibernate addFile(new File(baseDir, String));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.HibernateException",
    "boolean": 1,
    "context": "} catch (HibernateException e) { printStackTrace();} catch (DocumentException e) { printStackTrace();} } private hibernate Configuration setupDb(final File baseDir) throws <mask><mask><mask><mask><mask><mask>.HibernateException { hibernate Configuration cfg = new hibernate Configuration(); hibernate addFile(new File(baseDir, String)); hibernate addFile(new File(baseDir, String));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg.Configuration",
    "truth_type": "org.hibernate.cfg.Configuration",
    "full_FQN": "org.hibernate.cfg.Configuration.Configuration",
    "boolean": 1,
    "context": "} catch (HibernateException e) { printStackTrace();} catch (DocumentException e) { printStackTrace();} } private hibernate Configuration setupDb(final File baseDir) throws HibernateException { hibernate <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Configuration cfg = new hibernate Configuration(); hibernate addFile(new File(baseDir, String)); hibernate addFile(new File(baseDir, String));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg",
    "truth_type": "org.hibernate.cfg",
    "full_FQN": "org.hibernate.cfg.Configuration.Configuration()",
    "boolean": 1,
    "context": "} catch (HibernateException e) { printStackTrace();} catch (DocumentException e) { printStackTrace();} } private hibernate Configuration setupDb(final File baseDir) throws HibernateException { hibernate Configuration cfg = new hibernate <mask><mask><mask><mask><mask><mask><mask><mask>Configuration(); hibernate addFile(new File(baseDir, String)); hibernate addFile(new File(baseDir, String));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg.Configuration",
    "truth_type": "org.hibernate.cfg.Configuration",
    "full_FQN": "org.hibernate.cfg.Configuration.Configuration.addFile()",
    "boolean": 1,
    "context": "} catch (DocumentException e) { printStackTrace();} } private hibernate Configuration setupDb(final File baseDir) throws HibernateException { hibernate Configuration cfg = new hibernate Configuration(); hibernate <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addFile(new File(baseDir, String)); hibernate addFile(new File(baseDir, String));SchemaExport export = new SchemaExport(cfg);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File()",
    "boolean": 1,
    "context": "} catch (DocumentException e) { printStackTrace();} } private hibernate Configuration setupDb(final File baseDir) throws HibernateException { hibernate Configuration cfg = new hibernate Configuration(); hibernate addFile(new <mask><mask><mask>.File(baseDir, String)); hibernate addFile(new File(baseDir, String));SchemaExport export = new SchemaExport(cfg);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.cfg.Configuration",
    "truth_type": "org.hibernate.cfg.Configuration",
    "full_FQN": "org.hibernate.cfg.Configuration.Configuration.addFile()",
    "boolean": 1,
    "context": "} } private hibernate Configuration setupDb(final File baseDir) throws HibernateException { hibernate Configuration cfg = new hibernate Configuration(); hibernate addFile(new File(baseDir, String)); hibernate <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addFile(new File(baseDir, String));SchemaExport export = new SchemaExport(cfg); setOutputFile(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File()",
    "boolean": 1,
    "context": "} } private hibernate Configuration setupDb(final File baseDir) throws HibernateException { hibernate Configuration cfg = new hibernate Configuration(); hibernate addFile(new File(baseDir, String)); hibernate addFile(new <mask><mask><mask>.File(baseDir, String));SchemaExport export = new SchemaExport(cfg); setOutputFile(String);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.tool.schema.spl",
    "truth_type": "org.hibernate.tool.hbm2ddl",
    "full_FQN": "org.hibernate.tool.hbm2ddl.SchemaExport",
    "boolean": 0,
    "context": " hibernate addFile(new File(baseDir, String)); hibernate addFile(new File(baseDir, String));<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.SchemaExport export = new SchemaExport(cfg); setOutputFile(String); execute(false, true, false, false);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.tool",
    "truth_type": "org.hibernate.tool",
    "full_FQN": "org.hibernate.tool.hbm2ddl.SchemaExport()",
    "boolean": 1,
    "context": " hibernate addFile(new File(baseDir, String)); hibernate addFile(new File(baseDir, String));SchemaExport export = new <mask><mask><mask><mask><mask><mask><mask><mask>SchemaExport(cfg); setOutputFile(String); execute(false, true, false, false);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.tool.schema.spl",
    "truth_type": "org.hibernate.tool.hbm2ddl",
    "full_FQN": "org.hibernate.tool.hbm2ddl.SchemaExport.setOutputFile()",
    "boolean": 0,
    "context": " hibernate addFile(new File(baseDir, String));SchemaExport export = new SchemaExport(cfg); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setOutputFile(String); execute(false, true, false, false);return cfg;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate.tool.schema.spi",
    "truth_type": "org.hibernate.tool.hbm2ddl",
    "full_FQN": "org.hibernate.tool.hbm2ddl.SchemaExport.execute()",
    "boolean": 0,
    "context": "org.hibernate.tool.hbm2ddl.SchemaExport export = new SchemaExport(cfg); setOutputFile(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>execute(false, true, false, false);return cfg;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "public class hibernate_class_7 { public class HibernateUtils { private final <mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory;private Session session;public HibernateUtils() { sessionFactory = new AnnotationConfiguration().configure().buildSessionFactory();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "public class hibernate_class_7 { public class HibernateUtils { private final SessionFactory sessionFactory;private <mask><mask><mask><mask><mask><mask>.Session session;public HibernateUtils() { sessionFactory = new AnnotationConfiguration().configure().buildSessionFactory();} public HibernateUtils(SessionFactory sessionFactory) { sessionFactory = sessionFactory;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.cfg.AnnotationConfiguration()",
    "boolean": 1,
    "context": "public class hibernate_class_7 { public class HibernateUtils { private final SessionFactory sessionFactory;private Session session;public HibernateUtils() { sessionFactory = new <mask><mask><mask><mask><mask><mask>AnnotationConfiguration().configure().buildSessionFactory();} public HibernateUtils(SessionFactory sessionFactory) { sessionFactory = sessionFactory;} public Session requestSession() { session = openSession();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory",
    "boolean": 1,
    "context": "private Session session;public HibernateUtils() { sessionFactory = new AnnotationConfiguration().configure().buildSessionFactory();} public HibernateUtils(<mask><mask><mask><mask><mask><mask>.SessionFactory sessionFactory) { sessionFactory = sessionFactory;} public Session requestSession() { session = openSession();return session;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "public HibernateUtils() { sessionFactory = new AnnotationConfiguration().configure().buildSessionFactory();} public HibernateUtils(SessionFactory sessionFactory) { sessionFactory = sessionFactory;} public <mask><mask><mask><mask><mask><mask>.Session requestSession() { session = openSession();return session;} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.SessionFactory.openSession()",
    "boolean": 1,
    "context": "public HibernateUtils() { sessionFactory = new AnnotationConfiguration().configure().buildSessionFactory();} public HibernateUtils(SessionFactory sessionFactory) { sessionFactory = sessionFactory;} public Session requestSession() { session = <mask><mask><mask><mask><mask><mask>openSession();return session;} } };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.MappedSuperclass",
    "boolean": 0,
    "context": "@<mask><mask><mask><mask><mask><mask>.MappedSuperclass public abstract class hibernate_class_8 { private static final long serialVersionUID = 1L;private Date from;private Date thru;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date",
    "boolean": 1,
    "context": "@MappedSuperclass public abstract class hibernate_class_8 { private static final long serialVersionUID = 1L;private <mask><mask><mask>.Date from;private Date thru;@Transient public boolean isActive() { Date now = new Date();"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date",
    "boolean": 1,
    "context": "@MappedSuperclass public abstract class hibernate_class_8 { private static final long serialVersionUID = 1L;private Date from;private <mask><mask><mask>.Date thru;@Transient public boolean isActive() { Date now = new Date();boolean afterFrom = before(now) || equals(now);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Transient",
    "boolean": 0,
    "context": "private Date from;private Date thru;@<mask><mask><mask><mask><mask><mask>.Transient public boolean isActive() { Date now = new Date();boolean afterFrom = before(now) || equals(now);boolean beforeThru = ((thru == null) || after(now)) || equals(now);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date",
    "boolean": 1,
    "context": "private Date from;private Date thru;@Transient public boolean isActive() { <mask><mask><mask>.Date now = new Date();boolean afterFrom = before(now) || equals(now);boolean beforeThru = ((thru == null) || after(now)) || equals(now);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date()",
    "boolean": 1,
    "context": "private Date from;private Date thru;@Transient public boolean isActive() { Date now = new <mask><mask><mask>.Date();boolean afterFrom = before(now) || equals(now);boolean beforeThru = ((thru == null) || after(now)) || equals(now);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date.before()",
    "boolean": 1,
    "context": "private Date thru;@Transient public boolean isActive() { Date now = new Date();boolean afterFrom = <mask><mask><mask>before(now) || equals(now);boolean beforeThru = ((thru == null) || after(now)) || equals(now);return afterFrom && beforeThru;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date.equals()",
    "boolean": 1,
    "context": "private Date thru;@Transient public boolean isActive() { Date now = new Date();boolean afterFrom = before(now) || <mask><mask><mask>equals(now);boolean beforeThru = ((thru == null) || after(now)) || equals(now);return afterFrom && beforeThru;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date.after()",
    "boolean": 1,
    "context": "@Transient public boolean isActive() { Date now = new Date();boolean afterFrom = before(now) || equals(now);boolean beforeThru = ((thru == null) || <mask><mask><mask>after(now)) || equals(now);return afterFrom && beforeThru;} @AssertTrue(message = String) public boolean areDatesValid() { if (thru == null) { return true;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date.equals()",
    "boolean": 1,
    "context": "@Transient public boolean isActive() { Date now = new Date();boolean afterFrom = before(now) || equals(now);boolean beforeThru = ((thru == null) || after(now)) || <mask><mask><mask>equals(now);return afterFrom && beforeThru;} @AssertTrue(message = String) public boolean areDatesValid() { if (thru == null) { return true;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.h.jons",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.validator.AssertTrue()",
    "boolean": 0,
    "context": "boolean beforeThru = ((thru == null) || after(now)) || equals(now);return afterFrom && beforeThru;} @<mask><mask><mask><mask><mask><mask>AssertTrue(message = String) public boolean areDatesValid() { if (thru == null) { return true;} else { return after(from);} } @Temporal(TIMESTAMP) @NotNull @Column(name = String) public Date getFrom() { return from;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date.after()",
    "boolean": 1,
    "context": "return afterFrom && beforeThru;} @AssertTrue(message = String) public boolean areDatesValid() { if (thru == null) { return true;} else { return <mask><mask><mask>after(from);} } @Temporal(TIMESTAMP) @NotNull @Column(name = String) public Date getFrom() { return from;} public void setFrom(Date from) { from = from;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Temporal()",
    "boolean": 0,
    "context": "} @AssertTrue(message = String) public boolean areDatesValid() { if (thru == null) { return true;} else { return after(from);} } @<mask><mask><mask><mask><mask><mask>.Temporal(TIMESTAMP) @NotNull @Column(name = String) public Date getFrom() { return from;} public void setFrom(Date from) { from = from;} @Temporal(TIMESTAMP) public Date getThru() { return thru;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence.TemporalType",
    "truth_type": "javax.persistence.TemporalType",
    "full_FQN": "javax.persistence.TemporalType.TIMESTAMP",
    "boolean": 0,
    "context": "} @AssertTrue(message = String) public boolean areDatesValid() { if (thru == null) { return true;} else { return after(from);} } @Temporal(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.TIMESTAMP) @NotNull @Column(name = String) public Date getFrom() { return from;} public void setFrom(Date from) { from = from;} @Temporal(TIMESTAMP) public Date getThru() { return thru;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "j.arta.validation.internal",
    "truth_type": "com.sun.istack.internal",
    "full_FQN": "com.sun.istack.internal.NotNull",
    "boolean": 0,
    "context": "} @AssertTrue(message = String) public boolean areDatesValid() { if (thru == null) { return true;} else { return after(from);} } @Temporal(TIMESTAMP) @<mask><mask><mask><mask><mask><mask><mask><mask>.NotNull @Column(name = String) public Date getFrom() { return from;} public void setFrom(Date from) { from = from;} @Temporal(TIMESTAMP) public Date getThru() { return thru;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Column()",
    "boolean": 0,
    "context": "} @AssertTrue(message = String) public boolean areDatesValid() { if (thru == null) { return true;} else { return after(from);} } @Temporal(TIMESTAMP) @NotNull @<mask><mask><mask><mask><mask><mask>.Column(name = String) public Date getFrom() { return from;} public void setFrom(Date from) { from = from;} @Temporal(TIMESTAMP) public Date getThru() { return thru;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date",
    "boolean": 1,
    "context": "} @AssertTrue(message = String) public boolean areDatesValid() { if (thru == null) { return true;} else { return after(from);} } @Temporal(TIMESTAMP) @NotNull @Column(name = String) public <mask><mask><mask>.Date getFrom() { return from;} public void setFrom(Date from) { from = from;} @Temporal(TIMESTAMP) public Date getThru() { return thru;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date",
    "boolean": 1,
    "context": "} else { return after(from);} } @Temporal(TIMESTAMP) @NotNull @Column(name = String) public Date getFrom() { return from;} public void setFrom(<mask><mask><mask>.Date from) { from = from;} @Temporal(TIMESTAMP) public Date getThru() { return thru;} public void setThru(Date thru) { thru = thru;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence",
    "truth_type": "javax.persistence",
    "full_FQN": "javax.persistence.Temporal()",
    "boolean": 0,
    "context": "} } @Temporal(TIMESTAMP) @NotNull @Column(name = String) public Date getFrom() { return from;} public void setFrom(Date from) { from = from;} @<mask><mask><mask><mask><mask><mask>.Temporal(TIMESTAMP) public Date getThru() { return thru;} public void setThru(Date thru) { thru = thru;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "jakarta.persistence.TemporalType",
    "truth_type": "javax.persistence.TemporalType",
    "full_FQN": "javax.persistence.TemporalType.TIMESTAMP",
    "boolean": 0,
    "context": "} } @Temporal(TIMESTAMP) @NotNull @Column(name = String) public Date getFrom() { return from;} public void setFrom(Date from) { from = from;} @Temporal(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.TIMESTAMP) public Date getThru() { return thru;} public void setThru(Date thru) { thru = thru;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date",
    "boolean": 1,
    "context": "} } @Temporal(TIMESTAMP) @NotNull @Column(name = String) public Date getFrom() { return from;} public void setFrom(Date from) { from = from;} @Temporal(TIMESTAMP) public <mask><mask><mask>.Date getThru() { return thru;} public void setThru(Date thru) { thru = thru;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date",
    "boolean": 1,
    "context": "} public void setFrom(Date from) { from = from;} @Temporal(TIMESTAMP) public Date getThru() { return thru;} public void setThru(<mask><mask><mask>.Date thru) { thru = thru;} };"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.Serializable",
    "boolean": 1,
    "context": "public class hibernate_class_9 implements <mask><mask><mask>.Serializable { private int patientId;private String patientName;private String providerId;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session",
    "boolean": 1,
    "context": "private String providerId;private static final long serialVersionUID = 81073;public static void load(<mask><mask><mask><mask><mask><mask>.Session session, List<String> values) { hibernate_class_9 PatientInfo = new hibernate_class_9();setPatientId(parseInt get(0)));setPatientName get(1));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "private String providerId;private static final long serialVersionUID = 81073;public static void load(Session session, <mask><mask><mask>.List<String> values) { hibernate_class_9 PatientInfo = new hibernate_class_9();setPatientId(parseInt get(0)));setPatientName get(1));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.get()",
    "boolean": 1,
    "context": "private static final long serialVersionUID = 81073;public static void load(Session session, List<String> values) { hibernate_class_9 PatientInfo = new hibernate_class_9();setPatientId(parseInt <mask><mask><mask>get(0)));setPatientName get(1));setProviderId get(2));"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.get()",
    "boolean": 1,
    "context": "public static void load(Session session, List<String> values) { hibernate_class_9 PatientInfo = new hibernate_class_9();setPatientId(parseInt get(0)));setPatientName <mask><mask><mask>get(1));setProviderId get(2)); save(PatientInfo);"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.get()",
    "boolean": 1,
    "context": "PatientInfo.setPatientId(parseInt get(0)));setPatientName get(1));setProviderId <mask><mask><mask>get(2)); save(PatientInfo);} public int getPatientId() { return patientId;"
  },
  {
    "lib_name": "hibernate",
    "pred_type": "org.hibernate",
    "truth_type": "org.hibernate",
    "full_FQN": "org.hibernate.Session.save()",
    "boolean": 1,
    "context": "PatientInfo.setPatientName get(1));setProviderId get(2)); <mask><mask><mask><mask><mask><mask>save(PatientInfo);} public int getPatientId() { return patientId;} public void setPatientId(int PatientId) { patientId = PatientId;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException",
    "boolean": 1,
    "context": "@SuppressWarnings(String) public class Class_1 { private static void createBinaryApplet() throws <mask><mask><mask>.IOException { java Applet applet = new java Applet() { @Override public void paint(Graphics g) { paint(g); fillRect(0, 0, 10, 10);} };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.applet.Applet",
    "truth_type": "java.applet.Applet",
    "full_FQN": "java.applet.Applet.Applet",
    "boolean": 1,
    "context": "@SuppressWarnings(String) public class Class_1 { private static void createBinaryApplet() throws IOException { java <mask><mask><mask><mask><mask><mask><mask>.Applet applet = new java Applet() { @Override public void paint(Graphics g) { paint(g); fillRect(0, 0, 10, 10);} };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.applet",
    "truth_type": "java.applet",
    "full_FQN": "java.applet.Applet.Applet()",
    "boolean": 1,
    "context": "@SuppressWarnings(String) public class Class_1 { private static void createBinaryApplet() throws IOException { java Applet applet = new java <mask><mask><mask><mask>Applet() { @Override public void paint(Graphics g) { paint(g); fillRect(0, 0, 10, 10);} };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Graphics",
    "boolean": 1,
    "context": "@SuppressWarnings(String) public class Class_1 { private static void createBinaryApplet() throws IOException { java Applet applet = new java Applet() { @Override public void paint(<mask><mask><mask><mask>.Graphics g) { paint(g); fillRect(0, 0, 10, 10);} };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Graphics.fillRect()",
    "boolean": 1,
    "context": "@SuppressWarnings(String) public class Class_1 { private static void createBinaryApplet() throws IOException { java Applet applet = new java Applet() { @Override public void paint(Graphics g) { paint(g); <mask><mask><mask><mask>fillRect(0, 0, 10, 10);} };ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(String));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.ObjectOutputStream",
    "boolean": 1,
    "context": " fillRect(0, 0, 10, 10);} };<mask><mask><mask>.ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(String)); writeObject(applet); close();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.ObjectOutputStream()",
    "boolean": 1,
    "context": " fillRect(0, 0, 10, 10);} };ObjectOutputStream oos = new <mask><mask><mask>.ObjectOutputStream(new FileOutputStream(String)); writeObject(applet); close();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileOutputStream()",
    "boolean": 1,
    "context": " fillRect(0, 0, 10, 10);} };ObjectOutputStream oos = new ObjectOutputStream(new <mask><mask><mask>.FileOutputStream(String)); writeObject(applet); close();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.ObjectOutputStream.writeObject()",
    "boolean": 1,
    "context": "} };ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(String)); <mask><mask><mask>writeObject(applet); close();} public static void main(String[] args) { final Frame frame = new Frame(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.ObjectOutputStream.close()",
    "boolean": 1,
    "context": "java.io.ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(String)); writeObject(applet); <mask><mask><mask>close();} public static void main(String[] args) { final Frame frame = new Frame(String); addWindowListener(new WindowAdapter() { public void windowClosing(WindowEvent we) { dispose();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Frame",
    "boolean": 1,
    "context": " writeObject(applet); close();} public static void main(String[] args) { final <mask><mask><mask><mask>.Frame frame = new Frame(String); addWindowListener(new WindowAdapter() { public void windowClosing(WindowEvent we) { dispose();} });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Frame()",
    "boolean": 1,
    "context": " writeObject(applet); close();} public static void main(String[] args) { final Frame frame = new <mask><mask><mask><mask>.Frame(String); addWindowListener(new WindowAdapter() { public void windowClosing(WindowEvent we) { dispose();} });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Frame.addWindowListener()",
    "boolean": 1,
    "context": " close();} public static void main(String[] args) { final Frame frame = new Frame(String); <mask><mask><mask><mask>addWindowListener(new WindowAdapter() { public void windowClosing(WindowEvent we) { dispose();} });final int prefHeight = 50;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.event.WindowAdapter()",
    "boolean": 1,
    "context": " close();} public static void main(String[] args) { final Frame frame = new Frame(String); addWindowListener(new <mask><mask><mask><mask>WindowAdapter() { public void windowClosing(WindowEvent we) { dispose();} });final int prefHeight = 50;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.event",
    "truth_type": "java.awt.event",
    "full_FQN": "java.awt.event.WindowEvent",
    "boolean": 1,
    "context": " close();} public static void main(String[] args) { final Frame frame = new Frame(String); addWindowListener(new WindowAdapter() { public void windowClosing(<mask><mask><mask><mask><mask><mask>.WindowEvent we) { dispose();} });final int prefHeight = 50;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Frame.dispose()",
    "boolean": 1,
    "context": " close();} public static void main(String[] args) { final Frame frame = new Frame(String); addWindowListener(new WindowAdapter() { public void windowClosing(WindowEvent we) { <mask><mask><mask><mask>dispose();} });final int prefHeight = 50;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Container",
    "boolean": 1,
    "context": "final int prefHeight = 50;final int prefWidth = 50;<mask><mask><mask><mask>.Container container = new Container() { @Override public void paint(Graphics g) { paint(g);Graphics2D graphs = ((Graphics2D) (g)); setBackground(WHITE);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Container()",
    "boolean": 1,
    "context": "final int prefHeight = 50;final int prefWidth = 50;Container container = new <mask><mask><mask><mask>.Container() { @Override public void paint(Graphics g) { paint(g);Graphics2D graphs = ((Graphics2D) (g)); setBackground(WHITE);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Graphics",
    "boolean": 1,
    "context": "final int prefHeight = 50;final int prefWidth = 50;Container container = new Container() { @Override public void paint(<mask><mask><mask><mask>.Graphics g) { paint(g);Graphics2D graphs = ((Graphics2D) (g)); setBackground(WHITE);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Graphics2D",
    "boolean": 1,
    "context": "final int prefWidth = 50;Container container = new Container() { @Override public void paint(Graphics g) { paint(g);<mask><mask><mask><mask>.Graphics2D graphs = ((Graphics2D) (g)); setBackground(WHITE); clearRect(0, 0, prefWidth, prefHeight);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Graphics2D",
    "boolean": 1,
    "context": "final int prefWidth = 50;Container container = new Container() { @Override public void paint(Graphics g) { paint(g);Graphics2D graphs = ((<mask><mask><mask><mask>.Graphics2D) (g)); setBackground(WHITE); clearRect(0, 0, prefWidth, prefHeight);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Graphics2D.setBackground()",
    "boolean": 1,
    "context": "java.awt.Container container = new Container() { @Override public void paint(Graphics g) { paint(g);Graphics2D graphs = ((Graphics2D) (g)); <mask><mask><mask><mask>setBackground(WHITE); clearRect(0, 0, prefWidth, prefHeight); setColor(RED);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.Color",
    "truth_type": "java.awt.Color",
    "full_FQN": "java.awt.Color.WHITE",
    "boolean": 1,
    "context": "java.awt.Container container = new Container() { @Override public void paint(Graphics g) { paint(g);Graphics2D graphs = ((Graphics2D) (g)); setBackground(<mask><mask><mask><mask><mask><mask>.WHITE); clearRect(0, 0, prefWidth, prefHeight); setColor(RED);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Graphics2D.clearRect()",
    "boolean": 1,
    "context": "java.awt.Graphics2D graphs = ((Graphics2D) (g)); setBackground(WHITE); <mask><mask><mask><mask>clearRect(0, 0, prefWidth, prefHeight); setColor(RED); fillRect(5, 5, 10, 10);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Graphics.setColor()",
    "boolean": 1,
    "context": " setBackground(WHITE); clearRect(0, 0, prefWidth, prefHeight); <mask><mask><mask><mask>setColor(RED); fillRect(5, 5, 10, 10);} };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.Color",
    "truth_type": "java.awt.Color",
    "full_FQN": "java.awt.Color.RED",
    "boolean": 1,
    "context": " setBackground(WHITE); clearRect(0, 0, prefWidth, prefHeight); setColor(<mask><mask><mask><mask><mask><mask>.RED); fillRect(5, 5, 10, 10);} };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Graphics.fillRect()",
    "boolean": 1,
    "context": " clearRect(0, 0, prefWidth, prefHeight); setColor(RED); <mask><mask><mask><mask>fillRect(5, 5, 10, 10);} }; setPreferredSize(new Dimension(prefWidth, prefHeight));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Container.setPreferredSize()",
    "boolean": 1,
    "context": " fillRect(5, 5, 10, 10);} }; <mask><mask><mask><mask>setPreferredSize(new Dimension(prefWidth, prefHeight)); add(container); pack();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Dimension()",
    "boolean": 1,
    "context": " fillRect(5, 5, 10, 10);} }; setPreferredSize(new <mask><mask><mask><mask>.Dimension(prefWidth, prefHeight)); add(container); pack();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Frame.add()",
    "boolean": 1,
    "context": "} }; setPreferredSize(new Dimension(prefWidth, prefHeight)); <mask><mask><mask><mask>add(container); pack(); setVisible(true);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Frame.pack()",
    "boolean": 1,
    "context": " setPreferredSize(new Dimension(prefWidth, prefHeight)); add(container); <mask><mask><mask><mask>pack(); setVisible(true);BufferedImage bufImage = new BufferedImage(prefWidth, prefHeight, TYPE_INT_RGB);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Frame.setVisible()",
    "boolean": 1,
    "context": " add(container); pack(); <mask><mask><mask><mask>setVisible(true);BufferedImage bufImage = new BufferedImage(prefWidth, prefHeight, TYPE_INT_RGB); paint createGraphics());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.image",
    "truth_type": "java.awt.image",
    "full_FQN": "java.awt.image.BufferedImage",
    "boolean": 1,
    "context": " pack(); setVisible(true);<mask><mask><mask><mask><mask><mask>.BufferedImage bufImage = new BufferedImage(prefWidth, prefHeight, TYPE_INT_RGB); paint createGraphics());try { createBinaryApplet();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.image.BufferedImage()",
    "boolean": 1,
    "context": " pack(); setVisible(true);BufferedImage bufImage = new <mask><mask><mask><mask>BufferedImage(prefWidth, prefHeight, TYPE_INT_RGB); paint createGraphics());try { createBinaryApplet();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.image.BufferedImage",
    "truth_type": "java.awt.image.BufferedImage",
    "full_FQN": "java.awt.image.BufferedImage.TYPE_INT_RGB",
    "boolean": 1,
    "context": " pack(); setVisible(true);BufferedImage bufImage = new BufferedImage(prefWidth, prefHeight, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.TYPE_INT_RGB); paint createGraphics());try { createBinaryApplet();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.Component",
    "truth_type": "java.awt.Container",
    "full_FQN": "java.awt.Container.paint",
    "boolean": 0,
    "context": " setVisible(true);BufferedImage bufImage = new BufferedImage(prefWidth, prefHeight, TYPE_INT_RGB); <mask><mask><mask><mask><mask><mask>.paint createGraphics());try { createBinaryApplet();ObjectInputStream ois = new ObjectInputStream(new FileInputStream(String));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.image",
    "truth_type": "java.awt.image",
    "full_FQN": "java.awt.image.BufferedImage.createGraphics()",
    "boolean": 1,
    "context": " setVisible(true);BufferedImage bufImage = new BufferedImage(prefWidth, prefHeight, TYPE_INT_RGB); paint <mask><mask><mask><mask><mask><mask>createGraphics());try { createBinaryApplet();ObjectInputStream ois = new ObjectInputStream(new FileInputStream(String));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.ObjectInputStream",
    "boolean": 1,
    "context": " paint createGraphics());try { createBinaryApplet();<mask><mask><mask>.ObjectInputStream ois = new ObjectInputStream(new FileInputStream(String));java Applet applet = ((java Applet)  readObject())); close();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.ObjectInputStream()",
    "boolean": 1,
    "context": " paint createGraphics());try { createBinaryApplet();ObjectInputStream ois = new <mask><mask><mask>.ObjectInputStream(new FileInputStream(String));java Applet applet = ((java Applet)  readObject())); close();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileInputStream()",
    "boolean": 1,
    "context": " paint createGraphics());try { createBinaryApplet();ObjectInputStream ois = new ObjectInputStream(new <mask><mask><mask>.FileInputStream(String));java Applet applet = ((java Applet)  readObject())); close();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.applet.Applet",
    "truth_type": "java.applet.Applet",
    "full_FQN": "java.applet.Applet.Applet",
    "boolean": 1,
    "context": "try { createBinaryApplet();ObjectInputStream ois = new ObjectInputStream(new FileInputStream(String));java <mask><mask><mask><mask><mask><mask><mask>.Applet applet = ((java Applet)  readObject())); close(); add(applet);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.applet.Applet",
    "truth_type": "java.applet.Applet",
    "full_FQN": "java.applet.Applet.Applet",
    "boolean": 1,
    "context": "try { createBinaryApplet();ObjectInputStream ois = new ObjectInputStream(new FileInputStream(String));java Applet applet = ((java <mask><mask><mask><mask><mask><mask><mask>.Applet)  readObject())); close(); add(applet);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.ObjectInputStream.readObject()",
    "boolean": 1,
    "context": "try { createBinaryApplet();ObjectInputStream ois = new ObjectInputStream(new FileInputStream(String));java Applet applet = ((java Applet)  <mask><mask><mask>readObject())); close(); add(applet);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.ObjectInputStream.close()",
    "boolean": 1,
    "context": "java.io.ObjectInputStream ois = new ObjectInputStream(new FileInputStream(String));java Applet applet = ((java Applet)  readObject())); <mask><mask><mask>close(); add(applet); java setBounds(0, 0, prefWidth, prefHeight);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Container.add()",
    "boolean": 1,
    "context": "java Applet applet = ((java Applet)  readObject())); close(); <mask><mask><mask><mask>add(applet); java setBounds(0, 0, prefWidth, prefHeight); java init();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.applet.Applet",
    "truth_type": "java.applet.Applet",
    "full_FQN": "java.applet.Applet.Applet.setBounds()",
    "boolean": 1,
    "context": " close(); add(applet); java <mask><mask><mask><mask><mask><mask><mask>setBounds(0, 0, prefWidth, prefHeight); java init();Graphics g = getGraphics();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.applet.Applet",
    "truth_type": "java.applet.Applet",
    "full_FQN": "java.applet.Applet.Applet.init()",
    "boolean": 1,
    "context": " add(applet); java setBounds(0, 0, prefWidth, prefHeight); java <mask><mask><mask><mask><mask><mask><mask>init();Graphics g = getGraphics(); drawImage(bufImage, 0, 0, applet);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Graphics",
    "boolean": 1,
    "context": " java setBounds(0, 0, prefWidth, prefHeight); java init();<mask><mask><mask><mask>.Graphics g = getGraphics(); drawImage(bufImage, 0, 0, applet); java paint(g);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.applet",
    "truth_type": "java.applet",
    "full_FQN": "java.applet.Applet.getGraphics()",
    "boolean": 1,
    "context": " java setBounds(0, 0, prefWidth, prefHeight); java init();Graphics g = <mask><mask><mask><mask>getGraphics(); drawImage(bufImage, 0, 0, applet); java paint(g);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Graphics.drawImage()",
    "boolean": 1,
    "context": " java init();Graphics g = getGraphics(); <mask><mask><mask><mask>drawImage(bufImage, 0, 0, applet); java paint(g);} catch (ClassNotFoundException | IOException e) { println(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.appt.Applet",
    "truth_type": "java.applet.Applet",
    "full_FQN": "java.applet.Applet.Applet.paint()",
    "boolean": 0,
    "context": "java.awt.Graphics g = getGraphics(); drawImage(bufImage, 0, 0, applet); java <mask><mask><mask><mask><mask><mask><mask>paint(g);} catch (ClassNotFoundException | IOException e) { println(String);} } };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException",
    "boolean": 1,
    "context": " drawImage(bufImage, 0, 0, applet); java paint(g);} catch (ClassNotFoundException | <mask><mask><mask>.IOException e) { println(String);} } };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.NumberFormat",
    "boolean": 1,
    "context": "public class Class_10 { public static final <mask><mask><mask>.NumberFormat nf = getNumberInstance(US);public static final void main(String[] tryCount_inParamIdx0) { int testCount;try { testCount = parseInt(tryCount_inParamIdx0[0]);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.NumberFormat.getNumberInstance()",
    "boolean": 1,
    "context": "public class Class_10 { public static final NumberFormat nf = <mask><mask><mask>getNumberInstance(US);public static final void main(String[] tryCount_inParamIdx0) { int testCount;try { testCount = parseInt(tryCount_inParamIdx0[0]);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.Locale",
    "truth_type": "java.util.Locale",
    "full_FQN": "java.util.Locale.US",
    "boolean": 1,
    "context": "public class Class_10 { public static final NumberFormat nf = getNumberInstance(<mask><mask><mask><mask><mask><mask>.US);public static final void main(String[] tryCount_inParamIdx0) { int testCount;try { testCount = parseInt(tryCount_inParamIdx0[0]);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File",
    "boolean": 1,
    "context": "public class Class_11 { public static void main(String[] args) { try { String content = String;String path = String;<mask><mask><mask>.File file = new File(path);if ( exists()) { createNewFile();} FileWriter fw = new FileWriter getAbsoluteFile());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File()",
    "boolean": 1,
    "context": "public class Class_11 { public static void main(String[] args) { try { String content = String;String path = String;File file = new <mask><mask><mask>.File(path);if ( exists()) { createNewFile();} FileWriter fw = new FileWriter getAbsoluteFile());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File.exists()",
    "boolean": 1,
    "context": "java.lang.String path = String;File file = new File(path);if ( <mask><mask><mask>exists()) { createNewFile();} FileWriter fw = new FileWriter getAbsoluteFile());BufferedWriter bw = new BufferedWriter(fw);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File.createNewFile()",
    "boolean": 1,
    "context": "java.lang.String path = String;File file = new File(path);if ( exists()) { <mask><mask><mask>createNewFile();} FileWriter fw = new FileWriter getAbsoluteFile());BufferedWriter bw = new BufferedWriter(fw);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileWriter",
    "boolean": 1,
    "context": "java.io.File file = new File(path);if ( exists()) { createNewFile();} <mask><mask><mask>.FileWriter fw = new FileWriter getAbsoluteFile());BufferedWriter bw = new BufferedWriter(fw); write(content);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileWriter",
    "boolean": 1,
    "context": "java.io.File file = new File(path);if ( exists()) { createNewFile();} FileWriter fw = new <mask><mask><mask>.FileWriter getAbsoluteFile());BufferedWriter bw = new BufferedWriter(fw); write(content);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File.getAbsoluteFile()",
    "boolean": 1,
    "context": "java.io.File file = new File(path);if ( exists()) { createNewFile();} FileWriter fw = new FileWriter <mask><mask><mask>getAbsoluteFile());BufferedWriter bw = new BufferedWriter(fw); write(content);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.BufferedWriter",
    "boolean": 1,
    "context": "if ( exists()) { createNewFile();} FileWriter fw = new FileWriter getAbsoluteFile());<mask><mask><mask>.BufferedWriter bw = new BufferedWriter(fw); write(content); close();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.BufferedWriter()",
    "boolean": 1,
    "context": "if ( exists()) { createNewFile();} FileWriter fw = new FileWriter getAbsoluteFile());BufferedWriter bw = new <mask><mask><mask>.BufferedWriter(fw); write(content); close();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.BufferedWriter.write()",
    "boolean": 1,
    "context": "} FileWriter fw = new FileWriter getAbsoluteFile());BufferedWriter bw = new BufferedWriter(fw); <mask><mask><mask>write(content); close();} catch (Exception e) { println(e);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.BufferedWriter.close()",
    "boolean": 1,
    "context": "java.io.BufferedWriter bw = new BufferedWriter(fw); write(content); <mask><mask><mask>close();} catch (Exception e) { println(e);} JFileChooser c = new JFileChooser();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFileChooser",
    "boolean": 1,
    "context": " close();} catch (Exception e) { println(e);} <mask><mask><mask><mask><mask>.JFileChooser c = new JFileChooser(); showOpenDialog(c);File writeFile = getSelectedFile();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFileChooser()",
    "boolean": 1,
    "context": " close();} catch (Exception e) { println(e);} JFileChooser c = new <mask><mask><mask><mask><mask>.JFileChooser(); showOpenDialog(c);File writeFile = getSelectedFile();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFileChooser.showOpenDialog()",
    "boolean": 1,
    "context": "} catch (Exception e) { println(e);} JFileChooser c = new JFileChooser(); <mask><mask><mask><mask><mask>showOpenDialog(c);File writeFile = getSelectedFile();String content = String;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File",
    "boolean": 1,
    "context": "} JFileChooser c = new JFileChooser(); showOpenDialog(c);<mask><mask><mask>.File writeFile = getSelectedFile();String content = String;try { FileWriter fw = new FileWriter(writeFile);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFileChooser.getSelectedFile()",
    "boolean": 1,
    "context": "} JFileChooser c = new JFileChooser(); showOpenDialog(c);File writeFile = <mask><mask><mask><mask><mask>getSelectedFile();String content = String;try { FileWriter fw = new FileWriter(writeFile);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileWriter",
    "boolean": 1,
    "context": "java.io.File writeFile = getSelectedFile();String content = String;try { <mask><mask><mask>.FileWriter fw = new FileWriter(writeFile);BufferedWriter bw = new BufferedWriter(fw); append(content);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileWriter()",
    "boolean": 1,
    "context": "java.io.File writeFile = getSelectedFile();String content = String;try { FileWriter fw = new <mask><mask><mask>.FileWriter(writeFile);BufferedWriter bw = new BufferedWriter(fw); append(content);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.BufferedWriter",
    "boolean": 1,
    "context": "java.lang.String content = String;try { FileWriter fw = new FileWriter(writeFile);<mask><mask><mask>.BufferedWriter bw = new BufferedWriter(fw); append(content); append(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.BufferedWriter()",
    "boolean": 1,
    "context": "java.lang.String content = String;try { FileWriter fw = new FileWriter(writeFile);BufferedWriter bw = new <mask><mask><mask>.BufferedWriter(fw); append(content); append(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.BufferedWriter.append()",
    "boolean": 1,
    "context": "try { FileWriter fw = new FileWriter(writeFile);BufferedWriter bw = new BufferedWriter(fw); <mask><mask><mask>append(content); append(String); close();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.BufferedWriter.append()",
    "boolean": 1,
    "context": "java.io.BufferedWriter bw = new BufferedWriter(fw); append(content); <mask><mask><mask>append(String); close(); close();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.BufferedWriter.close()",
    "boolean": 1,
    "context": " append(content); append(String); <mask><mask><mask>close(); close();} catch (Exception exc) { println(exc);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileWriter.close()",
    "boolean": 1,
    "context": " append(String); close(); <mask><mask><mask>close();} catch (Exception exc) { println(exc);} } };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Calendar",
    "boolean": 1,
    "context": "public final class Class_12 { public static String fromCalendar(final <mask><mask><mask>.Calendar calendar) { Date date = getTime();String formatted = new SimpleDateFormat(String).format(date);return (substring(0, 22) + String) + substring(22);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date",
    "boolean": 1,
    "context": "public final class Class_12 { public static String fromCalendar(final Calendar calendar) { <mask><mask><mask>.Date date = getTime();String formatted = new SimpleDateFormat(String).format(date);return (substring(0, 22) + String) + substring(22);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Calendar.getTime()",
    "boolean": 1,
    "context": "public final class Class_12 { public static String fromCalendar(final Calendar calendar) { Date date = <mask><mask><mask>getTime();String formatted = new SimpleDateFormat(String).format(date);return (substring(0, 22) + String) + substring(22);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.SimpleDateFormat()",
    "boolean": 1,
    "context": "public final class Class_12 { public static String fromCalendar(final Calendar calendar) { Date date = getTime();String formatted = new <mask><mask><mask>.SimpleDateFormat(String).format(date);return (substring(0, 22) + String) + substring(22);} public static String now() { return fromCalendar(getInstance());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.GregorianCalendar.getInstance()",
    "boolean": 1,
    "context": "java.lang.String formatted = new SimpleDateFormat(String).format(date);return (substring(0, 22) + String) + substring(22);} public static String now() { return fromCalendar(<mask><mask><mask>getInstance());} public static Calendar toCalendar(final String iso8601string) throws ParseException { Calendar calendar = getInstance();String s = replace(String, String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Calendar",
    "boolean": 1,
    "context": "return (substring(0, 22) + String) + substring(22);} public static String now() { return fromCalendar(getInstance());} public static <mask><mask><mask>.Calendar toCalendar(final String iso8601string) throws ParseException { Calendar calendar = getInstance();String s = replace(String, String);try { s = substring(0, 22) + substring(23);// to get rid of the String } catch (IndexOutOfBoundsException e) { throw new ParseException(String, 0);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.ParseException",
    "boolean": 1,
    "context": "return (substring(0, 22) + String) + substring(22);} public static String now() { return fromCalendar(getInstance());} public static Calendar toCalendar(final String iso8601string) throws <mask><mask><mask>.ParseException { Calendar calendar = getInstance();String s = replace(String, String);try { s = substring(0, 22) + substring(23);// to get rid of the String } catch (IndexOutOfBoundsException e) { throw new ParseException(String, 0);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Calendar",
    "boolean": 1,
    "context": "return (substring(0, 22) + String) + substring(22);} public static String now() { return fromCalendar(getInstance());} public static Calendar toCalendar(final String iso8601string) throws ParseException { <mask><mask><mask>.Calendar calendar = getInstance();String s = replace(String, String);try { s = substring(0, 22) + substring(23);// to get rid of the String } catch (IndexOutOfBoundsException e) { throw new ParseException(String, 0);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.GregorianCalendar.getInstance()",
    "boolean": 1,
    "context": "return (substring(0, 22) + String) + substring(22);} public static String now() { return fromCalendar(getInstance());} public static Calendar toCalendar(final String iso8601string) throws ParseException { Calendar calendar = <mask><mask><mask>getInstance();String s = replace(String, String);try { s = substring(0, 22) + substring(23);// to get rid of the String } catch (IndexOutOfBoundsException e) { throw new ParseException(String, 0);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.ParseException()",
    "boolean": 1,
    "context": "} public static Calendar toCalendar(final String iso8601string) throws ParseException { Calendar calendar = getInstance();String s = replace(String, String);try { s = substring(0, 22) + substring(23);// to get rid of the String } catch (IndexOutOfBoundsException e) { throw new <mask><mask><mask>.ParseException(String, 0);} Date date = new SimpleDateFormat(String).parse(s); setTime(date);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date",
    "boolean": 1,
    "context": "java.lang.String s = replace(String, String);try { s = substring(0, 22) + substring(23);// to get rid of the String } catch (IndexOutOfBoundsException e) { throw new ParseException(String, 0);} <mask><mask><mask>.Date date = new SimpleDateFormat(String).parse(s); setTime(date);return calendar;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.SimpleDateFormat()",
    "boolean": 1,
    "context": "java.lang.String s = replace(String, String);try { s = substring(0, 22) + substring(23);// to get rid of the String } catch (IndexOutOfBoundsException e) { throw new ParseException(String, 0);} Date date = new <mask><mask><mask>.SimpleDateFormat(String).parse(s); setTime(date);return calendar;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Calendar.setTime()",
    "boolean": 1,
    "context": "try { s = substring(0, 22) + substring(23);// to get rid of the String } catch (IndexOutOfBoundsException e) { throw new ParseException(String, 0);} Date date = new SimpleDateFormat(String).parse(s); <mask><mask><mask>setTime(date);return calendar;} public class ISO8601DateFormatter { private final DateFormat DATE_FORMAT_1 = new SimpleDateFormat(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DateFormat",
    "boolean": 1,
    "context": " setTime(date);return calendar;} public class ISO8601DateFormatter { private final <mask><mask><mask>.DateFormat DATE_FORMAT_1 = new SimpleDateFormat(String);private final DateFormat DATE_FORMAT_2 = new SimpleDateFormat(String);private static final String UTC_PLUS = String;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.SimpleDateFormat()",
    "boolean": 1,
    "context": " setTime(date);return calendar;} public class ISO8601DateFormatter { private final DateFormat DATE_FORMAT_1 = new <mask><mask><mask>.SimpleDateFormat(String);private final DateFormat DATE_FORMAT_2 = new SimpleDateFormat(String);private static final String UTC_PLUS = String;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DateFormat",
    "boolean": 1,
    "context": "return calendar;} public class ISO8601DateFormatter { private final DateFormat DATE_FORMAT_1 = new SimpleDateFormat(String);private final <mask><mask><mask>.DateFormat DATE_FORMAT_2 = new SimpleDateFormat(String);private static final String UTC_PLUS = String;private static final String UTC_MINUS = String;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.SimpleDateFormat()",
    "boolean": 1,
    "context": "return calendar;} public class ISO8601DateFormatter { private final DateFormat DATE_FORMAT_1 = new SimpleDateFormat(String);private final DateFormat DATE_FORMAT_2 = new <mask><mask><mask>.SimpleDateFormat(String);private static final String UTC_PLUS = String;private static final String UTC_MINUS = String;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date",
    "boolean": 1,
    "context": "private static final String UTC_PLUS = String;private static final String UTC_MINUS = String;public <mask><mask><mask>.Date toDate(String iso8601string) throws ParseException { iso8601string = trim();if (toUpperCase().indexOf(String) > 0) { iso8601string = toUpperCase().replace(String, String);} else if (indexOf(UTC_PLUS) > 0) { iso8601string = replaceColon(iso8601string, indexOf(UTC_PLUS));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.ParseException",
    "boolean": 1,
    "context": "private static final String UTC_PLUS = String;private static final String UTC_MINUS = String;public Date toDate(String iso8601string) throws <mask><mask><mask>.ParseException { iso8601string = trim();if (toUpperCase().indexOf(String) > 0) { iso8601string = toUpperCase().replace(String, String);} else if (indexOf(UTC_PLUS) > 0) { iso8601string = replaceColon(iso8601string, indexOf(UTC_PLUS));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date",
    "boolean": 1,
    "context": "} else if (indexOf(UTC_MINUS) > 0) { iso8601string = replaceColon(iso8601string, indexOf(UTC_MINUS));iso8601string = appendZeros(iso8601string, indexOf(UTC_MINUS), UTC_MINUS);} <mask><mask><mask>.Date date = null;if (contains(String)) { date = parse(iso8601string);} else { date = parse(iso8601string);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DateFormat.parse()",
    "boolean": 1,
    "context": "iso8601string = appendZeros(iso8601string, indexOf(UTC_MINUS), UTC_MINUS);} Date date = null;if (contains(String)) { date = <mask><mask><mask>parse(iso8601string);} else { date = parse(iso8601string);} return date;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DateFormat.parse()",
    "boolean": 1,
    "context": "} Date date = null;if (contains(String)) { date = parse(iso8601string);} else { date = <mask><mask><mask>parse(iso8601string);} return date;} public String toISO8601String(Date date) { return format(date);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date",
    "boolean": 1,
    "context": "} else { date = parse(iso8601string);} return date;} public String toISO8601String(<mask><mask><mask>.Date date) { return format(date);} private String replaceColon(String sourceStr, int offsetIndex) { if (substring(offsetIndex).contains(String)) { return substring(0, offsetIndex) + substring(offsetIndex).replace(String, String);} return sourceStr;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DateFormat.format()",
    "boolean": 1,
    "context": "} else { date = parse(iso8601string);} return date;} public String toISO8601String(Date date) { return <mask><mask><mask>format(date);} private String replaceColon(String sourceStr, int offsetIndex) { if (substring(offsetIndex).contains(String)) { return substring(0, offsetIndex) + substring(offsetIndex).replace(String, String);} return sourceStr;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame",
    "boolean": 1,
    "context": "class WhereToPutTheGui { public static void initGui() { for (int ii = 1; ii < 4; ii++) { <mask><mask><mask><mask><mask>.JFrame f = new JFrame(String + ii); setDefaultCloseOperation(DISPOSE_ON_CLOSE);String s = ((String + getProperty(String)) + String) + getProperty(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame()",
    "boolean": 1,
    "context": "class WhereToPutTheGui { public static void initGui() { for (int ii = 1; ii < 4; ii++) { JFrame f = new <mask><mask><mask><mask><mask>.JFrame(String + ii); setDefaultCloseOperation(DISPOSE_ON_CLOSE);String s = ((String + getProperty(String)) + String) + getProperty(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.setDefaultCloseOperation()",
    "boolean": 1,
    "context": "class WhereToPutTheGui { public static void initGui() { for (int ii = 1; ii < 4; ii++) { JFrame f = new JFrame(String + ii); <mask><mask><mask><mask><mask>setDefaultCloseOperation(DISPOSE_ON_CLOSE);String s = ((String + getProperty(String)) + String) + getProperty(String); add(new JTextArea(s, 3, 28));// suggest a size pack();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing.JFrame",
    "truth_type": "javax.swing.JFrame",
    "full_FQN": "javax.swing.JFrame.DISPOSE_ON_CLOSE",
    "boolean": 1,
    "context": "class WhereToPutTheGui { public static void initGui() { for (int ii = 1; ii < 4; ii++) { JFrame f = new JFrame(String + ii); setDefaultCloseOperation(<mask><mask><mask><mask><mask><mask><mask><mask>.DISPOSE_ON_CLOSE);String s = ((String + getProperty(String)) + String) + getProperty(String); add(new JTextArea(s, 3, 28));// suggest a size pack();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.add()",
    "boolean": 1,
    "context": " setDefaultCloseOperation(DISPOSE_ON_CLOSE);String s = ((String + getProperty(String)) + String) + getProperty(String); <mask><mask><mask><mask><mask>add(new JTextArea(s, 3, 28));// suggest a size pack(); setLocationByPlatform(true); setVisible(true);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JTextArea()",
    "boolean": 1,
    "context": " setDefaultCloseOperation(DISPOSE_ON_CLOSE);String s = ((String + getProperty(String)) + String) + getProperty(String); add(new <mask><mask><mask><mask><mask>.JTextArea(s, 3, 28));// suggest a size pack(); setLocationByPlatform(true); setVisible(true);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.pack()",
    "boolean": 1,
    "context": " setDefaultCloseOperation(DISPOSE_ON_CLOSE);String s = ((String + getProperty(String)) + String) + getProperty(String); add(new JTextArea(s, 3, 28));// suggest a size <mask><mask><mask><mask><mask>pack(); setLocationByPlatform(true); setVisible(true);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.setLocationByPlatform()",
    "boolean": 1,
    "context": "java.lang.String s = ((String + getProperty(String)) + String) + getProperty(String); add(new JTextArea(s, 3, 28));// suggest a size pack(); <mask><mask><mask><mask><mask>setLocationByPlatform(true); setVisible(true);} } public static void main(String[] args) { invokeLater(new Runnable() { public void run() { try { setLookAndFeel(getSystemLookAndFeelClassName());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.setVisible()",
    "boolean": 1,
    "context": " add(new JTextArea(s, 3, 28));// suggest a size pack(); setLocationByPlatform(true); <mask><mask><mask><mask><mask>setVisible(true);} } public static void main(String[] args) { invokeLater(new Runnable() { public void run() { try { setLookAndFeel(getSystemLookAndFeelClassName());} catch (Exception useDefault) { } initGui();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.SwingUtilities.invokeLater()",
    "boolean": 1,
    "context": " setLocationByPlatform(true); setVisible(true);} } public static void main(String[] args) { <mask><mask><mask><mask><mask>invokeLater(new Runnable() { public void run() { try { setLookAndFeel(getSystemLookAndFeelClassName());} catch (Exception useDefault) { } initGui();} });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.UIManager.setLookAndFeel()",
    "boolean": 1,
    "context": " setLocationByPlatform(true); setVisible(true);} } public static void main(String[] args) { invokeLater(new Runnable() { public void run() { try { <mask><mask><mask><mask><mask>setLookAndFeel(getSystemLookAndFeelClassName());} catch (Exception useDefault) { } initGui();} });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.UIManager.getSystemLookAndFeelClassName()",
    "boolean": 1,
    "context": " setLocationByPlatform(true); setVisible(true);} } public static void main(String[] args) { invokeLater(new Runnable() { public void run() { try { setLookAndFeel(<mask><mask><mask><mask><mask>getSystemLookAndFeelClassName());} catch (Exception useDefault) { } initGui();} });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "emp.mobile",
    "truth_type": "this.mobile",
    "full_FQN": "this.mobile.equalsIgnoreCase()",
    "boolean": 0,
    "context": "} @Override public boolean equals(Object obj) { println(String);Employee emp = ((Employee) (obj));if (<mask><mask><mask>.equalsIgnoreCase(mobile)) { println(String);return true;} else { println(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.HashMap",
    "boolean": 1,
    "context": "} } public void main(String[] args) { Employee emp = new Employee(String, String);Employee emp2 = new Employee(String, String);<mask><mask><mask>.HashMap<Employee, Employee> h = new HashMap<>(); put(emp, emp); put(emp2, emp2);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.HashMap",
    "boolean": 1,
    "context": "} } public void main(String[] args) { Employee emp = new Employee(String, String);Employee emp2 = new Employee(String, String);HashMap<Employee, Employee> h = new <mask><mask><mask>.HashMap<>(); put(emp, emp); put(emp2, emp2);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.HashMap.put()",
    "boolean": 1,
    "context": "Employee emp2 = new Employee(String, String);HashMap<Employee, Employee> h = new HashMap<>(); <mask><mask><mask>put(emp, emp); put(emp2, emp2);println(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.HashMap.put()",
    "boolean": 1,
    "context": "java.util.HashMap<Employee, Employee> h = new HashMap<>(); put(emp, emp); <mask><mask><mask>put(emp2, emp2);println(String);println(String + size());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.HashMap.size()",
    "boolean": 1,
    "context": " put(emp2, emp2);println(String);println(String + <mask><mask><mask>size());} } };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.prefs",
    "truth_type": "java.util.prefs",
    "full_FQN": "java.util.prefs.Preferences",
    "boolean": 1,
    "context": "private static final int KEY_ALL_ACCESS = 0xf003f;private static final int KEY_READ = 0x20019;private static final <mask><mask><mask><mask><mask><mask>.Preferences userRoot = userRoot();private static final Preferences systemRoot = systemRoot();private static final Class<? extends Preferences> userClass = getClass();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.prefs",
    "truth_type": "java.util.prefs",
    "full_FQN": "java.util.prefs.Preferences.userRoot()",
    "boolean": 1,
    "context": "private static final int KEY_ALL_ACCESS = 0xf003f;private static final int KEY_READ = 0x20019;private static final Preferences userRoot = <mask><mask><mask><mask><mask><mask>userRoot();private static final Preferences systemRoot = systemRoot();private static final Class<? extends Preferences> userClass = getClass();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.prefs",
    "truth_type": "java.util.prefs",
    "full_FQN": "java.util.prefs.Preferences",
    "boolean": 1,
    "context": "private static final int KEY_READ = 0x20019;private static final Preferences userRoot = userRoot();private static final <mask><mask><mask><mask><mask><mask>.Preferences systemRoot = systemRoot();private static final Class<? extends Preferences> userClass = getClass();private static final Method regOpenKey;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.prefs",
    "truth_type": "java.util.prefs",
    "full_FQN": "java.util.prefs.Preferences.systemRoot()",
    "boolean": 1,
    "context": "private static final int KEY_READ = 0x20019;private static final Preferences userRoot = userRoot();private static final Preferences systemRoot = <mask><mask><mask><mask><mask><mask>systemRoot();private static final Class<? extends Preferences> userClass = getClass();private static final Method regOpenKey;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.prefs",
    "truth_type": "java.util.prefs",
    "full_FQN": "java.util.prefs.Preferences",
    "boolean": 1,
    "context": "private static final Preferences userRoot = userRoot();private static final Preferences systemRoot = systemRoot();private static final Class<? extends <mask><mask><mask><mask><mask><mask>.Preferences> userClass = getClass();private static final Method regOpenKey;private static final Method regCloseKey;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map",
    "boolean": 1,
    "context": "} else if (hkey == HKEY_CURRENT_USER) { return readString(userRoot, hkey, key, valueName);} else { throw new IllegalArgumentException(String + hkey);} } public static <mask><mask><mask>.Map<String, String> readStringValues(int hkey, String key) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException { if (hkey == HKEY_LOCAL_MACHINE) { return readStringValues(systemRoot, hkey, key);} else if (hkey == HKEY_CURRENT_USER) { return readStringValues(userRoot, hkey, key);} else { throw new IllegalArgumentException(String + hkey);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "} else if (hkey == HKEY_CURRENT_USER) { return readStringValues(userRoot, hkey, key);} else { throw new IllegalArgumentException(String + hkey);} } public static <mask><mask><mask>.List<String> readStringSubKeys(int hkey, String key) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException { if (hkey == HKEY_LOCAL_MACHINE) { return readStringSubKeys(systemRoot, hkey, key);} else if (hkey == HKEY_CURRENT_USER) { return readStringSubKeys(userRoot, hkey, key);} else { throw new IllegalArgumentException(String + hkey);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.prefs",
    "truth_type": "java.util.prefs",
    "full_FQN": "java.util.prefs.Preferences",
    "boolean": 1,
    "context": "} else if (hkey == HKEY_CURRENT_USER) { rc = deleteValue(userRoot, hkey, key, value);} if (rc != REG_SUCCESS) { throw new IllegalArgumentException(((((String + rc) + String) + key) + String) + value);} } private static int deleteValue(<mask><mask><mask><mask><mask><mask>.Preferences root, int hkey, String key, String value) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException { int[] handles = ((int[]) (invoke(root, new Object[]{ new Integer(hkey), toCstr(key), new Integer(KEY_ALL_ACCESS) })));if (handles[1] != REG_SUCCESS) { return handles[1];} int rc = ((Integer) (invoke(root, new Object[]{ new Integer(handles[0]), toCstr(value) }))).intValue();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.prefs",
    "truth_type": "java.util.prefs",
    "full_FQN": "java.util.prefs.Preferences",
    "boolean": 1,
    "context": "invoke(root, new Object[]{ new Integer(handles[0]) });return rc;} private static int deleteKey(<mask><mask><mask><mask><mask><mask>.Preferences root, int hkey, String key) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException { int rc = ((Integer) (invoke(root, new Object[]{ new Integer(hkey), toCstr(key) }))).intValue();return rc;} private static String readString(Preferences root, int hkey, String key, String value) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException { int[] handles = ((int[]) (invoke(root, new Object[]{ new Integer(hkey), toCstr(key), new Integer(KEY_READ) })));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.prefs",
    "truth_type": "java.util.prefs",
    "full_FQN": "java.util.prefs.Preferences",
    "boolean": 1,
    "context": "} private static int deleteKey(Preferences root, int hkey, String key) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException { int rc = ((Integer) (invoke(root, new Object[]{ new Integer(hkey), toCstr(key) }))).intValue();return rc;} private static String readString(<mask><mask><mask><mask><mask><mask>.Preferences root, int hkey, String key, String value) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException { int[] handles = ((int[]) (invoke(root, new Object[]{ new Integer(hkey), toCstr(key), new Integer(KEY_READ) })));if (handles[1] != REG_SUCCESS) { return null;} byte[] valb = ((byte[]) (invoke(root, new Object[]{ new Integer(handles[0]), toCstr(value) })));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map",
    "boolean": 1,
    "context": "invoke(root, new Object[]{ new Integer(handles[0]) });return valb != null ? new String(valb).trim() : null;} private static <mask><mask><mask>.Map<String, String> readStringValues(Preferences root, int hkey, String key) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException { HashMap<String, String> results = new HashMap<String, String>();int[] handles = ((int[]) (invoke(root, new Object[]{ new Integer(hkey), toCstr(key), new Integer(KEY_READ) })));if (handles[1] != REG_SUCCESS) { return null;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.prefs",
    "truth_type": "java.util.prefs",
    "full_FQN": "java.util.prefs.Preferences",
    "boolean": 1,
    "context": "invoke(root, new Object[]{ new Integer(handles[0]) });return valb != null ? new String(valb).trim() : null;} private static Map<String, String> readStringValues(<mask><mask><mask><mask><mask><mask>.Preferences root, int hkey, String key) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException { HashMap<String, String> results = new HashMap<String, String>();int[] handles = ((int[]) (invoke(root, new Object[]{ new Integer(hkey), toCstr(key), new Integer(KEY_READ) })));if (handles[1] != REG_SUCCESS) { return null;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.HashMap",
    "boolean": 1,
    "context": "invoke(root, new Object[]{ new Integer(handles[0]) });return valb != null ? new String(valb).trim() : null;} private static Map<String, String> readStringValues(Preferences root, int hkey, String key) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException { <mask><mask><mask>.HashMap<String, String> results = new HashMap<String, String>();int[] handles = ((int[]) (invoke(root, new Object[]{ new Integer(hkey), toCstr(key), new Integer(KEY_READ) })));if (handles[1] != REG_SUCCESS) { return null;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.HashMap",
    "boolean": 1,
    "context": "invoke(root, new Object[]{ new Integer(handles[0]) });return valb != null ? new String(valb).trim() : null;} private static Map<String, String> readStringValues(Preferences root, int hkey, String key) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException { HashMap<String, String> results = new <mask><mask><mask>.HashMap<String, String>();int[] handles = ((int[]) (invoke(root, new Object[]{ new Integer(hkey), toCstr(key), new Integer(KEY_READ) })));if (handles[1] != REG_SUCCESS) { return null;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.put()",
    "boolean": 1,
    "context": "for (int index = 0; index < count; index++) { byte[] name = ((byte[]) (invoke(root, new Object[]{ new Integer(handles[0]), new Integer(index), new Integer(maxlen + 1) })));String value = readString(hkey, key, new String(name)); <mask><mask><mask>put(new String(name).trim(), value);} invoke(root, new Object[]{ new Integer(handles[0]) });return results;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "} invoke(root, new Object[]{ new Integer(handles[0]) });return results;} private static <mask><mask><mask>.List<String> readStringSubKeys(Preferences root, int hkey, String key) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException { List<String> results = new ArrayList<String>();int[] handles = ((int[]) (invoke(root, new Object[]{ new Integer(hkey), toCstr(key), new Integer(KEY_READ) })));if (handles[1] != REG_SUCCESS) { return null;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.prefs",
    "truth_type": "java.util.prefs",
    "full_FQN": "java.util.prefs.Preferences",
    "boolean": 1,
    "context": "} invoke(root, new Object[]{ new Integer(handles[0]) });return results;} private static List<String> readStringSubKeys(<mask><mask><mask><mask><mask><mask>.Preferences root, int hkey, String key) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException { List<String> results = new ArrayList<String>();int[] handles = ((int[]) (invoke(root, new Object[]{ new Integer(hkey), toCstr(key), new Integer(KEY_READ) })));if (handles[1] != REG_SUCCESS) { return null;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "} invoke(root, new Object[]{ new Integer(handles[0]) });return results;} private static List<String> readStringSubKeys(Preferences root, int hkey, String key) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException { <mask><mask><mask>.List<String> results = new ArrayList<String>();int[] handles = ((int[]) (invoke(root, new Object[]{ new Integer(hkey), toCstr(key), new Integer(KEY_READ) })));if (handles[1] != REG_SUCCESS) { return null;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "} invoke(root, new Object[]{ new Integer(handles[0]) });return results;} private static List<String> readStringSubKeys(Preferences root, int hkey, String key) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException { List<String> results = new <mask><mask><mask>.ArrayList<String>();int[] handles = ((int[]) (invoke(root, new Object[]{ new Integer(hkey), toCstr(key), new Integer(KEY_READ) })));if (handles[1] != REG_SUCCESS) { return null;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.add()",
    "boolean": 1,
    "context": "int maxlen = info[3];for (int index = 0; index < count; index++) { byte[] name = ((byte[]) (invoke(root, new Object[]{ new Integer(handles[0]), new Integer(index), new Integer(maxlen + 1) }))); <mask><mask><mask>add(new String(name).trim());} invoke(root, new Object[]{ new Integer(handles[0]) });return results;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.prefs",
    "truth_type": "java.util.prefs",
    "full_FQN": "java.util.prefs.Preferences",
    "boolean": 1,
    "context": "} invoke(root, new Object[]{ new Integer(handles[0]) });return results;} private static int[] createKey(<mask><mask><mask><mask><mask><mask>.Preferences root, int hkey, String key) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException { return ((int[]) (invoke(root, new Object[]{ new Integer(hkey), toCstr(key) })));} private static void writeStringValue(Preferences root, int hkey, String key, String valueName, String value) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException { int[] handles = ((int[]) (invoke(root, new Object[]{ new Integer(hkey), toCstr(key), new Integer(KEY_ALL_ACCESS) })));invoke(root, new Object[]{ new Integer(handles[0]), toCstr(valueName), toCstr(value) });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.prefs",
    "truth_type": "java.util.prefs",
    "full_FQN": "java.util.prefs.Preferences",
    "boolean": 1,
    "context": "return results;} private static int[] createKey(Preferences root, int hkey, String key) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException { return ((int[]) (invoke(root, new Object[]{ new Integer(hkey), toCstr(key) })));} private static void writeStringValue(<mask><mask><mask><mask><mask><mask>.Preferences root, int hkey, String key, String valueName, String value) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException { int[] handles = ((int[]) (invoke(root, new Object[]{ new Integer(hkey), toCstr(key), new Integer(KEY_ALL_ACCESS) })));invoke(root, new Object[]{ new Integer(handles[0]), toCstr(valueName), toCstr(value) });invoke(root, new Object[]{ new Integer(handles[0]) });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.SimpleDateFormat",
    "boolean": 1,
    "context": "public class Class_17 { public static void main(String[] arg) { try { <mask><mask><mask>.SimpleDateFormat sourceDateFormat = new SimpleDateFormat(String);Date date = parse(String);SimpleDateFormat targetDateFormat = new SimpleDateFormat(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.SimpleDateFormat()",
    "boolean": 1,
    "context": "public class Class_17 { public static void main(String[] arg) { try { SimpleDateFormat sourceDateFormat = new <mask><mask><mask>.SimpleDateFormat(String);Date date = parse(String);SimpleDateFormat targetDateFormat = new SimpleDateFormat(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date",
    "boolean": 1,
    "context": "public class Class_17 { public static void main(String[] arg) { try { SimpleDateFormat sourceDateFormat = new SimpleDateFormat(String);<mask><mask><mask>.Date date = parse(String);SimpleDateFormat targetDateFormat = new SimpleDateFormat(String);println format(date));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.SimpleDateFormat.parse()",
    "boolean": 1,
    "context": "public class Class_17 { public static void main(String[] arg) { try { SimpleDateFormat sourceDateFormat = new SimpleDateFormat(String);Date date = <mask><mask><mask>parse(String);SimpleDateFormat targetDateFormat = new SimpleDateFormat(String);println format(date));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.SimpleDateFormat",
    "boolean": 1,
    "context": "public class Class_17 { public static void main(String[] arg) { try { SimpleDateFormat sourceDateFormat = new SimpleDateFormat(String);Date date = parse(String);<mask><mask><mask>.SimpleDateFormat targetDateFormat = new SimpleDateFormat(String);println format(date));} catch (ParseException e) { printStackTrace();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.SimpleDateFormat()",
    "boolean": 1,
    "context": "public class Class_17 { public static void main(String[] arg) { try { SimpleDateFormat sourceDateFormat = new SimpleDateFormat(String);Date date = parse(String);SimpleDateFormat targetDateFormat = new <mask><mask><mask>.SimpleDateFormat(String);println format(date));} catch (ParseException e) { printStackTrace();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.SimpleDateFormat.format()",
    "boolean": 1,
    "context": "java.util.Date date = parse(String);SimpleDateFormat targetDateFormat = new SimpleDateFormat(String);println <mask><mask><mask>format(date));} catch (ParseException e) { printStackTrace();} String date = String;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.ParseException",
    "boolean": 1,
    "context": "java.text.SimpleDateFormat targetDateFormat = new SimpleDateFormat(String);println format(date));} catch (<mask><mask><mask>.ParseException e) { printStackTrace();} String date = String;time TemporalAccessor temporal = ofPattern(String).parse(date);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.ParseException.printStackTrace()",
    "boolean": 1,
    "context": "java.text.SimpleDateFormat targetDateFormat = new SimpleDateFormat(String);println format(date));} catch (ParseException e) { <mask><mask><mask>printStackTrace();} String date = String;time TemporalAccessor temporal = ofPattern(String).parse(date);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.time.temporal.TemporalAccessor",
    "truth_type": "java.time.temporal.TemporalAccessor",
    "full_FQN": "java.time.temporal.TemporalAccessor.TemporalAccessor",
    "boolean": 1,
    "context": "} catch (ParseException e) { printStackTrace();} String date = String;time <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.TemporalAccessor temporal = ofPattern(String).parse(date);String output = ofPattern(String).format(temporal);} };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.time.format",
    "truth_type": "java.time.format",
    "full_FQN": "java.time.format.DateTimeFormatter.ofPattern()",
    "boolean": 1,
    "context": "} catch (ParseException e) { printStackTrace();} String date = String;time TemporalAccessor temporal = <mask><mask><mask><mask><mask>ofPattern(String).parse(date);String output = ofPattern(String).format(temporal);} };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.time.format",
    "truth_type": "java.time.format",
    "full_FQN": "java.time.format.DateTimeFormatter.ofPattern()",
    "boolean": 1,
    "context": "} String date = String;time TemporalAccessor temporal = ofPattern(String).parse(date);String output = <mask><mask><mask><mask><mask>ofPattern(String).format(temporal);} };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Random",
    "boolean": 1,
    "context": "for (int i = 0; i < length; i++) { print(solutionArray[i] + String);} println();} static void shuffleArray(int[] ar) { <mask><mask><mask>.Random rnd = current();for (int i = length - 1; i > 0; i--) { int index = nextInt(i + 1);int a = ar[index];"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.concurrent",
    "truth_type": "java.util.concurrent",
    "full_FQN": "java.util.concurrent.ThreadLocalRandom.current()",
    "boolean": 1,
    "context": "for (int i = 0; i < length; i++) { print(solutionArray[i] + String);} println();} static void shuffleArray(int[] ar) { Random rnd = <mask><mask><mask><mask><mask><mask>current();for (int i = length - 1; i > 0; i--) { int index = nextInt(i + 1);int a = ar[index];"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Random.nextInt()",
    "boolean": 1,
    "context": "} println();} static void shuffleArray(int[] ar) { Random rnd = current();for (int i = length - 1; i > 0; i--) { int index = <mask><mask><mask>nextInt(i + 1);int a = ar[index];ar[index] = ar[i];"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "ar[index] = ar[i];ar[i] = a;} } protected static <mask><mask><mask>.List<Integer> range(int n) { return toList(new Range(n), new ArrayList<Integer>());} protected static <T> List<T> toList(Iterable<T> iterable) { return toList(iterable, new ArrayList<T>());} protected static <T> List<T> toList(Iterable<T> iterable, List<T> destination) { addAll(destination, iterator());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "ar[index] = ar[i];ar[i] = a;} } protected static List<Integer> range(int n) { return toList(new Range(n), new <mask><mask><mask>.ArrayList<Integer>());} protected static <T> List<T> toList(Iterable<T> iterable) { return toList(iterable, new ArrayList<T>());} protected static <T> List<T> toList(Iterable<T> iterable, List<T> destination) { addAll(destination, iterator());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "ar[i] = a;} } protected static List<Integer> range(int n) { return toList(new Range(n), new ArrayList<Integer>());} protected static <T> <mask><mask><mask>.List<T> toList(Iterable<T> iterable) { return toList(iterable, new ArrayList<T>());} protected static <T> List<T> toList(Iterable<T> iterable, List<T> destination) { addAll(destination, iterator());return destination;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "ar[i] = a;} } protected static List<Integer> range(int n) { return toList(new Range(n), new ArrayList<Integer>());} protected static <T> List<T> toList(Iterable<T> iterable) { return toList(iterable, new <mask><mask><mask>.ArrayList<T>());} protected static <T> List<T> toList(Iterable<T> iterable, List<T> destination) { addAll(destination, iterator());return destination;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "} } protected static List<Integer> range(int n) { return toList(new Range(n), new ArrayList<Integer>());} protected static <T> List<T> toList(Iterable<T> iterable) { return toList(iterable, new ArrayList<T>());} protected static <T> <mask><mask><mask>.List<T> toList(Iterable<T> iterable, List<T> destination) { addAll(destination, iterator());return destination;} protected static <T> void addAll(Collection<T> collection, Iterator<T> iterator) { while  hasNext()) { add next());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "} } protected static List<Integer> range(int n) { return toList(new Range(n), new ArrayList<Integer>());} protected static <T> List<T> toList(Iterable<T> iterable) { return toList(iterable, new ArrayList<T>());} protected static <T> List<T> toList(Iterable<T> iterable, <mask><mask><mask>.List<T> destination) { addAll(destination, iterator());return destination;} protected static <T> void addAll(Collection<T> collection, Iterator<T> iterator) { while  hasNext()) { add next());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Collection",
    "boolean": 1,
    "context": "} protected static <T> List<T> toList(Iterable<T> iterable, List<T> destination) { addAll(destination, iterator());return destination;} protected static <T> void addAll(<mask><mask><mask>.Collection<T> collection, Iterator<T> iterator) { while  hasNext()) { add next());} } private static class Range implements Iterable<Integer> { private int start;private int stop;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator",
    "boolean": 1,
    "context": "} protected static <T> List<T> toList(Iterable<T> iterable, List<T> destination) { addAll(destination, iterator());return destination;} protected static <T> void addAll(Collection<T> collection, <mask><mask><mask>.Iterator<T> iterator) { while  hasNext()) { add next());} } private static class Range implements Iterable<Integer> { private int start;private int stop;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator.hasNext()",
    "boolean": 1,
    "context": "} protected static <T> List<T> toList(Iterable<T> iterable, List<T> destination) { addAll(destination, iterator());return destination;} protected static <T> void addAll(Collection<T> collection, Iterator<T> iterator) { while  <mask><mask><mask>hasNext()) { add next());} } private static class Range implements Iterable<Integer> { private int start;private int stop;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.Collection",
    "truth_type": "java.util.Collection",
    "full_FQN": "java.util.Collection.add",
    "boolean": 1,
    "context": "} protected static <T> List<T> toList(Iterable<T> iterable, List<T> destination) { addAll(destination, iterator());return destination;} protected static <T> void addAll(Collection<T> collection, Iterator<T> iterator) { while  hasNext()) { <mask><mask><mask><mask><mask>.add next());} } private static class Range implements Iterable<Integer> { private int start;private int stop;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator.next()",
    "boolean": 1,
    "context": "} protected static <T> List<T> toList(Iterable<T> iterable, List<T> destination) { addAll(destination, iterator());return destination;} protected static <T> void addAll(Collection<T> collection, Iterator<T> iterator) { while  hasNext()) { add <mask><mask><mask>next());} } private static class Range implements Iterable<Integer> { private int start;private int stop;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator",
    "boolean": 1,
    "context": "this.stop = stop;step = step;} @Override public <mask><mask><mask>.Iterator<Integer> iterator() { final int min = start;final int max = stop / step;return new Iterator<Integer>() { private int current = min;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator",
    "boolean": 1,
    "context": "} @Override public Iterator<Integer> iterator() { final int min = start;final int max = stop / step;return new <mask><mask><mask>.Iterator<Integer>() { private int current = min;@Override public boolean hasNext() { return current < max;} @Override public Integer next() { if (hasNext()) { return (current++) * step;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.NoSuchElementException()",
    "boolean": 1,
    "context": "@Override public boolean hasNext() { return current < max;} @Override public Integer next() { if (hasNext()) { return (current++) * step;} else { throw new <mask><mask><mask>.NoSuchElementException(String);} } @Override public void remove() { throw new UnsupportedOperationException(String);} };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame",
    "boolean": 1,
    "context": "class Class_2 { public static void main(String[] args) { Runnable r = new Runnable() { public void run() { final <mask><mask><mask><mask><mask>.JFrame frame = new JFrame(String); setDefaultCloseOperation(EXIT_ON_CLOSE);final JPanel gui = new JPanel(new BorderLayout(5, 5));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame()",
    "boolean": 1,
    "context": "class Class_2 { public static void main(String[] args) { Runnable r = new Runnable() { public void run() { final JFrame frame = new <mask><mask><mask><mask><mask>.JFrame(String); setDefaultCloseOperation(EXIT_ON_CLOSE);final JPanel gui = new JPanel(new BorderLayout(5, 5));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.setDefaultCloseOperation()",
    "boolean": 1,
    "context": "class Class_2 { public static void main(String[] args) { Runnable r = new Runnable() { public void run() { final JFrame frame = new JFrame(String); <mask><mask><mask><mask><mask>setDefaultCloseOperation(EXIT_ON_CLOSE);final JPanel gui = new JPanel(new BorderLayout(5, 5)); setBorder(new TitledBorder(String));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing.JFrame",
    "truth_type": "javax.swing.JFrame",
    "full_FQN": "javax.swing.JFrame.EXIT_ON_CLOSE",
    "boolean": 1,
    "context": "class Class_2 { public static void main(String[] args) { Runnable r = new Runnable() { public void run() { final JFrame frame = new JFrame(String); setDefaultCloseOperation(<mask><mask><mask><mask><mask><mask><mask><mask>.EXIT_ON_CLOSE);final JPanel gui = new JPanel(new BorderLayout(5, 5)); setBorder(new TitledBorder(String));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel",
    "boolean": 1,
    "context": "class Class_2 { public static void main(String[] args) { Runnable r = new Runnable() { public void run() { final JFrame frame = new JFrame(String); setDefaultCloseOperation(EXIT_ON_CLOSE);final <mask><mask><mask><mask><mask>.JPanel gui = new JPanel(new BorderLayout(5, 5)); setBorder(new TitledBorder(String));JPanel plafComponents = new JPanel(new FlowLayout(RIGHT, 3, 3));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel()",
    "boolean": 1,
    "context": "class Class_2 { public static void main(String[] args) { Runnable r = new Runnable() { public void run() { final JFrame frame = new JFrame(String); setDefaultCloseOperation(EXIT_ON_CLOSE);final JPanel gui = new <mask><mask><mask><mask><mask>.JPanel(new BorderLayout(5, 5)); setBorder(new TitledBorder(String));JPanel plafComponents = new JPanel(new FlowLayout(RIGHT, 3, 3));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.BorderLayout()",
    "boolean": 1,
    "context": "class Class_2 { public static void main(String[] args) { Runnable r = new Runnable() { public void run() { final JFrame frame = new JFrame(String); setDefaultCloseOperation(EXIT_ON_CLOSE);final JPanel gui = new JPanel(new <mask><mask><mask><mask>.BorderLayout(5, 5)); setBorder(new TitledBorder(String));JPanel plafComponents = new JPanel(new FlowLayout(RIGHT, 3, 3));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel.setBorder()",
    "boolean": 1,
    "context": " setDefaultCloseOperation(EXIT_ON_CLOSE);final JPanel gui = new JPanel(new BorderLayout(5, 5)); <mask><mask><mask><mask><mask>setBorder(new TitledBorder(String));JPanel plafComponents = new JPanel(new FlowLayout(RIGHT, 3, 3)); setBorder(new TitledBorder(String));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.border.TitledBorder()",
    "boolean": 1,
    "context": " setDefaultCloseOperation(EXIT_ON_CLOSE);final JPanel gui = new JPanel(new BorderLayout(5, 5)); setBorder(new <mask><mask><mask><mask><mask>TitledBorder(String));JPanel plafComponents = new JPanel(new FlowLayout(RIGHT, 3, 3)); setBorder(new TitledBorder(String));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel",
    "boolean": 1,
    "context": "final JPanel gui = new JPanel(new BorderLayout(5, 5)); setBorder(new TitledBorder(String));<mask><mask><mask><mask><mask>.JPanel plafComponents = new JPanel(new FlowLayout(RIGHT, 3, 3)); setBorder(new TitledBorder(String));final LookAndFeelInfo[] plafInfos = getInstalledLookAndFeels();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel()",
    "boolean": 1,
    "context": "final JPanel gui = new JPanel(new BorderLayout(5, 5)); setBorder(new TitledBorder(String));JPanel plafComponents = new <mask><mask><mask><mask><mask>.JPanel(new FlowLayout(RIGHT, 3, 3)); setBorder(new TitledBorder(String));final LookAndFeelInfo[] plafInfos = getInstalledLookAndFeels();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.FlowLayout()",
    "boolean": 1,
    "context": "final JPanel gui = new JPanel(new BorderLayout(5, 5)); setBorder(new TitledBorder(String));JPanel plafComponents = new JPanel(new <mask><mask><mask><mask>.FlowLayout(RIGHT, 3, 3)); setBorder(new TitledBorder(String));final LookAndFeelInfo[] plafInfos = getInstalledLookAndFeels();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.FlowLayout",
    "truth_type": "java.awt.FlowLayout",
    "full_FQN": "java.awt.FlowLayout.RIGHT",
    "boolean": 1,
    "context": "final JPanel gui = new JPanel(new BorderLayout(5, 5)); setBorder(new TitledBorder(String));JPanel plafComponents = new JPanel(new FlowLayout(<mask><mask><mask><mask><mask><mask><mask>.RIGHT, 3, 3)); setBorder(new TitledBorder(String));final LookAndFeelInfo[] plafInfos = getInstalledLookAndFeels();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel.setBorder()",
    "boolean": 1,
    "context": " setBorder(new TitledBorder(String));JPanel plafComponents = new JPanel(new FlowLayout(RIGHT, 3, 3)); <mask><mask><mask><mask><mask>setBorder(new TitledBorder(String));final LookAndFeelInfo[] plafInfos = getInstalledLookAndFeels();String[] plafNames = new String[length];"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.border.TitledBorder()",
    "boolean": 1,
    "context": " setBorder(new TitledBorder(String));JPanel plafComponents = new JPanel(new FlowLayout(RIGHT, 3, 3)); setBorder(new <mask><mask><mask><mask><mask>TitledBorder(String));final LookAndFeelInfo[] plafInfos = getInstalledLookAndFeels();String[] plafNames = new String[length];"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing.UIManager",
    "truth_type": "javax.swing.UIManager",
    "full_FQN": "javax.swing.UIManager.LookAndFeelInfo",
    "boolean": 1,
    "context": "javax.swing.JPanel plafComponents = new JPanel(new FlowLayout(RIGHT, 3, 3)); setBorder(new TitledBorder(String));final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.LookAndFeelInfo[] plafInfos = getInstalledLookAndFeels();String[] plafNames = new String[length];for (int ii = 0; ii < length; ii++) { plafNames[ii] = plafInfos[ii].getName();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.UIManager.getInstalledLookAndFeels()",
    "boolean": 1,
    "context": "javax.swing.JPanel plafComponents = new JPanel(new FlowLayout(RIGHT, 3, 3)); setBorder(new TitledBorder(String));final LookAndFeelInfo[] plafInfos = <mask><mask><mask><mask><mask>getInstalledLookAndFeels();String[] plafNames = new String[length];for (int ii = 0; ii < length; ii++) { plafNames[ii] = plafInfos[ii].getName();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JComboBox",
    "boolean": 1,
    "context": "java.lang.String[] plafNames = new String[length];for (int ii = 0; ii < length; ii++) { plafNames[ii] = plafInfos[ii].getName();} final <mask><mask><mask><mask><mask>.JComboBox plafChooser = new JComboBox(plafNames); add(plafChooser);final JCheckBox pack = new JCheckBox(String, true);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JComboBox()",
    "boolean": 1,
    "context": "java.lang.String[] plafNames = new String[length];for (int ii = 0; ii < length; ii++) { plafNames[ii] = plafInfos[ii].getName();} final JComboBox plafChooser = new <mask><mask><mask><mask><mask>.JComboBox(plafNames); add(plafChooser);final JCheckBox pack = new JCheckBox(String, true);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel.add()",
    "boolean": 1,
    "context": "for (int ii = 0; ii < length; ii++) { plafNames[ii] = plafInfos[ii].getName();} final JComboBox plafChooser = new JComboBox(plafNames); <mask><mask><mask><mask><mask>add(plafChooser);final JCheckBox pack = new JCheckBox(String, true); add(pack);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JCheckBox",
    "boolean": 1,
    "context": "} final JComboBox plafChooser = new JComboBox(plafNames); add(plafChooser);final <mask><mask><mask><mask><mask>.JCheckBox pack = new JCheckBox(String, true); add(pack); addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { int index = getSelectedIndex();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JCheckBox()",
    "boolean": 1,
    "context": "} final JComboBox plafChooser = new JComboBox(plafNames); add(plafChooser);final JCheckBox pack = new <mask><mask><mask><mask><mask>.JCheckBox(String, true); add(pack); addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { int index = getSelectedIndex();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel.add()",
    "boolean": 1,
    "context": " add(plafChooser);final JCheckBox pack = new JCheckBox(String, true); <mask><mask><mask><mask><mask>add(pack); addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { int index = getSelectedIndex();try { setLookAndFeel(plafInfos[index].getClassName());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JComboBox.addActionListener()",
    "boolean": 1,
    "context": "final JCheckBox pack = new JCheckBox(String, true); add(pack); <mask><mask><mask><mask><mask>addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { int index = getSelectedIndex();try { setLookAndFeel(plafInfos[index].getClassName());updateComponentTreeUI(frame);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.event.ActionListener()",
    "boolean": 1,
    "context": "final JCheckBox pack = new JCheckBox(String, true); add(pack); addActionListener(new <mask><mask><mask><mask>ActionListener() { public void actionPerformed(ActionEvent ae) { int index = getSelectedIndex();try { setLookAndFeel(plafInfos[index].getClassName());updateComponentTreeUI(frame);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.event",
    "truth_type": "java.awt.event",
    "full_FQN": "java.awt.event.ActionEvent",
    "boolean": 1,
    "context": "final JCheckBox pack = new JCheckBox(String, true); add(pack); addActionListener(new ActionListener() { public void actionPerformed(<mask><mask><mask><mask><mask><mask>.ActionEvent ae) { int index = getSelectedIndex();try { setLookAndFeel(plafInfos[index].getClassName());updateComponentTreeUI(frame);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JComboBox.getSelectedIndex()",
    "boolean": 1,
    "context": "final JCheckBox pack = new JCheckBox(String, true); add(pack); addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { int index = <mask><mask><mask><mask><mask>getSelectedIndex();try { setLookAndFeel(plafInfos[index].getClassName());updateComponentTreeUI(frame);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.UIManager.setLookAndFeel()",
    "boolean": 1,
    "context": " add(pack); addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { int index = getSelectedIndex();try { <mask><mask><mask><mask><mask>setLookAndFeel(plafInfos[index].getClassName());updateComponentTreeUI(frame);if  isSelected()) { pack();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.SwingUtilities.updateComponentTreeUI()",
    "boolean": 1,
    "context": " addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { int index = getSelectedIndex();try { setLookAndFeel(plafInfos[index].getClassName());<mask><mask><mask><mask><mask>updateComponentTreeUI(frame);if  isSelected()) { pack(); setMinimumSize getSize());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JCheckBox.isSelected()",
    "boolean": 1,
    "context": "try { setLookAndFeel(plafInfos[index].getClassName());updateComponentTreeUI(frame);if  <mask><mask><mask><mask><mask>isSelected()) { pack(); setMinimumSize getSize());} } catch (Exception e) { printStackTrace();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.pack()",
    "boolean": 1,
    "context": "try { setLookAndFeel(plafInfos[index].getClassName());updateComponentTreeUI(frame);if  isSelected()) { <mask><mask><mask><mask><mask>pack(); setMinimumSize getSize());} } catch (Exception e) { printStackTrace();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing.JFrame",
    "truth_type": "javax.swing.JFrame",
    "full_FQN": "javax.swing.JFrame.setMinimumSize",
    "boolean": 1,
    "context": "javax.swing.SwingUtilities.updateComponentTreeUI(frame);if  isSelected()) { pack(); <mask><mask><mask><mask><mask><mask><mask><mask>.setMinimumSize getSize());} } catch (Exception e) { printStackTrace();} } });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.getSize()",
    "boolean": 1,
    "context": "javax.swing.SwingUtilities.updateComponentTreeUI(frame);if  isSelected()) { pack(); setMinimumSize <mask><mask><mask><mask><mask>getSize());} } catch (Exception e) { printStackTrace();} } });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel.add()",
    "boolean": 1,
    "context": "} } catch (Exception e) { printStackTrace();} } }); <mask><mask><mask><mask><mask>add(plafComponents, NORTH);JPanel dynamicLabels = new JPanel(new BorderLayout(4, 4)); setBorder(new TitledBorder(String));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.BorderLayout",
    "truth_type": "java.awt.BorderLayout",
    "full_FQN": "java.awt.BorderLayout.NORTH",
    "boolean": 1,
    "context": "} } catch (Exception e) { printStackTrace();} } }); add(plafComponents, <mask><mask><mask><mask><mask><mask><mask>.NORTH);JPanel dynamicLabels = new JPanel(new BorderLayout(4, 4)); setBorder(new TitledBorder(String));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel",
    "boolean": 1,
    "context": "} } }); add(plafComponents, NORTH);<mask><mask><mask><mask><mask>.JPanel dynamicLabels = new JPanel(new BorderLayout(4, 4)); setBorder(new TitledBorder(String)); add(dynamicLabels, WEST);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel()",
    "boolean": 1,
    "context": "} } }); add(plafComponents, NORTH);JPanel dynamicLabels = new <mask><mask><mask><mask><mask>.JPanel(new BorderLayout(4, 4)); setBorder(new TitledBorder(String)); add(dynamicLabels, WEST);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.BorderLayout()",
    "boolean": 1,
    "context": "} } }); add(plafComponents, NORTH);JPanel dynamicLabels = new JPanel(new <mask><mask><mask><mask>.BorderLayout(4, 4)); setBorder(new TitledBorder(String)); add(dynamicLabels, WEST);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel.setBorder()",
    "boolean": 1,
    "context": " add(plafComponents, NORTH);JPanel dynamicLabels = new JPanel(new BorderLayout(4, 4)); <mask><mask><mask><mask><mask>setBorder(new TitledBorder(String)); add(dynamicLabels, WEST);final JPanel labels = new JPanel(new GridLayout(0, 2, 3, 3));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.border.TitledBorder()",
    "boolean": 1,
    "context": " add(plafComponents, NORTH);JPanel dynamicLabels = new JPanel(new BorderLayout(4, 4)); setBorder(new <mask><mask><mask><mask><mask>TitledBorder(String)); add(dynamicLabels, WEST);final JPanel labels = new JPanel(new GridLayout(0, 2, 3, 3));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel.add()",
    "boolean": 1,
    "context": "javax.swing.JPanel dynamicLabels = new JPanel(new BorderLayout(4, 4)); setBorder(new TitledBorder(String)); <mask><mask><mask><mask><mask>add(dynamicLabels, WEST);final JPanel labels = new JPanel(new GridLayout(0, 2, 3, 3)); setBorder(new TitledBorder(String));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.BorderLayout",
    "truth_type": "java.awt.BorderLayout",
    "full_FQN": "java.awt.BorderLayout.WEST",
    "boolean": 1,
    "context": "javax.swing.JPanel dynamicLabels = new JPanel(new BorderLayout(4, 4)); setBorder(new TitledBorder(String)); add(dynamicLabels, <mask><mask><mask><mask><mask><mask><mask>.WEST);final JPanel labels = new JPanel(new GridLayout(0, 2, 3, 3)); setBorder(new TitledBorder(String));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel",
    "boolean": 1,
    "context": " setBorder(new TitledBorder(String)); add(dynamicLabels, WEST);final <mask><mask><mask><mask><mask>.JPanel labels = new JPanel(new GridLayout(0, 2, 3, 3)); setBorder(new TitledBorder(String));JButton addNew = new JButton(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel()",
    "boolean": 1,
    "context": " setBorder(new TitledBorder(String)); add(dynamicLabels, WEST);final JPanel labels = new <mask><mask><mask><mask><mask>.JPanel(new GridLayout(0, 2, 3, 3)); setBorder(new TitledBorder(String));JButton addNew = new JButton(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.GridLayout()",
    "boolean": 1,
    "context": " setBorder(new TitledBorder(String)); add(dynamicLabels, WEST);final JPanel labels = new JPanel(new <mask><mask><mask><mask>.GridLayout(0, 2, 3, 3)); setBorder(new TitledBorder(String));JButton addNew = new JButton(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel.setBorder()",
    "boolean": 1,
    "context": " add(dynamicLabels, WEST);final JPanel labels = new JPanel(new GridLayout(0, 2, 3, 3)); <mask><mask><mask><mask><mask>setBorder(new TitledBorder(String));JButton addNew = new JButton(String); add(addNew, NORTH);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.border.TitledBorder()",
    "boolean": 1,
    "context": " add(dynamicLabels, WEST);final JPanel labels = new JPanel(new GridLayout(0, 2, 3, 3)); setBorder(new <mask><mask><mask><mask><mask>TitledBorder(String));JButton addNew = new JButton(String); add(addNew, NORTH);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JButton",
    "boolean": 1,
    "context": "final JPanel labels = new JPanel(new GridLayout(0, 2, 3, 3)); setBorder(new TitledBorder(String));<mask><mask><mask><mask><mask>.JButton addNew = new JButton(String); add(addNew, NORTH); addActionListener(new ActionListener() { private int labelCount = 0;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JButton()",
    "boolean": 1,
    "context": "final JPanel labels = new JPanel(new GridLayout(0, 2, 3, 3)); setBorder(new TitledBorder(String));JButton addNew = new <mask><mask><mask><mask><mask>.JButton(String); add(addNew, NORTH); addActionListener(new ActionListener() { private int labelCount = 0;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel.add()",
    "boolean": 1,
    "context": " setBorder(new TitledBorder(String));JButton addNew = new JButton(String); <mask><mask><mask><mask><mask>add(addNew, NORTH); addActionListener(new ActionListener() { private int labelCount = 0;public void actionPerformed(ActionEvent ae) { add(new JLabel(String + (++labelCount)));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.BorderLayout",
    "truth_type": "java.awt.BorderLayout",
    "full_FQN": "java.awt.BorderLayout.NORTH",
    "boolean": 1,
    "context": " setBorder(new TitledBorder(String));JButton addNew = new JButton(String); add(addNew, <mask><mask><mask><mask><mask><mask><mask>.NORTH); addActionListener(new ActionListener() { private int labelCount = 0;public void actionPerformed(ActionEvent ae) { add(new JLabel(String + (++labelCount)));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JButton.addActionListener()",
    "boolean": 1,
    "context": "javax.swing.JButton addNew = new JButton(String); add(addNew, NORTH); <mask><mask><mask><mask><mask>addActionListener(new ActionListener() { private int labelCount = 0;public void actionPerformed(ActionEvent ae) { add(new JLabel(String + (++labelCount))); validate();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.event.ActionListener()",
    "boolean": 1,
    "context": "javax.swing.JButton addNew = new JButton(String); add(addNew, NORTH); addActionListener(new <mask><mask><mask><mask>ActionListener() { private int labelCount = 0;public void actionPerformed(ActionEvent ae) { add(new JLabel(String + (++labelCount))); validate();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.event",
    "truth_type": "java.awt.event",
    "full_FQN": "java.awt.event.ActionEvent",
    "boolean": 1,
    "context": " add(addNew, NORTH); addActionListener(new ActionListener() { private int labelCount = 0;public void actionPerformed(<mask><mask><mask><mask><mask><mask>.ActionEvent ae) { add(new JLabel(String + (++labelCount))); validate();} });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel.add()",
    "boolean": 1,
    "context": " add(addNew, NORTH); addActionListener(new ActionListener() { private int labelCount = 0;public void actionPerformed(ActionEvent ae) { <mask><mask><mask><mask><mask>add(new JLabel(String + (++labelCount))); validate();} });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JLabel()",
    "boolean": 1,
    "context": " add(addNew, NORTH); addActionListener(new ActionListener() { private int labelCount = 0;public void actionPerformed(ActionEvent ae) { add(new <mask><mask><mask><mask><mask>.JLabel(String + (++labelCount))); validate();} });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.validate()",
    "boolean": 1,
    "context": " addActionListener(new ActionListener() { private int labelCount = 0;public void actionPerformed(ActionEvent ae) { add(new JLabel(String + (++labelCount))); <mask><mask><mask><mask><mask>validate();} }); add(new JScrollPane(labels), CENTER);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel.add()",
    "boolean": 1,
    "context": " validate();} }); <mask><mask><mask><mask><mask>add(new JScrollPane(labels), CENTER);String[] header = new String[]{ String, String };String[] a = new String[0];"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JScrollPane()",
    "boolean": 1,
    "context": " validate();} }); add(new <mask><mask><mask><mask><mask>.JScrollPane(labels), CENTER);String[] header = new String[]{ String, String };String[] a = new String[0];"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.BorderLayout",
    "truth_type": "java.awt.BorderLayout",
    "full_FQN": "java.awt.BorderLayout.CENTER",
    "boolean": 1,
    "context": " validate();} }); add(new JScrollPane(labels), <mask><mask><mask><mask><mask><mask><mask>.CENTER);String[] header = new String[]{ String, String };String[] a = new String[0];"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing.JTable",
    "truth_type": "javax.swing.JTable",
    "full_FQN": "javax.swing.JTable.DefaultTableModel",
    "boolean": 1,
    "context": "for (int ii = 0; ii < length; ii++) { data[ii][0] = names[ii];data[ii][1] = getProperty(names[ii]);} swing <mask><mask><mask><mask><mask><mask><mask><mask>.DefaultTableModel model = new swing DefaultTableModel(data, header);JTable table = new JTable(model);try { setAutoCreateRowSorter(true);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JTable.DefaultTableModel()",
    "boolean": 1,
    "context": "for (int ii = 0; ii < length; ii++) { data[ii][0] = names[ii];data[ii][1] = getProperty(names[ii]);} swing DefaultTableModel model = new swing <mask><mask><mask><mask><mask>DefaultTableModel(data, header);JTable table = new JTable(model);try { setAutoCreateRowSorter(true);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JTable",
    "boolean": 1,
    "context": "data[ii][1] = getProperty(names[ii]);} swing DefaultTableModel model = new swing DefaultTableModel(data, header);<mask><mask><mask><mask><mask>.JTable table = new JTable(model);try { setAutoCreateRowSorter(true);} catch (Exception continuewithNoSort) { } JScrollPane tableScroll = new JScrollPane(table);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JTable()",
    "boolean": 1,
    "context": "data[ii][1] = getProperty(names[ii]);} swing DefaultTableModel model = new swing DefaultTableModel(data, header);JTable table = new <mask><mask><mask><mask><mask>.JTable(model);try { setAutoCreateRowSorter(true);} catch (Exception continuewithNoSort) { } JScrollPane tableScroll = new JScrollPane(table);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JTable.setAutoCreateRowSorter()",
    "boolean": 1,
    "context": "} swing DefaultTableModel model = new swing DefaultTableModel(data, header);JTable table = new JTable(model);try { <mask><mask><mask><mask><mask>setAutoCreateRowSorter(true);} catch (Exception continuewithNoSort) { } JScrollPane tableScroll = new JScrollPane(table);Dimension tablePreferred = getPreferredSize();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JScrollPane",
    "boolean": 1,
    "context": "javax.swing.JTable table = new JTable(model);try { setAutoCreateRowSorter(true);} catch (Exception continuewithNoSort) { } <mask><mask><mask><mask><mask>.JScrollPane tableScroll = new JScrollPane(table);Dimension tablePreferred = getPreferredSize(); setPreferredSize(new Dimension width, height / 3));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JScrollPane()",
    "boolean": 1,
    "context": "javax.swing.JTable table = new JTable(model);try { setAutoCreateRowSorter(true);} catch (Exception continuewithNoSort) { } JScrollPane tableScroll = new <mask><mask><mask><mask><mask>.JScrollPane(table);Dimension tablePreferred = getPreferredSize(); setPreferredSize(new Dimension width, height / 3));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Dimension",
    "boolean": 1,
    "context": "try { setAutoCreateRowSorter(true);} catch (Exception continuewithNoSort) { } JScrollPane tableScroll = new JScrollPane(table);<mask><mask><mask><mask>.Dimension tablePreferred = getPreferredSize(); setPreferredSize(new Dimension width, height / 3));JPanel imagePanel = new JPanel(new GridBagLayout());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JScrollPane.getPreferredSize()",
    "boolean": 1,
    "context": "try { setAutoCreateRowSorter(true);} catch (Exception continuewithNoSort) { } JScrollPane tableScroll = new JScrollPane(table);Dimension tablePreferred = <mask><mask><mask><mask><mask>getPreferredSize(); setPreferredSize(new Dimension width, height / 3));JPanel imagePanel = new JPanel(new GridBagLayout());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JScrollPane.setPreferredSize()",
    "boolean": 1,
    "context": "} catch (Exception continuewithNoSort) { } JScrollPane tableScroll = new JScrollPane(table);Dimension tablePreferred = getPreferredSize(); <mask><mask><mask><mask><mask>setPreferredSize(new Dimension width, height / 3));JPanel imagePanel = new JPanel(new GridBagLayout()); setBorder(new TitledBorder(String));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Dimension",
    "boolean": 1,
    "context": "} catch (Exception continuewithNoSort) { } JScrollPane tableScroll = new JScrollPane(table);Dimension tablePreferred = getPreferredSize(); setPreferredSize(new <mask><mask><mask><mask>.Dimension width, height / 3));JPanel imagePanel = new JPanel(new GridBagLayout()); setBorder(new TitledBorder(String));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.Dimension",
    "truth_type": "java.awt.Dimension",
    "full_FQN": "java.awt.Dimension.width",
    "boolean": 1,
    "context": "} catch (Exception continuewithNoSort) { } JScrollPane tableScroll = new JScrollPane(table);Dimension tablePreferred = getPreferredSize(); setPreferredSize(new Dimension <mask><mask><mask><mask><mask><mask><mask>.width, height / 3));JPanel imagePanel = new JPanel(new GridBagLayout()); setBorder(new TitledBorder(String));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.Dimension",
    "truth_type": "java.awt.Dimension",
    "full_FQN": "java.awt.Dimension.height",
    "boolean": 1,
    "context": "} catch (Exception continuewithNoSort) { } JScrollPane tableScroll = new JScrollPane(table);Dimension tablePreferred = getPreferredSize(); setPreferredSize(new Dimension width, <mask><mask><mask><mask><mask><mask><mask>.height / 3));JPanel imagePanel = new JPanel(new GridBagLayout()); setBorder(new TitledBorder(String));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel",
    "boolean": 1,
    "context": "java.awt.Dimension tablePreferred = getPreferredSize(); setPreferredSize(new Dimension width, height / 3));<mask><mask><mask><mask><mask>.JPanel imagePanel = new JPanel(new GridBagLayout()); setBorder(new TitledBorder(String));BufferedImage bi = new BufferedImage(200, 200, TYPE_INT_ARGB);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel()",
    "boolean": 1,
    "context": "java.awt.Dimension tablePreferred = getPreferredSize(); setPreferredSize(new Dimension width, height / 3));JPanel imagePanel = new <mask><mask><mask><mask><mask>.JPanel(new GridBagLayout()); setBorder(new TitledBorder(String));BufferedImage bi = new BufferedImage(200, 200, TYPE_INT_ARGB);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.GridBagLayout()",
    "boolean": 1,
    "context": "java.awt.Dimension tablePreferred = getPreferredSize(); setPreferredSize(new Dimension width, height / 3));JPanel imagePanel = new JPanel(new <mask><mask><mask><mask>.GridBagLayout()); setBorder(new TitledBorder(String));BufferedImage bi = new BufferedImage(200, 200, TYPE_INT_ARGB);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel.setBorder()",
    "boolean": 1,
    "context": " setPreferredSize(new Dimension width, height / 3));JPanel imagePanel = new JPanel(new GridBagLayout()); <mask><mask><mask><mask><mask>setBorder(new TitledBorder(String));BufferedImage bi = new BufferedImage(200, 200, TYPE_INT_ARGB);Graphics2D g = createGraphics();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.border.TitledBorder()",
    "boolean": 1,
    "context": " setPreferredSize(new Dimension width, height / 3));JPanel imagePanel = new JPanel(new GridBagLayout()); setBorder(new <mask><mask><mask><mask><mask>TitledBorder(String));BufferedImage bi = new BufferedImage(200, 200, TYPE_INT_ARGB);Graphics2D g = createGraphics();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.image",
    "truth_type": "java.awt.image",
    "full_FQN": "java.awt.image.BufferedImage",
    "boolean": 1,
    "context": "javax.swing.JPanel imagePanel = new JPanel(new GridBagLayout()); setBorder(new TitledBorder(String));<mask><mask><mask><mask><mask><mask>.BufferedImage bi = new BufferedImage(200, 200, TYPE_INT_ARGB);Graphics2D g = createGraphics();GradientPaint gp = new GradientPaint(0F, 0F, red, 0F, 0F, yellow);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.image.BufferedImage()",
    "boolean": 1,
    "context": "javax.swing.JPanel imagePanel = new JPanel(new GridBagLayout()); setBorder(new TitledBorder(String));BufferedImage bi = new <mask><mask><mask><mask>BufferedImage(200, 200, TYPE_INT_ARGB);Graphics2D g = createGraphics();GradientPaint gp = new GradientPaint(0F, 0F, red, 0F, 0F, yellow);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.image.BufferedImage",
    "truth_type": "java.awt.image.BufferedImage",
    "full_FQN": "java.awt.image.BufferedImage.TYPE_INT_ARGB",
    "boolean": 1,
    "context": "javax.swing.JPanel imagePanel = new JPanel(new GridBagLayout()); setBorder(new TitledBorder(String));BufferedImage bi = new BufferedImage(200, 200, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.TYPE_INT_ARGB);Graphics2D g = createGraphics();GradientPaint gp = new GradientPaint(0F, 0F, red, 0F, 0F, yellow);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Graphics2D",
    "boolean": 1,
    "context": " setBorder(new TitledBorder(String));BufferedImage bi = new BufferedImage(200, 200, TYPE_INT_ARGB);<mask><mask><mask><mask>.Graphics2D g = createGraphics();GradientPaint gp = new GradientPaint(0F, 0F, red, 0F, 0F, yellow); setPaint(gp);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.image",
    "truth_type": "java.awt.image",
    "full_FQN": "java.awt.image.BufferedImage.createGraphics()",
    "boolean": 1,
    "context": " setBorder(new TitledBorder(String));BufferedImage bi = new BufferedImage(200, 200, TYPE_INT_ARGB);Graphics2D g = <mask><mask><mask><mask><mask><mask>createGraphics();GradientPaint gp = new GradientPaint(0F, 0F, red, 0F, 0F, yellow); setPaint(gp);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.GradientPaint",
    "boolean": 1,
    "context": "java.awt.image.BufferedImage bi = new BufferedImage(200, 200, TYPE_INT_ARGB);Graphics2D g = createGraphics();<mask><mask><mask><mask>.GradientPaint gp = new GradientPaint(0F, 0F, red, 0F, 0F, yellow); setPaint(gp); fillRect(0, 0, 200, 200);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.GradientPaint()",
    "boolean": 1,
    "context": "java.awt.image.BufferedImage bi = new BufferedImage(200, 200, TYPE_INT_ARGB);Graphics2D g = createGraphics();GradientPaint gp = new <mask><mask><mask><mask>.GradientPaint(0F, 0F, red, 0F, 0F, yellow); setPaint(gp); fillRect(0, 0, 200, 200);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.Color",
    "truth_type": "java.awt.Color",
    "full_FQN": "java.awt.Color.red",
    "boolean": 1,
    "context": "java.awt.image.BufferedImage bi = new BufferedImage(200, 200, TYPE_INT_ARGB);Graphics2D g = createGraphics();GradientPaint gp = new GradientPaint(0F, 0F, <mask><mask><mask><mask><mask><mask>.red, 0F, 0F, yellow); setPaint(gp); fillRect(0, 0, 200, 200);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.Color",
    "truth_type": "java.awt.Color",
    "full_FQN": "java.awt.Color.yellow",
    "boolean": 1,
    "context": "java.awt.image.BufferedImage bi = new BufferedImage(200, 200, TYPE_INT_ARGB);Graphics2D g = createGraphics();GradientPaint gp = new GradientPaint(0F, 0F, red, 0F, 0F, <mask><mask><mask><mask><mask><mask>.yellow); setPaint(gp); fillRect(0, 0, 200, 200);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Graphics2D.setPaint()",
    "boolean": 1,
    "context": "java.awt.Graphics2D g = createGraphics();GradientPaint gp = new GradientPaint(0F, 0F, red, 0F, 0F, yellow); <mask><mask><mask><mask>setPaint(gp); fillRect(0, 0, 200, 200);ImageIcon ii = new ImageIcon(bi);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Graphics2D.fillRect()",
    "boolean": 1,
    "context": "java.awt.GradientPaint gp = new GradientPaint(0F, 0F, red, 0F, 0F, yellow); setPaint(gp); <mask><mask><mask><mask>fillRect(0, 0, 200, 200);ImageIcon ii = new ImageIcon(bi);JLabel imageLabel = new JLabel(ii);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.ImageIcon",
    "boolean": 1,
    "context": " setPaint(gp); fillRect(0, 0, 200, 200);<mask><mask><mask><mask><mask>.ImageIcon ii = new ImageIcon(bi);JLabel imageLabel = new JLabel(ii); add(imageLabel, null);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.ImageIcon()",
    "boolean": 1,
    "context": " setPaint(gp); fillRect(0, 0, 200, 200);ImageIcon ii = new <mask><mask><mask><mask><mask>.ImageIcon(bi);JLabel imageLabel = new JLabel(ii); add(imageLabel, null);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JLabel",
    "boolean": 1,
    "context": " fillRect(0, 0, 200, 200);ImageIcon ii = new ImageIcon(bi);<mask><mask><mask><mask><mask>.JLabel imageLabel = new JLabel(ii); add(imageLabel, null);JSplitPane splitPane = new JSplitPane(VERTICAL_SPLIT, tableScroll, new JScrollPane(imagePanel));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JLabel()",
    "boolean": 1,
    "context": " fillRect(0, 0, 200, 200);ImageIcon ii = new ImageIcon(bi);JLabel imageLabel = new <mask><mask><mask><mask><mask>.JLabel(ii); add(imageLabel, null);JSplitPane splitPane = new JSplitPane(VERTICAL_SPLIT, tableScroll, new JScrollPane(imagePanel));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel.add()",
    "boolean": 1,
    "context": "javax.swing.ImageIcon ii = new ImageIcon(bi);JLabel imageLabel = new JLabel(ii); <mask><mask><mask><mask><mask>add(imageLabel, null);JSplitPane splitPane = new JSplitPane(VERTICAL_SPLIT, tableScroll, new JScrollPane(imagePanel)); add(splitPane, CENTER);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JSplitPane",
    "boolean": 1,
    "context": "javax.swing.JLabel imageLabel = new JLabel(ii); add(imageLabel, null);<mask><mask><mask><mask><mask>.JSplitPane splitPane = new JSplitPane(VERTICAL_SPLIT, tableScroll, new JScrollPane(imagePanel)); add(splitPane, CENTER); setContentPane(gui);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JSplitPane()",
    "boolean": 1,
    "context": "javax.swing.JLabel imageLabel = new JLabel(ii); add(imageLabel, null);JSplitPane splitPane = new <mask><mask><mask><mask><mask>.JSplitPane(VERTICAL_SPLIT, tableScroll, new JScrollPane(imagePanel)); add(splitPane, CENTER); setContentPane(gui);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing.JSplitPane",
    "truth_type": "javax.swing.JSplitPane",
    "full_FQN": "javax.swing.JSplitPane.VERTICAL_SPLIT",
    "boolean": 1,
    "context": "javax.swing.JLabel imageLabel = new JLabel(ii); add(imageLabel, null);JSplitPane splitPane = new JSplitPane(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.VERTICAL_SPLIT, tableScroll, new JScrollPane(imagePanel)); add(splitPane, CENTER); setContentPane(gui);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JScrollPane()",
    "boolean": 1,
    "context": "javax.swing.JLabel imageLabel = new JLabel(ii); add(imageLabel, null);JSplitPane splitPane = new JSplitPane(VERTICAL_SPLIT, tableScroll, new <mask><mask><mask><mask><mask>.JScrollPane(imagePanel)); add(splitPane, CENTER); setContentPane(gui);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel.add()",
    "boolean": 1,
    "context": " add(imageLabel, null);JSplitPane splitPane = new JSplitPane(VERTICAL_SPLIT, tableScroll, new JScrollPane(imagePanel)); <mask><mask><mask><mask><mask>add(splitPane, CENTER); setContentPane(gui); pack();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.BorderLayout",
    "truth_type": "java.awt.BorderLayout",
    "full_FQN": "java.awt.BorderLayout.CENTER",
    "boolean": 1,
    "context": " add(imageLabel, null);JSplitPane splitPane = new JSplitPane(VERTICAL_SPLIT, tableScroll, new JScrollPane(imagePanel)); add(splitPane, <mask><mask><mask><mask><mask><mask><mask>.CENTER); setContentPane(gui); pack();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.setContentPane()",
    "boolean": 1,
    "context": "javax.swing.JSplitPane splitPane = new JSplitPane(VERTICAL_SPLIT, tableScroll, new JScrollPane(imagePanel)); add(splitPane, CENTER); <mask><mask><mask><mask><mask>setContentPane(gui); pack(); setLocationRelativeTo(null);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.pack()",
    "boolean": 1,
    "context": " add(splitPane, CENTER); setContentPane(gui); <mask><mask><mask><mask><mask>pack(); setLocationRelativeTo(null);try { setLocationByPlatform(true);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.setLocationRelativeTo()",
    "boolean": 1,
    "context": " setContentPane(gui); pack(); <mask><mask><mask><mask><mask>setLocationRelativeTo(null);try { setLocationByPlatform(true); setMinimumSize getSize());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.setLocationByPlatform()",
    "boolean": 1,
    "context": " pack(); setLocationRelativeTo(null);try { <mask><mask><mask><mask><mask>setLocationByPlatform(true); setMinimumSize getSize());} catch (Throwable ignoreAndContinue) { } setVisible(true);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing.JFrame",
    "truth_type": "javax.swing.JFrame",
    "full_FQN": "javax.swing.JFrame.setMinimumSize",
    "boolean": 1,
    "context": " setLocationRelativeTo(null);try { setLocationByPlatform(true); <mask><mask><mask><mask><mask><mask><mask><mask>.setMinimumSize getSize());} catch (Throwable ignoreAndContinue) { } setVisible(true);} };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.getSize()",
    "boolean": 1,
    "context": " setLocationRelativeTo(null);try { setLocationByPlatform(true); setMinimumSize <mask><mask><mask><mask><mask>getSize());} catch (Throwable ignoreAndContinue) { } setVisible(true);} };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.setVisible()",
    "boolean": 1,
    "context": "try { setLocationByPlatform(true); setMinimumSize getSize());} catch (Throwable ignoreAndContinue) { } <mask><mask><mask><mask><mask>setVisible(true);} };invokeLater(r);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.SwingUtilities.invokeLater()",
    "boolean": 1,
    "context": "} catch (Throwable ignoreAndContinue) { } setVisible(true);} };<mask><mask><mask><mask><mask>invokeLater(r);} };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataInputStream",
    "boolean": 1,
    "context": "class Class_20 { public static void receive() { try { <mask><mask><mask>.DataInputStream dis = new DataInputStream(new BufferedInputStream(null));DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(null, 0));int number = readInt();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataInputStream()",
    "boolean": 1,
    "context": "class Class_20 { public static void receive() { try { DataInputStream dis = new <mask><mask><mask>.DataInputStream(new BufferedInputStream(null));DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(null, 0));int number = readInt();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.BufferedInputStream()",
    "boolean": 1,
    "context": "class Class_20 { public static void receive() { try { DataInputStream dis = new DataInputStream(new <mask><mask><mask>.BufferedInputStream(null));DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(null, 0));int number = readInt();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataOutputStream",
    "boolean": 1,
    "context": "class Class_20 { public static void receive() { try { DataInputStream dis = new DataInputStream(new BufferedInputStream(null));<mask><mask><mask>.DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(null, 0));int number = readInt();ArrayList<File> files = new ArrayList<File>(number);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataOutputStream()",
    "boolean": 1,
    "context": "class Class_20 { public static void receive() { try { DataInputStream dis = new DataInputStream(new BufferedInputStream(null));DataOutputStream dos = new <mask><mask><mask>.DataOutputStream(new BufferedOutputStream(null, 0));int number = readInt();ArrayList<File> files = new ArrayList<File>(number);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.BufferedOutputStream()",
    "boolean": 1,
    "context": "class Class_20 { public static void receive() { try { DataInputStream dis = new DataInputStream(new BufferedInputStream(null));DataOutputStream dos = new DataOutputStream(new <mask><mask><mask>.BufferedOutputStream(null, 0));int number = readInt();ArrayList<File> files = new ArrayList<File>(number);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataInputStream.readInt()",
    "boolean": 1,
    "context": "class Class_20 { public static void receive() { try { DataInputStream dis = new DataInputStream(new BufferedInputStream(null));DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(null, 0));int number = <mask><mask><mask>readInt();ArrayList<File> files = new ArrayList<File>(number);println(String + number);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "java.io.DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(null, 0));int number = readInt();<mask><mask><mask>.ArrayList<File> files = new ArrayList<File>(number);println(String + number);for (int i = 0; i < number; i++) { File file = new File readUTF());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File",
    "boolean": 1,
    "context": "java.io.DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(null, 0));int number = readInt();ArrayList<<mask><mask><mask>.File> files = new ArrayList<File>(number);println(String + number);for (int i = 0; i < number; i++) { File file = new File readUTF());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "java.io.DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(null, 0));int number = readInt();ArrayList<File> files = new <mask><mask><mask>.ArrayList<File>(number);println(String + number);for (int i = 0; i < number; i++) { File file = new File readUTF());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File",
    "boolean": 1,
    "context": "java.io.DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(null, 0));int number = readInt();ArrayList<File> files = new ArrayList<<mask><mask><mask>.File>(number);println(String + number);for (int i = 0; i < number; i++) { File file = new File readUTF());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File",
    "boolean": 1,
    "context": "java.util.ArrayList<File> files = new ArrayList<File>(number);println(String + number);for (int i = 0; i < number; i++) { <mask><mask><mask>.File file = new File readUTF()); add(file);} int n = 0;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File",
    "boolean": 1,
    "context": "java.util.ArrayList<File> files = new ArrayList<File>(number);println(String + number);for (int i = 0; i < number; i++) { File file = new <mask><mask><mask>.File readUTF()); add(file);} int n = 0;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataInputStream.readUTF()",
    "boolean": 1,
    "context": "java.util.ArrayList<File> files = new ArrayList<File>(number);println(String + number);for (int i = 0; i < number; i++) { File file = new File <mask><mask><mask>readUTF()); add(file);} int n = 0;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.add()",
    "boolean": 1,
    "context": "java.lang.System.out.println(String + number);for (int i = 0; i < number; i++) { File file = new File readUTF()); <mask><mask><mask>add(file);} int n = 0;byte[] buf = new byte[4092];"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.size()",
    "boolean": 1,
    "context": "} int n = 0;byte[] buf = new byte[4092];for (int i = 0; i < <mask><mask><mask>size(); i++) { println(String + get(i).getName());FileOutputStream fos = new FileOutputStream(String + get(i).getName());while ((n = read(buf)) != (-1)) { write(buf, 0, n);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.get()",
    "boolean": 1,
    "context": "} int n = 0;byte[] buf = new byte[4092];for (int i = 0; i < size(); i++) { println(String + <mask><mask><mask>get(i).getName());FileOutputStream fos = new FileOutputStream(String + get(i).getName());while ((n = read(buf)) != (-1)) { write(buf, 0, n);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileOutputStream",
    "boolean": 1,
    "context": "byte[] buf = new byte[4092];for (int i = 0; i < size(); i++) { println(String + get(i).getName());<mask><mask><mask>.FileOutputStream fos = new FileOutputStream(String + get(i).getName());while ((n = read(buf)) != (-1)) { write(buf, 0, n); flush();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileOutputStream()",
    "boolean": 1,
    "context": "byte[] buf = new byte[4092];for (int i = 0; i < size(); i++) { println(String + get(i).getName());FileOutputStream fos = new <mask><mask><mask>.FileOutputStream(String + get(i).getName());while ((n = read(buf)) != (-1)) { write(buf, 0, n); flush();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.get()",
    "boolean": 1,
    "context": "byte[] buf = new byte[4092];for (int i = 0; i < size(); i++) { println(String + get(i).getName());FileOutputStream fos = new FileOutputStream(String + <mask><mask><mask>get(i).getName());while ((n = read(buf)) != (-1)) { write(buf, 0, n); flush();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataInputStream.read()",
    "boolean": 1,
    "context": "for (int i = 0; i < size(); i++) { println(String + get(i).getName());FileOutputStream fos = new FileOutputStream(String + get(i).getName());while ((n = <mask><mask><mask>read(buf)) != (-1)) { write(buf, 0, n); flush();} close();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileOutputStream.write()",
    "boolean": 1,
    "context": "for (int i = 0; i < size(); i++) { println(String + get(i).getName());FileOutputStream fos = new FileOutputStream(String + get(i).getName());while ((n = read(buf)) != (-1)) { <mask><mask><mask>write(buf, 0, n); flush();} close();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileOutputStream.flush()",
    "boolean": 1,
    "context": "java.io.FileOutputStream fos = new FileOutputStream(String + get(i).getName());while ((n = read(buf)) != (-1)) { write(buf, 0, n); <mask><mask><mask>flush();} close();} } catch (IOException e) { printStackTrace();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileOutputStream.close()",
    "boolean": 1,
    "context": "while ((n = read(buf)) != (-1)) { write(buf, 0, n); flush();} <mask><mask><mask>close();} } catch (IOException e) { printStackTrace();} } public void send(ArrayList<File> files) { try { DataInputStream dis = new DataInputStream(new BufferedInputStream(null));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException",
    "boolean": 1,
    "context": " flush();} close();} } catch (<mask><mask><mask>.IOException e) { printStackTrace();} } public void send(ArrayList<File> files) { try { DataInputStream dis = new DataInputStream(new BufferedInputStream(null));DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(null));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException.printStackTrace()",
    "boolean": 1,
    "context": " flush();} close();} } catch (IOException e) { <mask><mask><mask>printStackTrace();} } public void send(ArrayList<File> files) { try { DataInputStream dis = new DataInputStream(new BufferedInputStream(null));DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(null));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "} close();} } catch (IOException e) { printStackTrace();} } public void send(<mask><mask><mask>.ArrayList<File> files) { try { DataInputStream dis = new DataInputStream(new BufferedInputStream(null));DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(null));println size());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File",
    "boolean": 1,
    "context": "} close();} } catch (IOException e) { printStackTrace();} } public void send(ArrayList<<mask><mask><mask>.File> files) { try { DataInputStream dis = new DataInputStream(new BufferedInputStream(null));DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(null));println size());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataInputStream",
    "boolean": 1,
    "context": "} close();} } catch (IOException e) { printStackTrace();} } public void send(ArrayList<File> files) { try { <mask><mask><mask>.DataInputStream dis = new DataInputStream(new BufferedInputStream(null));DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(null));println size());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataInputStream()",
    "boolean": 1,
    "context": "} close();} } catch (IOException e) { printStackTrace();} } public void send(ArrayList<File> files) { try { DataInputStream dis = new <mask><mask><mask>.DataInputStream(new BufferedInputStream(null));DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(null));println size());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.BufferedInputStream()",
    "boolean": 1,
    "context": "} close();} } catch (IOException e) { printStackTrace();} } public void send(ArrayList<File> files) { try { DataInputStream dis = new DataInputStream(new <mask><mask><mask>.BufferedInputStream(null));DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(null));println size());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataOutputStream",
    "boolean": 1,
    "context": "} } catch (IOException e) { printStackTrace();} } public void send(ArrayList<File> files) { try { DataInputStream dis = new DataInputStream(new BufferedInputStream(null));<mask><mask><mask>.DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(null));println size()); writeInt size());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataOutputStream()",
    "boolean": 1,
    "context": "} } catch (IOException e) { printStackTrace();} } public void send(ArrayList<File> files) { try { DataInputStream dis = new DataInputStream(new BufferedInputStream(null));DataOutputStream dos = new <mask><mask><mask>.DataOutputStream(new BufferedOutputStream(null));println size()); writeInt size());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.BufferedOutputStream()",
    "boolean": 1,
    "context": "} } catch (IOException e) { printStackTrace();} } public void send(ArrayList<File> files) { try { DataInputStream dis = new DataInputStream(new BufferedInputStream(null));DataOutputStream dos = new DataOutputStream(new <mask><mask><mask>.BufferedOutputStream(null));println size()); writeInt size());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.size()",
    "boolean": 1,
    "context": "} } public void send(ArrayList<File> files) { try { DataInputStream dis = new DataInputStream(new BufferedInputStream(null));DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(null));println <mask><mask><mask>size()); writeInt size()); flush();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io.DataOutputStream",
    "truth_type": "java.io.DataOutputStream",
    "full_FQN": "java.io.DataOutputStream.writeInt",
    "boolean": 1,
    "context": "java.io.DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(null));println size()); <mask><mask><mask><mask><mask><mask><mask>.writeInt size()); flush();// write file names for (int i = 0; i < size(); i++) { writeUTF get(i).getName());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.size()",
    "boolean": 1,
    "context": "java.io.DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(null));println size()); writeInt <mask><mask><mask>size()); flush();// write file names for (int i = 0; i < size(); i++) { writeUTF get(i).getName());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataOutputStream.flush()",
    "boolean": 1,
    "context": "java.lang.System.out.println size()); writeInt size()); <mask><mask><mask>flush();// write file names for (int i = 0; i < size(); i++) { writeUTF get(i).getName()); flush();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.size()",
    "boolean": 1,
    "context": " writeInt size()); flush();// write file names for (int i = 0; i < <mask><mask><mask>size(); i++) { writeUTF get(i).getName()); flush();} int n = 0;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io.DataOutputStream",
    "truth_type": "java.io.DataOutputStream",
    "full_FQN": "java.io.DataOutputStream.writeUTF",
    "boolean": 1,
    "context": " writeInt size()); flush();// write file names for (int i = 0; i < size(); i++) { <mask><mask><mask><mask><mask><mask><mask>.writeUTF get(i).getName()); flush();} int n = 0;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.get()",
    "boolean": 1,
    "context": " writeInt size()); flush();// write file names for (int i = 0; i < size(); i++) { writeUTF <mask><mask><mask>get(i).getName()); flush();} int n = 0;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataOutputStream.flush()",
    "boolean": 1,
    "context": " flush();// write file names for (int i = 0; i < size(); i++) { writeUTF get(i).getName()); <mask><mask><mask>flush();} int n = 0;byte[] buf = new byte[4092];"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.size()",
    "boolean": 1,
    "context": "} int n = 0;byte[] buf = new byte[4092];for (int i = 0; i < <mask><mask><mask>size(); i++) { println get(i).getName());FileInputStream fis = new FileInputStream get(i));while ((n = read(buf)) != (-1)) { write(buf, 0, n);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.get()",
    "boolean": 1,
    "context": "} int n = 0;byte[] buf = new byte[4092];for (int i = 0; i < size(); i++) { println <mask><mask><mask>get(i).getName());FileInputStream fis = new FileInputStream get(i));while ((n = read(buf)) != (-1)) { write(buf, 0, n);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileInputStream",
    "boolean": 1,
    "context": "byte[] buf = new byte[4092];for (int i = 0; i < size(); i++) { println get(i).getName());<mask><mask><mask>.FileInputStream fis = new FileInputStream get(i));while ((n = read(buf)) != (-1)) { write(buf, 0, n); flush();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileInputStream",
    "boolean": 1,
    "context": "byte[] buf = new byte[4092];for (int i = 0; i < size(); i++) { println get(i).getName());FileInputStream fis = new <mask><mask><mask>.FileInputStream get(i));while ((n = read(buf)) != (-1)) { write(buf, 0, n); flush();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.get()",
    "boolean": 1,
    "context": "byte[] buf = new byte[4092];for (int i = 0; i < size(); i++) { println get(i).getName());FileInputStream fis = new FileInputStream <mask><mask><mask>get(i));while ((n = read(buf)) != (-1)) { write(buf, 0, n); flush();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileInputStream.read()",
    "boolean": 1,
    "context": "for (int i = 0; i < size(); i++) { println get(i).getName());FileInputStream fis = new FileInputStream get(i));while ((n = <mask><mask><mask>read(buf)) != (-1)) { write(buf, 0, n); flush();} } close();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataOutputStream.write()",
    "boolean": 1,
    "context": "for (int i = 0; i < size(); i++) { println get(i).getName());FileInputStream fis = new FileInputStream get(i));while ((n = read(buf)) != (-1)) { <mask><mask><mask>write(buf, 0, n); flush();} } close();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataOutputStream.flush()",
    "boolean": 1,
    "context": "java.io.FileInputStream fis = new FileInputStream get(i));while ((n = read(buf)) != (-1)) { write(buf, 0, n); <mask><mask><mask>flush();} } close();} catch (IOException e) { printStackTrace();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.DataOutputStream.close()",
    "boolean": 1,
    "context": "while ((n = read(buf)) != (-1)) { write(buf, 0, n); flush();} } <mask><mask><mask>close();} catch (IOException e) { printStackTrace();} } };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException",
    "boolean": 1,
    "context": " flush();} } close();} catch (<mask><mask><mask>.IOException e) { printStackTrace();} } };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException.printStackTrace()",
    "boolean": 1,
    "context": " flush();} } close();} catch (IOException e) { <mask><mask><mask>printStackTrace();} } };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.image.BufferedImage",
    "truth_type": "java.awt.image.BufferedImage",
    "full_FQN": "java.awt.image.BufferedImage.BufferedImage",
    "boolean": 1,
    "context": "class ComponentImageCapture { static final String HELP = String + (String + String);public static awt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.BufferedImage getScreenShot(Component component) { awt BufferedImage image = new awt BufferedImage getWidth(), getHeight(), awt TYPE_INT_RGB); paint getGraphics());return image;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Component",
    "boolean": 1,
    "context": "class ComponentImageCapture { static final String HELP = String + (String + String);public static awt BufferedImage getScreenShot(<mask><mask><mask><mask>.Component component) { awt BufferedImage image = new awt BufferedImage getWidth(), getHeight(), awt TYPE_INT_RGB); paint getGraphics());return image;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.image.BufferedImage",
    "truth_type": "java.awt.image.BufferedImage",
    "full_FQN": "java.awt.image.BufferedImage.BufferedImage",
    "boolean": 1,
    "context": "class ComponentImageCapture { static final String HELP = String + (String + String);public static awt BufferedImage getScreenShot(Component component) { awt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.BufferedImage image = new awt BufferedImage getWidth(), getHeight(), awt TYPE_INT_RGB); paint getGraphics());return image;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.image.BufferedImage",
    "truth_type": "java.awt.image.BufferedImage",
    "full_FQN": "java.awt.image.BufferedImage.BufferedImage",
    "boolean": 1,
    "context": "class ComponentImageCapture { static final String HELP = String + (String + String);public static awt BufferedImage getScreenShot(Component component) { awt BufferedImage image = new awt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.BufferedImage getWidth(), getHeight(), awt TYPE_INT_RGB); paint getGraphics());return image;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Component.getWidth()",
    "boolean": 1,
    "context": "class ComponentImageCapture { static final String HELP = String + (String + String);public static awt BufferedImage getScreenShot(Component component) { awt BufferedImage image = new awt BufferedImage <mask><mask><mask><mask>getWidth(), getHeight(), awt TYPE_INT_RGB); paint getGraphics());return image;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Component.getHeight()",
    "boolean": 1,
    "context": "class ComponentImageCapture { static final String HELP = String + (String + String);public static awt BufferedImage getScreenShot(Component component) { awt BufferedImage image = new awt BufferedImage getWidth(), <mask><mask><mask><mask>getHeight(), awt TYPE_INT_RGB); paint getGraphics());return image;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.image.BufferedImage.BufferedImage",
    "truth_type": "java.awt.image.BufferedImage.BufferedImage",
    "full_FQN": "java.awt.image.BufferedImage.BufferedImage.TYPE_INT_RGB",
    "boolean": 1,
    "context": "class ComponentImageCapture { static final String HELP = String + (String + String);public static awt BufferedImage getScreenShot(Component component) { awt BufferedImage image = new awt BufferedImage getWidth(), getHeight(), awt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.TYPE_INT_RGB); paint getGraphics());return image;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.Component",
    "truth_type": "java.awt.Component",
    "full_FQN": "java.awt.Component.paint",
    "boolean": 1,
    "context": "class ComponentImageCapture { static final String HELP = String + (String + String);public static awt BufferedImage getScreenShot(Component component) { awt BufferedImage image = new awt BufferedImage getWidth(), getHeight(), awt TYPE_INT_RGB); <mask><mask><mask><mask><mask><mask>.paint getGraphics());return image;} public static void main(String[] args) { Runnable r = new Runnable() { public void run() { final JFrame f = new JFrame(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.image",
    "truth_type": "java.awt.image",
    "full_FQN": "java.awt.image.BufferedImage.getGraphics()",
    "boolean": 1,
    "context": "class ComponentImageCapture { static final String HELP = String + (String + String);public static awt BufferedImage getScreenShot(Component component) { awt BufferedImage image = new awt BufferedImage getWidth(), getHeight(), awt TYPE_INT_RGB); paint <mask><mask><mask><mask><mask><mask>getGraphics());return image;} public static void main(String[] args) { Runnable r = new Runnable() { public void run() { final JFrame f = new JFrame(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame",
    "boolean": 1,
    "context": " paint getGraphics());return image;} public static void main(String[] args) { Runnable r = new Runnable() { public void run() { final <mask><mask><mask><mask><mask>.JFrame f = new JFrame(String);JMenuItem screenshot = new JMenuItem(String); setAccelerator(getKeyStroke(VK_0, CTRL_DOWN_MASK));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame()",
    "boolean": 1,
    "context": " paint getGraphics());return image;} public static void main(String[] args) { Runnable r = new Runnable() { public void run() { final JFrame f = new <mask><mask><mask><mask><mask>.JFrame(String);JMenuItem screenshot = new JMenuItem(String); setAccelerator(getKeyStroke(VK_0, CTRL_DOWN_MASK));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JMenuItem",
    "boolean": 1,
    "context": "return image;} public static void main(String[] args) { Runnable r = new Runnable() { public void run() { final JFrame f = new JFrame(String);<mask><mask><mask><mask><mask>.JMenuItem screenshot = new JMenuItem(String); setAccelerator(getKeyStroke(VK_0, CTRL_DOWN_MASK)); addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { awt BufferedImage img = getScreenShot getContentPane());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JMenuItem()",
    "boolean": 1,
    "context": "return image;} public static void main(String[] args) { Runnable r = new Runnable() { public void run() { final JFrame f = new JFrame(String);JMenuItem screenshot = new <mask><mask><mask><mask><mask>.JMenuItem(String); setAccelerator(getKeyStroke(VK_0, CTRL_DOWN_MASK)); addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { awt BufferedImage img = getScreenShot getContentPane());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JMenuItem.setAccelerator()",
    "boolean": 1,
    "context": "} public static void main(String[] args) { Runnable r = new Runnable() { public void run() { final JFrame f = new JFrame(String);JMenuItem screenshot = new JMenuItem(String); <mask><mask><mask><mask><mask>setAccelerator(getKeyStroke(VK_0, CTRL_DOWN_MASK)); addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { awt BufferedImage img = getScreenShot getContentPane());showMessageDialog(null, new JLabel(new ImageIcon awt getScaledInstance awt getWidth(null) / 2, awt getHeight(null) / 2, SCALE_SMOOTH))));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.KeyStroke.getKeyStroke()",
    "boolean": 1,
    "context": "} public static void main(String[] args) { Runnable r = new Runnable() { public void run() { final JFrame f = new JFrame(String);JMenuItem screenshot = new JMenuItem(String); setAccelerator(<mask><mask><mask><mask><mask>getKeyStroke(VK_0, CTRL_DOWN_MASK)); addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { awt BufferedImage img = getScreenShot getContentPane());showMessageDialog(null, new JLabel(new ImageIcon awt getScaledInstance awt getWidth(null) / 2, awt getHeight(null) / 2, SCALE_SMOOTH))));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.event.KeyEvent",
    "truth_type": "java.awt.event.KeyEvent",
    "full_FQN": "java.awt.event.KeyEvent.VK_0",
    "boolean": 1,
    "context": "} public static void main(String[] args) { Runnable r = new Runnable() { public void run() { final JFrame f = new JFrame(String);JMenuItem screenshot = new JMenuItem(String); setAccelerator(getKeyStroke(<mask><mask><mask><mask><mask><mask><mask><mask><mask>.VK_0, CTRL_DOWN_MASK)); addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { awt BufferedImage img = getScreenShot getContentPane());showMessageDialog(null, new JLabel(new ImageIcon awt getScaledInstance awt getWidth(null) / 2, awt getHeight(null) / 2, SCALE_SMOOTH))));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.event.InputEvent",
    "truth_type": "java.awt.event.InputEvent",
    "full_FQN": "java.awt.event.InputEvent.CTRL_DOWN_MASK",
    "boolean": 1,
    "context": "} public static void main(String[] args) { Runnable r = new Runnable() { public void run() { final JFrame f = new JFrame(String);JMenuItem screenshot = new JMenuItem(String); setAccelerator(getKeyStroke(VK_0, <mask><mask><mask><mask><mask><mask><mask><mask><mask>.CTRL_DOWN_MASK)); addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { awt BufferedImage img = getScreenShot getContentPane());showMessageDialog(null, new JLabel(new ImageIcon awt getScaledInstance awt getWidth(null) / 2, awt getHeight(null) / 2, SCALE_SMOOTH))));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JMenuItem.addActionListener()",
    "boolean": 1,
    "context": "javax.swing.JMenuItem screenshot = new JMenuItem(String); setAccelerator(getKeyStroke(VK_0, CTRL_DOWN_MASK)); <mask><mask><mask><mask><mask>addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { awt BufferedImage img = getScreenShot getContentPane());showMessageDialog(null, new JLabel(new ImageIcon awt getScaledInstance awt getWidth(null) / 2, awt getHeight(null) / 2, SCALE_SMOOTH))));try { write(img, String, new File(String));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.event.ActionListener()",
    "boolean": 1,
    "context": "javax.swing.JMenuItem screenshot = new JMenuItem(String); setAccelerator(getKeyStroke(VK_0, CTRL_DOWN_MASK)); addActionListener(new <mask><mask><mask><mask>ActionListener() { public void actionPerformed(ActionEvent ae) { awt BufferedImage img = getScreenShot getContentPane());showMessageDialog(null, new JLabel(new ImageIcon awt getScaledInstance awt getWidth(null) / 2, awt getHeight(null) / 2, SCALE_SMOOTH))));try { write(img, String, new File(String));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.event",
    "truth_type": "java.awt.event",
    "full_FQN": "java.awt.event.ActionEvent",
    "boolean": 1,
    "context": "javax.swing.JMenuItem screenshot = new JMenuItem(String); setAccelerator(getKeyStroke(VK_0, CTRL_DOWN_MASK)); addActionListener(new ActionListener() { public void actionPerformed(<mask><mask><mask><mask><mask><mask>.ActionEvent ae) { awt BufferedImage img = getScreenShot getContentPane());showMessageDialog(null, new JLabel(new ImageIcon awt getScaledInstance awt getWidth(null) / 2, awt getHeight(null) / 2, SCALE_SMOOTH))));try { write(img, String, new File(String));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.image.BufferedImage",
    "truth_type": "java.awt.image.BufferedImage",
    "full_FQN": "java.awt.image.BufferedImage.BufferedImage",
    "boolean": 1,
    "context": "javax.swing.JMenuItem screenshot = new JMenuItem(String); setAccelerator(getKeyStroke(VK_0, CTRL_DOWN_MASK)); addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { awt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.BufferedImage img = getScreenShot getContentPane());showMessageDialog(null, new JLabel(new ImageIcon awt getScaledInstance awt getWidth(null) / 2, awt getHeight(null) / 2, SCALE_SMOOTH))));try { write(img, String, new File(String));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.getContentPane()",
    "boolean": 1,
    "context": "javax.swing.JMenuItem screenshot = new JMenuItem(String); setAccelerator(getKeyStroke(VK_0, CTRL_DOWN_MASK)); addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { awt BufferedImage img = getScreenShot <mask><mask><mask><mask><mask>getContentPane());showMessageDialog(null, new JLabel(new ImageIcon awt getScaledInstance awt getWidth(null) / 2, awt getHeight(null) / 2, SCALE_SMOOTH))));try { write(img, String, new File(String));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JOptionPane.showMessageDialog()",
    "boolean": 1,
    "context": " setAccelerator(getKeyStroke(VK_0, CTRL_DOWN_MASK)); addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { awt BufferedImage img = getScreenShot getContentPane());<mask><mask><mask><mask><mask>showMessageDialog(null, new JLabel(new ImageIcon awt getScaledInstance awt getWidth(null) / 2, awt getHeight(null) / 2, SCALE_SMOOTH))));try { write(img, String, new File(String));} catch (Exception e) { printStackTrace();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JLabel()",
    "boolean": 1,
    "context": " setAccelerator(getKeyStroke(VK_0, CTRL_DOWN_MASK)); addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { awt BufferedImage img = getScreenShot getContentPane());showMessageDialog(null, new <mask><mask><mask><mask><mask>.JLabel(new ImageIcon awt getScaledInstance awt getWidth(null) / 2, awt getHeight(null) / 2, SCALE_SMOOTH))));try { write(img, String, new File(String));} catch (Exception e) { printStackTrace();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.ImageIcon",
    "boolean": 1,
    "context": " setAccelerator(getKeyStroke(VK_0, CTRL_DOWN_MASK)); addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { awt BufferedImage img = getScreenShot getContentPane());showMessageDialog(null, new JLabel(new <mask><mask><mask><mask><mask>.ImageIcon awt getScaledInstance awt getWidth(null) / 2, awt getHeight(null) / 2, SCALE_SMOOTH))));try { write(img, String, new File(String));} catch (Exception e) { printStackTrace();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.image.BufferedImage.BufferedImage",
    "truth_type": "java.awt.image.BufferedImage.BufferedImage",
    "full_FQN": "java.awt.image.BufferedImage.BufferedImage.getScaledInstance",
    "boolean": 1,
    "context": " setAccelerator(getKeyStroke(VK_0, CTRL_DOWN_MASK)); addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { awt BufferedImage img = getScreenShot getContentPane());showMessageDialog(null, new JLabel(new ImageIcon awt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.getScaledInstance awt getWidth(null) / 2, awt getHeight(null) / 2, SCALE_SMOOTH))));try { write(img, String, new File(String));} catch (Exception e) { printStackTrace();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.image.BufferedImage",
    "truth_type": "java.awt.image.BufferedImage",
    "full_FQN": "java.awt.image.BufferedImage.BufferedImage.getWidth()",
    "boolean": 1,
    "context": " setAccelerator(getKeyStroke(VK_0, CTRL_DOWN_MASK)); addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { awt BufferedImage img = getScreenShot getContentPane());showMessageDialog(null, new JLabel(new ImageIcon awt getScaledInstance awt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getWidth(null) / 2, awt getHeight(null) / 2, SCALE_SMOOTH))));try { write(img, String, new File(String));} catch (Exception e) { printStackTrace();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.image.BufferedImage",
    "truth_type": "java.awt.image.BufferedImage",
    "full_FQN": "java.awt.image.BufferedImage.BufferedImage.getHeight()",
    "boolean": 1,
    "context": " setAccelerator(getKeyStroke(VK_0, CTRL_DOWN_MASK)); addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { awt BufferedImage img = getScreenShot getContentPane());showMessageDialog(null, new JLabel(new ImageIcon awt getScaledInstance awt getWidth(null) / 2, awt <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getHeight(null) / 2, SCALE_SMOOTH))));try { write(img, String, new File(String));} catch (Exception e) { printStackTrace();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.Image",
    "truth_type": "java.awt.Image",
    "full_FQN": "java.awt.Image.SCALE_SMOOTH",
    "boolean": 1,
    "context": " setAccelerator(getKeyStroke(VK_0, CTRL_DOWN_MASK)); addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { awt BufferedImage img = getScreenShot getContentPane());showMessageDialog(null, new JLabel(new ImageIcon awt getScaledInstance awt getWidth(null) / 2, awt getHeight(null) / 2, <mask><mask><mask><mask><mask><mask>.SCALE_SMOOTH))));try { write(img, String, new File(String));} catch (Exception e) { printStackTrace();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.imageio",
    "truth_type": "javax.imageio",
    "full_FQN": "javax.imageio.ImageIO.write()",
    "boolean": 1,
    "context": " addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { awt BufferedImage img = getScreenShot getContentPane());showMessageDialog(null, new JLabel(new ImageIcon awt getScaledInstance awt getWidth(null) / 2, awt getHeight(null) / 2, SCALE_SMOOTH))));try { <mask><mask><mask><mask><mask><mask>write(img, String, new File(String));} catch (Exception e) { printStackTrace();} } });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File()",
    "boolean": 1,
    "context": " addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { awt BufferedImage img = getScreenShot getContentPane());showMessageDialog(null, new JLabel(new ImageIcon awt getScaledInstance awt getWidth(null) / 2, awt getHeight(null) / 2, SCALE_SMOOTH))));try { write(img, String, new <mask><mask><mask>.File(String));} catch (Exception e) { printStackTrace();} } });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JMenu",
    "boolean": 1,
    "context": "} catch (Exception e) { printStackTrace();} } });<mask><mask><mask><mask><mask>.JMenu menu = new JMenu(String); add(screenshot);JMenuBar mb = new JMenuBar();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JMenu()",
    "boolean": 1,
    "context": "} catch (Exception e) { printStackTrace();} } });JMenu menu = new <mask><mask><mask><mask><mask>.JMenu(String); add(screenshot);JMenuBar mb = new JMenuBar();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JMenu.add()",
    "boolean": 1,
    "context": "} } });JMenu menu = new JMenu(String); <mask><mask><mask><mask><mask>add(screenshot);JMenuBar mb = new JMenuBar(); add(menu);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JMenuBar",
    "boolean": 1,
    "context": "javax.swing.JMenu menu = new JMenu(String); add(screenshot);<mask><mask><mask><mask><mask>.JMenuBar mb = new JMenuBar(); add(menu); setJMenuBar(mb);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JMenuBar()",
    "boolean": 1,
    "context": "javax.swing.JMenu menu = new JMenu(String); add(screenshot);JMenuBar mb = new <mask><mask><mask><mask><mask>.JMenuBar(); add(menu); setJMenuBar(mb);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JMenuBar.add()",
    "boolean": 1,
    "context": " add(screenshot);JMenuBar mb = new JMenuBar(); <mask><mask><mask><mask><mask>add(menu); setJMenuBar(mb);JPanel p = new JPanel(new BorderLayout(5, 5));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.setJMenuBar()",
    "boolean": 1,
    "context": "javax.swing.JMenuBar mb = new JMenuBar(); add(menu); <mask><mask><mask><mask><mask>setJMenuBar(mb);JPanel p = new JPanel(new BorderLayout(5, 5)); setBorder(new TitledBorder(String));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel",
    "boolean": 1,
    "context": " add(menu); setJMenuBar(mb);<mask><mask><mask><mask><mask>.JPanel p = new JPanel(new BorderLayout(5, 5)); setBorder(new TitledBorder(String)); add(new JScrollPane(new JTree()), WEST);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel()",
    "boolean": 1,
    "context": " add(menu); setJMenuBar(mb);JPanel p = new <mask><mask><mask><mask><mask>.JPanel(new BorderLayout(5, 5)); setBorder(new TitledBorder(String)); add(new JScrollPane(new JTree()), WEST);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.BorderLayout()",
    "boolean": 1,
    "context": " add(menu); setJMenuBar(mb);JPanel p = new JPanel(new <mask><mask><mask><mask>.BorderLayout(5, 5)); setBorder(new TitledBorder(String)); add(new JScrollPane(new JTree()), WEST);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel.setBorder()",
    "boolean": 1,
    "context": " setJMenuBar(mb);JPanel p = new JPanel(new BorderLayout(5, 5)); <mask><mask><mask><mask><mask>setBorder(new TitledBorder(String)); add(new JScrollPane(new JTree()), WEST); add(new JScrollPane(new JTextArea(HELP, 10, 30)), CENTER);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.border.TitledBorder()",
    "boolean": 1,
    "context": " setJMenuBar(mb);JPanel p = new JPanel(new BorderLayout(5, 5)); setBorder(new <mask><mask><mask><mask><mask>TitledBorder(String)); add(new JScrollPane(new JTree()), WEST); add(new JScrollPane(new JTextArea(HELP, 10, 30)), CENTER);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel.add()",
    "boolean": 1,
    "context": "javax.swing.JPanel p = new JPanel(new BorderLayout(5, 5)); setBorder(new TitledBorder(String)); <mask><mask><mask><mask><mask>add(new JScrollPane(new JTree()), WEST); add(new JScrollPane(new JTextArea(HELP, 10, 30)), CENTER); setContentPane(p);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JScrollPane()",
    "boolean": 1,
    "context": "javax.swing.JPanel p = new JPanel(new BorderLayout(5, 5)); setBorder(new TitledBorder(String)); add(new <mask><mask><mask><mask><mask>.JScrollPane(new JTree()), WEST); add(new JScrollPane(new JTextArea(HELP, 10, 30)), CENTER); setContentPane(p);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JTree()",
    "boolean": 1,
    "context": "javax.swing.JPanel p = new JPanel(new BorderLayout(5, 5)); setBorder(new TitledBorder(String)); add(new JScrollPane(new <mask><mask><mask><mask><mask>.JTree()), WEST); add(new JScrollPane(new JTextArea(HELP, 10, 30)), CENTER); setContentPane(p);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.BorderLayout",
    "truth_type": "java.awt.BorderLayout",
    "full_FQN": "java.awt.BorderLayout.WEST",
    "boolean": 1,
    "context": "javax.swing.JPanel p = new JPanel(new BorderLayout(5, 5)); setBorder(new TitledBorder(String)); add(new JScrollPane(new JTree()), <mask><mask><mask><mask><mask><mask><mask>.WEST); add(new JScrollPane(new JTextArea(HELP, 10, 30)), CENTER); setContentPane(p);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel.add()",
    "boolean": 1,
    "context": " setBorder(new TitledBorder(String)); add(new JScrollPane(new JTree()), WEST); <mask><mask><mask><mask><mask>add(new JScrollPane(new JTextArea(HELP, 10, 30)), CENTER); setContentPane(p); pack();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JScrollPane()",
    "boolean": 1,
    "context": " setBorder(new TitledBorder(String)); add(new JScrollPane(new JTree()), WEST); add(new <mask><mask><mask><mask><mask>.JScrollPane(new JTextArea(HELP, 10, 30)), CENTER); setContentPane(p); pack();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JTextArea()",
    "boolean": 1,
    "context": " setBorder(new TitledBorder(String)); add(new JScrollPane(new JTree()), WEST); add(new JScrollPane(new <mask><mask><mask><mask><mask>.JTextArea(HELP, 10, 30)), CENTER); setContentPane(p); pack();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.BorderLayout",
    "truth_type": "java.awt.BorderLayout",
    "full_FQN": "java.awt.BorderLayout.CENTER",
    "boolean": 1,
    "context": " setBorder(new TitledBorder(String)); add(new JScrollPane(new JTree()), WEST); add(new JScrollPane(new JTextArea(HELP, 10, 30)), <mask><mask><mask><mask><mask><mask><mask>.CENTER); setContentPane(p); pack();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.setContentPane()",
    "boolean": 1,
    "context": " add(new JScrollPane(new JTree()), WEST); add(new JScrollPane(new JTextArea(HELP, 10, 30)), CENTER); <mask><mask><mask><mask><mask>setContentPane(p); pack(); setLocationRelativeTo(null);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.pack()",
    "boolean": 1,
    "context": " add(new JScrollPane(new JTextArea(HELP, 10, 30)), CENTER); setContentPane(p); <mask><mask><mask><mask><mask>pack(); setLocationRelativeTo(null); setDefaultCloseOperation(EXIT_ON_CLOSE);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.setLocationRelativeTo()",
    "boolean": 1,
    "context": " setContentPane(p); pack(); <mask><mask><mask><mask><mask>setLocationRelativeTo(null); setDefaultCloseOperation(EXIT_ON_CLOSE); setVisible(true);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.setDefaultCloseOperation()",
    "boolean": 1,
    "context": " pack(); setLocationRelativeTo(null); <mask><mask><mask><mask><mask>setDefaultCloseOperation(EXIT_ON_CLOSE); setVisible(true);} };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing.JFrame",
    "truth_type": "javax.swing.JFrame",
    "full_FQN": "javax.swing.JFrame.EXIT_ON_CLOSE",
    "boolean": 1,
    "context": " pack(); setLocationRelativeTo(null); setDefaultCloseOperation(<mask><mask><mask><mask><mask><mask><mask><mask>.EXIT_ON_CLOSE); setVisible(true);} };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.setVisible()",
    "boolean": 1,
    "context": " setLocationRelativeTo(null); setDefaultCloseOperation(EXIT_ON_CLOSE); <mask><mask><mask><mask><mask>setVisible(true);} };invokeLater(r);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.SwingUtilities.invokeLater()",
    "boolean": 1,
    "context": " setVisible(true);} };<mask><mask><mask><mask><mask>invokeLater(r);} };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame",
    "boolean": 1,
    "context": "public class Class_22 { public class TwoRoot extends <mask><mask><mask><mask><mask>.JFrame { private static final String s = String;private JProgressBar progressBar = new JProgressBar(0, 100);private JLabel label = new JLabel(s, CENTER);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JProgressBar",
    "boolean": 1,
    "context": "public class Class_22 { public class TwoRoot extends JFrame { private static final String s = String;private <mask><mask><mask><mask><mask>.JProgressBar progressBar = new JProgressBar(0, 100);private JLabel label = new JLabel(s, CENTER);public TwoRoot() { setLayout(new GridLayout(0, 1));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JProgressBar()",
    "boolean": 1,
    "context": "public class Class_22 { public class TwoRoot extends JFrame { private static final String s = String;private JProgressBar progressBar = new <mask><mask><mask><mask><mask>.JProgressBar(0, 100);private JLabel label = new JLabel(s, CENTER);public TwoRoot() { setLayout(new GridLayout(0, 1));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JLabel",
    "boolean": 1,
    "context": "public class Class_22 { public class TwoRoot extends JFrame { private static final String s = String;private JProgressBar progressBar = new JProgressBar(0, 100);private <mask><mask><mask><mask><mask>.JLabel label = new JLabel(s, CENTER);public TwoRoot() { setLayout(new GridLayout(0, 1));setTitle(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JLabel()",
    "boolean": 1,
    "context": "public class Class_22 { public class TwoRoot extends JFrame { private static final String s = String;private JProgressBar progressBar = new JProgressBar(0, 100);private JLabel label = new <mask><mask><mask><mask><mask>.JLabel(s, CENTER);public TwoRoot() { setLayout(new GridLayout(0, 1));setTitle(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing.JLabel",
    "truth_type": "javax.swing.JLabel",
    "full_FQN": "javax.swing.JLabel.CENTER",
    "boolean": 1,
    "context": "public class Class_22 { public class TwoRoot extends JFrame { private static final String s = String;private JProgressBar progressBar = new JProgressBar(0, 100);private JLabel label = new JLabel(s, <mask><mask><mask><mask><mask><mask><mask><mask>.CENTER);public TwoRoot() { setLayout(new GridLayout(0, 1));setTitle(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.GridLayout()",
    "boolean": 1,
    "context": "private JProgressBar progressBar = new JProgressBar(0, 100);private JLabel label = new JLabel(s, CENTER);public TwoRoot() { setLayout(new <mask><mask><mask><mask>.GridLayout(0, 1));setTitle(String);setDefaultCloseOperation(EXIT_ON_CLOSE);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing.JFrame",
    "truth_type": "javax.swing.JFrame",
    "full_FQN": "javax.swing.JFrame.EXIT_ON_CLOSE",
    "boolean": 1,
    "context": "public TwoRoot() { setLayout(new GridLayout(0, 1));setTitle(String);setDefaultCloseOperation(<mask><mask><mask><mask><mask><mask><mask><mask>.EXIT_ON_CLOSE);add(progressBar);add(label);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JProgressBar.setIndeterminate()",
    "boolean": 1,
    "context": "this.setLocationRelativeTo(null);setVisible(true);} public void runCalc() { <mask><mask><mask><mask><mask>setIndeterminate(true);TwoWorker task = new TwoWorker();addPropertyChangeListener(new PropertyChangeListener() { @Override public void propertyChange(PropertyChangeEvent e) { if (equals getPropertyName())) { setIndeterminate(false);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.beans",
    "truth_type": "java.beans",
    "full_FQN": "java.beans.PropertyChangeListener()",
    "boolean": 1,
    "context": "} public void runCalc() { setIndeterminate(true);TwoWorker task = new TwoWorker();addPropertyChangeListener(new <mask><mask><mask>.PropertyChangeListener() { @Override public void propertyChange(PropertyChangeEvent e) { if (equals getPropertyName())) { setIndeterminate(false); setValue(((Integer)  getNewValue())));} } });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.beans",
    "truth_type": "java.beans",
    "full_FQN": "java.beans.PropertyChangeEvent",
    "boolean": 1,
    "context": "} public void runCalc() { setIndeterminate(true);TwoWorker task = new TwoWorker();addPropertyChangeListener(new PropertyChangeListener() { @Override public void propertyChange(<mask><mask><mask>.PropertyChangeEvent e) { if (equals getPropertyName())) { setIndeterminate(false); setValue(((Integer)  getNewValue())));} } });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.beans",
    "truth_type": "java.beans",
    "full_FQN": "java.beans.PropertyChangeEvent.getPropertyName()",
    "boolean": 1,
    "context": "} public void runCalc() { setIndeterminate(true);TwoWorker task = new TwoWorker();addPropertyChangeListener(new PropertyChangeListener() { @Override public void propertyChange(PropertyChangeEvent e) { if (equals <mask><mask><mask>getPropertyName())) { setIndeterminate(false); setValue(((Integer)  getNewValue())));} } });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JProgressBar.setIndeterminate()",
    "boolean": 1,
    "context": "} public void runCalc() { setIndeterminate(true);TwoWorker task = new TwoWorker();addPropertyChangeListener(new PropertyChangeListener() { @Override public void propertyChange(PropertyChangeEvent e) { if (equals getPropertyName())) { <mask><mask><mask><mask><mask>setIndeterminate(false); setValue(((Integer)  getNewValue())));} } });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JProgressBar.setValue()",
    "boolean": 1,
    "context": "TwoWorker task = new TwoWorker();addPropertyChangeListener(new PropertyChangeListener() { @Override public void propertyChange(PropertyChangeEvent e) { if (equals getPropertyName())) { setIndeterminate(false); <mask><mask><mask><mask><mask>setValue(((Integer)  getNewValue())));} } });execute();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.beans",
    "truth_type": "java.beans",
    "full_FQN": "java.beans.PropertyChangeEvent.getNewValue()",
    "boolean": 1,
    "context": "TwoWorker task = new TwoWorker();addPropertyChangeListener(new PropertyChangeListener() { @Override public void propertyChange(PropertyChangeEvent e) { if (equals getPropertyName())) { setIndeterminate(false); setValue(((Integer)  <mask><mask><mask>getNewValue())));} } });execute();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.SwingWorker",
    "boolean": 0,
    "context": "} } });execute();} private class TwoWorker extends <mask><mask><mask><mask><mask>.SwingWorker<Double, Double> { private static final int N = 5;private final DecimalFormat df = new DecimalFormat(s);double x = 1;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DecimalFormat",
    "boolean": 1,
    "context": "task.execute();} private class TwoWorker extends SwingWorker<Double, Double> { private static final int N = 5;private final <mask><mask><mask>.DecimalFormat df = new DecimalFormat(s);double x = 1;@Override protected Double doInBackground() throws Exception { for (int i = 1; i <= N; i++) { x = x - (((x * x) - 2) / (2 * x));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DecimalFormat()",
    "boolean": 1,
    "context": "task.execute();} private class TwoWorker extends SwingWorker<Double, Double> { private static final int N = 5;private final DecimalFormat df = new <mask><mask><mask>.DecimalFormat(s);double x = 1;@Override protected Double doInBackground() throws Exception { for (int i = 1; i <= N; i++) { x = x - (((x * x) - 2) / (2 * x));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "publish(valueOf(x));sleep(1000);// simulate latency } return valueOf(x);} @Override protected void process(<mask><mask><mask>.List<Double> chunks) { for (double d : chunks) { setText format(d));} } } public void main(String[] args) { invokeLater(new Runnable() { @Override public void run() { TwoRoot t = new TwoRoot();runCalc();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text.log.Dateatter",
    "truth_type": "javax.swing.JLabel",
    "full_FQN": "javax.swing.JLabel.setText",
    "boolean": 0,
    "context": "publish(valueOf(x));sleep(1000);// simulate latency } return valueOf(x);} @Override protected void process(List<Double> chunks) { for (double d : chunks) { <mask><mask><mask><mask><mask><mask><mask><mask>.setText format(d));} } } public void main(String[] args) { invokeLater(new Runnable() { @Override public void run() { TwoRoot t = new TwoRoot();runCalc();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DecimalFormat.format()",
    "boolean": 1,
    "context": "publish(valueOf(x));sleep(1000);// simulate latency } return valueOf(x);} @Override protected void process(List<Double> chunks) { for (double d : chunks) { setText <mask><mask><mask>format(d));} } } public void main(String[] args) { invokeLater(new Runnable() { @Override public void run() { TwoRoot t = new TwoRoot();runCalc();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.EventQueue.invokeLater()",
    "boolean": 1,
    "context": "java.lang.Thread.sleep(1000);// simulate latency } return valueOf(x);} @Override protected void process(List<Double> chunks) { for (double d : chunks) { setText format(d));} } } public void main(String[] args) { <mask><mask><mask><mask>invokeLater(new Runnable() { @Override public void run() { TwoRoot t = new TwoRoot();runCalc();} });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame",
    "boolean": 1,
    "context": "t.runCalc();} });} } <mask><mask><mask><mask><mask>.JFrame progressFrame;JProgressBar progressBar;JLabel label = new JLabel(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JProgressBar",
    "boolean": 1,
    "context": "} });} } JFrame progressFrame;<mask><mask><mask><mask><mask>.JProgressBar progressBar;JLabel label = new JLabel(String);Container pane;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JLabel",
    "boolean": 1,
    "context": "} } JFrame progressFrame;JProgressBar progressBar;<mask><mask><mask><mask><mask>.JLabel label = new JLabel(String);Container pane;double amountSaved = 0;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JLabel()",
    "boolean": 1,
    "context": "} } JFrame progressFrame;JProgressBar progressBar;JLabel label = new <mask><mask><mask><mask><mask>.JLabel(String);Container pane;double amountSaved = 0;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Container",
    "boolean": 1,
    "context": "javax.swing.JProgressBar progressBar;JLabel label = new JLabel(String);<mask><mask><mask><mask>.Container pane;double amountSaved = 0;int i = 0;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame()",
    "boolean": 1,
    "context": "int i = 0;int iterations;public void createGui(int iterations) { progressFrame = new <mask><mask><mask><mask><mask>.JFrame(String); setSize(300, 100);pane = getContentPane();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.setSize()",
    "boolean": 1,
    "context": "int iterations;public void createGui(int iterations) { progressFrame = new JFrame(String); <mask><mask><mask><mask><mask>setSize(300, 100);pane = getContentPane(); setLayout(null);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.getContentPane()",
    "boolean": 1,
    "context": "public void createGui(int iterations) { progressFrame = new JFrame(String); setSize(300, 100);pane = <mask><mask><mask><mask><mask>getContentPane(); setLayout(null);label = new JLabel(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Container.setLayout()",
    "boolean": 1,
    "context": " setSize(300, 100);pane = getContentPane(); <mask><mask><mask><mask>setLayout(null);label = new JLabel(String); setBounds(115, 35, 200, 25);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JLabel()",
    "boolean": 1,
    "context": "pane = getContentPane(); setLayout(null);label = new <mask><mask><mask><mask><mask>.JLabel(String); setBounds(115, 35, 200, 25);progressBar = new JProgressBar(0, iterations);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JLabel.setBounds()",
    "boolean": 1,
    "context": " setLayout(null);label = new JLabel(String); <mask><mask><mask><mask><mask>setBounds(115, 35, 200, 25);progressBar = new JProgressBar(0, iterations); setBounds(10, 10, 280, 20);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JProgressBar()",
    "boolean": 1,
    "context": "label = new JLabel(String); setBounds(115, 35, 200, 25);progressBar = new <mask><mask><mask><mask><mask>.JProgressBar(0, iterations); setBounds(10, 10, 280, 20); setStringPainted(true);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JProgressBar.setBounds()",
    "boolean": 1,
    "context": " setBounds(115, 35, 200, 25);progressBar = new JProgressBar(0, iterations); <mask><mask><mask><mask><mask>setBounds(10, 10, 280, 20); setStringPainted(true); add(progressBar);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JProgressBar.setStringPainted()",
    "boolean": 1,
    "context": "progressBar = new JProgressBar(0, iterations); setBounds(10, 10, 280, 20); <mask><mask><mask><mask><mask>setStringPainted(true); add(progressBar); add(label);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Container.add()",
    "boolean": 1,
    "context": " setBounds(10, 10, 280, 20); setStringPainted(true); <mask><mask><mask><mask>add(progressBar); add(label); setDefaultCloseOperation(EXIT_ON_CLOSE);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Container.add()",
    "boolean": 1,
    "context": " setStringPainted(true); add(progressBar); <mask><mask><mask><mask>add(label); setDefaultCloseOperation(EXIT_ON_CLOSE); setResizable(false);// No resize setLocationRelativeTo(null);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.setDefaultCloseOperation()",
    "boolean": 1,
    "context": " add(progressBar); add(label); <mask><mask><mask><mask><mask>setDefaultCloseOperation(EXIT_ON_CLOSE); setResizable(false);// No resize setLocationRelativeTo(null); setVisible(true);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing.JFrame",
    "truth_type": "javax.swing.JFrame",
    "full_FQN": "javax.swing.JFrame.EXIT_ON_CLOSE",
    "boolean": 1,
    "context": " add(progressBar); add(label); setDefaultCloseOperation(<mask><mask><mask><mask><mask><mask><mask><mask>.EXIT_ON_CLOSE); setResizable(false);// No resize setLocationRelativeTo(null); setVisible(true);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.setResizable()",
    "boolean": 1,
    "context": " add(label); setDefaultCloseOperation(EXIT_ON_CLOSE); <mask><mask><mask><mask><mask>setResizable(false);// No resize setLocationRelativeTo(null); setVisible(true);} public void runCalcs(double MP, double StepAmt, double L1, double L2, double C1, double C2, double IM1, double IM2, double M1Start, double M2Start) { setIndeterminate(false);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.setLocationRelativeTo()",
    "boolean": 1,
    "context": " add(label); setDefaultCloseOperation(EXIT_ON_CLOSE); setResizable(false);// No resize <mask><mask><mask><mask><mask>setLocationRelativeTo(null); setVisible(true);} public void runCalcs(double MP, double StepAmt, double L1, double L2, double C1, double C2, double IM1, double IM2, double M1Start, double M2Start) { setIndeterminate(false);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.setVisible()",
    "boolean": 1,
    "context": " setDefaultCloseOperation(EXIT_ON_CLOSE); setResizable(false);// No resize setLocationRelativeTo(null); <mask><mask><mask><mask><mask>setVisible(true);} public void runCalcs(double MP, double StepAmt, double L1, double L2, double C1, double C2, double IM1, double IM2, double M1Start, double M2Start) { setIndeterminate(false);TwoWorker task = new TwoWorker(MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JProgressBar.setIndeterminate()",
    "boolean": 1,
    "context": " setResizable(false);// No resize setLocationRelativeTo(null); setVisible(true);} public void runCalcs(double MP, double StepAmt, double L1, double L2, double C1, double C2, double IM1, double IM2, double M1Start, double M2Start) { <mask><mask><mask><mask><mask>setIndeterminate(false);TwoWorker task = new TwoWorker(MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start);addPropertyChangeListener(new PropertyChangeListener() { @Override public void propertyChange(PropertyChangeEvent e) { if (equals getPropertyName())) { setIndeterminate(false);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.beans",
    "truth_type": "java.beans",
    "full_FQN": "java.beans.PropertyChangeListener()",
    "boolean": 1,
    "context": "} public void runCalcs(double MP, double StepAmt, double L1, double L2, double C1, double C2, double IM1, double IM2, double M1Start, double M2Start) { setIndeterminate(false);TwoWorker task = new TwoWorker(MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start);addPropertyChangeListener(new <mask><mask><mask>.PropertyChangeListener() { @Override public void propertyChange(PropertyChangeEvent e) { if (equals getPropertyName())) { setIndeterminate(false); setValue(((Integer)  getNewValue())));} } });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.beans",
    "truth_type": "java.beans",
    "full_FQN": "java.beans.PropertyChangeEvent",
    "boolean": 1,
    "context": "} public void runCalcs(double MP, double StepAmt, double L1, double L2, double C1, double C2, double IM1, double IM2, double M1Start, double M2Start) { setIndeterminate(false);TwoWorker task = new TwoWorker(MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start);addPropertyChangeListener(new PropertyChangeListener() { @Override public void propertyChange(<mask><mask><mask>.PropertyChangeEvent e) { if (equals getPropertyName())) { setIndeterminate(false); setValue(((Integer)  getNewValue())));} } });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.beans",
    "truth_type": "java.beans",
    "full_FQN": "java.beans.PropertyChangeEvent.getPropertyName()",
    "boolean": 1,
    "context": "} public void runCalcs(double MP, double StepAmt, double L1, double L2, double C1, double C2, double IM1, double IM2, double M1Start, double M2Start) { setIndeterminate(false);TwoWorker task = new TwoWorker(MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start);addPropertyChangeListener(new PropertyChangeListener() { @Override public void propertyChange(PropertyChangeEvent e) { if (equals <mask><mask><mask>getPropertyName())) { setIndeterminate(false); setValue(((Integer)  getNewValue())));} } });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JProgressBar.setIndeterminate()",
    "boolean": 1,
    "context": "} public void runCalcs(double MP, double StepAmt, double L1, double L2, double C1, double C2, double IM1, double IM2, double M1Start, double M2Start) { setIndeterminate(false);TwoWorker task = new TwoWorker(MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start);addPropertyChangeListener(new PropertyChangeListener() { @Override public void propertyChange(PropertyChangeEvent e) { if (equals getPropertyName())) { <mask><mask><mask><mask><mask>setIndeterminate(false); setValue(((Integer)  getNewValue())));} } });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JProgressBar.setValue()",
    "boolean": 1,
    "context": "TwoWorker task = new TwoWorker(MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start);addPropertyChangeListener(new PropertyChangeListener() { @Override public void propertyChange(PropertyChangeEvent e) { if (equals getPropertyName())) { setIndeterminate(false); <mask><mask><mask><mask><mask>setValue(((Integer)  getNewValue())));} } });execute();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.beans",
    "truth_type": "java.beans",
    "full_FQN": "java.beans.PropertyChangeEvent.getNewValue()",
    "boolean": 1,
    "context": "TwoWorker task = new TwoWorker(MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start);addPropertyChangeListener(new PropertyChangeListener() { @Override public void propertyChange(PropertyChangeEvent e) { if (equals getPropertyName())) { setIndeterminate(false); setValue(((Integer)  <mask><mask><mask>getNewValue())));} } });execute();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.ax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.SwingWorker",
    "boolean": 0,
    "context": "} } });execute();} public class TwoWorker extends <mask><mask><mask><mask><mask>.SwingWorker<Double, Double> { private final double MP;private final double StepAmt;private final double L1;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JProgressBar.setValue()",
    "boolean": 1,
    "context": "MP2Sum = M2Sum;} i++; <mask><mask><mask><mask><mask>setValue(i);M1 = M1 + StepAmt;M2 = MP - M1;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JLabel.setBounds()",
    "boolean": 1,
    "context": "amountSaved = CTotal - minLoop;} return null;} @Override protected void done() { <mask><mask><mask><mask><mask>setBounds(133, 35, 200, 25); setText(String);} } public double savedReturn() { return amountSaved;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JLabel.setText()",
    "boolean": 1,
    "context": "} return null;} @Override protected void done() { setBounds(133, 35, 200, 25); <mask><mask><mask><mask><mask>setText(String);} } public double savedReturn() { return amountSaved;} };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DecimalFormat",
    "boolean": 1,
    "context": "private static final int EXPONENTIAL_INT_THRESHOLD = 1000000000;private static final double EXPONENTIAL_DEC_THRESHOLD = 0E-4;private <mask><mask><mask>.DecimalFormat decimalFormat;private DecimalFormat decimalFormatLong;private DecimalFormat exponentialFormat;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DecimalFormat",
    "boolean": 1,
    "context": "private static final double EXPONENTIAL_DEC_THRESHOLD = 0E-4;private DecimalFormat decimalFormat;private <mask><mask><mask>.DecimalFormat decimalFormatLong;private DecimalFormat exponentialFormat;private char groupSeparator;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DecimalFormat",
    "boolean": 1,
    "context": "private DecimalFormat decimalFormat;private DecimalFormat decimalFormatLong;private <mask><mask><mask>.DecimalFormat exponentialFormat;private char groupSeparator;public void NumberFormatter(int decimalPlaces) { configureDecimalPlaces(decimalPlaces);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DecimalFormatSymbols",
    "boolean": 1,
    "context": "public void NumberFormatter(int decimalPlaces) { configureDecimalPlaces(decimalPlaces);} public void configureDecimalPlaces(int decimalPlaces) { if (decimalPlaces <= 0) { throw new IllegalArgumentException(String);} <mask><mask><mask>.DecimalFormatSymbols separators = new DecimalFormatSymbols(getDefault()); setMinusSign(SYMBOL_MINUS); setZeroDigit(SYMBOL_ZERO);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DecimalFormatSymbols()",
    "boolean": 1,
    "context": "public void NumberFormatter(int decimalPlaces) { configureDecimalPlaces(decimalPlaces);} public void configureDecimalPlaces(int decimalPlaces) { if (decimalPlaces <= 0) { throw new IllegalArgumentException(String);} DecimalFormatSymbols separators = new <mask><mask><mask>.DecimalFormatSymbols(getDefault()); setMinusSign(SYMBOL_MINUS); setZeroDigit(SYMBOL_ZERO);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Locale.getDefault()",
    "boolean": 1,
    "context": "public void NumberFormatter(int decimalPlaces) { configureDecimalPlaces(decimalPlaces);} public void configureDecimalPlaces(int decimalPlaces) { if (decimalPlaces <= 0) { throw new IllegalArgumentException(String);} DecimalFormatSymbols separators = new DecimalFormatSymbols(<mask><mask><mask>getDefault()); setMinusSign(SYMBOL_MINUS); setZeroDigit(SYMBOL_ZERO);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DecimalFormatSymbols.setMinusSign()",
    "boolean": 1,
    "context": "} public void configureDecimalPlaces(int decimalPlaces) { if (decimalPlaces <= 0) { throw new IllegalArgumentException(String);} DecimalFormatSymbols separators = new DecimalFormatSymbols(getDefault()); <mask><mask><mask>setMinusSign(SYMBOL_MINUS); setZeroDigit(SYMBOL_ZERO);groupSeparator = getGroupingSeparator();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DecimalFormatSymbols.setZeroDigit()",
    "boolean": 1,
    "context": "} DecimalFormatSymbols separators = new DecimalFormatSymbols(getDefault()); setMinusSign(SYMBOL_MINUS); <mask><mask><mask>setZeroDigit(SYMBOL_ZERO);groupSeparator = getGroupingSeparator();StringBuilder decimal = new StringBuilder();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DecimalFormatSymbols.getGroupingSeparator()",
    "boolean": 1,
    "context": " setMinusSign(SYMBOL_MINUS); setZeroDigit(SYMBOL_ZERO);groupSeparator = <mask><mask><mask>getGroupingSeparator();StringBuilder decimal = new StringBuilder();StringBuilder exponential = new StringBuilder(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DecimalFormat",
    "boolean": 1,
    "context": " append(String);} append(String);decimalFormat = new <mask><mask><mask>.DecimalFormat toString(), separators);decimalFormatLong = new DecimalFormat append(String).toString(), separators);exponentialFormat = new DecimalFormat toString(), separators);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DecimalFormat",
    "boolean": 1,
    "context": "} append(String);decimalFormat = new DecimalFormat toString(), separators);decimalFormatLong = new <mask><mask><mask>.DecimalFormat append(String).toString(), separators);exponentialFormat = new DecimalFormat toString(), separators); setRoundingMode(HALF_UP);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DecimalFormat",
    "boolean": 1,
    "context": "decimalFormat = new DecimalFormat toString(), separators);decimalFormatLong = new DecimalFormat append(String).toString(), separators);exponentialFormat = new <mask><mask><mask>.DecimalFormat toString(), separators); setRoundingMode(HALF_UP); setRoundingMode(HALF_UP);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DecimalFormat.setRoundingMode()",
    "boolean": 1,
    "context": "decimalFormatLong = new DecimalFormat append(String).toString(), separators);exponentialFormat = new DecimalFormat toString(), separators); <mask><mask><mask>setRoundingMode(HALF_UP); setRoundingMode(HALF_UP); setRoundingMode(HALF_UP);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.math.RoundingMode",
    "truth_type": "java.math.RoundingMode",
    "full_FQN": "java.math.RoundingMode.HALF_UP",
    "boolean": 1,
    "context": "decimalFormatLong = new DecimalFormat append(String).toString(), separators);exponentialFormat = new DecimalFormat toString(), separators); setRoundingMode(<mask><mask><mask><mask><mask><mask><mask>.HALF_UP); setRoundingMode(HALF_UP); setRoundingMode(HALF_UP);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DecimalFormat.setRoundingMode()",
    "boolean": 1,
    "context": "exponentialFormat = new DecimalFormat toString(), separators); setRoundingMode(HALF_UP); <mask><mask><mask>setRoundingMode(HALF_UP); setRoundingMode(HALF_UP);} public String format(double value) { String result;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.math.RoundingMode",
    "truth_type": "java.math.RoundingMode",
    "full_FQN": "java.math.RoundingMode.HALF_UP",
    "boolean": 1,
    "context": "exponentialFormat = new DecimalFormat toString(), separators); setRoundingMode(HALF_UP); setRoundingMode(<mask><mask><mask><mask><mask><mask><mask>.HALF_UP); setRoundingMode(HALF_UP);} public String format(double value) { String result;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DecimalFormat.setRoundingMode()",
    "boolean": 1,
    "context": " setRoundingMode(HALF_UP); setRoundingMode(HALF_UP); <mask><mask><mask>setRoundingMode(HALF_UP);} public String format(double value) { String result;if (isNaN(value)) { result = String;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.math.RoundingMode",
    "truth_type": "java.math.RoundingMode",
    "full_FQN": "java.math.RoundingMode.HALF_UP",
    "boolean": 1,
    "context": " setRoundingMode(HALF_UP); setRoundingMode(HALF_UP); setRoundingMode(<mask><mask><mask><mask><mask><mask><mask>.HALF_UP);} public String format(double value) { String result;if (isNaN(value)) { result = String;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DecimalFormat.format()",
    "boolean": 1,
    "context": "} else { double absValue = abs(value);if (absValue >= 1) { if (absValue >= EXPONENTIAL_INT_THRESHOLD) { value = floor(value);result = <mask><mask><mask>format(value);} else { result = format(value);} } else if ((absValue < 1) && (absValue > 0)) { if (absValue >= EXPONENTIAL_DEC_THRESHOLD) { result = format(value);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DecimalFormat.format()",
    "boolean": 1,
    "context": "if (absValue >= 1) { if (absValue >= EXPONENTIAL_INT_THRESHOLD) { value = floor(value);result = format(value);} else { result = <mask><mask><mask>format(value);} } else if ((absValue < 1) && (absValue > 0)) { if (absValue >= EXPONENTIAL_DEC_THRESHOLD) { result = format(value);if (equalsIgnoreCase(String)) { result = format(value);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DecimalFormat.format()",
    "boolean": 1,
    "context": "result = format(value);} else { result = format(value);} } else if ((absValue < 1) && (absValue > 0)) { if (absValue >= EXPONENTIAL_DEC_THRESHOLD) { result = <mask><mask><mask>format(value);if (equalsIgnoreCase(String)) { result = format(value);} } else { result = format(value);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DecimalFormat.format()",
    "boolean": 1,
    "context": "} else { result = format(value);} } else if ((absValue < 1) && (absValue > 0)) { if (absValue >= EXPONENTIAL_DEC_THRESHOLD) { result = format(value);if (equalsIgnoreCase(String)) { result = <mask><mask><mask>format(value);} } else { result = format(value);} } else { result = String;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DecimalFormat.format()",
    "boolean": 1,
    "context": "} } else if ((absValue < 1) && (absValue > 0)) { if (absValue >= EXPONENTIAL_DEC_THRESHOLD) { result = format(value);if (equalsIgnoreCase(String)) { result = format(value);} } else { result = <mask><mask><mask>format(value);} } else { result = String;} } return result;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DecimalFormat.parse()",
    "boolean": 1,
    "context": "} } return result;} public String formatWithoutGroupSeparators(double value) { return removeGroupSeparators(format(value));} public double parse(String value, double defValue) { try { return <mask><mask><mask>parse(value).doubleValue();} catch (ParseException e) { printStackTrace();} return defValue;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.ParseException",
    "boolean": 1,
    "context": "} public String formatWithoutGroupSeparators(double value) { return removeGroupSeparators(format(value));} public double parse(String value, double defValue) { try { return parse(value).doubleValue();} catch (<mask><mask><mask>.ParseException e) { printStackTrace();} return defValue;} private String removeGroupSeparators(String number) { return replace(valueOf(groupSeparator), String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.ParseException.printStackTrace()",
    "boolean": 1,
    "context": "} public String formatWithoutGroupSeparators(double value) { return removeGroupSeparators(format(value));} public double parse(String value, double defValue) { try { return parse(value).doubleValue();} catch (ParseException e) { <mask><mask><mask>printStackTrace();} return defValue;} private String removeGroupSeparators(String number) { return replace(valueOf(groupSeparator), String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.regex",
    "truth_type": "java.util.regex",
    "full_FQN": "java.util.regex.Pattern",
    "boolean": 1,
    "context": "class Class_4 { private static <mask><mask><mask><mask><mask><mask>.Pattern twopart = compile(String);public static void checkString(String s) { Matcher m = matcher(s);if  matches()) { println(((((s + String) + group(0)) + String) + group(1)) + String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.regex",
    "truth_type": "java.util.regex",
    "full_FQN": "java.util.regex.Pattern.compile()",
    "boolean": 1,
    "context": "class Class_4 { private static Pattern twopart = <mask><mask><mask><mask><mask><mask>compile(String);public static void checkString(String s) { Matcher m = matcher(s);if  matches()) { println(((((s + String) + group(0)) + String) + group(1)) + String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.regex",
    "truth_type": "java.util.regex",
    "full_FQN": "java.util.regex.Matcher",
    "boolean": 1,
    "context": "class Class_4 { private static Pattern twopart = compile(String);public static void checkString(String s) { <mask><mask><mask><mask><mask><mask>.Matcher m = matcher(s);if  matches()) { println(((((s + String) + group(0)) + String) + group(1)) + String);} else { println(s + String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.regex",
    "truth_type": "java.util.regex",
    "full_FQN": "java.util.regex.Matcher.matches()",
    "boolean": 1,
    "context": "class Class_4 { private static Pattern twopart = compile(String);public static void checkString(String s) { Matcher m = matcher(s);if  <mask><mask><mask><mask><mask><mask>matches()) { println(((((s + String) + group(0)) + String) + group(1)) + String);} else { println(s + String);} } public static void main(String[] args) { checkString(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.regex",
    "truth_type": "java.util.regex",
    "full_FQN": "java.util.regex.Matcher.group()",
    "boolean": 1,
    "context": "class Class_4 { private static Pattern twopart = compile(String);public static void checkString(String s) { Matcher m = matcher(s);if  matches()) { println(((((s + String) + <mask><mask><mask><mask><mask><mask>group(0)) + String) + group(1)) + String);} else { println(s + String);} } public static void main(String[] args) { checkString(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.regex",
    "truth_type": "java.util.regex",
    "full_FQN": "java.util.regex.Matcher.group()",
    "boolean": 1,
    "context": "class Class_4 { private static Pattern twopart = compile(String);public static void checkString(String s) { Matcher m = matcher(s);if  matches()) { println(((((s + String) + group(0)) + String) + <mask><mask><mask><mask><mask><mask>group(1)) + String);} else { println(s + String);} } public static void main(String[] args) { checkString(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "checkString(String);checkString(String);} public static String[] mySplit(String text, String delimiter) { <mask><mask><mask>.List<String> parts = new ArrayList<String>();text += delimiter;for (int i = indexOf(delimiter), j = 0; i != (-1);) { String temp = substring(j, i);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "checkString(String);checkString(String);} public static String[] mySplit(String text, String delimiter) { List<String> parts = new <mask><mask><mask>.ArrayList<String>();text += delimiter;for (int i = indexOf(delimiter), j = 0; i != (-1);) { String temp = substring(j, i);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.add()",
    "boolean": 1,
    "context": "text += delimiter;for (int i = indexOf(delimiter), j = 0; i != (-1);) { String temp = substring(j, i);if (trim().length() != 0) { <mask><mask><mask>add(temp);} j = i + length();i = indexOf(delimiter, j);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.toArray()",
    "boolean": 1,
    "context": "} j = i + length();i = indexOf(delimiter, j);} return <mask><mask><mask>toArray(new String[0]);} public static void main_2() { String str = String;String delimiter = String;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map",
    "boolean": 1,
    "context": "public class Class_5 { public static <K, V extends Comparable<? super V>> <mask><mask><mask>.Map<K, V> sortByValue(Map<K, V> map) { List<Entry<K, V>> list = new LinkedList<Entry<K, V>> entrySet());sort(list, new Comparator<Entry<K, V>>() { public int compare(Entry<K, V> o1, Entry<K, V> o2) { return Map$getValue().compareTo Map$getValue());} });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map",
    "boolean": 1,
    "context": "public class Class_5 { public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(<mask><mask><mask>.Map<K, V> map) { List<Entry<K, V>> list = new LinkedList<Entry<K, V>> entrySet());sort(list, new Comparator<Entry<K, V>>() { public int compare(Entry<K, V> o1, Entry<K, V> o2) { return Map$getValue().compareTo Map$getValue());} });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "public class Class_5 { public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) { <mask><mask><mask>.List<Entry<K, V>> list = new LinkedList<Entry<K, V>> entrySet());sort(list, new Comparator<Entry<K, V>>() { public int compare(Entry<K, V> o1, Entry<K, V> o2) { return Map$getValue().compareTo Map$getValue());} });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.Map",
    "truth_type": "java.util.Map",
    "full_FQN": "java.util.Map.Entry",
    "boolean": 1,
    "context": "public class Class_5 { public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) { List<<mask><mask><mask><mask><mask>.Entry<K, V>> list = new LinkedList<Entry<K, V>> entrySet());sort(list, new Comparator<Entry<K, V>>() { public int compare(Entry<K, V> o1, Entry<K, V> o2) { return Map$getValue().compareTo Map$getValue());} });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.LinkedList",
    "boolean": 1,
    "context": "public class Class_5 { public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) { List<Entry<K, V>> list = new <mask><mask><mask>.LinkedList<Entry<K, V>> entrySet());sort(list, new Comparator<Entry<K, V>>() { public int compare(Entry<K, V> o1, Entry<K, V> o2) { return Map$getValue().compareTo Map$getValue());} });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.Map",
    "truth_type": "java.util.Map",
    "full_FQN": "java.util.Map.Entry",
    "boolean": 1,
    "context": "public class Class_5 { public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) { List<Entry<K, V>> list = new LinkedList<<mask><mask><mask><mask><mask>.Entry<K, V>> entrySet());sort(list, new Comparator<Entry<K, V>>() { public int compare(Entry<K, V> o1, Entry<K, V> o2) { return Map$getValue().compareTo Map$getValue());} });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map.entrySet()",
    "boolean": 1,
    "context": "public class Class_5 { public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) { List<Entry<K, V>> list = new LinkedList<Entry<K, V>> <mask><mask><mask>entrySet());sort(list, new Comparator<Entry<K, V>>() { public int compare(Entry<K, V> o1, Entry<K, V> o2) { return Map$getValue().compareTo Map$getValue());} });"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Collections.sort()",
    "boolean": 1,
    "context": "public class Class_5 { public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) { List<Entry<K, V>> list = new LinkedList<Entry<K, V>> entrySet());<mask><mask><mask>sort(list, new Comparator<Entry<K, V>>() { public int compare(Entry<K, V> o1, Entry<K, V> o2) { return Map$getValue().compareTo Map$getValue());} });Map<K, V> result = new LinkedHashMap<K, V>();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Comparator",
    "boolean": 1,
    "context": "public class Class_5 { public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) { List<Entry<K, V>> list = new LinkedList<Entry<K, V>> entrySet());sort(list, new <mask><mask><mask>.Comparator<Entry<K, V>>() { public int compare(Entry<K, V> o1, Entry<K, V> o2) { return Map$getValue().compareTo Map$getValue());} });Map<K, V> result = new LinkedHashMap<K, V>();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.Map",
    "truth_type": "java.util.Map",
    "full_FQN": "java.util.Map.Entry",
    "boolean": 1,
    "context": "public class Class_5 { public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) { List<Entry<K, V>> list = new LinkedList<Entry<K, V>> entrySet());sort(list, new Comparator<<mask><mask><mask><mask><mask>.Entry<K, V>>() { public int compare(Entry<K, V> o1, Entry<K, V> o2) { return Map$getValue().compareTo Map$getValue());} });Map<K, V> result = new LinkedHashMap<K, V>();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.Map",
    "truth_type": "java.util.Map",
    "full_FQN": "java.util.Map.Entry",
    "boolean": 1,
    "context": "public class Class_5 { public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) { List<Entry<K, V>> list = new LinkedList<Entry<K, V>> entrySet());sort(list, new Comparator<Entry<K, V>>() { public int compare(<mask><mask><mask><mask><mask>.Entry<K, V> o1, Entry<K, V> o2) { return Map$getValue().compareTo Map$getValue());} });Map<K, V> result = new LinkedHashMap<K, V>();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.Map",
    "truth_type": "java.util.Map",
    "full_FQN": "java.util.Map.Entry",
    "boolean": 1,
    "context": "public class Class_5 { public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) { List<Entry<K, V>> list = new LinkedList<Entry<K, V>> entrySet());sort(list, new Comparator<Entry<K, V>>() { public int compare(Entry<K, V> o1, <mask><mask><mask><mask><mask>.Entry<K, V> o2) { return Map$getValue().compareTo Map$getValue());} });Map<K, V> result = new LinkedHashMap<K, V>();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map",
    "boolean": 1,
    "context": "public class Class_5 { public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) { List<Entry<K, V>> list = new LinkedList<Entry<K, V>> entrySet());sort(list, new Comparator<Entry<K, V>>() { public int compare(Entry<K, V> o1, Entry<K, V> o2) { return <mask><mask><mask>.Map$getValue().compareTo Map$getValue());} });Map<K, V> result = new LinkedHashMap<K, V>();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map",
    "boolean": 1,
    "context": "public class Class_5 { public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) { List<Entry<K, V>> list = new LinkedList<Entry<K, V>> entrySet());sort(list, new Comparator<Entry<K, V>>() { public int compare(Entry<K, V> o1, Entry<K, V> o2) { return Map$getValue().compareTo <mask><mask><mask>.Map$getValue());} });Map<K, V> result = new LinkedHashMap<K, V>();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map",
    "boolean": 1,
    "context": "java.util.Collections.sort(list, new Comparator<Entry<K, V>>() { public int compare(Entry<K, V> o1, Entry<K, V> o2) { return Map$getValue().compareTo Map$getValue());} });<mask><mask><mask>.Map<K, V> result = new LinkedHashMap<K, V>();for (Entry<K, V> entry : list) { put Map$getKey(), Map$getValue());} return result;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.LinkedHashMap",
    "boolean": 1,
    "context": "java.util.Collections.sort(list, new Comparator<Entry<K, V>>() { public int compare(Entry<K, V> o1, Entry<K, V> o2) { return Map$getValue().compareTo Map$getValue());} });Map<K, V> result = new <mask><mask><mask>.LinkedHashMap<K, V>();for (Entry<K, V> entry : list) { put Map$getKey(), Map$getValue());} return result;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.Map",
    "truth_type": "java.util.Map",
    "full_FQN": "java.util.Map.Entry",
    "boolean": 1,
    "context": "} });Map<K, V> result = new LinkedHashMap<K, V>();for (<mask><mask><mask><mask><mask>.Entry<K, V> entry : list) { put Map$getKey(), Map$getValue());} return result;} public class main { public void main_1() { HashMap<String, Double> map = new HashMap<String, Double>();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util.Map",
    "truth_type": "java.util.Map",
    "full_FQN": "java.util.Map.put",
    "boolean": 1,
    "context": "} });Map<K, V> result = new LinkedHashMap<K, V>();for (Entry<K, V> entry : list) { <mask><mask><mask><mask><mask>.put Map$getKey(), Map$getValue());} return result;} public class main { public void main_1() { HashMap<String, Double> map = new HashMap<String, Double>();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map",
    "boolean": 1,
    "context": "} });Map<K, V> result = new LinkedHashMap<K, V>();for (Entry<K, V> entry : list) { put <mask><mask><mask>.Map$getKey(), Map$getValue());} return result;} public class main { public void main_1() { HashMap<String, Double> map = new HashMap<String, Double>();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map",
    "boolean": 1,
    "context": "} });Map<K, V> result = new LinkedHashMap<K, V>();for (Entry<K, V> entry : list) { put Map$getKey(), <mask><mask><mask>.Map$getValue());} return result;} public class main { public void main_1() { HashMap<String, Double> map = new HashMap<String, Double>();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.HashMap",
    "boolean": 1,
    "context": "for (Entry<K, V> entry : list) { put Map$getKey(), Map$getValue());} return result;} public class main { public void main_1() { <mask><mask><mask>.HashMap<String, Double> map = new HashMap<String, Double>();ValueComparator bvc = new ValueComparator(map);TreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.HashMap",
    "boolean": 1,
    "context": "for (Entry<K, V> entry : list) { put Map$getKey(), Map$getValue());} return result;} public class main { public void main_1() { HashMap<String, Double> map = new <mask><mask><mask>.HashMap<String, Double>();ValueComparator bvc = new ValueComparator(map);TreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.TreeMap",
    "boolean": 1,
    "context": "} public class main { public void main_1() { HashMap<String, Double> map = new HashMap<String, Double>();ValueComparator bvc = new ValueComparator(map);<mask><mask><mask>.TreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc); put(String, 5); put(String, 4);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.TreeMap",
    "boolean": 1,
    "context": "} public class main { public void main_1() { HashMap<String, Double> map = new HashMap<String, Double>();ValueComparator bvc = new ValueComparator(map);TreeMap<String, Double> sorted_map = new <mask><mask><mask>.TreeMap<String, Double>(bvc); put(String, 5); put(String, 4);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map.put()",
    "boolean": 1,
    "context": "ValueComparator bvc = new ValueComparator(map);TreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc); <mask><mask><mask>put(String, 5); put(String, 4); put(String, 4);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map.put()",
    "boolean": 1,
    "context": "java.util.TreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc); put(String, 5); <mask><mask><mask>put(String, 4); put(String, 4); put(String, 3);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map.put()",
    "boolean": 1,
    "context": " put(String, 5); put(String, 4); <mask><mask><mask>put(String, 4); put(String, 3);println(String + map);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map.put()",
    "boolean": 1,
    "context": " put(String, 4); put(String, 4); <mask><mask><mask>put(String, 3);println(String + map); putAll(map);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.TreeMap.putAll()",
    "boolean": 1,
    "context": " put(String, 3);println(String + map); <mask><mask><mask>putAll(map);println(String + sorted_map);} } class ValueComparator implements Comparator<String> { Map<String, Double> base;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Comparator",
    "boolean": 1,
    "context": " putAll(map);println(String + sorted_map);} } class ValueComparator implements <mask><mask><mask>.Comparator<String> { Map<String, Double> base;public ValueComparator(Map<String, Double> base) { base = base;} public int compare(String a, String b) { if  get(a) >= get(b)) { return -1;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map",
    "boolean": 1,
    "context": " putAll(map);println(String + sorted_map);} } class ValueComparator implements Comparator<String> { <mask><mask><mask>.Map<String, Double> base;public ValueComparator(Map<String, Double> base) { base = base;} public int compare(String a, String b) { if  get(a) >= get(b)) { return -1;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map",
    "boolean": 1,
    "context": "java.lang.System.out.println(String + sorted_map);} } class ValueComparator implements Comparator<String> { Map<String, Double> base;public ValueComparator(<mask><mask><mask>.Map<String, Double> base) { base = base;} public int compare(String a, String b) { if  get(a) >= get(b)) { return -1;} else { return 1;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map.get()",
    "boolean": 1,
    "context": "} } class ValueComparator implements Comparator<String> { Map<String, Double> base;public ValueComparator(Map<String, Double> base) { base = base;} public int compare(String a, String b) { if  <mask><mask><mask>get(a) >= get(b)) { return -1;} else { return 1;} } } };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map.get()",
    "boolean": 1,
    "context": "} } class ValueComparator implements Comparator<String> { Map<String, Double> base;public ValueComparator(Map<String, Double> base) { base = base;} public int compare(String a, String b) { if  get(a) >= <mask><mask><mask>get(b)) { return -1;} else { return 1;} } } };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.EventQueue.invokeLater()",
    "boolean": 1,
    "context": "public class Class_6 implements Runnable { public static void main(String[] args) { <mask><mask><mask><mask>invokeLater(new Class_6());} @Override public void run() { JFrame f = new JFrame(); setDefaultCloseOperation(EXIT_ON_CLOSE);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame",
    "boolean": 1,
    "context": "public class Class_6 implements Runnable { public static void main(String[] args) { invokeLater(new Class_6());} @Override public void run() { <mask><mask><mask><mask><mask>.JFrame f = new JFrame(); setDefaultCloseOperation(EXIT_ON_CLOSE); add(new MainPanel());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame()",
    "boolean": 1,
    "context": "public class Class_6 implements Runnable { public static void main(String[] args) { invokeLater(new Class_6());} @Override public void run() { JFrame f = new <mask><mask><mask><mask><mask>.JFrame(); setDefaultCloseOperation(EXIT_ON_CLOSE); add(new MainPanel());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.setDefaultCloseOperation()",
    "boolean": 1,
    "context": "public class Class_6 implements Runnable { public static void main(String[] args) { invokeLater(new Class_6());} @Override public void run() { JFrame f = new JFrame(); <mask><mask><mask><mask><mask>setDefaultCloseOperation(EXIT_ON_CLOSE); add(new MainPanel()); pack();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing.JFrame",
    "truth_type": "javax.swing.JFrame",
    "full_FQN": "javax.swing.JFrame.EXIT_ON_CLOSE",
    "boolean": 1,
    "context": "public class Class_6 implements Runnable { public static void main(String[] args) { invokeLater(new Class_6());} @Override public void run() { JFrame f = new JFrame(); setDefaultCloseOperation(<mask><mask><mask><mask><mask><mask><mask><mask>.EXIT_ON_CLOSE); add(new MainPanel()); pack();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.add()",
    "boolean": 1,
    "context": "} @Override public void run() { JFrame f = new JFrame(); setDefaultCloseOperation(EXIT_ON_CLOSE); <mask><mask><mask><mask><mask>add(new MainPanel()); pack(); setLocationRelativeTo(null);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.pack()",
    "boolean": 1,
    "context": " setDefaultCloseOperation(EXIT_ON_CLOSE); add(new MainPanel()); <mask><mask><mask><mask><mask>pack(); setLocationRelativeTo(null); setVisible(true);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.setLocationRelativeTo()",
    "boolean": 1,
    "context": " add(new MainPanel()); pack(); <mask><mask><mask><mask><mask>setLocationRelativeTo(null); setVisible(true);} } class MainPanel extends JPanel { public MainPanel() { super(new BorderLayout());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JFrame.setVisible()",
    "boolean": 1,
    "context": " pack(); setLocationRelativeTo(null); <mask><mask><mask><mask><mask>setVisible(true);} } class MainPanel extends JPanel { public MainPanel() { super(new BorderLayout());Model model = new Model();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel",
    "boolean": 1,
    "context": " setLocationRelativeTo(null); setVisible(true);} } class MainPanel extends <mask><mask><mask><mask><mask>.JPanel { public MainPanel() { super(new BorderLayout());Model model = new Model();View view = new View(model);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.BorderLayout()",
    "boolean": 1,
    "context": " setLocationRelativeTo(null); setVisible(true);} } class MainPanel extends JPanel { public MainPanel() { super(new <mask><mask><mask><mask>.BorderLayout());Model model = new Model();View view = new View(model);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JLabel",
    "boolean": 1,
    "context": "View view = new View(model);Control control = new Control(model, view);<mask><mask><mask><mask><mask>.JLabel label = new JLabel(String, CENTER);add(label, NORTH);add(view, CENTER);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JLabel()",
    "boolean": 1,
    "context": "View view = new View(model);Control control = new Control(model, view);JLabel label = new <mask><mask><mask><mask><mask>.JLabel(String, CENTER);add(label, NORTH);add(view, CENTER);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing.JLabel",
    "truth_type": "javax.swing.JLabel",
    "full_FQN": "javax.swing.JLabel.CENTER",
    "boolean": 1,
    "context": "View view = new View(model);Control control = new Control(model, view);JLabel label = new JLabel(String, <mask><mask><mask><mask><mask><mask><mask><mask>.CENTER);add(label, NORTH);add(view, CENTER);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.BorderLayout",
    "truth_type": "java.awt.BorderLayout",
    "full_FQN": "java.awt.BorderLayout.NORTH",
    "boolean": 1,
    "context": "Control control = new Control(model, view);JLabel label = new JLabel(String, CENTER);add(label, <mask><mask><mask><mask><mask><mask><mask>.NORTH);add(view, CENTER);add(control, SOUTH);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.BorderLayout",
    "truth_type": "java.awt.BorderLayout",
    "full_FQN": "java.awt.BorderLayout.CENTER",
    "boolean": 1,
    "context": "javax.swing.JLabel label = new JLabel(String, CENTER);add(label, NORTH);add(view, <mask><mask><mask><mask><mask><mask><mask>.CENTER);add(control, SOUTH);} } class Control extends JPanel { private Model model;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.BorderLayout",
    "truth_type": "java.awt.BorderLayout",
    "full_FQN": "java.awt.BorderLayout.SOUTH",
    "boolean": 1,
    "context": "this.add(label, NORTH);add(view, CENTER);add(control, <mask><mask><mask><mask><mask><mask><mask>.SOUTH);} } class Control extends JPanel { private Model model;private View view;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel",
    "boolean": 1,
    "context": "this.add(view, CENTER);add(control, SOUTH);} } class Control extends <mask><mask><mask><mask><mask>.JPanel { private Model model;private View view;private JButton reset = new JButton(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JButton",
    "boolean": 1,
    "context": "} } class Control extends JPanel { private Model model;private View view;private <mask><mask><mask><mask><mask>.JButton reset = new JButton(String);public Control(Model model, View view) { model = model;view = view;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JButton()",
    "boolean": 1,
    "context": "} } class Control extends JPanel { private Model model;private View view;private JButton reset = new <mask><mask><mask><mask><mask>.JButton(String);public Control(Model model, View view) { model = model;view = view;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JButton.addActionListener()",
    "boolean": 1,
    "context": "this.view = view;add(reset); <mask><mask><mask><mask><mask>addActionListener(new ButtonHandler());} private class ButtonHandler implements ActionListener { @Override public void actionPerformed(ActionEvent e) { String cmd = getActionCommand();if (equals(cmd)) { reset();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.event",
    "truth_type": "java.awt.event",
    "full_FQN": "java.awt.event.ActionListener",
    "boolean": 1,
    "context": "this.add(reset); addActionListener(new ButtonHandler());} private class ButtonHandler implements <mask><mask><mask><mask><mask><mask>.ActionListener { @Override public void actionPerformed(ActionEvent e) { String cmd = getActionCommand();if (equals(cmd)) { reset();} } } } class View extends JPanel { private static final String s = String;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.event",
    "truth_type": "java.awt.event",
    "full_FQN": "java.awt.event.ActionEvent",
    "boolean": 1,
    "context": "this.add(reset); addActionListener(new ButtonHandler());} private class ButtonHandler implements ActionListener { @Override public void actionPerformed(<mask><mask><mask><mask><mask><mask>.ActionEvent e) { String cmd = getActionCommand();if (equals(cmd)) { reset();} } } } class View extends JPanel { private static final String s = String;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.event",
    "truth_type": "java.awt.event",
    "full_FQN": "java.awt.event.ActionEvent.getActionCommand()",
    "boolean": 1,
    "context": "this.add(reset); addActionListener(new ButtonHandler());} private class ButtonHandler implements ActionListener { @Override public void actionPerformed(ActionEvent e) { String cmd = <mask><mask><mask><mask><mask><mask>getActionCommand();if (equals(cmd)) { reset();} } } } class View extends JPanel { private static final String s = String;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel",
    "boolean": 1,
    "context": "} private class ButtonHandler implements ActionListener { @Override public void actionPerformed(ActionEvent e) { String cmd = getActionCommand();if (equals(cmd)) { reset();} } } } class View extends <mask><mask><mask><mask><mask>.JPanel { private static final String s = String;private Model model;private ColorIcon icon = new ColorIcon(80, gray);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.Color",
    "truth_type": "java.awt.Color",
    "full_FQN": "java.awt.Color.gray",
    "boolean": 1,
    "context": "} } } } class View extends JPanel { private static final String s = String;private Model model;private ColorIcon icon = new ColorIcon(80, <mask><mask><mask><mask><mask><mask>.gray);private JLabel label = new JLabel(s, icon, CENTER);public View(Model model) { super(new BorderLayout());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JLabel",
    "boolean": 1,
    "context": "private Model model;private ColorIcon icon = new ColorIcon(80, gray);private <mask><mask><mask><mask><mask>.JLabel label = new JLabel(s, icon, CENTER);public View(Model model) { super(new BorderLayout());model = model;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JLabel()",
    "boolean": 1,
    "context": "private Model model;private ColorIcon icon = new ColorIcon(80, gray);private JLabel label = new <mask><mask><mask><mask><mask>.JLabel(s, icon, CENTER);public View(Model model) { super(new BorderLayout());model = model;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing.JLabel",
    "truth_type": "javax.swing.JLabel",
    "full_FQN": "javax.swing.JLabel.CENTER",
    "boolean": 1,
    "context": "private Model model;private ColorIcon icon = new ColorIcon(80, gray);private JLabel label = new JLabel(s, icon, <mask><mask><mask><mask><mask><mask><mask><mask>.CENTER);public View(Model model) { super(new BorderLayout());model = model;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.BorderLayout()",
    "boolean": 1,
    "context": "private ColorIcon icon = new ColorIcon(80, gray);private JLabel label = new JLabel(s, icon, CENTER);public View(Model model) { super(new <mask><mask><mask><mask>.BorderLayout());model = model; setVerticalTextPosition(BOTTOM);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JLabel.setVerticalTextPosition()",
    "boolean": 1,
    "context": "public View(Model model) { super(new BorderLayout());model = model; <mask><mask><mask><mask><mask>setVerticalTextPosition(BOTTOM); setHorizontalTextPosition(CENTER);add(label, CENTER);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing.JLabel",
    "truth_type": "javax.swing.JLabel",
    "full_FQN": "javax.swing.JLabel.BOTTOM",
    "boolean": 1,
    "context": "public View(Model model) { super(new BorderLayout());model = model; setVerticalTextPosition(<mask><mask><mask><mask><mask><mask><mask><mask>.BOTTOM); setHorizontalTextPosition(CENTER);add(label, CENTER);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JLabel.setHorizontalTextPosition()",
    "boolean": 1,
    "context": "this.model = model; setVerticalTextPosition(BOTTOM); <mask><mask><mask><mask><mask>setHorizontalTextPosition(CENTER);add(label, CENTER);add(genButtonPanel(), SOUTH);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing.JLabel",
    "truth_type": "javax.swing.JLabel",
    "full_FQN": "javax.swing.JLabel.CENTER",
    "boolean": 1,
    "context": "this.model = model; setVerticalTextPosition(BOTTOM); setHorizontalTextPosition(<mask><mask><mask><mask><mask><mask><mask><mask>.CENTER);add(label, CENTER);add(genButtonPanel(), SOUTH);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.BorderLayout",
    "truth_type": "java.awt.BorderLayout",
    "full_FQN": "java.awt.BorderLayout.CENTER",
    "boolean": 1,
    "context": " setVerticalTextPosition(BOTTOM); setHorizontalTextPosition(CENTER);add(label, <mask><mask><mask><mask><mask><mask><mask>.CENTER);add(genButtonPanel(), SOUTH);addObserver(new ModelObserver());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.BorderLayout",
    "truth_type": "java.awt.BorderLayout",
    "full_FQN": "java.awt.BorderLayout.SOUTH",
    "boolean": 1,
    "context": " setHorizontalTextPosition(CENTER);add(label, CENTER);add(genButtonPanel(), <mask><mask><mask><mask><mask><mask><mask>.SOUTH);addObserver(new ModelObserver());} private JPanel genButtonPanel() { JPanel panel = new JPanel();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel",
    "boolean": 1,
    "context": "this.add(genButtonPanel(), SOUTH);addObserver(new ModelObserver());} private <mask><mask><mask><mask><mask>.JPanel genButtonPanel() { JPanel panel = new JPanel();for (Piece p : values()) { PieceButton pb = new PieceButton(p);addActionListener(new ButtonHandler());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel",
    "boolean": 1,
    "context": "this.add(genButtonPanel(), SOUTH);addObserver(new ModelObserver());} private JPanel genButtonPanel() { <mask><mask><mask><mask><mask>.JPanel panel = new JPanel();for (Piece p : values()) { PieceButton pb = new PieceButton(p);addActionListener(new ButtonHandler());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel()",
    "boolean": 1,
    "context": "this.add(genButtonPanel(), SOUTH);addObserver(new ModelObserver());} private JPanel genButtonPanel() { JPanel panel = new <mask><mask><mask><mask><mask>.JPanel();for (Piece p : values()) { PieceButton pb = new PieceButton(p);addActionListener(new ButtonHandler());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JPanel.add()",
    "boolean": 1,
    "context": "for (Piece p : values()) { PieceButton pb = new PieceButton(p);addActionListener(new ButtonHandler()); <mask><mask><mask><mask><mask>add(pb);} return panel;} private class ModelObserver implements Observer { @Override public void update(Observable o, Object arg) { if (arg == null) { setText(s);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Observer",
    "boolean": 1,
    "context": " add(pb);} return panel;} private class ModelObserver implements <mask><mask><mask>.Observer { @Override public void update(Observable o, Object arg) { if (arg == null) { setText(s);color = gray;} else if (((Boolean) (arg))) { setText(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Observable",
    "boolean": 1,
    "context": " add(pb);} return panel;} private class ModelObserver implements Observer { @Override public void update(<mask><mask><mask>.Observable o, Object arg) { if (arg == null) { setText(s);color = gray;} else if (((Boolean) (arg))) { setText(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JLabel.setText()",
    "boolean": 1,
    "context": " add(pb);} return panel;} private class ModelObserver implements Observer { @Override public void update(Observable o, Object arg) { if (arg == null) { <mask><mask><mask><mask><mask>setText(s);color = gray;} else if (((Boolean) (arg))) { setText(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.Color",
    "truth_type": "java.awt.Color",
    "full_FQN": "java.awt.Color.gray",
    "boolean": 1,
    "context": "} return panel;} private class ModelObserver implements Observer { @Override public void update(Observable o, Object arg) { if (arg == null) { setText(s);color = <mask><mask><mask><mask><mask><mask>.gray;} else if (((Boolean) (arg))) { setText(String);} else { setText(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JLabel.setText()",
    "boolean": 1,
    "context": "} private class ModelObserver implements Observer { @Override public void update(Observable o, Object arg) { if (arg == null) { setText(s);color = gray;} else if (((Boolean) (arg))) { <mask><mask><mask><mask><mask>setText(String);} else { setText(String);} } } private class ButtonHandler implements ActionListener { @Override public void actionPerformed(ActionEvent e) { PieceButton pb = ((PieceButton)  getSource()));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JLabel.setText()",
    "boolean": 1,
    "context": "icon.color = gray;} else if (((Boolean) (arg))) { setText(String);} else { <mask><mask><mask><mask><mask>setText(String);} } } private class ButtonHandler implements ActionListener { @Override public void actionPerformed(ActionEvent e) { PieceButton pb = ((PieceButton)  getSource()));color = color;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.event",
    "truth_type": "java.awt.event",
    "full_FQN": "java.awt.event.ActionListener",
    "boolean": 1,
    "context": "} else if (((Boolean) (arg))) { setText(String);} else { setText(String);} } } private class ButtonHandler implements <mask><mask><mask><mask><mask><mask>.ActionListener { @Override public void actionPerformed(ActionEvent e) { PieceButton pb = ((PieceButton)  getSource()));color = color; repaint();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.event",
    "truth_type": "java.awt.event",
    "full_FQN": "java.awt.event.ActionEvent",
    "boolean": 1,
    "context": "} else if (((Boolean) (arg))) { setText(String);} else { setText(String);} } } private class ButtonHandler implements ActionListener { @Override public void actionPerformed(<mask><mask><mask><mask><mask><mask>.ActionEvent e) { PieceButton pb = ((PieceButton)  getSource()));color = color; repaint();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.event",
    "truth_type": "java.awt.event",
    "full_FQN": "java.awt.event.ActionEvent.getSource()",
    "boolean": 1,
    "context": "} else if (((Boolean) (arg))) { setText(String);} else { setText(String);} } } private class ButtonHandler implements ActionListener { @Override public void actionPerformed(ActionEvent e) { PieceButton pb = ((PieceButton)  <mask><mask><mask><mask><mask><mask>getSource()));color = color; repaint();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "PB.id",
    "truth_type": "pb.piece",
    "full_FQN": "pb.piece.color",
    "boolean": 0,
    "context": "} else { setText(String);} } } private class ButtonHandler implements ActionListener { @Override public void actionPerformed(ActionEvent e) { PieceButton pb = ((PieceButton)  getSource()));color = <mask><mask><mask>.color; repaint();check(piece);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JLabel.repaint()",
    "boolean": 1,
    "context": "} } } private class ButtonHandler implements ActionListener { @Override public void actionPerformed(ActionEvent e) { PieceButton pb = ((PieceButton)  getSource()));color = color; <mask><mask><mask><mask><mask>repaint();check(piece);} } private static class PieceButton extends JButton { Piece piece;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.JButton",
    "boolean": 1,
    "context": " repaint();check(piece);} } private static class PieceButton extends <mask><mask><mask><mask><mask>.JButton { Piece piece;public PieceButton(Piece piece) { piece = piece;setIcon(new ColorIcon(16, color));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "javax.swing",
    "truth_type": "javax.swing",
    "full_FQN": "javax.swing.Icon",
    "boolean": 1,
    "context": "public PieceButton(Piece piece) { piece = piece;setIcon(new ColorIcon(16, color));} } private static class ColorIcon implements <mask><mask><mask><mask><mask>.Icon { private int size;private Color color;public ColorIcon(int size, Color color) { size = size;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Color",
    "boolean": 1,
    "context": "this.setIcon(new ColorIcon(16, color));} } private static class ColorIcon implements Icon { private int size;private <mask><mask><mask><mask>.Color color;public ColorIcon(int size, Color color) { size = size;color = color;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Color",
    "boolean": 1,
    "context": "} } private static class ColorIcon implements Icon { private int size;private Color color;public ColorIcon(int size, <mask><mask><mask><mask>.Color color) { size = size;color = color;} @Override public void paintIcon(Component c, Graphics g, int x, int y) { Graphics2D g2d = ((Graphics2D) (g));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Component",
    "boolean": 1,
    "context": "public ColorIcon(int size, Color color) { size = size;color = color;} @Override public void paintIcon(<mask><mask><mask><mask>.Component c, Graphics g, int x, int y) { Graphics2D g2d = ((Graphics2D) (g)); setRenderingHint(KEY_ANTIALIASING, VALUE_ANTIALIAS_ON); setColor(color);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Graphics",
    "boolean": 1,
    "context": "public ColorIcon(int size, Color color) { size = size;color = color;} @Override public void paintIcon(Component c, <mask><mask><mask><mask>.Graphics g, int x, int y) { Graphics2D g2d = ((Graphics2D) (g)); setRenderingHint(KEY_ANTIALIASING, VALUE_ANTIALIAS_ON); setColor(color);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Graphics2D",
    "boolean": 1,
    "context": "public ColorIcon(int size, Color color) { size = size;color = color;} @Override public void paintIcon(Component c, Graphics g, int x, int y) { <mask><mask><mask><mask>.Graphics2D g2d = ((Graphics2D) (g)); setRenderingHint(KEY_ANTIALIASING, VALUE_ANTIALIAS_ON); setColor(color);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Graphics2D",
    "boolean": 1,
    "context": "public ColorIcon(int size, Color color) { size = size;color = color;} @Override public void paintIcon(Component c, Graphics g, int x, int y) { Graphics2D g2d = ((<mask><mask><mask><mask>.Graphics2D) (g)); setRenderingHint(KEY_ANTIALIASING, VALUE_ANTIALIAS_ON); setColor(color);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Graphics2D.setRenderingHint()",
    "boolean": 1,
    "context": "this.color = color;} @Override public void paintIcon(Component c, Graphics g, int x, int y) { Graphics2D g2d = ((Graphics2D) (g)); <mask><mask><mask><mask>setRenderingHint(KEY_ANTIALIASING, VALUE_ANTIALIAS_ON); setColor(color); fillOval(x, y, size, size);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.RenderingHints",
    "truth_type": "java.awt.RenderingHints",
    "full_FQN": "java.awt.RenderingHints.KEY_ANTIALIASING",
    "boolean": 1,
    "context": "this.color = color;} @Override public void paintIcon(Component c, Graphics g, int x, int y) { Graphics2D g2d = ((Graphics2D) (g)); setRenderingHint(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.KEY_ANTIALIASING, VALUE_ANTIALIAS_ON); setColor(color); fillOval(x, y, size, size);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.RenderingHints",
    "truth_type": "java.awt.RenderingHints",
    "full_FQN": "java.awt.RenderingHints.VALUE_ANTIALIAS_ON",
    "boolean": 1,
    "context": "this.color = color;} @Override public void paintIcon(Component c, Graphics g, int x, int y) { Graphics2D g2d = ((Graphics2D) (g)); setRenderingHint(KEY_ANTIALIASING, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.VALUE_ANTIALIAS_ON); setColor(color); fillOval(x, y, size, size);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Graphics2D.setColor()",
    "boolean": 1,
    "context": "} @Override public void paintIcon(Component c, Graphics g, int x, int y) { Graphics2D g2d = ((Graphics2D) (g)); setRenderingHint(KEY_ANTIALIASING, VALUE_ANTIALIAS_ON); <mask><mask><mask><mask>setColor(color); fillOval(x, y, size, size);} @Override public int getIconWidth() { return size;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Graphics2D.fillOval()",
    "boolean": 1,
    "context": " setRenderingHint(KEY_ANTIALIASING, VALUE_ANTIALIAS_ON); setColor(color); <mask><mask><mask><mask>fillOval(x, y, size, size);} @Override public int getIconWidth() { return size;} @Override public int getIconHeight() { return size;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Observable",
    "boolean": 1,
    "context": "} @Override public int getIconWidth() { return size;} @Override public int getIconHeight() { return size;} } } class Model extends <mask><mask><mask>.Observable { private static final Random rnd = new Random();private static final Piece[] pieces = values();private Piece hidden = init();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Random",
    "boolean": 1,
    "context": "} @Override public int getIconWidth() { return size;} @Override public int getIconHeight() { return size;} } } class Model extends Observable { private static final <mask><mask><mask>.Random rnd = new Random();private static final Piece[] pieces = values();private Piece hidden = init();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Random()",
    "boolean": 1,
    "context": "} @Override public int getIconWidth() { return size;} @Override public int getIconHeight() { return size;} } } class Model extends Observable { private static final Random rnd = new <mask><mask><mask>.Random();private static final Piece[] pieces = values();private Piece hidden = init();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.Color",
    "truth_type": "java.awt.Color",
    "full_FQN": "java.awt.Color.red",
    "boolean": 1,
    "context": "} public void check(Piece guess) { setChanged();notifyObservers(equals(hidden));} } enum Piece { Red(<mask><mask><mask><mask><mask><mask>.red), Green(green), Blue(blue);public Color color;private Piece(Color color) { color = color;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.Color",
    "truth_type": "java.awt.Color",
    "full_FQN": "java.awt.Color.green",
    "boolean": 1,
    "context": "} public void check(Piece guess) { setChanged();notifyObservers(equals(hidden));} } enum Piece { Red(red), Green(<mask><mask><mask><mask><mask><mask>.green), Blue(blue);public Color color;private Piece(Color color) { color = color;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt.Color",
    "truth_type": "java.awt.Color",
    "full_FQN": "java.awt.Color.blue",
    "boolean": 1,
    "context": "} public void check(Piece guess) { setChanged();notifyObservers(equals(hidden));} } enum Piece { Red(red), Green(green), Blue(<mask><mask><mask><mask><mask><mask>.blue);public Color color;private Piece(Color color) { color = color;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Color",
    "boolean": 1,
    "context": "notifyObservers(equals(hidden));} } enum Piece { Red(red), Green(green), Blue(blue);public <mask><mask><mask><mask>.Color color;private Piece(Color color) { color = color;} };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.awt",
    "truth_type": "java.awt",
    "full_FQN": "java.awt.Color",
    "boolean": 1,
    "context": "} } enum Piece { Red(red), Green(green), Blue(blue);public Color color;private Piece(<mask><mask><mask><mask>.Color color) { color = color;} };"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date",
    "boolean": 1,
    "context": "public class Class_7 { public static class Person { public String name;public int id;public <mask><mask><mask>.Date hireDate;public Person(String iname, int iid, Date ihireDate) { name = iname;id = iid;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date",
    "boolean": 1,
    "context": "public int id;public Date hireDate;public Person(String iname, int iid, <mask><mask><mask>.Date ihireDate) { name = iname;id = iid;hireDate = ihireDate;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date.toString()",
    "boolean": 1,
    "context": "id = iid;hireDate = ihireDate;} public String toString() { return (((name + String) + id) + String) + <mask><mask><mask>toString();} public static class CompId implements Comparator<Person> { @Override public int compare(Person arg0, Person arg1) { return id - id;} } public static class CompDate implements Comparator<Person> { private int mod = 1;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Comparator",
    "boolean": 1,
    "context": "hireDate = ihireDate;} public String toString() { return (((name + String) + id) + String) + toString();} public static class CompId implements <mask><mask><mask>.Comparator<Person> { @Override public int compare(Person arg0, Person arg1) { return id - id;} } public static class CompDate implements Comparator<Person> { private int mod = 1;public CompDate(boolean desc) { if (desc) { mod = -1;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Comparator",
    "boolean": 1,
    "context": "} public String toString() { return (((name + String) + id) + String) + toString();} public static class CompId implements Comparator<Person> { @Override public int compare(Person arg0, Person arg1) { return id - id;} } public static class CompDate implements <mask><mask><mask>.Comparator<Person> { private int mod = 1;public CompDate(boolean desc) { if (desc) { mod = -1;} } @Override public int compare(Person arg0, Person arg1) { return mod * arg0 compareTo(hireDate);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date.compareTo()",
    "boolean": 1,
    "context": "} } public static class CompDate implements Comparator<Person> { private int mod = 1;public CompDate(boolean desc) { if (desc) { mod = -1;} } @Override public int compare(Person arg0, Person arg1) { return mod * arg0 <mask><mask><mask>compareTo(hireDate);} } } public static void main(String[] args) { SimpleDateFormat df = new SimpleDateFormat(String);ArrayList<Person> people;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.SimpleDateFormat",
    "boolean": 1,
    "context": "public CompDate(boolean desc) { if (desc) { mod = -1;} } @Override public int compare(Person arg0, Person arg1) { return mod * arg0 compareTo(hireDate);} } } public static void main(String[] args) { <mask><mask><mask>.SimpleDateFormat df = new SimpleDateFormat(String);ArrayList<Person> people;people = new ArrayList<Person>();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.SimpleDateFormat()",
    "boolean": 1,
    "context": "public CompDate(boolean desc) { if (desc) { mod = -1;} } @Override public int compare(Person arg0, Person arg1) { return mod * arg0 compareTo(hireDate);} } } public static void main(String[] args) { SimpleDateFormat df = new <mask><mask><mask>.SimpleDateFormat(String);ArrayList<Person> people;people = new ArrayList<Person>();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "} } @Override public int compare(Person arg0, Person arg1) { return mod * arg0 compareTo(hireDate);} } } public static void main(String[] args) { SimpleDateFormat df = new SimpleDateFormat(String);<mask><mask><mask>.ArrayList<Person> people;people = new ArrayList<Person>();try { add(new Person(String, 92422, parse(String)));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "} } } public static void main(String[] args) { SimpleDateFormat df = new SimpleDateFormat(String);ArrayList<Person> people;people = new <mask><mask><mask>.ArrayList<Person>();try { add(new Person(String, 92422, parse(String))); add(new Person(String, 24122, parse(String)));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.add()",
    "boolean": 1,
    "context": "java.util.ArrayList<Person> people;people = new ArrayList<Person>();try { <mask><mask><mask>add(new Person(String, 92422, parse(String))); add(new Person(String, 24122, parse(String))); add(new Person(String, 24922, parse(String)));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.SimpleDateFormat.parse()",
    "boolean": 1,
    "context": "java.util.ArrayList<Person> people;people = new ArrayList<Person>();try { add(new Person(String, 92422, <mask><mask><mask>parse(String))); add(new Person(String, 24122, parse(String))); add(new Person(String, 24922, parse(String)));"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.add()",
    "boolean": 1,
    "context": "people = new ArrayList<Person>();try { add(new Person(String, 92422, parse(String))); <mask><mask><mask>add(new Person(String, 24122, parse(String))); add(new Person(String, 24922, parse(String)));} catch (ParseException e) { printStackTrace();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.SimpleDateFormat.parse()",
    "boolean": 1,
    "context": "people = new ArrayList<Person>();try { add(new Person(String, 92422, parse(String))); add(new Person(String, 24122, <mask><mask><mask>parse(String))); add(new Person(String, 24922, parse(String)));} catch (ParseException e) { printStackTrace();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.add()",
    "boolean": 1,
    "context": "try { add(new Person(String, 92422, parse(String))); add(new Person(String, 24122, parse(String))); <mask><mask><mask>add(new Person(String, 24922, parse(String)));} catch (ParseException e) { printStackTrace();} sort(people, new CompId());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.SimpleDateFormat.parse()",
    "boolean": 1,
    "context": "try { add(new Person(String, 92422, parse(String))); add(new Person(String, 24122, parse(String))); add(new Person(String, 24922, <mask><mask><mask>parse(String)));} catch (ParseException e) { printStackTrace();} sort(people, new CompId());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.ParseException",
    "boolean": 1,
    "context": " add(new Person(String, 24122, parse(String))); add(new Person(String, 24922, parse(String)));} catch (<mask><mask><mask>.ParseException e) { printStackTrace();} sort(people, new CompId());println(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.ParseException.printStackTrace()",
    "boolean": 1,
    "context": " add(new Person(String, 24122, parse(String))); add(new Person(String, 24922, parse(String)));} catch (ParseException e) { <mask><mask><mask>printStackTrace();} sort(people, new CompId());println(String);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Collections.sort()",
    "boolean": 1,
    "context": " add(new Person(String, 24922, parse(String)));} catch (ParseException e) { printStackTrace();} <mask><mask><mask>sort(people, new CompId());println(String);for (Person p : people) { println(toString());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Collections.sort()",
    "boolean": 1,
    "context": "java.lang.System.out.println(String);for (Person p : people) { println(toString());} <mask><mask><mask>sort(people, new CompDate(false));println(String);for (Person p : people) { println(toString());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Collections.sort()",
    "boolean": 1,
    "context": "java.lang.System.out.println(String);for (Person p : people) { println(toString());} <mask><mask><mask>sort(people, new CompDate(true));println(String);for (Person p : people) { println(toString());"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.sql",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.Connection",
    "boolean": 1,
    "context": "private static final String PASSWORD = String;private static final String MAX_POOL = String;private <mask><mask><mask>.Connection connection;private Properties properties;private Properties getProperties() { if (properties == null) { properties = new Properties();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Properties",
    "boolean": 1,
    "context": "private static final String MAX_POOL = String;private Connection connection;private <mask><mask><mask>.Properties properties;private Properties getProperties() { if (properties == null) { properties = new Properties(); setProperty(String, USERNAME);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Properties",
    "boolean": 1,
    "context": "private Connection connection;private Properties properties;private <mask><mask><mask>.Properties getProperties() { if (properties == null) { properties = new Properties(); setProperty(String, USERNAME); setProperty(String, PASSWORD);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Properties()",
    "boolean": 1,
    "context": "private Connection connection;private Properties properties;private Properties getProperties() { if (properties == null) { properties = new <mask><mask><mask>.Properties(); setProperty(String, USERNAME); setProperty(String, PASSWORD);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Properties.setProperty()",
    "boolean": 1,
    "context": "private Properties properties;private Properties getProperties() { if (properties == null) { properties = new Properties(); <mask><mask><mask>setProperty(String, USERNAME); setProperty(String, PASSWORD); setProperty(String, MAX_POOL);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Properties.setProperty()",
    "boolean": 1,
    "context": "private Properties getProperties() { if (properties == null) { properties = new Properties(); setProperty(String, USERNAME); <mask><mask><mask>setProperty(String, PASSWORD); setProperty(String, MAX_POOL);} return properties;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Properties.setProperty()",
    "boolean": 1,
    "context": " setProperty(String, USERNAME); setProperty(String, PASSWORD); <mask><mask><mask>setProperty(String, MAX_POOL);} return properties;} public Connection connect() { if (connection == null) { try { forName(DATABASE_DRIVER);"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.sql",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.Connection",
    "boolean": 1,
    "context": " setProperty(String, MAX_POOL);} return properties;} public <mask><mask><mask>.Connection connect() { if (connection == null) { try { forName(DATABASE_DRIVER);connection = getConnection(DATABASE_URL, getProperties());} catch (ClassNotFoundException | SQLException e) { printStackTrace();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.sql",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.DriverManager.getConnection()",
    "boolean": 1,
    "context": "} return properties;} public Connection connect() { if (connection == null) { try { forName(DATABASE_DRIVER);connection = <mask><mask><mask>getConnection(DATABASE_URL, getProperties());} catch (ClassNotFoundException | SQLException e) { printStackTrace();} } return connection;"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.sql",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.SQLException",
    "boolean": 1,
    "context": "} public Connection connect() { if (connection == null) { try { forName(DATABASE_DRIVER);connection = getConnection(DATABASE_URL, getProperties());} catch (ClassNotFoundException | <mask><mask><mask>.SQLException e) { printStackTrace();} } return connection;} public void disconnect() { if (connection != null) { try { close();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.sql",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.Connection.close()",
    "boolean": 1,
    "context": "} catch (ClassNotFoundException | SQLException e) { printStackTrace();} } return connection;} public void disconnect() { if (connection != null) { try { <mask><mask><mask>close();connection = null;} catch (SQLException e) { printStackTrace();"
  },
  {
    "lib_name": "jdk",
    "pred_type": "java.sql",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.SQLException",
    "boolean": 1,
    "context": "} public void disconnect() { if (connection != null) { try { close();connection = null;} catch (<mask><mask><mask>.SQLException e) { printStackTrace();} } } };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter",
    "boolean": 1,
    "context": "public class JodaTime01 { public static void main(String[] args) { <mask><mask><mask><mask><mask><mask><mask><mask>.DateTimeFormatter timeParser = timeParser();TimeZone timeZone = getDefault();println getID());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.ISODateTimeFormat.timeParser()",
    "boolean": 1,
    "context": "public class JodaTime01 { public static void main(String[] args) { DateTimeFormatter timeParser = <mask><mask><mask><mask><mask><mask><mask><mask>timeParser();TimeZone timeZone = getDefault();println getID());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.TimeZone",
    "boolean": 1,
    "context": "public class JodaTime01 { public static void main(String[] args) { DateTimeFormatter timeParser = timeParser();<mask><mask><mask>.TimeZone timeZone = getDefault();println getID());println getDisplayName());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.TimeZone.getDefault()",
    "boolean": 1,
    "context": "public class JodaTime01 { public static void main(String[] args) { DateTimeFormatter timeParser = timeParser();TimeZone timeZone = <mask><mask><mask>getDefault();println getID());println getDisplayName());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.TimeZone.getID()",
    "boolean": 1,
    "context": "public class JodaTime01 { public static void main(String[] args) { DateTimeFormatter timeParser = timeParser();TimeZone timeZone = getDefault();println <mask><mask><mask>getID());println getDisplayName());DateTimeZone defaultTimeZone = getDefault();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.TimeZone.getDisplayName()",
    "boolean": 1,
    "context": "java.util.TimeZone timeZone = getDefault();println getID());println <mask><mask><mask>getDisplayName());DateTimeZone defaultTimeZone = getDefault();println getID());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTimeZone",
    "boolean": 1,
    "context": "java.lang.System.out.println getID());println getDisplayName());<mask><mask><mask><mask><mask><mask>.DateTimeZone defaultTimeZone = getDefault();println getID());println getName(0L));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTimeZone.getDefault()",
    "boolean": 1,
    "context": "java.lang.System.out.println getID());println getDisplayName());DateTimeZone defaultTimeZone = <mask><mask><mask><mask><mask><mask>getDefault();println getID());println getName(0L));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTimeZone.getID()",
    "boolean": 1,
    "context": "java.lang.System.out.println getDisplayName());DateTimeZone defaultTimeZone = getDefault();println <mask><mask><mask><mask><mask><mask>getID());println getName(0L));DateTime currentTime = new DateTime();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTimeZone.getName()",
    "boolean": 1,
    "context": "org.joda.time.DateTimeZone defaultTimeZone = getDefault();println getID());println <mask><mask><mask><mask><mask><mask>getName(0L));DateTime currentTime = new DateTime();DateTimeZone currentZone = getZone();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "java.lang.System.out.println getID());println getName(0L));<mask><mask><mask><mask><mask><mask>.DateTime currentTime = new DateTime();DateTimeZone currentZone = getZone();println getID());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "java.lang.System.out.println getID());println getName(0L));DateTime currentTime = new <mask><mask><mask><mask>DateTime();DateTimeZone currentZone = getZone();println getID());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTimeZone",
    "boolean": 1,
    "context": "java.lang.System.out.println getName(0L));DateTime currentTime = new DateTime();<mask><mask><mask><mask><mask><mask>.DateTimeZone currentZone = getZone();println getID());println getName(0L));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime.getZone()",
    "boolean": 1,
    "context": "java.lang.System.out.println getName(0L));DateTime currentTime = new DateTime();DateTimeZone currentZone = <mask><mask><mask><mask><mask><mask>getZone();println getID());println getName(0L));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTimeZone.getID()",
    "boolean": 1,
    "context": "org.joda.time.DateTime currentTime = new DateTime();DateTimeZone currentZone = getZone();println <mask><mask><mask><mask><mask><mask>getID());println getName(0L));} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTimeZone.getName()",
    "boolean": 1,
    "context": "org.joda.time.DateTimeZone currentZone = getZone();println getID());println <mask><mask><mask><mask><mask><mask>getName(0L));} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateMidnight",
    "boolean": 1,
    "context": "public class JodaTime02 { public static void main(String[] args) { <mask><mask><mask><mask><mask><mask>.DateMidnight today = new DateMidnight(2009, 2, 24);DateTimeZone zone = getZone();DateTime previousTransition = new DateTime previousTransition getMillis()));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateMidnight()",
    "boolean": 1,
    "context": "public class JodaTime02 { public static void main(String[] args) { DateMidnight today = new <mask><mask><mask><mask>DateMidnight(2009, 2, 24);DateTimeZone zone = getZone();DateTime previousTransition = new DateTime previousTransition getMillis()));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTimeZone",
    "boolean": 1,
    "context": "public class JodaTime02 { public static void main(String[] args) { DateMidnight today = new DateMidnight(2009, 2, 24);<mask><mask><mask><mask><mask><mask>.DateTimeZone zone = getZone();DateTime previousTransition = new DateTime previousTransition getMillis()));println(previousTransition);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateMidnight.getZone()",
    "boolean": 1,
    "context": "public class JodaTime02 { public static void main(String[] args) { DateMidnight today = new DateMidnight(2009, 2, 24);DateTimeZone zone = <mask><mask><mask><mask><mask><mask>getZone();DateTime previousTransition = new DateTime previousTransition getMillis()));println(previousTransition);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime02 { public static void main(String[] args) { DateMidnight today = new DateMidnight(2009, 2, 24);DateTimeZone zone = getZone();<mask><mask><mask><mask><mask><mask>.DateTime previousTransition = new DateTime previousTransition getMillis()));println(previousTransition);DateTime nextTransition = new DateTime nextTransition getMillis()));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime02 { public static void main(String[] args) { DateMidnight today = new DateMidnight(2009, 2, 24);DateTimeZone zone = getZone();DateTime previousTransition = new <mask><mask><mask><mask><mask><mask>.DateTime previousTransition getMillis()));println(previousTransition);DateTime nextTransition = new DateTime nextTransition getMillis()));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.DateTimeZone",
    "truth_type": "org.joda.time.DateTimeZone",
    "full_FQN": "org.joda.time.DateTimeZone.previousTransition",
    "boolean": 1,
    "context": "public class JodaTime02 { public static void main(String[] args) { DateMidnight today = new DateMidnight(2009, 2, 24);DateTimeZone zone = getZone();DateTime previousTransition = new DateTime <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.previousTransition getMillis()));println(previousTransition);DateTime nextTransition = new DateTime nextTransition getMillis()));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateMidnight.getMillis()",
    "boolean": 1,
    "context": "public class JodaTime02 { public static void main(String[] args) { DateMidnight today = new DateMidnight(2009, 2, 24);DateTimeZone zone = getZone();DateTime previousTransition = new DateTime previousTransition <mask><mask><mask><mask><mask><mask>getMillis()));println(previousTransition);DateTime nextTransition = new DateTime nextTransition getMillis()));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "org.joda.time.DateTime previousTransition = new DateTime previousTransition getMillis()));println(previousTransition);<mask><mask><mask><mask><mask><mask>.DateTime nextTransition = new DateTime nextTransition getMillis()));println(nextTransition);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "org.joda.time.DateTime previousTransition = new DateTime previousTransition getMillis()));println(previousTransition);DateTime nextTransition = new <mask><mask><mask><mask><mask><mask>.DateTime nextTransition getMillis()));println(nextTransition);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.DateTimeZone",
    "truth_type": "org.joda.time.DateTimeZone",
    "full_FQN": "org.joda.time.DateTimeZone.nextTransition",
    "boolean": 1,
    "context": "org.joda.time.DateTime previousTransition = new DateTime previousTransition getMillis()));println(previousTransition);DateTime nextTransition = new DateTime <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.nextTransition getMillis()));println(nextTransition);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateMidnight.getMillis()",
    "boolean": 1,
    "context": "org.joda.time.DateTime previousTransition = new DateTime previousTransition getMillis()));println(previousTransition);DateTime nextTransition = new DateTime nextTransition <mask><mask><mask><mask><mask><mask>getMillis()));println(nextTransition);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Interval",
    "boolean": 1,
    "context": "public class JodaTime03 { public static void main(String[] args) { } public static String formatDuration(long start, long end) { <mask><mask><mask><mask><mask><mask>.Interval interval = new Interval(start, end);return getPeriodFormatter().print toPeriod()).trim();} private static PeriodFormatter getPeriodFormatter() { PeriodFormatter pf = new PeriodFormatterBuilder().printZeroRarelyFirst().appendYears().appendSuffix(String, String).appendMonths().appendSuffix(String, String).appendDays().appendSuffix(String, String).appendHours().appendSuffix(String, String).appendMinutes().appendSuffix(String, String).appendSeconds().appendSuffix(String, String).toFormatter();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.Interval()",
    "boolean": 1,
    "context": "public class JodaTime03 { public static void main(String[] args) { } public static String formatDuration(long start, long end) { Interval interval = new <mask><mask><mask><mask>Interval(start, end);return getPeriodFormatter().print toPeriod()).trim();} private static PeriodFormatter getPeriodFormatter() { PeriodFormatter pf = new PeriodFormatterBuilder().printZeroRarelyFirst().appendYears().appendSuffix(String, String).appendMonths().appendSuffix(String, String).appendDays().appendSuffix(String, String).appendHours().appendSuffix(String, String).appendMinutes().appendSuffix(String, String).appendSeconds().appendSuffix(String, String).toFormatter();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Interval.toPeriod()",
    "boolean": 1,
    "context": "public class JodaTime03 { public static void main(String[] args) { } public static String formatDuration(long start, long end) { Interval interval = new Interval(start, end);return getPeriodFormatter().print <mask><mask><mask><mask><mask><mask>toPeriod()).trim();} private static PeriodFormatter getPeriodFormatter() { PeriodFormatter pf = new PeriodFormatterBuilder().printZeroRarelyFirst().appendYears().appendSuffix(String, String).appendMonths().appendSuffix(String, String).appendDays().appendSuffix(String, String).appendHours().appendSuffix(String, String).appendMinutes().appendSuffix(String, String).appendSeconds().appendSuffix(String, String).toFormatter();return pf;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.PeriodFormatter",
    "boolean": 1,
    "context": "public class JodaTime03 { public static void main(String[] args) { } public static String formatDuration(long start, long end) { Interval interval = new Interval(start, end);return getPeriodFormatter().print toPeriod()).trim();} private static <mask><mask><mask><mask><mask><mask><mask><mask>.PeriodFormatter getPeriodFormatter() { PeriodFormatter pf = new PeriodFormatterBuilder().printZeroRarelyFirst().appendYears().appendSuffix(String, String).appendMonths().appendSuffix(String, String).appendDays().appendSuffix(String, String).appendHours().appendSuffix(String, String).appendMinutes().appendSuffix(String, String).appendSeconds().appendSuffix(String, String).toFormatter();return pf;} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.PeriodFormatter",
    "boolean": 1,
    "context": "public class JodaTime03 { public static void main(String[] args) { } public static String formatDuration(long start, long end) { Interval interval = new Interval(start, end);return getPeriodFormatter().print toPeriod()).trim();} private static PeriodFormatter getPeriodFormatter() { <mask><mask><mask><mask><mask><mask><mask><mask>.PeriodFormatter pf = new PeriodFormatterBuilder().printZeroRarelyFirst().appendYears().appendSuffix(String, String).appendMonths().appendSuffix(String, String).appendDays().appendSuffix(String, String).appendHours().appendSuffix(String, String).appendMinutes().appendSuffix(String, String).appendSeconds().appendSuffix(String, String).toFormatter();return pf;} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.format.PeriodFormatterBuilder()",
    "boolean": 1,
    "context": "public class JodaTime03 { public static void main(String[] args) { } public static String formatDuration(long start, long end) { Interval interval = new Interval(start, end);return getPeriodFormatter().print toPeriod()).trim();} private static PeriodFormatter getPeriodFormatter() { PeriodFormatter pf = new <mask><mask><mask><mask><mask><mask>PeriodFormatterBuilder().printZeroRarelyFirst().appendYears().appendSuffix(String, String).appendMonths().appendSuffix(String, String).appendDays().appendSuffix(String, String).appendHours().appendSuffix(String, String).appendMinutes().appendSuffix(String, String).appendSeconds().appendSuffix(String, String).toFormatter();return pf;} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.ReadableInstant",
    "boolean": 1,
    "context": "public class JodaTime04 { private <mask><mask><mask><mask><mask><mask>.ReadableInstant[] startTime;private ReadableInstant[] endTime;public String foobar(int dayIndex) { Period p = new Period(startTime[dayIndex], endTime[dayIndex]);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.ReadableInstant",
    "boolean": 1,
    "context": "public class JodaTime04 { private ReadableInstant[] startTime;private <mask><mask><mask><mask><mask><mask>.ReadableInstant[] endTime;public String foobar(int dayIndex) { Period p = new Period(startTime[dayIndex], endTime[dayIndex]);long hours = getHours();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Period",
    "boolean": 1,
    "context": "public class JodaTime04 { private ReadableInstant[] startTime;private ReadableInstant[] endTime;public String foobar(int dayIndex) { <mask><mask><mask><mask><mask><mask>.Period p = new Period(startTime[dayIndex], endTime[dayIndex]);long hours = getHours();long minutes = getMinutes();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.Period()",
    "boolean": 1,
    "context": "public class JodaTime04 { private ReadableInstant[] startTime;private ReadableInstant[] endTime;public String foobar(int dayIndex) { Period p = new <mask><mask><mask><mask>Period(startTime[dayIndex], endTime[dayIndex]);long hours = getHours();long minutes = getMinutes();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Period.getHours()",
    "boolean": 1,
    "context": "private ReadableInstant[] endTime;public String foobar(int dayIndex) { Period p = new Period(startTime[dayIndex], endTime[dayIndex]);long hours = <mask><mask><mask><mask><mask><mask>getHours();long minutes = getMinutes();String format = format(String, 2);// Ensures that the minutes will always display as two  return (toString(hours) + String) + format(format, minutes);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Period.getMinutes()",
    "boolean": 1,
    "context": "public String foobar(int dayIndex) { Period p = new Period(startTime[dayIndex], endTime[dayIndex]);long hours = getHours();long minutes = <mask><mask><mask><mask><mask><mask>getMinutes();String format = format(String, 2);// Ensures that the minutes will always display as two  return (toString(hours) + String) + format(format, minutes);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTimeZone",
    "boolean": 1,
    "context": "public class JodaTime05 { public static void main(String[] args) { <mask><mask><mask><mask><mask><mask>.DateTimeZone zone = forID(String);Chronology coptic = getInstance(zone);DateTime dt = new DateTime(coptic);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTimeZone.forID()",
    "boolean": 1,
    "context": "public class JodaTime05 { public static void main(String[] args) { DateTimeZone zone = <mask><mask><mask><mask><mask><mask>forID(String);Chronology coptic = getInstance(zone);DateTime dt = new DateTime(coptic);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Chronology",
    "boolean": 1,
    "context": "public class JodaTime05 { public static void main(String[] args) { DateTimeZone zone = forID(String);<mask><mask><mask><mask><mask><mask>.Chronology coptic = getInstance(zone);DateTime dt = new DateTime(coptic);DateTime minusOneDay = minusDays(1);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.chrono",
    "truth_type": "org.joda.time.chrono",
    "full_FQN": "org.joda.time.chrono.GJChronology.getInstance()",
    "boolean": 1,
    "context": "public class JodaTime05 { public static void main(String[] args) { DateTimeZone zone = forID(String);Chronology coptic = <mask><mask><mask><mask><mask><mask><mask><mask><mask>getInstance(zone);DateTime dt = new DateTime(coptic);DateTime minusOneDay = minusDays(1);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime05 { public static void main(String[] args) { DateTimeZone zone = forID(String);Chronology coptic = getInstance(zone);<mask><mask><mask><mask><mask><mask>.DateTime dt = new DateTime(coptic);DateTime minusOneDay = minusDays(1);println(minusOneDay);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "public class JodaTime05 { public static void main(String[] args) { DateTimeZone zone = forID(String);Chronology coptic = getInstance(zone);DateTime dt = new <mask><mask><mask><mask>DateTime(coptic);DateTime minusOneDay = minusDays(1);println(minusOneDay);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "org.joda.time.Chronology coptic = getInstance(zone);DateTime dt = new DateTime(coptic);<mask><mask><mask><mask><mask><mask>.DateTime minusOneDay = minusDays(1);println(minusOneDay);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime.minusDays()",
    "boolean": 1,
    "context": "org.joda.time.Chronology coptic = getInstance(zone);DateTime dt = new DateTime(coptic);DateTime minusOneDay = <mask><mask><mask><mask><mask><mask>minusDays(1);println(minusOneDay);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.Duration()",
    "boolean": 1,
    "context": "public class JodaTime06 { public static void main(String[] args) { printDuration(new <mask><mask><mask><mask>Duration(5000));printDuration(new Duration(4900));printDuration(new Duration(1000));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.Duration()",
    "boolean": 1,
    "context": "public class JodaTime06 { public static void main(String[] args) { printDuration(new Duration(5000));printDuration(new <mask><mask><mask><mask>Duration(4900));printDuration(new Duration(1000));printDuration(new Duration(900));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.Duration()",
    "boolean": 1,
    "context": "public class JodaTime06 { public static void main(String[] args) { printDuration(new Duration(5000));printDuration(new Duration(4900));printDuration(new <mask><mask><mask><mask>Duration(1000));printDuration(new Duration(900));printDuration(new Duration(0));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.Duration()",
    "boolean": 1,
    "context": "printDuration(new Duration(4900));printDuration(new Duration(1000));printDuration(new <mask><mask><mask><mask>Duration(900));printDuration(new Duration(0));} static void printDuration(Duration d) { println toPeriod(time()).toString(new PeriodFormatterBuilder().printZeroAlways().appendSeconds().toFormatter()));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.Duration()",
    "boolean": 1,
    "context": "printDuration(new Duration(1000));printDuration(new Duration(900));printDuration(new <mask><mask><mask><mask>Duration(0));} static void printDuration(Duration d) { println toPeriod(time()).toString(new PeriodFormatterBuilder().printZeroAlways().appendSeconds().toFormatter()));} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Duration",
    "boolean": 1,
    "context": "printDuration(new Duration(900));printDuration(new Duration(0));} static void printDuration(<mask><mask><mask><mask><mask><mask>.Duration d) { println toPeriod(time()).toString(new PeriodFormatterBuilder().printZeroAlways().appendSeconds().toFormatter()));} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Duration.toPeriod()",
    "boolean": 1,
    "context": "printDuration(new Duration(900));printDuration(new Duration(0));} static void printDuration(Duration d) { println <mask><mask><mask><mask><mask><mask>toPeriod(time()).toString(new PeriodFormatterBuilder().printZeroAlways().appendSeconds().toFormatter()));} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.PeriodType.time()",
    "boolean": 1,
    "context": "printDuration(new Duration(900));printDuration(new Duration(0));} static void printDuration(Duration d) { println toPeriod(<mask><mask><mask><mask><mask><mask>time()).toString(new PeriodFormatterBuilder().printZeroAlways().appendSeconds().toFormatter()));} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.format.PeriodFormatterBuilder()",
    "boolean": 1,
    "context": "printDuration(new Duration(900));printDuration(new Duration(0));} static void printDuration(Duration d) { println toPeriod(time()).toString(new <mask><mask><mask><mask><mask><mask>PeriodFormatterBuilder().printZeroAlways().appendSeconds().toFormatter()));} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DateFormat",
    "boolean": 1,
    "context": "public class JodaTime07 { public static void main(String[] args) { <mask><mask><mask>.DateFormat formatter = new SimpleDateFormat(String);Date someDate = new Date();Date today = getInstance().getTime();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.SimpleDateFormat()",
    "boolean": 1,
    "context": "public class JodaTime07 { public static void main(String[] args) { DateFormat formatter = new <mask><mask><mask>.SimpleDateFormat(String);Date someDate = new Date();Date today = getInstance().getTime();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date",
    "boolean": 1,
    "context": "public class JodaTime07 { public static void main(String[] args) { DateFormat formatter = new SimpleDateFormat(String);<mask><mask><mask>.Date someDate = new Date();Date today = getInstance().getTime();try { someDate = parse(String);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date()",
    "boolean": 1,
    "context": "public class JodaTime07 { public static void main(String[] args) { DateFormat formatter = new SimpleDateFormat(String);Date someDate = new <mask><mask><mask>.Date();Date today = getInstance().getTime();try { someDate = parse(String);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date",
    "boolean": 1,
    "context": "public class JodaTime07 { public static void main(String[] args) { DateFormat formatter = new SimpleDateFormat(String);Date someDate = new Date();<mask><mask><mask>.Date today = getInstance().getTime();try { someDate = parse(String);} catch (ParseException pe) { println(String);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Calendar.getInstance()",
    "boolean": 1,
    "context": "public class JodaTime07 { public static void main(String[] args) { DateFormat formatter = new SimpleDateFormat(String);Date someDate = new Date();Date today = <mask><mask><mask>getInstance().getTime();try { someDate = parse(String);} catch (ParseException pe) { println(String);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DateFormat.parse()",
    "boolean": 1,
    "context": "java.util.Date someDate = new Date();Date today = getInstance().getTime();try { someDate = <mask><mask><mask>parse(String);} catch (ParseException pe) { println(String);} int days = daysBetween(new DateTime(someDate), new DateTime(today)).getDays();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.ParseException",
    "boolean": 1,
    "context": "java.util.Date today = getInstance().getTime();try { someDate = parse(String);} catch (<mask><mask><mask>.ParseException pe) { println(String);} int days = daysBetween(new DateTime(someDate), new DateTime(today)).getDays();println(((((String + someDate) + String) + today) + String) + days);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Days.daysBetween()",
    "boolean": 1,
    "context": "try { someDate = parse(String);} catch (ParseException pe) { println(String);} int days = <mask><mask><mask><mask><mask><mask>daysBetween(new DateTime(someDate), new DateTime(today)).getDays();println(((((String + someDate) + String) + today) + String) + days);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "try { someDate = parse(String);} catch (ParseException pe) { println(String);} int days = daysBetween(new <mask><mask><mask><mask>DateTime(someDate), new DateTime(today)).getDays();println(((((String + someDate) + String) + today) + String) + days);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "try { someDate = parse(String);} catch (ParseException pe) { println(String);} int days = daysBetween(new DateTime(someDate), new <mask><mask><mask><mask>DateTime(today)).getDays();println(((((String + someDate) + String) + today) + String) + days);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.utiloda.time.TimeUnit",
    "truth_type": "java.util.concurrent.TimeUnit",
    "full_FQN": "java.util.concurrent.TimeUnit.MILLISECONDS.convert()",
    "boolean": 0,
    "context": "public class JodaTime08 { public boolean testIfJodaTimePeriodsHandlesPeriodTypesOtherThanMinutesAndHours() { long twentyDaysInMillis = <mask><mask><mask><mask><mask><mask><mask><mask><mask>convert(20, DAYS);Period twoWeeks = new Period(twentyDaysInMillis, weeks());return 2 == getWeeks() ? true : false;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.j.concurrent.TimeUnit",
    "truth_type": "java.util.concurrent.TimeUnit",
    "full_FQN": "java.util.concurrent.TimeUnit.DAYS",
    "boolean": 0,
    "context": "public class JodaTime08 { public boolean testIfJodaTimePeriodsHandlesPeriodTypesOtherThanMinutesAndHours() { long twentyDaysInMillis = convert(20, <mask><mask><mask><mask><mask><mask><mask><mask><mask>.DAYS);Period twoWeeks = new Period(twentyDaysInMillis, weeks());return 2 == getWeeks() ? true : false;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Period",
    "boolean": 1,
    "context": "public class JodaTime08 { public boolean testIfJodaTimePeriodsHandlesPeriodTypesOtherThanMinutesAndHours() { long twentyDaysInMillis = convert(20, DAYS);<mask><mask><mask><mask><mask><mask>.Period twoWeeks = new Period(twentyDaysInMillis, weeks());return 2 == getWeeks() ? true : false;} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.Period()",
    "boolean": 1,
    "context": "public class JodaTime08 { public boolean testIfJodaTimePeriodsHandlesPeriodTypesOtherThanMinutesAndHours() { long twentyDaysInMillis = convert(20, DAYS);Period twoWeeks = new <mask><mask><mask><mask>Period(twentyDaysInMillis, weeks());return 2 == getWeeks() ? true : false;} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.PeriodType.weeks()",
    "boolean": 1,
    "context": "public class JodaTime08 { public boolean testIfJodaTimePeriodsHandlesPeriodTypesOtherThanMinutesAndHours() { long twentyDaysInMillis = convert(20, DAYS);Period twoWeeks = new Period(twentyDaysInMillis, <mask><mask><mask><mask><mask><mask>weeks());return 2 == getWeeks() ? true : false;} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Period.getWeeks()",
    "boolean": 1,
    "context": "public class JodaTime08 { public boolean testIfJodaTimePeriodsHandlesPeriodTypesOtherThanMinutesAndHours() { long twentyDaysInMillis = convert(20, DAYS);Period twoWeeks = new Period(twentyDaysInMillis, weeks());return 2 == <mask><mask><mask><mask><mask><mask>getWeeks() ? true : false;} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.TimeZone.getTimeZone()",
    "boolean": 1,
    "context": "public class JodaTime09 { public static void main(String[] args) { final String string_from_3rd_party = String;println(<mask><mask><mask>getTimeZone(string_from_3rd_party));println(forID(string_from_3rd_party));} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTimeZone.forID()",
    "boolean": 1,
    "context": "public class JodaTime09 { public static void main(String[] args) { final String string_from_3rd_party = String;println(getTimeZone(string_from_3rd_party));println(<mask><mask><mask><mask><mask><mask>forID(string_from_3rd_party));} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.Serializable",
    "boolean": 1,
    "context": "public class JodaTime10 { private Object writeReplace() { return new Stub(null);} private static final class Stub implements <mask><mask><mask>.Serializable { private static final long serialVersionUID = -6212696554273812441L;private transient DateTimeZone iZone;Stub(DateTimeZone zone) { iZone = zone;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTimeZone",
    "boolean": 1,
    "context": "public class JodaTime10 { private Object writeReplace() { return new Stub(null);} private static final class Stub implements Serializable { private static final long serialVersionUID = -6212696554273812441L;private transient <mask><mask><mask><mask><mask><mask>.DateTimeZone iZone;Stub(DateTimeZone zone) { iZone = zone;} private Object readResolve() { return getInstance(iZone);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTimeZone",
    "boolean": 1,
    "context": "} private static final class Stub implements Serializable { private static final long serialVersionUID = -6212696554273812441L;private transient DateTimeZone iZone;Stub(<mask><mask><mask><mask><mask><mask>.DateTimeZone zone) { iZone = zone;} private Object readResolve() { return getInstance(iZone);} private void writeObject(ObjectOutputStream out) throws IOException { writeObject(iZone);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.chrono",
    "truth_type": "org.joda.time.chrono",
    "full_FQN": "org.joda.time.chrono.ISOChronology.getInstance()",
    "boolean": 1,
    "context": "private transient DateTimeZone iZone;Stub(DateTimeZone zone) { iZone = zone;} private Object readResolve() { return <mask><mask><mask><mask><mask><mask><mask><mask><mask>getInstance(iZone);} private void writeObject(ObjectOutputStream out) throws IOException { writeObject(iZone);} private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException { iZone = ((DateTimeZone)  readObject()));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.ObjectOutputStream",
    "boolean": 1,
    "context": "Stub(DateTimeZone zone) { iZone = zone;} private Object readResolve() { return getInstance(iZone);} private void writeObject(<mask><mask><mask>.ObjectOutputStream out) throws IOException { writeObject(iZone);} private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException { iZone = ((DateTimeZone)  readObject()));} } };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException",
    "boolean": 1,
    "context": "Stub(DateTimeZone zone) { iZone = zone;} private Object readResolve() { return getInstance(iZone);} private void writeObject(ObjectOutputStream out) throws <mask><mask><mask>.IOException { writeObject(iZone);} private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException { iZone = ((DateTimeZone)  readObject()));} } };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.ObjectOutputStream.writeObject()",
    "boolean": 1,
    "context": "Stub(DateTimeZone zone) { iZone = zone;} private Object readResolve() { return getInstance(iZone);} private void writeObject(ObjectOutputStream out) throws IOException { <mask><mask><mask>writeObject(iZone);} private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException { iZone = ((DateTimeZone)  readObject()));} } };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.ObjectInputStream",
    "boolean": 1,
    "context": "} private Object readResolve() { return getInstance(iZone);} private void writeObject(ObjectOutputStream out) throws IOException { writeObject(iZone);} private void readObject(<mask><mask><mask>.ObjectInputStream in) throws IOException, ClassNotFoundException { iZone = ((DateTimeZone)  readObject()));} } };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException",
    "boolean": 1,
    "context": "} private Object readResolve() { return getInstance(iZone);} private void writeObject(ObjectOutputStream out) throws IOException { writeObject(iZone);} private void readObject(ObjectInputStream in) throws <mask><mask><mask>.IOException, ClassNotFoundException { iZone = ((DateTimeZone)  readObject()));} } };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTimeZone",
    "boolean": 1,
    "context": "} private Object readResolve() { return getInstance(iZone);} private void writeObject(ObjectOutputStream out) throws IOException { writeObject(iZone);} private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException { iZone = ((<mask><mask><mask><mask><mask><mask>.DateTimeZone)  readObject()));} } };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.ObjectInputStream.readObject()",
    "boolean": 1,
    "context": "} private Object readResolve() { return getInstance(iZone);} private void writeObject(ObjectOutputStream out) throws IOException { writeObject(iZone);} private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException { iZone = ((DateTimeZone)  <mask><mask><mask>readObject()));} } };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter",
    "boolean": 1,
    "context": "public class JodaTime11 { public static void main(String[] args) { <mask><mask><mask><mask><mask><mask><mask><mask>.DateTimeFormatter dtf = forPattern(String);println parseDateTime(String));try { println(new SimpleDateFormat(String).parse(String));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormat.forPattern()",
    "boolean": 1,
    "context": "public class JodaTime11 { public static void main(String[] args) { DateTimeFormatter dtf = <mask><mask><mask><mask><mask><mask><mask><mask>forPattern(String);println parseDateTime(String));try { println(new SimpleDateFormat(String).parse(String));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter.parseDateTime()",
    "boolean": 1,
    "context": "public class JodaTime11 { public static void main(String[] args) { DateTimeFormatter dtf = forPattern(String);println <mask><mask><mask><mask><mask><mask><mask><mask>parseDateTime(String));try { println(new SimpleDateFormat(String).parse(String));} catch (ParseException e) { printStackTrace();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.SimpleDateFormat()",
    "boolean": 1,
    "context": "public class JodaTime11 { public static void main(String[] args) { DateTimeFormatter dtf = forPattern(String);println parseDateTime(String));try { println(new <mask><mask><mask>.SimpleDateFormat(String).parse(String));} catch (ParseException e) { printStackTrace();} } };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.ParseException",
    "boolean": 1,
    "context": "java.lang.System.out.println parseDateTime(String));try { println(new SimpleDateFormat(String).parse(String));} catch (<mask><mask><mask>.ParseException e) { printStackTrace();} } };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.ParseException.printStackTrace()",
    "boolean": 1,
    "context": "java.lang.System.out.println parseDateTime(String));try { println(new SimpleDateFormat(String).parse(String));} catch (ParseException e) { <mask><mask><mask>printStackTrace();} } };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.SimpleDateFormat",
    "boolean": 1,
    "context": "public class JodaTime12 { public static void main(String[] args) { String currentDate;<mask><mask><mask>.SimpleDateFormat myFormat = new SimpleDateFormat(String);Date date1 = null;DateTime dt;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.SimpleDateFormat()",
    "boolean": 1,
    "context": "public class JodaTime12 { public static void main(String[] args) { String currentDate;SimpleDateFormat myFormat = new <mask><mask><mask>.SimpleDateFormat(String);Date date1 = null;DateTime dt;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.Date",
    "boolean": 0,
    "context": "public class JodaTime12 { public static void main(String[] args) { String currentDate;SimpleDateFormat myFormat = new SimpleDateFormat(String);<mask><mask><mask>.Date date1 = null;DateTime dt;currentDate = String;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "java.text.SimpleDateFormat myFormat = new SimpleDateFormat(String);Date date1 = null;<mask><mask><mask><mask><mask><mask>.DateTime dt;currentDate = String;try { date1 = ((Date)  parse(currentDate)));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.Date",
    "boolean": 0,
    "context": "org.joda.time.DateTime dt;currentDate = String;try { date1 = ((<mask><mask><mask>.Date)  parse(currentDate)));} catch (ParseException ex) { printStackTrace();} dt = new DateTime(date1);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.SimpleDateFormat.parse()",
    "boolean": 1,
    "context": "org.joda.time.DateTime dt;currentDate = String;try { date1 = ((Date)  <mask><mask><mask>parse(currentDate)));} catch (ParseException ex) { printStackTrace();} dt = new DateTime(date1);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.ParseException",
    "boolean": 1,
    "context": "currentDate = String;try { date1 = ((Date)  parse(currentDate)));} catch (<mask><mask><mask>.ParseException ex) { printStackTrace();} dt = new DateTime(date1); plusMinutes(30);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.ParseException.printStackTrace()",
    "boolean": 1,
    "context": "currentDate = String;try { date1 = ((Date)  parse(currentDate)));} catch (ParseException ex) { <mask><mask><mask>printStackTrace();} dt = new DateTime(date1); plusMinutes(30);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "try { date1 = ((Date)  parse(currentDate)));} catch (ParseException ex) { printStackTrace();} dt = new <mask><mask><mask><mask>DateTime(date1); plusMinutes(30);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime.plusMinutes()",
    "boolean": 1,
    "context": "} catch (ParseException ex) { printStackTrace();} dt = new DateTime(date1); <mask><mask><mask><mask><mask><mask>plusMinutes(30);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.junit",
    "truth_type": "org.junit",
    "full_FQN": "org.junit.Test",
    "boolean": 1,
    "context": "public class JodaTime13 { public static void main(String[] args) { } @<mask><mask><mask><mask>.Test public void second() { assertEquals(String, format(1000));} @Test public void minute() { assertEquals(String, format(1000 * 60));} @Test public void hour() { assertEquals(String, format((1000 * 60) * 60));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.junit",
    "truth_type": "org.junit",
    "full_FQN": "org.junit.Test",
    "boolean": 1,
    "context": "public class JodaTime13 { public static void main(String[] args) { } @Test public void second() { assertEquals(String, format(1000));} @<mask><mask><mask><mask>.Test public void minute() { assertEquals(String, format(1000 * 60));} @Test public void hour() { assertEquals(String, format((1000 * 60) * 60));} @Test public void almostMidnight() { final int secondsInDay = (60 * 60) * 24;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.junit",
    "truth_type": "org.junit",
    "full_FQN": "org.junit.Test",
    "boolean": 1,
    "context": "public class JodaTime13 { public static void main(String[] args) { } @Test public void second() { assertEquals(String, format(1000));} @Test public void minute() { assertEquals(String, format(1000 * 60));} @<mask><mask><mask><mask>.Test public void hour() { assertEquals(String, format((1000 * 60) * 60));} @Test public void almostMidnight() { final int secondsInDay = (60 * 60) * 24;assertEquals(String, format(1000 * (secondsInDay - 1)));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.junit",
    "truth_type": "org.junit",
    "full_FQN": "org.junit.Test",
    "boolean": 1,
    "context": "} @Test public void minute() { assertEquals(String, format(1000 * 60));} @Test public void hour() { assertEquals(String, format((1000 * 60) * 60));} @<mask><mask><mask><mask>.Test public void almostMidnight() { final int secondsInDay = (60 * 60) * 24;assertEquals(String, format(1000 * (secondsInDay - 1)));} @Test public void twoDaysAndAHalf() { final int secondsInDay = (60 * 60) * 24;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.junit",
    "truth_type": "org.junit",
    "full_FQN": "org.junit.Test",
    "boolean": 1,
    "context": "} @Test public void almostMidnight() { final int secondsInDay = (60 * 60) * 24;assertEquals(String, format(1000 * (secondsInDay - 1)));} @<mask><mask><mask><mask>.Test public void twoDaysAndAHalf() { final int secondsInDay = (60 * 60) * 24;assertEquals(String, format(((1000 * secondsInDay) * 5) / 2));} public static class OurDateTimeFormatter { public OurDateTimeFormatter() { } private static final PeriodFormatter dateFormat = new PeriodFormatterBuilder().appendDays().appendSuffix(String, String).appendSeparator(String).appendHours().appendSeparator(String).appendMinutes().minimumPrintedDigits(2).appendSeparator(String).appendSeconds().minimumPrintedDigits(2).toFormatter();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.PeriodFormatter",
    "boolean": 1,
    "context": "} @Test public void twoDaysAndAHalf() { final int secondsInDay = (60 * 60) * 24;assertEquals(String, format(((1000 * secondsInDay) * 5) / 2));} public static class OurDateTimeFormatter { public OurDateTimeFormatter() { } private static final <mask><mask><mask><mask><mask><mask><mask><mask>.PeriodFormatter dateFormat = new PeriodFormatterBuilder().appendDays().appendSuffix(String, String).appendSeparator(String).appendHours().appendSeparator(String).appendMinutes().minimumPrintedDigits(2).appendSeparator(String).appendSeconds().minimumPrintedDigits(2).toFormatter();public static String format(long millis) { return print(new Period(millis).normalizedStandard());} } };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.format.PeriodFormatterBuilder()",
    "boolean": 1,
    "context": "} @Test public void twoDaysAndAHalf() { final int secondsInDay = (60 * 60) * 24;assertEquals(String, format(((1000 * secondsInDay) * 5) / 2));} public static class OurDateTimeFormatter { public OurDateTimeFormatter() { } private static final PeriodFormatter dateFormat = new <mask><mask><mask><mask><mask><mask>PeriodFormatterBuilder().appendDays().appendSuffix(String, String).appendSeparator(String).appendHours().appendSeparator(String).appendMinutes().minimumPrintedDigits(2).appendSeparator(String).appendSeconds().minimumPrintedDigits(2).toFormatter();public static String format(long millis) { return print(new Period(millis).normalizedStandard());} } };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.PeriodFormatter.print()",
    "boolean": 1,
    "context": "assertEquals(String, format(((1000 * secondsInDay) * 5) / 2));} public static class OurDateTimeFormatter { public OurDateTimeFormatter() { } private static final PeriodFormatter dateFormat = new PeriodFormatterBuilder().appendDays().appendSuffix(String, String).appendSeparator(String).appendHours().appendSeparator(String).appendMinutes().minimumPrintedDigits(2).appendSeparator(String).appendSeconds().minimumPrintedDigits(2).toFormatter();public static String format(long millis) { return <mask><mask><mask><mask><mask><mask><mask><mask>print(new Period(millis).normalizedStandard());} } };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.Period()",
    "boolean": 1,
    "context": "assertEquals(String, format(((1000 * secondsInDay) * 5) / 2));} public static class OurDateTimeFormatter { public OurDateTimeFormatter() { } private static final PeriodFormatter dateFormat = new PeriodFormatterBuilder().appendDays().appendSuffix(String, String).appendSeparator(String).appendHours().appendSeparator(String).appendMinutes().minimumPrintedDigits(2).appendSeparator(String).appendSeconds().minimumPrintedDigits(2).toFormatter();public static String format(long millis) { return print(new <mask><mask><mask><mask>Period(millis).normalizedStandard());} } };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter",
    "boolean": 1,
    "context": "public class JodaTime14 { public static void main(String[] args) { String start = String;<mask><mask><mask><mask><mask><mask><mask><mask>.DateTimeFormatter parser1 = forPattern(String);DateTime startTime = parseDateTime(start);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormat.forPattern()",
    "boolean": 1,
    "context": "public class JodaTime14 { public static void main(String[] args) { String start = String;DateTimeFormatter parser1 = <mask><mask><mask><mask><mask><mask><mask><mask>forPattern(String);DateTime startTime = parseDateTime(start);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime14 { public static void main(String[] args) { String start = String;DateTimeFormatter parser1 = forPattern(String);<mask><mask><mask><mask><mask><mask>.DateTime startTime = parseDateTime(start);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter.parseDateTime()",
    "boolean": 1,
    "context": "public class JodaTime14 { public static void main(String[] args) { String start = String;DateTimeFormatter parser1 = forPattern(String);DateTime startTime = <mask><mask><mask><mask><mask><mask><mask><mask>parseDateTime(start);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.MutableDateTime",
    "boolean": 1,
    "context": "public class JodaTime15 { public static void main(String[] args) { <mask><mask><mask><mask><mask><mask>.MutableDateTime now = new MutableDateTime(); setHourOfDay(2); setMinuteOfHour(0);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.MutableDateTime()",
    "boolean": 1,
    "context": "public class JodaTime15 { public static void main(String[] args) { MutableDateTime now = new <mask><mask><mask><mask>MutableDateTime(); setHourOfDay(2); setMinuteOfHour(0);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.MutableDateTime.setHourOfDay()",
    "boolean": 1,
    "context": "public class JodaTime15 { public static void main(String[] args) { MutableDateTime now = new MutableDateTime(); <mask><mask><mask><mask><mask><mask>setHourOfDay(2); setMinuteOfHour(0); setSecondOfMinute(0);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.MutableDateTime.setMinuteOfHour()",
    "boolean": 1,
    "context": "public class JodaTime15 { public static void main(String[] args) { MutableDateTime now = new MutableDateTime(); setHourOfDay(2); <mask><mask><mask><mask><mask><mask>setMinuteOfHour(0); setSecondOfMinute(0); setMillisOfSecond(0);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.MutableDateTime.setSecondOfMinute()",
    "boolean": 1,
    "context": " setHourOfDay(2); setMinuteOfHour(0); <mask><mask><mask><mask><mask><mask>setSecondOfMinute(0); setMillisOfSecond(0);DateTime myDate = toDateTime();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.MutableDateTime.setMillisOfSecond()",
    "boolean": 1,
    "context": " setMinuteOfHour(0); setSecondOfMinute(0); <mask><mask><mask><mask><mask><mask>setMillisOfSecond(0);DateTime myDate = toDateTime();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": " setSecondOfMinute(0); setMillisOfSecond(0);<mask><mask><mask><mask><mask><mask>.DateTime myDate = toDateTime();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.MutableDateTime.toDateTime()",
    "boolean": 1,
    "context": " setSecondOfMinute(0); setMillisOfSecond(0);DateTime myDate = <mask><mask><mask><mask><mask><mask>toDateTime();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime16 { public static void main(String[] args) { <mask><mask><mask><mask><mask><mask>.DateTime d1 = new DateTime(2011, 6, 17, 13, 13, 5, 0);DateTime d2 = new DateTime(2011, 6, 17, 10, 17, 3, 0);Period negativePeriod = new Period(d1, d2);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "public class JodaTime16 { public static void main(String[] args) { DateTime d1 = new <mask><mask><mask><mask>DateTime(2011, 6, 17, 13, 13, 5, 0);DateTime d2 = new DateTime(2011, 6, 17, 10, 17, 3, 0);Period negativePeriod = new Period(d1, d2);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime16 { public static void main(String[] args) { DateTime d1 = new DateTime(2011, 6, 17, 13, 13, 5, 0);<mask><mask><mask><mask><mask><mask>.DateTime d2 = new DateTime(2011, 6, 17, 10, 17, 3, 0);Period negativePeriod = new Period(d1, d2);Period positivePeriod = new Period(d2, d1);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "public class JodaTime16 { public static void main(String[] args) { DateTime d1 = new DateTime(2011, 6, 17, 13, 13, 5, 0);DateTime d2 = new <mask><mask><mask><mask>DateTime(2011, 6, 17, 10, 17, 3, 0);Period negativePeriod = new Period(d1, d2);Period positivePeriod = new Period(d2, d1);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Period",
    "boolean": 1,
    "context": "public class JodaTime16 { public static void main(String[] args) { DateTime d1 = new DateTime(2011, 6, 17, 13, 13, 5, 0);DateTime d2 = new DateTime(2011, 6, 17, 10, 17, 3, 0);<mask><mask><mask><mask><mask><mask>.Period negativePeriod = new Period(d1, d2);Period positivePeriod = new Period(d2, d1);PeriodFormatter pf = // Does this do anything? new PeriodFormatterBuilder().minimumPrintedDigits(2).appendHours().appendSuffix(String).rejectSignedValues(true).appendMinutes().appendSuffix(String).appendSeconds().toFormatter();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.Period()",
    "boolean": 1,
    "context": "public class JodaTime16 { public static void main(String[] args) { DateTime d1 = new DateTime(2011, 6, 17, 13, 13, 5, 0);DateTime d2 = new DateTime(2011, 6, 17, 10, 17, 3, 0);Period negativePeriod = new <mask><mask><mask><mask>Period(d1, d2);Period positivePeriod = new Period(d2, d1);PeriodFormatter pf = // Does this do anything? new PeriodFormatterBuilder().minimumPrintedDigits(2).appendHours().appendSuffix(String).rejectSignedValues(true).appendMinutes().appendSuffix(String).appendSeconds().toFormatter();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Period",
    "boolean": 1,
    "context": "org.joda.time.DateTime d2 = new DateTime(2011, 6, 17, 10, 17, 3, 0);Period negativePeriod = new Period(d1, d2);<mask><mask><mask><mask><mask><mask>.Period positivePeriod = new Period(d2, d1);PeriodFormatter pf = // Does this do anything? new PeriodFormatterBuilder().minimumPrintedDigits(2).appendHours().appendSuffix(String).rejectSignedValues(true).appendMinutes().appendSuffix(String).appendSeconds().toFormatter();printf(String, print(negativePeriod));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.Period()",
    "boolean": 1,
    "context": "org.joda.time.DateTime d2 = new DateTime(2011, 6, 17, 10, 17, 3, 0);Period negativePeriod = new Period(d1, d2);Period positivePeriod = new <mask><mask><mask><mask>Period(d2, d1);PeriodFormatter pf = // Does this do anything? new PeriodFormatterBuilder().minimumPrintedDigits(2).appendHours().appendSuffix(String).rejectSignedValues(true).appendMinutes().appendSuffix(String).appendSeconds().toFormatter();printf(String, print(negativePeriod));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.PeriodFormatter",
    "boolean": 1,
    "context": "org.joda.time.Period negativePeriod = new Period(d1, d2);Period positivePeriod = new Period(d2, d1);<mask><mask><mask><mask><mask><mask><mask><mask>.PeriodFormatter pf = // Does this do anything? new PeriodFormatterBuilder().minimumPrintedDigits(2).appendHours().appendSuffix(String).rejectSignedValues(true).appendMinutes().appendSuffix(String).appendSeconds().toFormatter();printf(String, print(negativePeriod));printf(String, print(positivePeriod));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.format.PeriodFormatterBuilder()",
    "boolean": 1,
    "context": "org.joda.time.Period negativePeriod = new Period(d1, d2);Period positivePeriod = new Period(d2, d1);PeriodFormatter pf = // Does this do anything? new <mask><mask><mask><mask><mask><mask>PeriodFormatterBuilder().minimumPrintedDigits(2).appendHours().appendSuffix(String).rejectSignedValues(true).appendMinutes().appendSuffix(String).appendSeconds().toFormatter();printf(String, print(negativePeriod));printf(String, print(positivePeriod));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.PeriodFormatter.print()",
    "boolean": 1,
    "context": "org.joda.time.Period positivePeriod = new Period(d2, d1);PeriodFormatter pf = // Does this do anything? new PeriodFormatterBuilder().minimumPrintedDigits(2).appendHours().appendSuffix(String).rejectSignedValues(true).appendMinutes().appendSuffix(String).appendSeconds().toFormatter();printf(String, <mask><mask><mask><mask><mask><mask><mask><mask>print(negativePeriod));printf(String, print(positivePeriod));} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.PeriodFormatter.print()",
    "boolean": 1,
    "context": "org.joda.time.format.PeriodFormatter pf = // Does this do anything? new PeriodFormatterBuilder().minimumPrintedDigits(2).appendHours().appendSuffix(String).rejectSignedValues(true).appendMinutes().appendSuffix(String).appendSeconds().toFormatter();printf(String, print(negativePeriod));printf(String, <mask><mask><mask><mask><mask><mask><mask><mask>print(positivePeriod));} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter",
    "boolean": 1,
    "context": "public class JodaTime17 { public static void main(String[] args) { <mask><mask><mask><mask><mask><mask><mask><mask>.DateTimeFormatter dtf = forPattern(String);String dts = print(currentTimeMillis());println(dts);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormat.forPattern()",
    "boolean": 1,
    "context": "public class JodaTime17 { public static void main(String[] args) { DateTimeFormatter dtf = <mask><mask><mask><mask><mask><mask><mask><mask>forPattern(String);String dts = print(currentTimeMillis());println(dts);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter.print()",
    "boolean": 1,
    "context": "public class JodaTime17 { public static void main(String[] args) { DateTimeFormatter dtf = forPattern(String);String dts = <mask><mask><mask><mask><mask><mask><mask><mask>print(currentTimeMillis());println(dts);DateTime dt = parseDateTime(dts);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "java.lang.String dts = print(currentTimeMillis());println(dts);<mask><mask><mask><mask><mask><mask>.DateTime dt = parseDateTime(dts);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter.parseDateTime()",
    "boolean": 1,
    "context": "java.lang.String dts = print(currentTimeMillis());println(dts);DateTime dt = <mask><mask><mask><mask><mask><mask><mask><mask>parseDateTime(dts);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTimeZone",
    "boolean": 1,
    "context": "public class JodaTime18 { private static final <mask><mask><mask><mask><mask><mask>.DateTimeZone LOCAL_TZ = getDefault();private static final DateTimeFormatter YEAR_MONTH_DAY_HOUR_MINUTE_SECOND_MILLIS_FORMATTER = new DateTimeFormatterBuilder().appendYear(4, 4).appendLiteral('-').appendMonthOfYear(1).appendLiteral('-').appendDayOfMonth(1).appendLiteral(' ').appendHourOfDay(2).appendLiteral(':').appendMinuteOfDay(1).appendLiteral(':').appendSecondOfDay(1).appendLiteral('.').appendMillisOfDay(1).toFormatter().withZone(LOCAL_TZ);};"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTimeZone.getDefault()",
    "boolean": 1,
    "context": "public class JodaTime18 { private static final DateTimeZone LOCAL_TZ = <mask><mask><mask><mask><mask><mask>getDefault();private static final DateTimeFormatter YEAR_MONTH_DAY_HOUR_MINUTE_SECOND_MILLIS_FORMATTER = new DateTimeFormatterBuilder().appendYear(4, 4).appendLiteral('-').appendMonthOfYear(1).appendLiteral('-').appendDayOfMonth(1).appendLiteral(' ').appendHourOfDay(2).appendLiteral(':').appendMinuteOfDay(1).appendLiteral(':').appendSecondOfDay(1).appendLiteral('.').appendMillisOfDay(1).toFormatter().withZone(LOCAL_TZ);};"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter",
    "boolean": 1,
    "context": "public class JodaTime18 { private static final DateTimeZone LOCAL_TZ = getDefault();private static final <mask><mask><mask><mask><mask><mask><mask><mask>.DateTimeFormatter YEAR_MONTH_DAY_HOUR_MINUTE_SECOND_MILLIS_FORMATTER = new DateTimeFormatterBuilder().appendYear(4, 4).appendLiteral('-').appendMonthOfYear(1).appendLiteral('-').appendDayOfMonth(1).appendLiteral(' ').appendHourOfDay(2).appendLiteral(':').appendMinuteOfDay(1).appendLiteral(':').appendSecondOfDay(1).appendLiteral('.').appendMillisOfDay(1).toFormatter().withZone(LOCAL_TZ);};"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.format.DateTimeFormatterBuilder()",
    "boolean": 1,
    "context": "public class JodaTime18 { private static final DateTimeZone LOCAL_TZ = getDefault();private static final DateTimeFormatter YEAR_MONTH_DAY_HOUR_MINUTE_SECOND_MILLIS_FORMATTER = new <mask><mask><mask><mask><mask><mask>DateTimeFormatterBuilder().appendYear(4, 4).appendLiteral('-').appendMonthOfYear(1).appendLiteral('-').appendDayOfMonth(1).appendLiteral(' ').appendHourOfDay(2).appendLiteral(':').appendMinuteOfDay(1).appendLiteral(':').appendSecondOfDay(1).appendLiteral('.').appendMillisOfDay(1).toFormatter().withZone(LOCAL_TZ);};"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Instant",
    "boolean": 1,
    "context": "public class JodaTime19 { public static void main(String[] args) { <mask><mask><mask><mask><mask><mask>.Instant now = new Instant(new Date().getTime());Interval i2 = new Interval(now, ((ReadableInstant) (null)));Interval i1 = new Interval(now, ((ReadableInstant) (null)));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.Instant()",
    "boolean": 1,
    "context": "public class JodaTime19 { public static void main(String[] args) { Instant now = new <mask><mask><mask><mask>Instant(new Date().getTime());Interval i2 = new Interval(now, ((ReadableInstant) (null)));Interval i1 = new Interval(now, ((ReadableInstant) (null)));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date()",
    "boolean": 1,
    "context": "public class JodaTime19 { public static void main(String[] args) { Instant now = new Instant(new <mask><mask><mask>.Date().getTime());Interval i2 = new Interval(now, ((ReadableInstant) (null)));Interval i1 = new Interval(now, ((ReadableInstant) (null)));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Interval",
    "boolean": 1,
    "context": "public class JodaTime19 { public static void main(String[] args) { Instant now = new Instant(new Date().getTime());<mask><mask><mask><mask><mask><mask>.Interval i2 = new Interval(now, ((ReadableInstant) (null)));Interval i1 = new Interval(now, ((ReadableInstant) (null)));boolean overlapping = overlaps(i1);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.Interval()",
    "boolean": 1,
    "context": "public class JodaTime19 { public static void main(String[] args) { Instant now = new Instant(new Date().getTime());Interval i2 = new <mask><mask><mask><mask>Interval(now, ((ReadableInstant) (null)));Interval i1 = new Interval(now, ((ReadableInstant) (null)));boolean overlapping = overlaps(i1);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.ReadableInstant",
    "boolean": 1,
    "context": "public class JodaTime19 { public static void main(String[] args) { Instant now = new Instant(new Date().getTime());Interval i2 = new Interval(now, ((<mask><mask><mask><mask><mask><mask>.ReadableInstant) (null)));Interval i1 = new Interval(now, ((ReadableInstant) (null)));boolean overlapping = overlaps(i1);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Interval",
    "boolean": 1,
    "context": "public class JodaTime19 { public static void main(String[] args) { Instant now = new Instant(new Date().getTime());Interval i2 = new Interval(now, ((ReadableInstant) (null)));<mask><mask><mask><mask><mask><mask>.Interval i1 = new Interval(now, ((ReadableInstant) (null)));boolean overlapping = overlaps(i1);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.Interval()",
    "boolean": 1,
    "context": "public class JodaTime19 { public static void main(String[] args) { Instant now = new Instant(new Date().getTime());Interval i2 = new Interval(now, ((ReadableInstant) (null)));Interval i1 = new <mask><mask><mask><mask>Interval(now, ((ReadableInstant) (null)));boolean overlapping = overlaps(i1);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.ReadableInstant",
    "boolean": 1,
    "context": "public class JodaTime19 { public static void main(String[] args) { Instant now = new Instant(new Date().getTime());Interval i2 = new Interval(now, ((ReadableInstant) (null)));Interval i1 = new Interval(now, ((<mask><mask><mask><mask><mask><mask>.ReadableInstant) (null)));boolean overlapping = overlaps(i1);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Interval.overlaps()",
    "boolean": 1,
    "context": "org.joda.time.Interval i2 = new Interval(now, ((ReadableInstant) (null)));Interval i1 = new Interval(now, ((ReadableInstant) (null)));boolean overlapping = <mask><mask><mask><mask><mask><mask>overlaps(i1);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter",
    "boolean": 1,
    "context": "public class JodaTime20 { public static void main(String[] args) { String DATE_FORMAT = String;<mask><mask><mask><mask><mask><mask><mask><mask>.DateTimeFormatter DATETIME_FORMATTER = forPattern(DATE_FORMAT);DateTimeZone dateTimeZone = forID(String);DateTime date = withZone(dateTimeZone).parseDateTime(String);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormat.forPattern()",
    "boolean": 1,
    "context": "public class JodaTime20 { public static void main(String[] args) { String DATE_FORMAT = String;DateTimeFormatter DATETIME_FORMATTER = <mask><mask><mask><mask><mask><mask><mask><mask>forPattern(DATE_FORMAT);DateTimeZone dateTimeZone = forID(String);DateTime date = withZone(dateTimeZone).parseDateTime(String);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTimeZone",
    "boolean": 1,
    "context": "public class JodaTime20 { public static void main(String[] args) { String DATE_FORMAT = String;DateTimeFormatter DATETIME_FORMATTER = forPattern(DATE_FORMAT);<mask><mask><mask><mask><mask><mask>.DateTimeZone dateTimeZone = forID(String);DateTime date = withZone(dateTimeZone).parseDateTime(String);println(String + toString());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTimeZone.forID()",
    "boolean": 1,
    "context": "public class JodaTime20 { public static void main(String[] args) { String DATE_FORMAT = String;DateTimeFormatter DATETIME_FORMATTER = forPattern(DATE_FORMAT);DateTimeZone dateTimeZone = <mask><mask><mask><mask><mask><mask>forID(String);DateTime date = withZone(dateTimeZone).parseDateTime(String);println(String + toString());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "org.joda.time.format.DateTimeFormatter DATETIME_FORMATTER = forPattern(DATE_FORMAT);DateTimeZone dateTimeZone = forID(String);<mask><mask><mask><mask><mask><mask>.DateTime date = withZone(dateTimeZone).parseDateTime(String);println(String + toString());DateTime convertedDate = toDateTime(UTC);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter.withZone()",
    "boolean": 1,
    "context": "org.joda.time.format.DateTimeFormatter DATETIME_FORMATTER = forPattern(DATE_FORMAT);DateTimeZone dateTimeZone = forID(String);DateTime date = <mask><mask><mask><mask><mask><mask><mask><mask>withZone(dateTimeZone).parseDateTime(String);println(String + toString());DateTime convertedDate = toDateTime(UTC);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime.toString()",
    "boolean": 1,
    "context": "org.joda.time.DateTimeZone dateTimeZone = forID(String);DateTime date = withZone(dateTimeZone).parseDateTime(String);println(String + <mask><mask><mask><mask><mask><mask>toString());DateTime convertedDate = toDateTime(UTC);println(String + toString());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "org.joda.time.DateTime date = withZone(dateTimeZone).parseDateTime(String);println(String + toString());<mask><mask><mask><mask><mask><mask>.DateTime convertedDate = toDateTime(UTC);println(String + toString());} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime.toDateTime()",
    "boolean": 1,
    "context": "org.joda.time.DateTime date = withZone(dateTimeZone).parseDateTime(String);println(String + toString());DateTime convertedDate = <mask><mask><mask><mask><mask><mask>toDateTime(UTC);println(String + toString());} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.DateTimeZone",
    "truth_type": "org.joda.time.DateTimeZone",
    "full_FQN": "org.joda.time.DateTimeZone.UTC",
    "boolean": 1,
    "context": "org.joda.time.DateTime date = withZone(dateTimeZone).parseDateTime(String);println(String + toString());DateTime convertedDate = toDateTime(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.UTC);println(String + toString());} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime.toString()",
    "boolean": 1,
    "context": "java.lang.System.out.println(String + toString());DateTime convertedDate = toDateTime(UTC);println(String + <mask><mask><mask><mask><mask><mask>toString());} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DateFormat",
    "boolean": 1,
    "context": "public class JodaTime21 { public static void main(String[] args) { <mask><mask><mask>.DateFormat formatter = new SimpleDateFormat(String);Date dt = null;try { dt = ((Date)  parse(String)));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.SimpleDateFormat()",
    "boolean": 1,
    "context": "public class JodaTime21 { public static void main(String[] args) { DateFormat formatter = new <mask><mask><mask>.SimpleDateFormat(String);Date dt = null;try { dt = ((Date)  parse(String)));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.Date",
    "boolean": 0,
    "context": "public class JodaTime21 { public static void main(String[] args) { DateFormat formatter = new SimpleDateFormat(String);<mask><mask><mask>.Date dt = null;try { dt = ((Date)  parse(String)));} catch (ParseException e) { printStackTrace();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.Date",
    "boolean": 0,
    "context": "public class JodaTime21 { public static void main(String[] args) { DateFormat formatter = new SimpleDateFormat(String);Date dt = null;try { dt = ((<mask><mask><mask>.Date)  parse(String)));} catch (ParseException e) { printStackTrace();} LocalDateTime ldt = new DateTime(dt).withZone(UTC).toLocalDateTime();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.DateFormat.parse()",
    "boolean": 1,
    "context": "public class JodaTime21 { public static void main(String[] args) { DateFormat formatter = new SimpleDateFormat(String);Date dt = null;try { dt = ((Date)  <mask><mask><mask>parse(String)));} catch (ParseException e) { printStackTrace();} LocalDateTime ldt = new DateTime(dt).withZone(UTC).toLocalDateTime();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.ParseException",
    "boolean": 1,
    "context": "java.sql.Date dt = null;try { dt = ((Date)  parse(String)));} catch (<mask><mask><mask>.ParseException e) { printStackTrace();} LocalDateTime ldt = new DateTime(dt).withZone(UTC).toLocalDateTime();println(String + toDateTime().toDate().toString());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.ParseException.printStackTrace()",
    "boolean": 1,
    "context": "java.sql.Date dt = null;try { dt = ((Date)  parse(String)));} catch (ParseException e) { <mask><mask><mask>printStackTrace();} LocalDateTime ldt = new DateTime(dt).withZone(UTC).toLocalDateTime();println(String + toDateTime().toDate().toString());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.LocalDateTime",
    "boolean": 1,
    "context": "try { dt = ((Date)  parse(String)));} catch (ParseException e) { printStackTrace();} <mask><mask><mask><mask><mask><mask>.LocalDateTime ldt = new DateTime(dt).withZone(UTC).toLocalDateTime();println(String + toDateTime().toDate().toString());DateTime cvtldt = toDateTime(forID(String));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "try { dt = ((Date)  parse(String)));} catch (ParseException e) { printStackTrace();} LocalDateTime ldt = new <mask><mask><mask><mask>DateTime(dt).withZone(UTC).toLocalDateTime();println(String + toDateTime().toDate().toString());DateTime cvtldt = toDateTime(forID(String));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.DateTimeZone",
    "truth_type": "org.joda.time.DateTimeZone",
    "full_FQN": "org.joda.time.DateTimeZone.UTC",
    "boolean": 1,
    "context": "try { dt = ((Date)  parse(String)));} catch (ParseException e) { printStackTrace();} LocalDateTime ldt = new DateTime(dt).withZone(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.UTC).toLocalDateTime();println(String + toDateTime().toDate().toString());DateTime cvtldt = toDateTime(forID(String));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.LocalDateTime.toDateTime()",
    "boolean": 1,
    "context": "} catch (ParseException e) { printStackTrace();} LocalDateTime ldt = new DateTime(dt).withZone(UTC).toLocalDateTime();println(String + <mask><mask><mask><mask><mask><mask>toDateTime().toDate().toString());DateTime cvtldt = toDateTime(forID(String));println(String + toLocalDateTime().toDateTime().toDate().toString());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "} LocalDateTime ldt = new DateTime(dt).withZone(UTC).toLocalDateTime();println(String + toDateTime().toDate().toString());<mask><mask><mask><mask><mask><mask>.DateTime cvtldt = toDateTime(forID(String));println(String + toLocalDateTime().toDateTime().toDate().toString());} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.LocalDateTime.toDateTime()",
    "boolean": 1,
    "context": "} LocalDateTime ldt = new DateTime(dt).withZone(UTC).toLocalDateTime();println(String + toDateTime().toDate().toString());DateTime cvtldt = <mask><mask><mask><mask><mask><mask>toDateTime(forID(String));println(String + toLocalDateTime().toDateTime().toDate().toString());} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTimeZone.forID()",
    "boolean": 1,
    "context": "} LocalDateTime ldt = new DateTime(dt).withZone(UTC).toLocalDateTime();println(String + toDateTime().toDate().toString());DateTime cvtldt = toDateTime(<mask><mask><mask><mask><mask><mask>forID(String));println(String + toLocalDateTime().toDateTime().toDate().toString());} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime.toLocalDateTime()",
    "boolean": 1,
    "context": "java.lang.System.out.println(String + toDateTime().toDate().toString());DateTime cvtldt = toDateTime(forID(String));println(String + <mask><mask><mask><mask><mask><mask>toLocalDateTime().toDateTime().toDate().toString());} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.Date",
    "boolean": 0,
    "context": "public class JodaTime22 { public static void main(String[] args) { // TODO Auto-generated method stub } public String getDateFromDateTime(<mask><mask><mask>.Date date, Boolean display) throws ParseException { DateTimeFormatter dtFormatter;if (display) { dtFormatter = forPattern(String);} else { dtFormatter = forPattern(String);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.text",
    "truth_type": "java.text",
    "full_FQN": "java.text.ParseException",
    "boolean": 1,
    "context": "public class JodaTime22 { public static void main(String[] args) { // TODO Auto-generated method stub } public String getDateFromDateTime(Date date, Boolean display) throws <mask><mask><mask>.ParseException { DateTimeFormatter dtFormatter;if (display) { dtFormatter = forPattern(String);} else { dtFormatter = forPattern(String);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter",
    "boolean": 1,
    "context": "public class JodaTime22 { public static void main(String[] args) { // TODO Auto-generated method stub } public String getDateFromDateTime(Date date, Boolean display) throws ParseException { <mask><mask><mask><mask><mask><mask><mask><mask>.DateTimeFormatter dtFormatter;if (display) { dtFormatter = forPattern(String);} else { dtFormatter = forPattern(String);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormat.forPattern()",
    "boolean": 1,
    "context": "public class JodaTime22 { public static void main(String[] args) { // TODO Auto-generated method stub } public String getDateFromDateTime(Date date, Boolean display) throws ParseException { DateTimeFormatter dtFormatter;if (display) { dtFormatter = <mask><mask><mask><mask><mask><mask><mask><mask>forPattern(String);} else { dtFormatter = forPattern(String);} DateTime dt = new DateTime(date);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormat.forPattern()",
    "boolean": 1,
    "context": "public class JodaTime22 { public static void main(String[] args) { // TODO Auto-generated method stub } public String getDateFromDateTime(Date date, Boolean display) throws ParseException { DateTimeFormatter dtFormatter;if (display) { dtFormatter = forPattern(String);} else { dtFormatter = <mask><mask><mask><mask><mask><mask><mask><mask>forPattern(String);} DateTime dt = new DateTime(date);String myDate = toString(dtFormatter);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "if (display) { dtFormatter = forPattern(String);} else { dtFormatter = forPattern(String);} <mask><mask><mask><mask><mask><mask>.DateTime dt = new DateTime(date);String myDate = toString(dtFormatter);println((((((String + date) + String) + display) + String) + String) + myDate);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "if (display) { dtFormatter = forPattern(String);} else { dtFormatter = forPattern(String);} DateTime dt = new <mask><mask><mask><mask>DateTime(date);String myDate = toString(dtFormatter);println((((((String + date) + String) + display) + String) + String) + myDate);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime.toString()",
    "boolean": 1,
    "context": "} else { dtFormatter = forPattern(String);} DateTime dt = new DateTime(date);String myDate = <mask><mask><mask><mask><mask><mask>toString(dtFormatter);println((((((String + date) + String) + display) + String) + String) + myDate);return myDate;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.LocalDate",
    "boolean": 1,
    "context": "public class JodaTime23 { <mask><mask><mask><mask><mask><mask>.LocalDate getNearestDayOfWeek(LocalDate ld, String day) { LocalDate target = dayOfWeek().setCopy(day);if  getDayOfWeek() > SATURDAY) { target = plusWeeks(1);} return target;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.LocalDate",
    "boolean": 1,
    "context": "public class JodaTime23 { LocalDate getNearestDayOfWeek(<mask><mask><mask><mask><mask><mask>.LocalDate ld, String day) { LocalDate target = dayOfWeek().setCopy(day);if  getDayOfWeek() > SATURDAY) { target = plusWeeks(1);} return target;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.LocalDate",
    "boolean": 1,
    "context": "public class JodaTime23 { LocalDate getNearestDayOfWeek(LocalDate ld, String day) { <mask><mask><mask><mask><mask><mask>.LocalDate target = dayOfWeek().setCopy(day);if  getDayOfWeek() > SATURDAY) { target = plusWeeks(1);} return target;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.LocalDate.dayOfWeek()",
    "boolean": 1,
    "context": "public class JodaTime23 { LocalDate getNearestDayOfWeek(LocalDate ld, String day) { LocalDate target = <mask><mask><mask><mask><mask><mask>dayOfWeek().setCopy(day);if  getDayOfWeek() > SATURDAY) { target = plusWeeks(1);} return target;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.LocalDate.getDayOfWeek()",
    "boolean": 1,
    "context": "public class JodaTime23 { LocalDate getNearestDayOfWeek(LocalDate ld, String day) { LocalDate target = dayOfWeek().setCopy(day);if  <mask><mask><mask><mask><mask><mask>getDayOfWeek() > SATURDAY) { target = plusWeeks(1);} return target;} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.DateTimeConstants",
    "truth_type": "org.joda.time.DateTimeConstants",
    "full_FQN": "org.joda.time.DateTimeConstants.SATURDAY",
    "boolean": 1,
    "context": "public class JodaTime23 { LocalDate getNearestDayOfWeek(LocalDate ld, String day) { LocalDate target = dayOfWeek().setCopy(day);if  getDayOfWeek() > <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.SATURDAY) { target = plusWeeks(1);} return target;} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.LocalDate.plusWeeks()",
    "boolean": 1,
    "context": "public class JodaTime23 { LocalDate getNearestDayOfWeek(LocalDate ld, String day) { LocalDate target = dayOfWeek().setCopy(day);if  getDayOfWeek() > SATURDAY) { target = <mask><mask><mask><mask><mask><mask>plusWeeks(1);} return target;} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime24 { public static String getFormattedDateDifference(<mask><mask><mask><mask><mask><mask>.DateTime startDate, DateTime endDate) { Period p = new Period(startDate, endDate, standard().withSecondsRemoved().withMillisRemoved());return getDefault().print(p);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime24 { public static String getFormattedDateDifference(DateTime startDate, <mask><mask><mask><mask><mask><mask>.DateTime endDate) { Period p = new Period(startDate, endDate, standard().withSecondsRemoved().withMillisRemoved());return getDefault().print(p);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Period",
    "boolean": 1,
    "context": "public class JodaTime24 { public static String getFormattedDateDifference(DateTime startDate, DateTime endDate) { <mask><mask><mask><mask><mask><mask>.Period p = new Period(startDate, endDate, standard().withSecondsRemoved().withMillisRemoved());return getDefault().print(p);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.Period()",
    "boolean": 1,
    "context": "public class JodaTime24 { public static String getFormattedDateDifference(DateTime startDate, DateTime endDate) { Period p = new <mask><mask><mask><mask>Period(startDate, endDate, standard().withSecondsRemoved().withMillisRemoved());return getDefault().print(p);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.PeriodType.standard()",
    "boolean": 1,
    "context": "public class JodaTime24 { public static String getFormattedDateDifference(DateTime startDate, DateTime endDate) { Period p = new Period(startDate, endDate, <mask><mask><mask><mask><mask><mask>standard().withSecondsRemoved().withMillisRemoved());return getDefault().print(p);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.PeriodFormat.getDefault()",
    "boolean": 1,
    "context": "public class JodaTime24 { public static String getFormattedDateDifference(DateTime startDate, DateTime endDate) { Period p = new Period(startDate, endDate, standard().withSecondsRemoved().withMillisRemoved());return <mask><mask><mask><mask><mask><mask><mask><mask>getDefault().print(p);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.LocalDateTime",
    "boolean": 1,
    "context": "public class JodaTime25 { public static int getDaysBetweenTwoDates(final <mask><mask><mask><mask><mask><mask>.LocalDateTime oldDate, final LocalDateTime newDate) { println(((String + toString()) + String) + newDate);Days days = daysBetween(new DateMidnight toDateTime()), new DateMidnight toDateTime()));println(String + size());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.LocalDateTime",
    "boolean": 1,
    "context": "public class JodaTime25 { public static int getDaysBetweenTwoDates(final LocalDateTime oldDate, final <mask><mask><mask><mask><mask><mask>.LocalDateTime newDate) { println(((String + toString()) + String) + newDate);Days days = daysBetween(new DateMidnight toDateTime()), new DateMidnight toDateTime()));println(String + size());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.LocalDateTime.toString()",
    "boolean": 1,
    "context": "public class JodaTime25 { public static int getDaysBetweenTwoDates(final LocalDateTime oldDate, final LocalDateTime newDate) { println(((String + <mask><mask><mask><mask><mask><mask>toString()) + String) + newDate);Days days = daysBetween(new DateMidnight toDateTime()), new DateMidnight toDateTime()));println(String + size());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Days",
    "boolean": 1,
    "context": "public class JodaTime25 { public static int getDaysBetweenTwoDates(final LocalDateTime oldDate, final LocalDateTime newDate) { println(((String + toString()) + String) + newDate);<mask><mask><mask><mask><mask><mask>.Days days = daysBetween(new DateMidnight toDateTime()), new DateMidnight toDateTime()));println(String + size());return size();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Days.daysBetween()",
    "boolean": 1,
    "context": "public class JodaTime25 { public static int getDaysBetweenTwoDates(final LocalDateTime oldDate, final LocalDateTime newDate) { println(((String + toString()) + String) + newDate);Days days = <mask><mask><mask><mask><mask><mask>daysBetween(new DateMidnight toDateTime()), new DateMidnight toDateTime()));println(String + size());return size();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateMidnight",
    "boolean": 1,
    "context": "public class JodaTime25 { public static int getDaysBetweenTwoDates(final LocalDateTime oldDate, final LocalDateTime newDate) { println(((String + toString()) + String) + newDate);Days days = daysBetween(new <mask><mask><mask><mask><mask><mask>.DateMidnight toDateTime()), new DateMidnight toDateTime()));println(String + size());return size();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.LocalDateTime.toDateTime()",
    "boolean": 1,
    "context": "public class JodaTime25 { public static int getDaysBetweenTwoDates(final LocalDateTime oldDate, final LocalDateTime newDate) { println(((String + toString()) + String) + newDate);Days days = daysBetween(new DateMidnight <mask><mask><mask><mask><mask><mask>toDateTime()), new DateMidnight toDateTime()));println(String + size());return size();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateMidnight",
    "boolean": 1,
    "context": "public class JodaTime25 { public static int getDaysBetweenTwoDates(final LocalDateTime oldDate, final LocalDateTime newDate) { println(((String + toString()) + String) + newDate);Days days = daysBetween(new DateMidnight toDateTime()), new <mask><mask><mask><mask><mask><mask>.DateMidnight toDateTime()));println(String + size());return size();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.LocalDateTime.toDateTime()",
    "boolean": 1,
    "context": "public class JodaTime25 { public static int getDaysBetweenTwoDates(final LocalDateTime oldDate, final LocalDateTime newDate) { println(((String + toString()) + String) + newDate);Days days = daysBetween(new DateMidnight toDateTime()), new DateMidnight <mask><mask><mask><mask><mask><mask>toDateTime()));println(String + size());return size();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Days.size()",
    "boolean": 1,
    "context": "public class JodaTime25 { public static int getDaysBetweenTwoDates(final LocalDateTime oldDate, final LocalDateTime newDate) { println(((String + toString()) + String) + newDate);Days days = daysBetween(new DateMidnight toDateTime()), new DateMidnight toDateTime()));println(String + <mask><mask><mask><mask><mask><mask>size());return size();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Days.size()",
    "boolean": 1,
    "context": "org.joda.time.Days days = daysBetween(new DateMidnight toDateTime()), new DateMidnight toDateTime()));println(String + size());return <mask><mask><mask><mask><mask><mask>size();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Duration",
    "boolean": 1,
    "context": "public class JodaTime26 { public static void main(String[] args) { <mask><mask><mask><mask><mask><mask>.Duration duration = new Duration(1328223198241L - 1326308781131L);Period p2 = new Period getMillis());println getDays());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.Duration()",
    "boolean": 1,
    "context": "public class JodaTime26 { public static void main(String[] args) { Duration duration = new <mask><mask><mask><mask>Duration(1328223198241L - 1326308781131L);Period p2 = new Period getMillis());println getDays());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Period",
    "boolean": 1,
    "context": "public class JodaTime26 { public static void main(String[] args) { Duration duration = new Duration(1328223198241L - 1326308781131L);<mask><mask><mask><mask><mask><mask>.Period p2 = new Period getMillis());println getDays());println getHours());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Period",
    "boolean": 1,
    "context": "public class JodaTime26 { public static void main(String[] args) { Duration duration = new Duration(1328223198241L - 1326308781131L);Period p2 = new <mask><mask><mask><mask><mask><mask>.Period getMillis());println getDays());println getHours());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Duration.getMillis()",
    "boolean": 1,
    "context": "public class JodaTime26 { public static void main(String[] args) { Duration duration = new Duration(1328223198241L - 1326308781131L);Period p2 = new Period <mask><mask><mask><mask><mask><mask>getMillis());println getDays());println getHours());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Period.getDays()",
    "boolean": 1,
    "context": "public class JodaTime26 { public static void main(String[] args) { Duration duration = new Duration(1328223198241L - 1326308781131L);Period p2 = new Period getMillis());println <mask><mask><mask><mask><mask><mask>getDays());println getHours());} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Period.getHours()",
    "boolean": 1,
    "context": "org.joda.time.Period p2 = new Period getMillis());println getDays());println <mask><mask><mask><mask><mask><mask>getHours());} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "public class JodaTime27 { public static void main(String[] args) { <mask><mask><mask>.ArrayList<DateTime> monthStarts = new ArrayList<DateTime>();int firstYear = 0;int lastYear = 0;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime27 { public static void main(String[] args) { ArrayList<<mask><mask><mask><mask><mask><mask>.DateTime> monthStarts = new ArrayList<DateTime>();int firstYear = 0;int lastYear = 0;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "public class JodaTime27 { public static void main(String[] args) { ArrayList<DateTime> monthStarts = new <mask><mask><mask>.ArrayList<DateTime>();int firstYear = 0;int lastYear = 0;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime27 { public static void main(String[] args) { ArrayList<DateTime> monthStarts = new ArrayList<<mask><mask><mask><mask><mask><mask>.DateTime>();int firstYear = 0;int lastYear = 0;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.add()",
    "boolean": 1,
    "context": "int firstYear = 0;int lastYear = 0;for (int y = firstYear; y <= lastYear; y++) { for (int m = 1; m <= 12; m++) { <mask><mask><mask>add(new DateTime(((y + String) + m) + String));} } } };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "int firstYear = 0;int lastYear = 0;for (int y = firstYear; y <= lastYear; y++) { for (int m = 1; m <= 12; m++) { add(new <mask><mask><mask><mask>DateTime(((y + String) + m) + String));} } } };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter",
    "boolean": 1,
    "context": "public class JodaTime28 { public static void main(String[] args) { <mask><mask><mask><mask><mask><mask><mask><mask>.DateTimeFormatter dateFromatter = forPattern(String);DateTime startDate = parseDateTime(String);DateTime endDate = parseDateTime(String);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormat.forPattern()",
    "boolean": 1,
    "context": "public class JodaTime28 { public static void main(String[] args) { DateTimeFormatter dateFromatter = <mask><mask><mask><mask><mask><mask><mask><mask>forPattern(String);DateTime startDate = parseDateTime(String);DateTime endDate = parseDateTime(String);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime28 { public static void main(String[] args) { DateTimeFormatter dateFromatter = forPattern(String);<mask><mask><mask><mask><mask><mask>.DateTime startDate = parseDateTime(String);DateTime endDate = parseDateTime(String);List<LocalDate> dates = new ArrayList<LocalDate>();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter.parseDateTime()",
    "boolean": 1,
    "context": "public class JodaTime28 { public static void main(String[] args) { DateTimeFormatter dateFromatter = forPattern(String);DateTime startDate = <mask><mask><mask><mask><mask><mask><mask><mask>parseDateTime(String);DateTime endDate = parseDateTime(String);List<LocalDate> dates = new ArrayList<LocalDate>();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime28 { public static void main(String[] args) { DateTimeFormatter dateFromatter = forPattern(String);DateTime startDate = parseDateTime(String);<mask><mask><mask><mask><mask><mask>.DateTime endDate = parseDateTime(String);List<LocalDate> dates = new ArrayList<LocalDate>();int days = daysBetween(startDate, endDate).getDays();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter.parseDateTime()",
    "boolean": 1,
    "context": "public class JodaTime28 { public static void main(String[] args) { DateTimeFormatter dateFromatter = forPattern(String);DateTime startDate = parseDateTime(String);DateTime endDate = <mask><mask><mask><mask><mask><mask><mask><mask>parseDateTime(String);List<LocalDate> dates = new ArrayList<LocalDate>();int days = daysBetween(startDate, endDate).getDays();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "org.joda.time.DateTime startDate = parseDateTime(String);DateTime endDate = parseDateTime(String);<mask><mask><mask>.List<LocalDate> dates = new ArrayList<LocalDate>();int days = daysBetween(startDate, endDate).getDays();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.LocalDate",
    "boolean": 1,
    "context": "org.joda.time.DateTime startDate = parseDateTime(String);DateTime endDate = parseDateTime(String);List<<mask><mask><mask><mask><mask><mask>.LocalDate> dates = new ArrayList<LocalDate>();int days = daysBetween(startDate, endDate).getDays();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "org.joda.time.DateTime startDate = parseDateTime(String);DateTime endDate = parseDateTime(String);List<LocalDate> dates = new <mask><mask><mask>.ArrayList<LocalDate>();int days = daysBetween(startDate, endDate).getDays();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.LocalDate",
    "boolean": 1,
    "context": "org.joda.time.DateTime startDate = parseDateTime(String);DateTime endDate = parseDateTime(String);List<LocalDate> dates = new ArrayList<<mask><mask><mask><mask><mask><mask>.LocalDate>();int days = daysBetween(startDate, endDate).getDays();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Days.daysBetween()",
    "boolean": 1,
    "context": "org.joda.time.DateTime endDate = parseDateTime(String);List<LocalDate> dates = new ArrayList<LocalDate>();int days = <mask><mask><mask><mask><mask><mask>daysBetween(startDate, endDate).getDays();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime29 { private static final int FIELD_COUNT = 10;public static void main(String[] args) { } public <mask><mask><mask><mask><mask><mask>.DateTime parseDateTime(final String text) { DateTimeFormatter[] formatters = new DateTimeFormatter[20];if (isEmpty()) { return null;} int field = 0;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter",
    "boolean": 1,
    "context": "public class JodaTime29 { private static final int FIELD_COUNT = 10;public static void main(String[] args) { } public DateTime parseDateTime(final String text) { <mask><mask><mask><mask><mask><mask><mask><mask>.DateTimeFormatter[] formatters = new DateTimeFormatter[20];if (isEmpty()) { return null;} int field = 0;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter",
    "boolean": 1,
    "context": "public class JodaTime29 { private static final int FIELD_COUNT = 10;public static void main(String[] args) { } public DateTime parseDateTime(final String text) { DateTimeFormatter[] formatters = new <mask><mask><mask><mask><mask><mask><mask><mask>.DateTimeFormatter[20];if (isEmpty()) { return null;} int field = 0;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "if (isEmpty()) { return null;} int field = 0;<mask><mask><mask><mask><mask><mask>.DateTime dateTime = null;IllegalArgumentException exception = null;for (; field < FIELD_COUNT; ++field) { if (null != formatters[field]) { try { dateTime = formatters[field].parseDateTime(text);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTimeZone",
    "boolean": 1,
    "context": "public class JodaTime30 { public static void main(String[] args) { <mask><mask><mask><mask><mask><mask>.DateTimeZone dtz = forOffsetHours(0);DateTime dt = new DateTime(dtz);println(dt);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTimeZone.forOffsetHours()",
    "boolean": 1,
    "context": "public class JodaTime30 { public static void main(String[] args) { DateTimeZone dtz = <mask><mask><mask><mask><mask><mask>forOffsetHours(0);DateTime dt = new DateTime(dtz);println(dt);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime30 { public static void main(String[] args) { DateTimeZone dtz = forOffsetHours(0);<mask><mask><mask><mask><mask><mask>.DateTime dt = new DateTime(dtz);println(dt);println toDate());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "public class JodaTime30 { public static void main(String[] args) { DateTimeZone dtz = forOffsetHours(0);DateTime dt = new <mask><mask><mask><mask>DateTime(dtz);println(dt);println toDate());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime.toDate()",
    "boolean": 1,
    "context": "org.joda.time.DateTime dt = new DateTime(dtz);println(dt);println <mask><mask><mask><mask><mask><mask>toDate());} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime31 { public static void main(String[] args) { <mask><mask><mask><mask><mask><mask>.DateTime s = new DateTime(parseLong(String));DateTime e = new DateTime(parseLong(String));Weeks weeks = weeksBetween(s, e).plus(1);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "public class JodaTime31 { public static void main(String[] args) { DateTime s = new <mask><mask><mask><mask>DateTime(parseLong(String));DateTime e = new DateTime(parseLong(String));Weeks weeks = weeksBetween(s, e).plus(1);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime31 { public static void main(String[] args) { DateTime s = new DateTime(parseLong(String));<mask><mask><mask><mask><mask><mask>.DateTime e = new DateTime(parseLong(String));Weeks weeks = weeksBetween(s, e).plus(1);DateTime start = new DateTime(parseLong(String));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "public class JodaTime31 { public static void main(String[] args) { DateTime s = new DateTime(parseLong(String));DateTime e = new <mask><mask><mask><mask>DateTime(parseLong(String));Weeks weeks = weeksBetween(s, e).plus(1);DateTime start = new DateTime(parseLong(String));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Weeks",
    "boolean": 1,
    "context": "public class JodaTime31 { public static void main(String[] args) { DateTime s = new DateTime(parseLong(String));DateTime e = new DateTime(parseLong(String));<mask><mask><mask><mask><mask><mask>.Weeks weeks = weeksBetween(s, e).plus(1);DateTime start = new DateTime(parseLong(String));DateTime end = new DateTime(parseLong(String));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Weeks.weeksBetween()",
    "boolean": 1,
    "context": "public class JodaTime31 { public static void main(String[] args) { DateTime s = new DateTime(parseLong(String));DateTime e = new DateTime(parseLong(String));Weeks weeks = <mask><mask><mask><mask><mask><mask>weeksBetween(s, e).plus(1);DateTime start = new DateTime(parseLong(String));DateTime end = new DateTime(parseLong(String));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "org.joda.time.DateTime e = new DateTime(parseLong(String));Weeks weeks = weeksBetween(s, e).plus(1);<mask><mask><mask><mask><mask><mask>.DateTime start = new DateTime(parseLong(String));DateTime end = new DateTime(parseLong(String));DateTime finalStart = dayOfWeek().withMinimumValue();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "org.joda.time.DateTime e = new DateTime(parseLong(String));Weeks weeks = weeksBetween(s, e).plus(1);DateTime start = new <mask><mask><mask><mask>DateTime(parseLong(String));DateTime end = new DateTime(parseLong(String));DateTime finalStart = dayOfWeek().withMinimumValue();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "org.joda.time.Weeks weeks = weeksBetween(s, e).plus(1);DateTime start = new DateTime(parseLong(String));<mask><mask><mask><mask><mask><mask>.DateTime end = new DateTime(parseLong(String));DateTime finalStart = dayOfWeek().withMinimumValue();DateTime finalEnd = dayOfWeek().withMaximumValue();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "org.joda.time.Weeks weeks = weeksBetween(s, e).plus(1);DateTime start = new DateTime(parseLong(String));DateTime end = new <mask><mask><mask><mask>DateTime(parseLong(String));DateTime finalStart = dayOfWeek().withMinimumValue();DateTime finalEnd = dayOfWeek().withMaximumValue();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "org.joda.time.DateTime start = new DateTime(parseLong(String));DateTime end = new DateTime(parseLong(String));<mask><mask><mask><mask><mask><mask>.DateTime finalStart = dayOfWeek().withMinimumValue();DateTime finalEnd = dayOfWeek().withMaximumValue();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime.dayOfWeek()",
    "boolean": 1,
    "context": "org.joda.time.DateTime start = new DateTime(parseLong(String));DateTime end = new DateTime(parseLong(String));DateTime finalStart = <mask><mask><mask><mask><mask><mask>dayOfWeek().withMinimumValue();DateTime finalEnd = dayOfWeek().withMaximumValue();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "org.joda.time.DateTime end = new DateTime(parseLong(String));DateTime finalStart = dayOfWeek().withMinimumValue();<mask><mask><mask><mask><mask><mask>.DateTime finalEnd = dayOfWeek().withMaximumValue();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime.dayOfWeek()",
    "boolean": 1,
    "context": "org.joda.time.DateTime end = new DateTime(parseLong(String));DateTime finalStart = dayOfWeek().withMinimumValue();DateTime finalEnd = <mask><mask><mask><mask><mask><mask>dayOfWeek().withMaximumValue();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter",
    "boolean": 1,
    "context": "public class JodaTime32 { public static void main(String[] args) { <mask><mask><mask><mask><mask><mask><mask><mask>.DateTimeFormatter dtf = null;final DateTime date1 = parseDateTime(String);final DateTime date2 = parseDateTime(String);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime32 { public static void main(String[] args) { DateTimeFormatter dtf = null;final <mask><mask><mask><mask><mask><mask>.DateTime date1 = parseDateTime(String);final DateTime date2 = parseDateTime(String);final DateTime date3 = parseDateTime(String);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter.parseDateTime()",
    "boolean": 1,
    "context": "public class JodaTime32 { public static void main(String[] args) { DateTimeFormatter dtf = null;final DateTime date1 = <mask><mask><mask><mask><mask><mask><mask><mask>parseDateTime(String);final DateTime date2 = parseDateTime(String);final DateTime date3 = parseDateTime(String);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime32 { public static void main(String[] args) { DateTimeFormatter dtf = null;final DateTime date1 = parseDateTime(String);final <mask><mask><mask><mask><mask><mask>.DateTime date2 = parseDateTime(String);final DateTime date3 = parseDateTime(String);final DateTime date4 = parseDateTime(String);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter.parseDateTime()",
    "boolean": 1,
    "context": "public class JodaTime32 { public static void main(String[] args) { DateTimeFormatter dtf = null;final DateTime date1 = parseDateTime(String);final DateTime date2 = <mask><mask><mask><mask><mask><mask><mask><mask>parseDateTime(String);final DateTime date3 = parseDateTime(String);final DateTime date4 = parseDateTime(String);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "final DateTime date1 = parseDateTime(String);final DateTime date2 = parseDateTime(String);final <mask><mask><mask><mask><mask><mask>.DateTime date3 = parseDateTime(String);final DateTime date4 = parseDateTime(String);println toString());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter.parseDateTime()",
    "boolean": 1,
    "context": "final DateTime date1 = parseDateTime(String);final DateTime date2 = parseDateTime(String);final DateTime date3 = <mask><mask><mask><mask><mask><mask><mask><mask>parseDateTime(String);final DateTime date4 = parseDateTime(String);println toString());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "final DateTime date2 = parseDateTime(String);final DateTime date3 = parseDateTime(String);final <mask><mask><mask><mask><mask><mask>.DateTime date4 = parseDateTime(String);println toString());println toString());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter.parseDateTime()",
    "boolean": 1,
    "context": "final DateTime date2 = parseDateTime(String);final DateTime date3 = parseDateTime(String);final DateTime date4 = <mask><mask><mask><mask><mask><mask><mask><mask>parseDateTime(String);println toString());println toString());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime.toString()",
    "boolean": 1,
    "context": "final DateTime date3 = parseDateTime(String);final DateTime date4 = parseDateTime(String);println <mask><mask><mask><mask><mask><mask>toString());println toString());println toString());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime.toString()",
    "boolean": 1,
    "context": "final DateTime date4 = parseDateTime(String);println toString());println <mask><mask><mask><mask><mask><mask>toString());println toString());println toString());"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime.toString()",
    "boolean": 1,
    "context": "java.lang.System.err.println toString());println toString());println <mask><mask><mask><mask><mask><mask>toString());println toString());} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime.toString()",
    "boolean": 1,
    "context": "java.lang.System.err.println toString());println toString());println <mask><mask><mask><mask><mask><mask>toString());} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.PeriodFormatter",
    "boolean": 1,
    "context": "public class JodaTime33 { public static void main(String[] args) { <mask><mask><mask><mask><mask><mask><mask><mask>.PeriodFormatter hoursMinutesSeconds = new PeriodFormatterBuilder().appendHours().appendSuffix(String, String).appendSeparator(String, String).appendMinutes().appendSuffix(String, String).appendSeparator(String).printZeroRarelyFirst().appendSeconds().appendSuffix(String, String).toFormatter();println print(new Period(0, 0, 0, 500)));} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.format.PeriodFormatterBuilder()",
    "boolean": 1,
    "context": "public class JodaTime33 { public static void main(String[] args) { PeriodFormatter hoursMinutesSeconds = new <mask><mask><mask><mask><mask><mask>PeriodFormatterBuilder().appendHours().appendSuffix(String, String).appendSeparator(String, String).appendMinutes().appendSuffix(String, String).appendSeparator(String).printZeroRarelyFirst().appendSeconds().appendSuffix(String, String).toFormatter();println print(new Period(0, 0, 0, 500)));} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.PeriodFormatter.print()",
    "boolean": 1,
    "context": "public class JodaTime33 { public static void main(String[] args) { PeriodFormatter hoursMinutesSeconds = new PeriodFormatterBuilder().appendHours().appendSuffix(String, String).appendSeparator(String, String).appendMinutes().appendSuffix(String, String).appendSeparator(String).printZeroRarelyFirst().appendSeconds().appendSuffix(String, String).toFormatter();println <mask><mask><mask><mask><mask><mask><mask><mask>print(new Period(0, 0, 0, 500)));} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.Period()",
    "boolean": 1,
    "context": "public class JodaTime33 { public static void main(String[] args) { PeriodFormatter hoursMinutesSeconds = new PeriodFormatterBuilder().appendHours().appendSuffix(String, String).appendSeparator(String, String).appendMinutes().appendSuffix(String, String).appendSeparator(String).printZeroRarelyFirst().appendSeconds().appendSuffix(String, String).toFormatter();println print(new <mask><mask><mask><mask>Period(0, 0, 0, 500)));} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Locale.setDefault()",
    "boolean": 1,
    "context": "public class JodaTime34 { public static void main(String[] args) { // TODO Auto-generated method stub <mask><mask><mask>setDefault(GERMAN);final PeriodFormatter periodFormatter = wordBased(ENGLISH);final Period period = new Period(6, 5, 4, 3);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util.Locale",
    "truth_type": "java.util.Locale",
    "full_FQN": "java.util.Locale.GERMAN",
    "boolean": 1,
    "context": "public class JodaTime34 { public static void main(String[] args) { // TODO Auto-generated method stub setDefault(<mask><mask><mask><mask><mask><mask>.GERMAN);final PeriodFormatter periodFormatter = wordBased(ENGLISH);final Period period = new Period(6, 5, 4, 3);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.PeriodFormatter",
    "boolean": 1,
    "context": "public class JodaTime34 { public static void main(String[] args) { // TODO Auto-generated method stub setDefault(GERMAN);final <mask><mask><mask><mask><mask><mask><mask><mask>.PeriodFormatter periodFormatter = wordBased(ENGLISH);final Period period = new Period(6, 5, 4, 3);final String s = toString(periodFormatter);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.PeriodFormat.wordBased()",
    "boolean": 1,
    "context": "public class JodaTime34 { public static void main(String[] args) { // TODO Auto-generated method stub setDefault(GERMAN);final PeriodFormatter periodFormatter = <mask><mask><mask><mask><mask><mask><mask><mask>wordBased(ENGLISH);final Period period = new Period(6, 5, 4, 3);final String s = toString(periodFormatter);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util.Locale",
    "truth_type": "java.util.Locale",
    "full_FQN": "java.util.Locale.ENGLISH",
    "boolean": 1,
    "context": "public class JodaTime34 { public static void main(String[] args) { // TODO Auto-generated method stub setDefault(GERMAN);final PeriodFormatter periodFormatter = wordBased(<mask><mask><mask><mask><mask><mask>.ENGLISH);final Period period = new Period(6, 5, 4, 3);final String s = toString(periodFormatter);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Period",
    "boolean": 1,
    "context": "public class JodaTime34 { public static void main(String[] args) { // TODO Auto-generated method stub setDefault(GERMAN);final PeriodFormatter periodFormatter = wordBased(ENGLISH);final <mask><mask><mask><mask><mask><mask>.Period period = new Period(6, 5, 4, 3);final String s = toString(periodFormatter);println(String + s);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.Period()",
    "boolean": 1,
    "context": "public class JodaTime34 { public static void main(String[] args) { // TODO Auto-generated method stub setDefault(GERMAN);final PeriodFormatter periodFormatter = wordBased(ENGLISH);final Period period = new <mask><mask><mask><mask>Period(6, 5, 4, 3);final String s = toString(periodFormatter);println(String + s);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Period.toString()",
    "boolean": 1,
    "context": "final PeriodFormatter periodFormatter = wordBased(ENGLISH);final Period period = new Period(6, 5, 4, 3);final String s = <mask><mask><mask><mask><mask><mask>toString(periodFormatter);println(String + s);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.PeriodFormatter",
    "boolean": 1,
    "context": "public class JodaTime35 { private static final <mask><mask><mask><mask><mask><mask><mask><mask>.PeriodFormatter DURATION_FORMATTER = new PeriodFormatterBuilder().appendYears().appendSuffix(String, String).appendSeparator(String).appendMonths().appendSuffix(String, String).appendSeparator(String).appendDays().appendSuffix(String, String).appendSeparator(String).appendHours().appendSuffix(String, String).appendSeparator(String).appendMinutes().appendSuffix(String, String).appendSeparator(String).appendSeconds().appendSuffix(String, String).toFormatter();public static String format(Date start) { StringBuffer result = new StringBuffer();printTo(result, ((ReadablePeriod) (new Period(new DateTime(start), new DateTime()))));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.format.PeriodFormatterBuilder()",
    "boolean": 1,
    "context": "public class JodaTime35 { private static final PeriodFormatter DURATION_FORMATTER = new <mask><mask><mask><mask><mask><mask>PeriodFormatterBuilder().appendYears().appendSuffix(String, String).appendSeparator(String).appendMonths().appendSuffix(String, String).appendSeparator(String).appendDays().appendSuffix(String, String).appendSeparator(String).appendHours().appendSuffix(String, String).appendSeparator(String).appendMinutes().appendSuffix(String, String).appendSeparator(String).appendSeconds().appendSuffix(String, String).toFormatter();public static String format(Date start) { StringBuffer result = new StringBuffer();printTo(result, ((ReadablePeriod) (new Period(new DateTime(start), new DateTime()))));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.Date",
    "boolean": 0,
    "context": "public class JodaTime35 { private static final PeriodFormatter DURATION_FORMATTER = new PeriodFormatterBuilder().appendYears().appendSuffix(String, String).appendSeparator(String).appendMonths().appendSuffix(String, String).appendSeparator(String).appendDays().appendSuffix(String, String).appendSeparator(String).appendHours().appendSuffix(String, String).appendSeparator(String).appendMinutes().appendSuffix(String, String).appendSeparator(String).appendSeconds().appendSuffix(String, String).toFormatter();public static String format(<mask><mask><mask>.Date start) { StringBuffer result = new StringBuffer();printTo(result, ((ReadablePeriod) (new Period(new DateTime(start), new DateTime()))));return toString();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.ReadablePeriod",
    "boolean": 1,
    "context": "public class JodaTime35 { private static final PeriodFormatter DURATION_FORMATTER = new PeriodFormatterBuilder().appendYears().appendSuffix(String, String).appendSeparator(String).appendMonths().appendSuffix(String, String).appendSeparator(String).appendDays().appendSuffix(String, String).appendSeparator(String).appendHours().appendSuffix(String, String).appendSeparator(String).appendMinutes().appendSuffix(String, String).appendSeparator(String).appendSeconds().appendSuffix(String, String).toFormatter();public static String format(Date start) { StringBuffer result = new StringBuffer();printTo(result, ((<mask><mask><mask><mask><mask><mask>.ReadablePeriod) (new Period(new DateTime(start), new DateTime()))));return toString();} public static String format(Date start, Date end) { StringBuffer result = new StringBuffer();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.Period()",
    "boolean": 1,
    "context": "public class JodaTime35 { private static final PeriodFormatter DURATION_FORMATTER = new PeriodFormatterBuilder().appendYears().appendSuffix(String, String).appendSeparator(String).appendMonths().appendSuffix(String, String).appendSeparator(String).appendDays().appendSuffix(String, String).appendSeparator(String).appendHours().appendSuffix(String, String).appendSeparator(String).appendMinutes().appendSuffix(String, String).appendSeparator(String).appendSeconds().appendSuffix(String, String).toFormatter();public static String format(Date start) { StringBuffer result = new StringBuffer();printTo(result, ((ReadablePeriod) (new <mask><mask><mask><mask>Period(new DateTime(start), new DateTime()))));return toString();} public static String format(Date start, Date end) { StringBuffer result = new StringBuffer();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "public class JodaTime35 { private static final PeriodFormatter DURATION_FORMATTER = new PeriodFormatterBuilder().appendYears().appendSuffix(String, String).appendSeparator(String).appendMonths().appendSuffix(String, String).appendSeparator(String).appendDays().appendSuffix(String, String).appendSeparator(String).appendHours().appendSuffix(String, String).appendSeparator(String).appendMinutes().appendSuffix(String, String).appendSeparator(String).appendSeconds().appendSuffix(String, String).toFormatter();public static String format(Date start) { StringBuffer result = new StringBuffer();printTo(result, ((ReadablePeriod) (new Period(new <mask><mask><mask><mask>DateTime(start), new DateTime()))));return toString();} public static String format(Date start, Date end) { StringBuffer result = new StringBuffer();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "public class JodaTime35 { private static final PeriodFormatter DURATION_FORMATTER = new PeriodFormatterBuilder().appendYears().appendSuffix(String, String).appendSeparator(String).appendMonths().appendSuffix(String, String).appendSeparator(String).appendDays().appendSuffix(String, String).appendSeparator(String).appendHours().appendSuffix(String, String).appendSeparator(String).appendMinutes().appendSuffix(String, String).appendSeparator(String).appendSeconds().appendSuffix(String, String).toFormatter();public static String format(Date start) { StringBuffer result = new StringBuffer();printTo(result, ((ReadablePeriod) (new Period(new DateTime(start), new <mask><mask><mask><mask>DateTime()))));return toString();} public static String format(Date start, Date end) { StringBuffer result = new StringBuffer();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.sql",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.Date",
    "boolean": 1,
    "context": "printTo(result, ((ReadablePeriod) (new Period(new DateTime(start), new DateTime()))));return toString();} public static String format(<mask><mask><mask>.Date start, Date end) { StringBuffer result = new StringBuffer();printTo(result, new Period(new DateTime(start), end == null ? new DateTime() : new DateTime(end)));return toString();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.sql",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.Date",
    "boolean": 1,
    "context": "printTo(result, ((ReadablePeriod) (new Period(new DateTime(start), new DateTime()))));return toString();} public static String format(Date start, <mask><mask><mask>.Date end) { StringBuffer result = new StringBuffer();printTo(result, new Period(new DateTime(start), end == null ? new DateTime() : new DateTime(end)));return toString();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.Period()",
    "boolean": 1,
    "context": "return toString();} public static String format(Date start, Date end) { StringBuffer result = new StringBuffer();printTo(result, new <mask><mask><mask><mask>Period(new DateTime(start), end == null ? new DateTime() : new DateTime(end)));return toString();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "return toString();} public static String format(Date start, Date end) { StringBuffer result = new StringBuffer();printTo(result, new Period(new <mask><mask><mask><mask>DateTime(start), end == null ? new DateTime() : new DateTime(end)));return toString();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "return toString();} public static String format(Date start, Date end) { StringBuffer result = new StringBuffer();printTo(result, new Period(new DateTime(start), end == null ? new <mask><mask><mask><mask>DateTime() : new DateTime(end)));return toString();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "return toString();} public static String format(Date start, Date end) { StringBuffer result = new StringBuffer();printTo(result, new Period(new DateTime(start), end == null ? new DateTime() : new <mask><mask><mask><mask>DateTime(end)));return toString();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.PeriodFormatter",
    "boolean": 1,
    "context": "public class JodaTime36 { public static void main(String[] args) { <mask><mask><mask><mask><mask><mask><mask><mask>.PeriodFormatter pf = new PeriodFormatterBuilder().append(standard()).toFormatter();Period period = parsePeriod(String);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.format.PeriodFormatterBuilder()",
    "boolean": 1,
    "context": "public class JodaTime36 { public static void main(String[] args) { PeriodFormatter pf = new <mask><mask><mask><mask><mask><mask>PeriodFormatterBuilder().append(standard()).toFormatter();Period period = parsePeriod(String);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.ISOPeriodFormat.standard()",
    "boolean": 1,
    "context": "public class JodaTime36 { public static void main(String[] args) { PeriodFormatter pf = new PeriodFormatterBuilder().append(<mask><mask><mask><mask><mask><mask><mask><mask>standard()).toFormatter();Period period = parsePeriod(String);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Period",
    "boolean": 1,
    "context": "public class JodaTime36 { public static void main(String[] args) { PeriodFormatter pf = new PeriodFormatterBuilder().append(standard()).toFormatter();<mask><mask><mask><mask><mask><mask>.Period period = parsePeriod(String);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.PeriodFormatter.parsePeriod()",
    "boolean": 1,
    "context": "public class JodaTime36 { public static void main(String[] args) { PeriodFormatter pf = new PeriodFormatterBuilder().append(standard()).toFormatter();Period period = <mask><mask><mask><mask><mask><mask><mask><mask>parsePeriod(String);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTimeZone",
    "boolean": 1,
    "context": "public class JodaTime37 { public static void main(String[] args) { <mask><mask><mask><mask><mask><mask>.DateTimeZone BRAZIL = forID(String);DateTime start = new DateTime(2013, 10, 20, 5, 0, 0, BRAZIL);DateTime end = new DateTime(2013, 10, 21, 13, 0, 0, BRAZIL);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTimeZone.forID()",
    "boolean": 1,
    "context": "public class JodaTime37 { public static void main(String[] args) { DateTimeZone BRAZIL = <mask><mask><mask><mask><mask><mask>forID(String);DateTime start = new DateTime(2013, 10, 20, 5, 0, 0, BRAZIL);DateTime end = new DateTime(2013, 10, 21, 13, 0, 0, BRAZIL);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime37 { public static void main(String[] args) { DateTimeZone BRAZIL = forID(String);<mask><mask><mask><mask><mask><mask>.DateTime start = new DateTime(2013, 10, 20, 5, 0, 0, BRAZIL);DateTime end = new DateTime(2013, 10, 21, 13, 0, 0, BRAZIL);println(getDaysBetween(start, end));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "public class JodaTime37 { public static void main(String[] args) { DateTimeZone BRAZIL = forID(String);DateTime start = new <mask><mask><mask><mask>DateTime(2013, 10, 20, 5, 0, 0, BRAZIL);DateTime end = new DateTime(2013, 10, 21, 13, 0, 0, BRAZIL);println(getDaysBetween(start, end));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime37 { public static void main(String[] args) { DateTimeZone BRAZIL = forID(String);DateTime start = new DateTime(2013, 10, 20, 5, 0, 0, BRAZIL);<mask><mask><mask><mask><mask><mask>.DateTime end = new DateTime(2013, 10, 21, 13, 0, 0, BRAZIL);println(getDaysBetween(start, end));} public static int getDaysBetween(DateTime earlier, DateTime later) { return ((int) (toDays getMillis() - getMillis())));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "public class JodaTime37 { public static void main(String[] args) { DateTimeZone BRAZIL = forID(String);DateTime start = new DateTime(2013, 10, 20, 5, 0, 0, BRAZIL);DateTime end = new <mask><mask><mask><mask>DateTime(2013, 10, 21, 13, 0, 0, BRAZIL);println(getDaysBetween(start, end));} public static int getDaysBetween(DateTime earlier, DateTime later) { return ((int) (toDays getMillis() - getMillis())));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "org.joda.time.DateTime end = new DateTime(2013, 10, 21, 13, 0, 0, BRAZIL);println(getDaysBetween(start, end));} public static int getDaysBetween(<mask><mask><mask><mask><mask><mask>.DateTime earlier, DateTime later) { return ((int) (toDays getMillis() - getMillis())));} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "org.joda.time.DateTime end = new DateTime(2013, 10, 21, 13, 0, 0, BRAZIL);println(getDaysBetween(start, end));} public static int getDaysBetween(DateTime earlier, <mask><mask><mask><mask><mask><mask>.DateTime later) { return ((int) (toDays getMillis() - getMillis())));} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.cono.NANyear.Dayster",
    "truth_type": "java.util.concurrent.TimeUnit.MILLISECONDS",
    "full_FQN": "java.util.concurrent.TimeUnit.MILLISECONDS.toDays",
    "boolean": 0,
    "context": "org.joda.time.DateTime end = new DateTime(2013, 10, 21, 13, 0, 0, BRAZIL);println(getDaysBetween(start, end));} public static int getDaysBetween(DateTime earlier, DateTime later) { return ((int) (<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.toDays getMillis() - getMillis())));} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime.getMillis()",
    "boolean": 1,
    "context": "org.joda.time.DateTime end = new DateTime(2013, 10, 21, 13, 0, 0, BRAZIL);println(getDaysBetween(start, end));} public static int getDaysBetween(DateTime earlier, DateTime later) { return ((int) (toDays <mask><mask><mask><mask><mask><mask>getMillis() - getMillis())));} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime.getMillis()",
    "boolean": 1,
    "context": "org.joda.time.DateTime end = new DateTime(2013, 10, 21, 13, 0, 0, BRAZIL);println(getDaysBetween(start, end));} public static int getDaysBetween(DateTime earlier, DateTime later) { return ((int) (toDays getMillis() - <mask><mask><mask><mask><mask><mask>getMillis())));} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter",
    "boolean": 1,
    "context": "public class JodaTime38 { public static void main(String[] args) { String dateTime = String;<mask><mask><mask><mask><mask><mask><mask><mask>.DateTimeFormatter dtf = forPattern(String);DateTime jodatime = parseDateTime(dateTime);DateTimeFormatter dtfOut = forPattern(String);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormat.forPattern()",
    "boolean": 1,
    "context": "public class JodaTime38 { public static void main(String[] args) { String dateTime = String;DateTimeFormatter dtf = <mask><mask><mask><mask><mask><mask><mask><mask>forPattern(String);DateTime jodatime = parseDateTime(dateTime);DateTimeFormatter dtfOut = forPattern(String);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime38 { public static void main(String[] args) { String dateTime = String;DateTimeFormatter dtf = forPattern(String);<mask><mask><mask><mask><mask><mask>.DateTime jodatime = parseDateTime(dateTime);DateTimeFormatter dtfOut = forPattern(String);println print(jodatime));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter.parseDateTime()",
    "boolean": 1,
    "context": "public class JodaTime38 { public static void main(String[] args) { String dateTime = String;DateTimeFormatter dtf = forPattern(String);DateTime jodatime = <mask><mask><mask><mask><mask><mask><mask><mask>parseDateTime(dateTime);DateTimeFormatter dtfOut = forPattern(String);println print(jodatime));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter",
    "boolean": 1,
    "context": "org.joda.time.format.DateTimeFormatter dtf = forPattern(String);DateTime jodatime = parseDateTime(dateTime);<mask><mask><mask><mask><mask><mask><mask><mask>.DateTimeFormatter dtfOut = forPattern(String);println print(jodatime));} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormat.forPattern()",
    "boolean": 1,
    "context": "org.joda.time.format.DateTimeFormatter dtf = forPattern(String);DateTime jodatime = parseDateTime(dateTime);DateTimeFormatter dtfOut = <mask><mask><mask><mask><mask><mask><mask><mask>forPattern(String);println print(jodatime));} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter.print()",
    "boolean": 1,
    "context": "org.joda.time.DateTime jodatime = parseDateTime(dateTime);DateTimeFormatter dtfOut = forPattern(String);println <mask><mask><mask><mask><mask><mask><mask><mask>print(jodatime));} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime39 { public static void main(String[] args) { <mask><mask><mask><mask><mask><mask>.DateTime d1 = new DateTime();DateTime d2 = new DateTime();long diffInMillis = getMillis() - getMillis();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "public class JodaTime39 { public static void main(String[] args) { DateTime d1 = new <mask><mask><mask><mask>DateTime();DateTime d2 = new DateTime();long diffInMillis = getMillis() - getMillis();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime39 { public static void main(String[] args) { DateTime d1 = new DateTime();<mask><mask><mask><mask><mask><mask>.DateTime d2 = new DateTime();long diffInMillis = getMillis() - getMillis();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "public class JodaTime39 { public static void main(String[] args) { DateTime d1 = new DateTime();DateTime d2 = new <mask><mask><mask><mask>DateTime();long diffInMillis = getMillis() - getMillis();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime.getMillis()",
    "boolean": 1,
    "context": "public class JodaTime39 { public static void main(String[] args) { DateTime d1 = new DateTime();DateTime d2 = new DateTime();long diffInMillis = <mask><mask><mask><mask><mask><mask>getMillis() - getMillis();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime.getMillis()",
    "boolean": 1,
    "context": "public class JodaTime39 { public static void main(String[] args) { DateTime d1 = new DateTime();DateTime d2 = new DateTime();long diffInMillis = getMillis() - <mask><mask><mask><mask><mask><mask>getMillis();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.sql",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.Date",
    "boolean": 1,
    "context": "public class JodaTime40 { public static void main(String[] args) { @SuppressWarnings(String) <mask><mask><mask>.Date past = new Date(110, 5, 20);Date today = new Date(110, 6, 24);int days = daysBetween(new DateTime(past), new DateTime(today)).getDays();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.sql",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.Date()",
    "boolean": 1,
    "context": "public class JodaTime40 { public static void main(String[] args) { @SuppressWarnings(String) Date past = new <mask><mask><mask>.Date(110, 5, 20);Date today = new Date(110, 6, 24);int days = daysBetween(new DateTime(past), new DateTime(today)).getDays();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.sql",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.Date",
    "boolean": 1,
    "context": "public class JodaTime40 { public static void main(String[] args) { @SuppressWarnings(String) Date past = new Date(110, 5, 20);<mask><mask><mask>.Date today = new Date(110, 6, 24);int days = daysBetween(new DateTime(past), new DateTime(today)).getDays();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.sql",
    "truth_type": "java.sql",
    "full_FQN": "java.sql.Date()",
    "boolean": 1,
    "context": "public class JodaTime40 { public static void main(String[] args) { @SuppressWarnings(String) Date past = new Date(110, 5, 20);Date today = new <mask><mask><mask>.Date(110, 6, 24);int days = daysBetween(new DateTime(past), new DateTime(today)).getDays();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Days.daysBetween()",
    "boolean": 1,
    "context": "public class JodaTime40 { public static void main(String[] args) { @SuppressWarnings(String) Date past = new Date(110, 5, 20);Date today = new Date(110, 6, 24);int days = <mask><mask><mask><mask><mask><mask>daysBetween(new DateTime(past), new DateTime(today)).getDays();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "public class JodaTime40 { public static void main(String[] args) { @SuppressWarnings(String) Date past = new Date(110, 5, 20);Date today = new Date(110, 6, 24);int days = daysBetween(new <mask><mask><mask><mask>DateTime(past), new DateTime(today)).getDays();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "public class JodaTime40 { public static void main(String[] args) { @SuppressWarnings(String) Date past = new Date(110, 5, 20);Date today = new Date(110, 6, 24);int days = daysBetween(new DateTime(past), new <mask><mask><mask><mask>DateTime(today)).getDays();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime41 { public static void main(String[] args) { <mask><mask><mask><mask><mask><mask>.DateTime dt4 = new DateTime(String);println(String + dt4);DateTimeFormatter fmt = forPattern(String);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "public class JodaTime41 { public static void main(String[] args) { DateTime dt4 = new <mask><mask><mask><mask>DateTime(String);println(String + dt4);DateTimeFormatter fmt = forPattern(String);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter",
    "boolean": 1,
    "context": "public class JodaTime41 { public static void main(String[] args) { DateTime dt4 = new DateTime(String);println(String + dt4);<mask><mask><mask><mask><mask><mask><mask><mask>.DateTimeFormatter fmt = forPattern(String);println(String + print(dt4));DateTime previousDay = minusDays(1);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormat.forPattern()",
    "boolean": 1,
    "context": "public class JodaTime41 { public static void main(String[] args) { DateTime dt4 = new DateTime(String);println(String + dt4);DateTimeFormatter fmt = <mask><mask><mask><mask><mask><mask><mask><mask>forPattern(String);println(String + print(dt4));DateTime previousDay = minusDays(1);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter.print()",
    "boolean": 1,
    "context": "java.lang.System.out.println(String + dt4);DateTimeFormatter fmt = forPattern(String);println(String + <mask><mask><mask><mask><mask><mask><mask><mask>print(dt4));DateTime previousDay = minusDays(1);println(String + previousDay);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "org.joda.time.format.DateTimeFormatter fmt = forPattern(String);println(String + print(dt4));<mask><mask><mask><mask><mask><mask>.DateTime previousDay = minusDays(1);println(String + previousDay);println(String + print(previousDay));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime.minusDays()",
    "boolean": 1,
    "context": "org.joda.time.format.DateTimeFormatter fmt = forPattern(String);println(String + print(dt4));DateTime previousDay = <mask><mask><mask><mask><mask><mask>minusDays(1);println(String + previousDay);println(String + print(previousDay));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter.print()",
    "boolean": 1,
    "context": "org.joda.time.DateTime previousDay = minusDays(1);println(String + previousDay);println(String + <mask><mask><mask><mask><mask><mask><mask><mask>print(previousDay));} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.LocalDate",
    "boolean": 1,
    "context": "public static final int FIRST_OF_THE_MONTH = 1;public final int getLastDayOfMonth(final int month, final int year) { int lastDay = 0;if ((month >= JANUARY) && (month <= DECEMBER)) { <mask><mask><mask><mask><mask><mask>.LocalDate aDate = new LocalDate(year, month, FIRST_OF_THE_MONTH);lastDay = dayOfMonth().getMaximumValue();} return lastDay;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.LocalDate()",
    "boolean": 1,
    "context": "public static final int FIRST_OF_THE_MONTH = 1;public final int getLastDayOfMonth(final int month, final int year) { int lastDay = 0;if ((month >= JANUARY) && (month <= DECEMBER)) { LocalDate aDate = new <mask><mask><mask><mask>LocalDate(year, month, FIRST_OF_THE_MONTH);lastDay = dayOfMonth().getMaximumValue();} return lastDay;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.LocalDate.dayOfMonth()",
    "boolean": 1,
    "context": "public final int getLastDayOfMonth(final int month, final int year) { int lastDay = 0;if ((month >= JANUARY) && (month <= DECEMBER)) { LocalDate aDate = new LocalDate(year, month, FIRST_OF_THE_MONTH);lastDay = <mask><mask><mask><mask><mask><mask>dayOfMonth().getMaximumValue();} return lastDay;} public static void main(String[] args) { } };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeParser",
    "boolean": 1,
    "context": "public class JodaTime43 { public static void main(String[] args) { <mask><mask><mask><mask><mask><mask><mask><mask>.DateTimeParser[] parsers = new DateTimeParser[]{ forPattern(String).getParser(), forPattern(String).getParser() };DateTimeFormatter formatter = new DateTimeFormatterBuilder().append(null, parsers).toFormatter();DateTime date1 = parseDateTime(String);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeParser",
    "boolean": 1,
    "context": "public class JodaTime43 { public static void main(String[] args) { DateTimeParser[] parsers = new <mask><mask><mask><mask><mask><mask><mask><mask>.DateTimeParser[]{ forPattern(String).getParser(), forPattern(String).getParser() };DateTimeFormatter formatter = new DateTimeFormatterBuilder().append(null, parsers).toFormatter();DateTime date1 = parseDateTime(String);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormat.forPattern()",
    "boolean": 1,
    "context": "public class JodaTime43 { public static void main(String[] args) { DateTimeParser[] parsers = new DateTimeParser[]{ <mask><mask><mask><mask><mask><mask><mask><mask>forPattern(String).getParser(), forPattern(String).getParser() };DateTimeFormatter formatter = new DateTimeFormatterBuilder().append(null, parsers).toFormatter();DateTime date1 = parseDateTime(String);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormat.forPattern()",
    "boolean": 1,
    "context": "public class JodaTime43 { public static void main(String[] args) { DateTimeParser[] parsers = new DateTimeParser[]{ forPattern(String).getParser(), <mask><mask><mask><mask><mask><mask><mask><mask>forPattern(String).getParser() };DateTimeFormatter formatter = new DateTimeFormatterBuilder().append(null, parsers).toFormatter();DateTime date1 = parseDateTime(String);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter",
    "boolean": 1,
    "context": "public class JodaTime43 { public static void main(String[] args) { DateTimeParser[] parsers = new DateTimeParser[]{ forPattern(String).getParser(), forPattern(String).getParser() };<mask><mask><mask><mask><mask><mask><mask><mask>.DateTimeFormatter formatter = new DateTimeFormatterBuilder().append(null, parsers).toFormatter();DateTime date1 = parseDateTime(String);DateTime date2 = parseDateTime(String);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.format.DateTimeFormatterBuilder()",
    "boolean": 1,
    "context": "public class JodaTime43 { public static void main(String[] args) { DateTimeParser[] parsers = new DateTimeParser[]{ forPattern(String).getParser(), forPattern(String).getParser() };DateTimeFormatter formatter = new <mask><mask><mask><mask><mask><mask>DateTimeFormatterBuilder().append(null, parsers).toFormatter();DateTime date1 = parseDateTime(String);DateTime date2 = parseDateTime(String);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime43 { public static void main(String[] args) { DateTimeParser[] parsers = new DateTimeParser[]{ forPattern(String).getParser(), forPattern(String).getParser() };DateTimeFormatter formatter = new DateTimeFormatterBuilder().append(null, parsers).toFormatter();<mask><mask><mask><mask><mask><mask>.DateTime date1 = parseDateTime(String);DateTime date2 = parseDateTime(String);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter.parseDateTime()",
    "boolean": 1,
    "context": "public class JodaTime43 { public static void main(String[] args) { DateTimeParser[] parsers = new DateTimeParser[]{ forPattern(String).getParser(), forPattern(String).getParser() };DateTimeFormatter formatter = new DateTimeFormatterBuilder().append(null, parsers).toFormatter();DateTime date1 = <mask><mask><mask><mask><mask><mask><mask><mask>parseDateTime(String);DateTime date2 = parseDateTime(String);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "org.joda.time.format.DateTimeFormatter formatter = new DateTimeFormatterBuilder().append(null, parsers).toFormatter();DateTime date1 = parseDateTime(String);<mask><mask><mask><mask><mask><mask>.DateTime date2 = parseDateTime(String);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter.parseDateTime()",
    "boolean": 1,
    "context": "org.joda.time.format.DateTimeFormatter formatter = new DateTimeFormatterBuilder().append(null, parsers).toFormatter();DateTime date1 = parseDateTime(String);DateTime date2 = <mask><mask><mask><mask><mask><mask><mask><mask>parseDateTime(String);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.PeriodFormatter",
    "boolean": 1,
    "context": "public class JodaTime44 { public static void main(String[] args) { <mask><mask><mask><mask><mask><mask><mask><mask>.PeriodFormatter daysHoursMinutes = new PeriodFormatterBuilder().appendDays().appendSuffix(String, String).appendSeparator(String).appendMinutes().appendSuffix(String, String).appendSeparator(String).appendSeconds().appendSuffix(String, String).toFormatter();Period period = new Period(72, 24, 12, 0);println print(period));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.format.PeriodFormatterBuilder()",
    "boolean": 1,
    "context": "public class JodaTime44 { public static void main(String[] args) { PeriodFormatter daysHoursMinutes = new <mask><mask><mask><mask><mask><mask>PeriodFormatterBuilder().appendDays().appendSuffix(String, String).appendSeparator(String).appendMinutes().appendSuffix(String, String).appendSeparator(String).appendSeconds().appendSuffix(String, String).toFormatter();Period period = new Period(72, 24, 12, 0);println print(period));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Period",
    "boolean": 1,
    "context": "public class JodaTime44 { public static void main(String[] args) { PeriodFormatter daysHoursMinutes = new PeriodFormatterBuilder().appendDays().appendSuffix(String, String).appendSeparator(String).appendMinutes().appendSuffix(String, String).appendSeparator(String).appendSeconds().appendSuffix(String, String).toFormatter();<mask><mask><mask><mask><mask><mask>.Period period = new Period(72, 24, 12, 0);println print(period));println print normalizedStandard()));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.Period()",
    "boolean": 1,
    "context": "public class JodaTime44 { public static void main(String[] args) { PeriodFormatter daysHoursMinutes = new PeriodFormatterBuilder().appendDays().appendSuffix(String, String).appendSeparator(String).appendMinutes().appendSuffix(String, String).appendSeparator(String).appendSeconds().appendSuffix(String, String).toFormatter();Period period = new <mask><mask><mask><mask>Period(72, 24, 12, 0);println print(period));println print normalizedStandard()));"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.PeriodFormatter.print()",
    "boolean": 1,
    "context": "public class JodaTime44 { public static void main(String[] args) { PeriodFormatter daysHoursMinutes = new PeriodFormatterBuilder().appendDays().appendSuffix(String, String).appendSeparator(String).appendMinutes().appendSuffix(String, String).appendSeparator(String).appendSeconds().appendSuffix(String, String).toFormatter();Period period = new Period(72, 24, 12, 0);println <mask><mask><mask><mask><mask><mask><mask><mask>print(period));println print normalizedStandard()));} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format.PeriodFormatter",
    "truth_type": "org.joda.time.format.PeriodFormatter",
    "full_FQN": "org.joda.time.format.PeriodFormatter.print",
    "boolean": 1,
    "context": "org.joda.time.Period period = new Period(72, 24, 12, 0);println print(period));println <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.print normalizedStandard()));} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.Period.normalizedStandard()",
    "boolean": 1,
    "context": "org.joda.time.Period period = new Period(72, 24, 12, 0);println print(period));println print <mask><mask><mask><mask><mask><mask>normalizedStandard()));} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.timetz",
    "truth_type": "javax.xml.ws",
    "full_FQN": "javax.xml.ws.Provider",
    "boolean": 0,
    "context": "public class JodaTime45 { public class FastDateTimeZoneProvider implements <mask><mask><mask><mask><mask><mask><mask>.Provider { public final Set<String> AVAILABLE_IDS = new HashSet<String>();public DateTimeZone getZone(String id) { if (id == null) { return UTC;} TimeZone tz = getTimeZone(id);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Set",
    "boolean": 1,
    "context": "public class JodaTime45 { public class FastDateTimeZoneProvider implements Provider { public final <mask><mask><mask>.Set<String> AVAILABLE_IDS = new HashSet<String>();public DateTimeZone getZone(String id) { if (id == null) { return UTC;} TimeZone tz = getTimeZone(id);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.HashSet",
    "boolean": 1,
    "context": "public class JodaTime45 { public class FastDateTimeZoneProvider implements Provider { public final Set<String> AVAILABLE_IDS = new <mask><mask><mask>.HashSet<String>();public DateTimeZone getZone(String id) { if (id == null) { return UTC;} TimeZone tz = getTimeZone(id);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTimeZone",
    "boolean": 1,
    "context": "public class JodaTime45 { public class FastDateTimeZoneProvider implements Provider { public final Set<String> AVAILABLE_IDS = new HashSet<String>();public <mask><mask><mask><mask><mask><mask>.DateTimeZone getZone(String id) { if (id == null) { return UTC;} TimeZone tz = getTimeZone(id);if (tz == null) { return UTC;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.DateTimeZone",
    "truth_type": "org.joda.time.DateTimeZone",
    "full_FQN": "org.joda.time.DateTimeZone.UTC",
    "boolean": 1,
    "context": "public class JodaTime45 { public class FastDateTimeZoneProvider implements Provider { public final Set<String> AVAILABLE_IDS = new HashSet<String>();public DateTimeZone getZone(String id) { if (id == null) { return <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.UTC;} TimeZone tz = getTimeZone(id);if (tz == null) { return UTC;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.TimeZone",
    "boolean": 1,
    "context": "public class JodaTime45 { public class FastDateTimeZoneProvider implements Provider { public final Set<String> AVAILABLE_IDS = new HashSet<String>();public DateTimeZone getZone(String id) { if (id == null) { return UTC;} <mask><mask><mask>.TimeZone tz = getTimeZone(id);if (tz == null) { return UTC;} int rawOffset = getRawOffset();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.TimeZone.getTimeZone()",
    "boolean": 1,
    "context": "public class JodaTime45 { public class FastDateTimeZoneProvider implements Provider { public final Set<String> AVAILABLE_IDS = new HashSet<String>();public DateTimeZone getZone(String id) { if (id == null) { return UTC;} TimeZone tz = <mask><mask><mask>getTimeZone(id);if (tz == null) { return UTC;} int rawOffset = getRawOffset();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.DateTimeZone",
    "truth_type": "org.joda.time.DateTimeZone",
    "full_FQN": "org.joda.time.DateTimeZone.UTC",
    "boolean": 1,
    "context": "public DateTimeZone getZone(String id) { if (id == null) { return UTC;} TimeZone tz = getTimeZone(id);if (tz == null) { return <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.UTC;} int rawOffset = getRawOffset();if  inDaylightTime(new Date())) { rawOffset += getDSTSavings();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.TimeZone.getRawOffset()",
    "boolean": 1,
    "context": "} TimeZone tz = getTimeZone(id);if (tz == null) { return UTC;} int rawOffset = <mask><mask><mask>getRawOffset();if  inDaylightTime(new Date())) { rawOffset += getDSTSavings();} return forOffsetMillis(rawOffset);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.TimeZone.inDaylightTime()",
    "boolean": 1,
    "context": "if (tz == null) { return UTC;} int rawOffset = getRawOffset();if  <mask><mask><mask>inDaylightTime(new Date())) { rawOffset += getDSTSavings();} return forOffsetMillis(rawOffset);} public Set getAvailableIDs() { return AVAILABLE_IDS;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Date()",
    "boolean": 1,
    "context": "if (tz == null) { return UTC;} int rawOffset = getRawOffset();if  inDaylightTime(new <mask><mask><mask>.Date())) { rawOffset += getDSTSavings();} return forOffsetMillis(rawOffset);} public Set getAvailableIDs() { return AVAILABLE_IDS;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.TimeZone.getDSTSavings()",
    "boolean": 1,
    "context": "if (tz == null) { return UTC;} int rawOffset = getRawOffset();if  inDaylightTime(new Date())) { rawOffset += <mask><mask><mask>getDSTSavings();} return forOffsetMillis(rawOffset);} public Set getAvailableIDs() { return AVAILABLE_IDS;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTimeZone.forOffsetMillis()",
    "boolean": 1,
    "context": "} int rawOffset = getRawOffset();if  inDaylightTime(new Date())) { rawOffset += getDSTSavings();} return <mask><mask><mask><mask><mask><mask>forOffsetMillis(rawOffset);} public Set getAvailableIDs() { return AVAILABLE_IDS;} @Override public Object invoke(Object request) { return null;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Set",
    "boolean": 1,
    "context": "if  inDaylightTime(new Date())) { rawOffset += getDSTSavings();} return forOffsetMillis(rawOffset);} public <mask><mask><mask>.Set getAvailableIDs() { return AVAILABLE_IDS;} @Override public Object invoke(Object request) { return null;} } };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTimeZone",
    "boolean": 1,
    "context": "public class JodaTime46 { public static void main(String[] args) { <mask><mask><mask><mask><mask><mask>.DateTimeZone date = null;DateTime dateTime = new DateTime(date);dateTime = plusDays(1);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime46 { public static void main(String[] args) { DateTimeZone date = null;<mask><mask><mask><mask><mask><mask>.DateTime dateTime = new DateTime(date);dateTime = plusDays(1);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "public class JodaTime46 { public static void main(String[] args) { DateTimeZone date = null;DateTime dateTime = new <mask><mask><mask><mask>DateTime(date);dateTime = plusDays(1);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime.plusDays()",
    "boolean": 1,
    "context": "public class JodaTime46 { public static void main(String[] args) { DateTimeZone date = null;DateTime dateTime = new DateTime(date);dateTime = <mask><mask><mask><mask><mask><mask>plusDays(1);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter",
    "boolean": 1,
    "context": "public class JodaTime47 { public static void main(String[] args) { final <mask><mask><mask><mask><mask><mask><mask><mask>.DateTimeFormatter df = forPattern(String);final DateTime dateTime = withOffsetParsed().parseDateTime(String);println(String + dateTime);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormat.forPattern()",
    "boolean": 1,
    "context": "public class JodaTime47 { public static void main(String[] args) { final DateTimeFormatter df = <mask><mask><mask><mask><mask><mask><mask><mask>forPattern(String);final DateTime dateTime = withOffsetParsed().parseDateTime(String);println(String + dateTime);"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime47 { public static void main(String[] args) { final DateTimeFormatter df = forPattern(String);final <mask><mask><mask><mask><mask><mask>.DateTime dateTime = withOffsetParsed().parseDateTime(String);println(String + dateTime);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter.withOffsetParsed()",
    "boolean": 1,
    "context": "public class JodaTime47 { public static void main(String[] args) { final DateTimeFormatter df = forPattern(String);final DateTime dateTime = <mask><mask><mask><mask><mask><mask><mask><mask>withOffsetParsed().parseDateTime(String);println(String + dateTime);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.DateTimeUtils",
    "truth_type": "org.joda.time.DateTimeUtils",
    "full_FQN": "org.joda.time.DateTimeUtils.MillisProvider",
    "boolean": 1,
    "context": "public class JodaTime48 { public static void main(String[] args) { } private final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MillisProvider millisProvider;private final DateTime someDate;public JodaTime48(MillisProvider millisProvider, DateTime someDate) { millisProvider = millisProvider;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime48 { public static void main(String[] args) { } private final MillisProvider millisProvider;private final <mask><mask><mask><mask><mask><mask>.DateTime someDate;public JodaTime48(MillisProvider millisProvider, DateTime someDate) { millisProvider = millisProvider;someDate = someDate;"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.DateTimeUtils",
    "truth_type": "org.joda.time.DateTimeUtils",
    "full_FQN": "org.joda.time.DateTimeUtils.MillisProvider",
    "boolean": 1,
    "context": "public class JodaTime48 { public static void main(String[] args) { } private final MillisProvider millisProvider;private final DateTime someDate;public JodaTime48(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MillisProvider millisProvider, DateTime someDate) { millisProvider = millisProvider;someDate = someDate;} public boolean isAvailable() { long now = DateTimeUtils$getMillis();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime48 { public static void main(String[] args) { } private final MillisProvider millisProvider;private final DateTime someDate;public JodaTime48(MillisProvider millisProvider, <mask><mask><mask><mask><mask><mask>.DateTime someDate) { millisProvider = millisProvider;someDate = someDate;} public boolean isAvailable() { long now = DateTimeUtils$getMillis();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTimeUtils",
    "boolean": 1,
    "context": "public JodaTime48(MillisProvider millisProvider, DateTime someDate) { millisProvider = millisProvider;someDate = someDate;} public boolean isAvailable() { long now = <mask><mask><mask><mask><mask><mask>.DateTimeUtils$getMillis();return isBefore(now);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime.isBefore()",
    "boolean": 1,
    "context": "this.someDate = someDate;} public boolean isAvailable() { long now = DateTimeUtils$getMillis();return <mask><mask><mask><mask><mask><mask>isBefore(now);} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter",
    "boolean": 1,
    "context": "public class JodaTime49 { public static void main(String[] args) { <mask><mask><mask><mask><mask><mask><mask><mask>.DateTimeFormatter FORMATTER = forPattern(String);DateTime dateTime = parseDateTime(String);LocalDate localDate = toLocalDate();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormat.forPattern()",
    "boolean": 1,
    "context": "public class JodaTime49 { public static void main(String[] args) { DateTimeFormatter FORMATTER = <mask><mask><mask><mask><mask><mask><mask><mask>forPattern(String);DateTime dateTime = parseDateTime(String);LocalDate localDate = toLocalDate();"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime49 { public static void main(String[] args) { DateTimeFormatter FORMATTER = forPattern(String);<mask><mask><mask><mask><mask><mask>.DateTime dateTime = parseDateTime(String);LocalDate localDate = toLocalDate();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time.format",
    "truth_type": "org.joda.time.format",
    "full_FQN": "org.joda.time.format.DateTimeFormatter.parseDateTime()",
    "boolean": 1,
    "context": "public class JodaTime49 { public static void main(String[] args) { DateTimeFormatter FORMATTER = forPattern(String);DateTime dateTime = <mask><mask><mask><mask><mask><mask><mask><mask>parseDateTime(String);LocalDate localDate = toLocalDate();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.LocalDate",
    "boolean": 1,
    "context": "public class JodaTime49 { public static void main(String[] args) { DateTimeFormatter FORMATTER = forPattern(String);DateTime dateTime = parseDateTime(String);<mask><mask><mask><mask><mask><mask>.LocalDate localDate = toLocalDate();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime.toLocalDate()",
    "boolean": 1,
    "context": "public class JodaTime49 { public static void main(String[] args) { DateTimeFormatter FORMATTER = forPattern(String);DateTime dateTime = parseDateTime(String);LocalDate localDate = <mask><mask><mask><mask><mask><mask>toLocalDate();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime",
    "boolean": 1,
    "context": "public class JodaTime50 { public static void main(String[] args) { } public static int daysOfMonth(int year, int month) { <mask><mask><mask><mask><mask><mask>.DateTime dateTime = new DateTime(year, month, 14, 12, 0, 0, 00);return dayOfMonth().getMaximumValue();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda",
    "truth_type": "org.joda",
    "full_FQN": "org.joda.time.DateTime()",
    "boolean": 1,
    "context": "public class JodaTime50 { public static void main(String[] args) { } public static int daysOfMonth(int year, int month) { DateTime dateTime = new <mask><mask><mask><mask>DateTime(year, month, 14, 12, 0, 0, 00);return dayOfMonth().getMaximumValue();} };"
  },
  {
    "lib_name": "joda_time",
    "pred_type": "org.joda.time",
    "truth_type": "org.joda.time",
    "full_FQN": "org.joda.time.DateTime.dayOfMonth()",
    "boolean": 1,
    "context": "public class JodaTime50 { public static void main(String[] args) { } public static int daysOfMonth(int year, int month) { DateTime dateTime = new DateTime(year, month, 14, 12, 0, 0, 00);return <mask><mask><mask><mask><mask><mask>dayOfMonth().getMaximumValue();} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.Converter",
    "boolean": 1,
    "context": "public class xstream_class_1 implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Converter { @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { while  hasMoreChildren()) { moveDown();String a;if  getNodeName().equals(String)) { a = getValue();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader",
    "boolean": 1,
    "context": "public class xstream_class_1 implements Converter { @Override public Object unmarshal(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HierarchicalStreamReader reader, UnmarshallingContext context) { while  hasMoreChildren()) { moveDown();String a;if  getNodeName().equals(String)) { a = getValue();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.UnmarshallingContext",
    "boolean": 1,
    "context": "public class xstream_class_1 implements Converter { @Override public Object unmarshal(HierarchicalStreamReader reader, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.UnmarshallingContext context) { while  hasMoreChildren()) { moveDown();String a;if  getNodeName().equals(String)) { a = getValue();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.hasMoreChildren()",
    "boolean": 1,
    "context": "public class xstream_class_1 implements Converter { @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { while  <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>hasMoreChildren()) { moveDown();String a;if  getNodeName().equals(String)) { a = getValue();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.moveDown()",
    "boolean": 1,
    "context": "public class xstream_class_1 implements Converter { @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { while  hasMoreChildren()) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>moveDown();String a;if  getNodeName().equals(String)) { a = getValue();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.getNodeName()",
    "boolean": 1,
    "context": "public class xstream_class_1 implements Converter { @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { while  hasMoreChildren()) { moveDown();String a;if  <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getNodeName().equals(String)) { a = getValue();} else if  getNodeName().equals(String)) { Object b = ((Object)  convertAnother(reader, class)));} else if  getNodeName().equals(String)) { a = getValue();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.getValue()",
    "boolean": 1,
    "context": "public class xstream_class_1 implements Converter { @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { while  hasMoreChildren()) { moveDown();String a;if  getNodeName().equals(String)) { a = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getValue();} else if  getNodeName().equals(String)) { Object b = ((Object)  convertAnother(reader, class)));} else if  getNodeName().equals(String)) { a = getValue();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.getNodeName()",
    "boolean": 1,
    "context": "java.lang.String a;if  getNodeName().equals(String)) { a = getValue();} else if  <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getNodeName().equals(String)) { Object b = ((Object)  convertAnother(reader, class)));} else if  getNodeName().equals(String)) { a = getValue();} } return context;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.UnmarshallingContext.convertAnother()",
    "boolean": 1,
    "context": "java.lang.String a;if  getNodeName().equals(String)) { a = getValue();} else if  getNodeName().equals(String)) { Object b = ((Object)  <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>convertAnother(reader, class)));} else if  getNodeName().equals(String)) { a = getValue();} } return context;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.getNodeName()",
    "boolean": 1,
    "context": "if  getNodeName().equals(String)) { a = getValue();} else if  getNodeName().equals(String)) { Object b = ((Object)  convertAnother(reader, class)));} else if  <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getNodeName().equals(String)) { a = getValue();} } return context;} @Override public boolean canConvert(Class arg0) { // TODO Auto-generated method stub return false;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.getValue()",
    "boolean": 1,
    "context": "if  getNodeName().equals(String)) { a = getValue();} else if  getNodeName().equals(String)) { Object b = ((Object)  convertAnother(reader, class)));} else if  getNodeName().equals(String)) { a = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getValue();} } return context;} @Override public boolean canConvert(Class arg0) { // TODO Auto-generated method stub return false;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamWriter",
    "boolean": 1,
    "context": "} } return context;} @Override public boolean canConvert(Class arg0) { // TODO Auto-generated method stub return false;} @Override public void marshal(Object arg0, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HierarchicalStreamWriter arg1, MarshallingContext arg2) { // TODO Auto-generated method stub } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.MarshallingContext",
    "boolean": 1,
    "context": "} } return context;} @Override public boolean canConvert(Class arg0) { // TODO Auto-generated method stub return false;} @Override public void marshal(Object arg0, HierarchicalStreamWriter arg1, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MarshallingContext arg2) { // TODO Auto-generated method stub } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream",
    "boolean": 1,
    "context": "public class xstream_class_10 { private String generateResponse(final <mask><mask><mask><mask><mask><mask><mask><mask>.XStream xStream) { StringWriter writer = new StringWriter(); marshal(this, new PrettyPrintWriter(writer) { @Override public void addAttribute(final String key, final String value) { if (!equals(String)) { addAttribute(key, value);} } });"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.StringWriter",
    "boolean": 1,
    "context": "public class xstream_class_10 { private String generateResponse(final XStream xStream) { <mask><mask><mask>.StringWriter writer = new StringWriter(); marshal(this, new PrettyPrintWriter(writer) { @Override public void addAttribute(final String key, final String value) { if (!equals(String)) { addAttribute(key, value);} } });"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.StringWriter()",
    "boolean": 1,
    "context": "public class xstream_class_10 { private String generateResponse(final XStream xStream) { StringWriter writer = new <mask><mask><mask>.StringWriter(); marshal(this, new PrettyPrintWriter(writer) { @Override public void addAttribute(final String key, final String value) { if (!equals(String)) { addAttribute(key, value);} } });"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.marshal()",
    "boolean": 1,
    "context": "public class xstream_class_10 { private String generateResponse(final XStream xStream) { StringWriter writer = new StringWriter(); <mask><mask><mask><mask><mask><mask><mask><mask>marshal(this, new PrettyPrintWriter(writer) { @Override public void addAttribute(final String key, final String value) { if (!equals(String)) { addAttribute(key, value);} } });return toString();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.xml.PrettyPrintWriter()",
    "boolean": 1,
    "context": "public class xstream_class_10 { private String generateResponse(final XStream xStream) { StringWriter writer = new StringWriter(); marshal(this, new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>PrettyPrintWriter(writer) { @Override public void addAttribute(final String key, final String value) { if (!equals(String)) { addAttribute(key, value);} } });return toString();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.StringWriter.toString()",
    "boolean": 1,
    "context": " marshal(this, new PrettyPrintWriter(writer) { @Override public void addAttribute(final String key, final String value) { if (!equals(String)) { addAttribute(key, value);} } });return <mask><mask><mask>toString();} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "public class xstream_class_11 { public <mask><mask><mask>.List<String> tags = new ArrayList<String>();public List<String> notags = new ArrayList<String>();public xstream_class_11(String tag, String tag2) { add(tag);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "public class xstream_class_11 { public List<String> tags = new <mask><mask><mask>.ArrayList<String>();public List<String> notags = new ArrayList<String>();public xstream_class_11(String tag, String tag2) { add(tag);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "public class xstream_class_11 { public List<String> tags = new ArrayList<String>();public <mask><mask><mask>.List<String> notags = new ArrayList<String>();public xstream_class_11(String tag, String tag2) { add(tag); add(tag2);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "public class xstream_class_11 { public List<String> tags = new ArrayList<String>();public List<String> notags = new <mask><mask><mask>.ArrayList<String>();public xstream_class_11(String tag, String tag2) { add(tag); add(tag2);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.add()",
    "boolean": 1,
    "context": "public class xstream_class_11 { public List<String> tags = new ArrayList<String>();public List<String> notags = new ArrayList<String>();public xstream_class_11(String tag, String tag2) { <mask><mask><mask>add(tag); add(tag2); add(tag);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.add()",
    "boolean": 1,
    "context": "public List<String> notags = new ArrayList<String>();public xstream_class_11(String tag, String tag2) { add(tag); <mask><mask><mask>add(tag2); add(tag); add(tag2);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.add()",
    "boolean": 1,
    "context": "public xstream_class_11(String tag, String tag2) { add(tag); add(tag2); <mask><mask><mask>add(tag); add(tag2);} public static void main(String[] args) { xstream_class_11 test = new xstream_class_11(String, String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.add()",
    "boolean": 1,
    "context": " add(tag2); add(tag); <mask><mask><mask>add(tag2);} public static void main(String[] args) { xstream_class_11 test = new xstream_class_11(String, String);thoughtworks XStream xstream = new thoughtworks XStream();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream",
    "boolean": 1,
    "context": " add(tag2);} public static void main(String[] args) { xstream_class_11 test = new xstream_class_11(String, String);thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.XStream xstream = new thoughtworks XStream();xstream thoughtworks ClassAliasingMapper mapper = new xstream thoughtworks ClassAliasingMapper getMapper()); xstream thoughtworks addClassAlias(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream()",
    "boolean": 1,
    "context": " add(tag2);} public static void main(String[] args) { xstream_class_11 test = new xstream_class_11(String, String);thoughtworks XStream xstream = new thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask>XStream();xstream thoughtworks ClassAliasingMapper mapper = new xstream thoughtworks ClassAliasingMapper getMapper()); xstream thoughtworks addClassAlias(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks",
    "truth_type": "com.thoughtworks",
    "full_FQN": "com.thoughtworks.xstream",
    "boolean": 1,
    "context": "} public static void main(String[] args) { xstream_class_11 test = new xstream_class_11(String, String);thoughtworks XStream xstream = new thoughtworks XStream();<mask><mask><mask><mask><mask>.xstream thoughtworks ClassAliasingMapper mapper = new xstream thoughtworks ClassAliasingMapper getMapper()); xstream thoughtworks addClassAlias(String, class); thoughtworks registerLocalConverter(class, String, new thoughtworks CollectionConverter(mapper));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.mapper.ClassAliasingMapper",
    "truth_type": "com.thoughtworks.xstream.XStream.mapper.ClassAliasingMapper",
    "full_FQN": "com.thoughtworks.xstream.XStream.mapper.ClassAliasingMapper.ClassAliasingMapper",
    "boolean": 1,
    "context": "} public static void main(String[] args) { xstream_class_11 test = new xstream_class_11(String, String);thoughtworks XStream xstream = new thoughtworks XStream();xstream thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ClassAliasingMapper mapper = new xstream thoughtworks ClassAliasingMapper getMapper()); xstream thoughtworks addClassAlias(String, class); thoughtworks registerLocalConverter(class, String, new thoughtworks CollectionConverter(mapper));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks",
    "truth_type": "com.thoughtworks",
    "full_FQN": "com.thoughtworks.xstream",
    "boolean": 1,
    "context": "} public static void main(String[] args) { xstream_class_11 test = new xstream_class_11(String, String);thoughtworks XStream xstream = new thoughtworks XStream();xstream thoughtworks ClassAliasingMapper mapper = new <mask><mask><mask><mask><mask>.xstream thoughtworks ClassAliasingMapper getMapper()); xstream thoughtworks addClassAlias(String, class); thoughtworks registerLocalConverter(class, String, new thoughtworks CollectionConverter(mapper));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.mapper.ClassAliasingMapper",
    "truth_type": "com.thoughtworks.xstream.XStream.mapper.ClassAliasingMapper",
    "full_FQN": "com.thoughtworks.xstream.XStream.mapper.ClassAliasingMapper.ClassAliasingMapper",
    "boolean": 1,
    "context": "} public static void main(String[] args) { xstream_class_11 test = new xstream_class_11(String, String);thoughtworks XStream xstream = new thoughtworks XStream();xstream thoughtworks ClassAliasingMapper mapper = new xstream thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ClassAliasingMapper getMapper()); xstream thoughtworks addClassAlias(String, class); thoughtworks registerLocalConverter(class, String, new thoughtworks CollectionConverter(mapper));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.getMapper()",
    "boolean": 1,
    "context": "} public static void main(String[] args) { xstream_class_11 test = new xstream_class_11(String, String);thoughtworks XStream xstream = new thoughtworks XStream();xstream thoughtworks ClassAliasingMapper mapper = new xstream thoughtworks ClassAliasingMapper <mask><mask><mask><mask><mask><mask><mask><mask>getMapper()); xstream thoughtworks addClassAlias(String, class); thoughtworks registerLocalConverter(class, String, new thoughtworks CollectionConverter(mapper));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks",
    "truth_type": "com.thoughtworks",
    "full_FQN": "com.thoughtworks.xstream",
    "boolean": 1,
    "context": "com.thoughtworks XStream xstream = new thoughtworks XStream();xstream thoughtworks ClassAliasingMapper mapper = new xstream thoughtworks ClassAliasingMapper getMapper()); <mask><mask><mask><mask><mask>.xstream thoughtworks addClassAlias(String, class); thoughtworks registerLocalConverter(class, String, new thoughtworks CollectionConverter(mapper));println toXML(test));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.mapper.ClassAliasingMapper",
    "truth_type": "com.thoughtworks.xstream.XStream.mapper.ClassAliasingMapper",
    "full_FQN": "com.thoughtworks.xstream.XStream.mapper.ClassAliasingMapper.ClassAliasingMapper.addClassAlias()",
    "boolean": 1,
    "context": "com.thoughtworks XStream xstream = new thoughtworks XStream();xstream thoughtworks ClassAliasingMapper mapper = new xstream thoughtworks ClassAliasingMapper getMapper()); xstream thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addClassAlias(String, class); thoughtworks registerLocalConverter(class, String, new thoughtworks CollectionConverter(mapper));println toXML(test));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream.registerLocalConverter()",
    "boolean": 1,
    "context": "com.thoughtworks.xstream thoughtworks ClassAliasingMapper mapper = new xstream thoughtworks ClassAliasingMapper getMapper()); xstream thoughtworks addClassAlias(String, class); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>registerLocalConverter(class, String, new thoughtworks CollectionConverter(mapper));println toXML(test));} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.converters",
    "truth_type": "com.thoughtworks.xstream.XStream.converters",
    "full_FQN": "com.thoughtworks.xstream.XStream.converters.collections.CollectionConverter()",
    "boolean": 1,
    "context": "com.thoughtworks.xstream thoughtworks ClassAliasingMapper mapper = new xstream thoughtworks ClassAliasingMapper getMapper()); xstream thoughtworks addClassAlias(String, class); thoughtworks registerLocalConverter(class, String, new thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>CollectionConverter(mapper));println toXML(test));} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.toXML()",
    "boolean": 1,
    "context": " xstream thoughtworks addClassAlias(String, class); thoughtworks registerLocalConverter(class, String, new thoughtworks CollectionConverter(mapper));println <mask><mask><mask><mask><mask><mask><mask><mask>toXML(test));} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.Converter",
    "boolean": 1,
    "context": "public class xstream_class_12 { public class ListToStringXStreamConverter implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Converter { private String alias;public ListToStringXStreamConverter(String alias) { super();alias = alias;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamWriter",
    "boolean": 1,
    "context": "this.alias = alias;} @SuppressWarnings(String) @Override public boolean canConvert(Class type) { return true;} @Override public void marshal(Object source, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HierarchicalStreamWriter writer, MarshallingContext context) { @SuppressWarnings(String) List<String> list = ((List<String>) (source));for (String string : list) { startNode(alias); setValue(string);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.MarshallingContext",
    "boolean": 1,
    "context": "this.alias = alias;} @SuppressWarnings(String) @Override public boolean canConvert(Class type) { return true;} @Override public void marshal(Object source, HierarchicalStreamWriter writer, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MarshallingContext context) { @SuppressWarnings(String) List<String> list = ((List<String>) (source));for (String string : list) { startNode(alias); setValue(string);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "this.alias = alias;} @SuppressWarnings(String) @Override public boolean canConvert(Class type) { return true;} @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { @SuppressWarnings(String) <mask><mask><mask>.List<String> list = ((List<String>) (source));for (String string : list) { startNode(alias); setValue(string);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "this.alias = alias;} @SuppressWarnings(String) @Override public boolean canConvert(Class type) { return true;} @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { @SuppressWarnings(String) List<String> list = ((<mask><mask><mask>.List<String>) (source));for (String string : list) { startNode(alias); setValue(string);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamWriter.startNode()",
    "boolean": 1,
    "context": "} @SuppressWarnings(String) @Override public boolean canConvert(Class type) { return true;} @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { @SuppressWarnings(String) List<String> list = ((List<String>) (source));for (String string : list) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>startNode(alias); setValue(string); endNode();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamWriter.setValue()",
    "boolean": 1,
    "context": "} @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { @SuppressWarnings(String) List<String> list = ((List<String>) (source));for (String string : list) { startNode(alias); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setValue(string); endNode();} } @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { throw new UnsupportedOperationException(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamWriter.endNode()",
    "boolean": 1,
    "context": "for (String string : list) { startNode(alias); setValue(string); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>endNode();} } @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { throw new UnsupportedOperationException(String);} } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader",
    "boolean": 1,
    "context": " setValue(string); endNode();} } @Override public Object unmarshal(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HierarchicalStreamReader reader, UnmarshallingContext context) { throw new UnsupportedOperationException(String);} } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.UnmarshallingContext",
    "boolean": 1,
    "context": " setValue(string); endNode();} } @Override public Object unmarshal(HierarchicalStreamReader reader, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.UnmarshallingContext context) { throw new UnsupportedOperationException(String);} } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.mapper",
    "truth_type": "com.thoughtworks.xstream.mapper",
    "full_FQN": "com.thoughtworks.xstream.mapper.ClassAliasingMapper",
    "boolean": 1,
    "context": "public class xstream_class_13 { public class MyClassAliasingMapper extends <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ClassAliasingMapper { public MyClassAliasingMapper(Mapper wrapped) { super(wrapped);} @Override public Class realClass(String elementName) { try { } catch (Exception e) { // do nothing we fall back on super's implementation } return realClass(elementName);} @Override public String serializedClass(Class type) { try { } catch (Exception e) { // do nothing we fall back on super's implementation } return serializedClass(type);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.mapper",
    "truth_type": "com.thoughtworks.xstream.mapper",
    "full_FQN": "com.thoughtworks.xstream.mapper.Mapper",
    "boolean": 1,
    "context": "public class xstream_class_13 { public class MyClassAliasingMapper extends ClassAliasingMapper { public MyClassAliasingMapper(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Mapper wrapped) { super(wrapped);} @Override public Class realClass(String elementName) { try { } catch (Exception e) { // do nothing we fall back on super's implementation } return realClass(elementName);} @Override public String serializedClass(Class type) { try { } catch (Exception e) { // do nothing we fall back on super's implementation } return serializedClass(type);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters.basic",
    "truth_type": "com.thoughtworks.xstream.converters.basic",
    "full_FQN": "com.thoughtworks.xstream.converters.basic.AbstractSingleValueConverter",
    "boolean": 1,
    "context": "public class xstream_class_14 { public class SingleValueEnumConverter extends <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.AbstractSingleValueConverter { @SuppressWarnings(String) private final Class enumType;public SingleValueEnumConverter(Class type) { enumType = type;} public boolean canConvert(Class c) { return equals(enumType);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream",
    "boolean": 1,
    "context": "public class xstream_class_15 { public static void main(String[] arg) { <mask><mask><mask><mask><mask><mask><mask><mask>.XStream xs = new XStream(); registerConverter(new CollectionConverter getMapper()) { @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { PersistentSet ps = null;marshal(new HashSet(ps), writer, context);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks",
    "truth_type": "com.thoughtworks",
    "full_FQN": "com.thoughtworks.xstream.XStream()",
    "boolean": 1,
    "context": "public class xstream_class_15 { public static void main(String[] arg) { XStream xs = new <mask><mask><mask><mask><mask>XStream(); registerConverter(new CollectionConverter getMapper()) { @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { PersistentSet ps = null;marshal(new HashSet(ps), writer, context);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.registerConverter()",
    "boolean": 1,
    "context": "public class xstream_class_15 { public static void main(String[] arg) { XStream xs = new XStream(); <mask><mask><mask><mask><mask><mask><mask><mask>registerConverter(new CollectionConverter getMapper()) { @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { PersistentSet ps = null;marshal(new HashSet(ps), writer, context);} @Override public boolean canConvert(Class type) { return isAssignableFrom(class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters.collections",
    "truth_type": "com.thoughtworks.xstream.converters.collections",
    "full_FQN": "com.thoughtworks.xstream.converters.collections.CollectionConverter",
    "boolean": 1,
    "context": "public class xstream_class_15 { public static void main(String[] arg) { XStream xs = new XStream(); registerConverter(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.CollectionConverter getMapper()) { @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { PersistentSet ps = null;marshal(new HashSet(ps), writer, context);} @Override public boolean canConvert(Class type) { return isAssignableFrom(class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.getMapper()",
    "boolean": 1,
    "context": "public class xstream_class_15 { public static void main(String[] arg) { XStream xs = new XStream(); registerConverter(new CollectionConverter <mask><mask><mask><mask><mask><mask><mask><mask>getMapper()) { @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { PersistentSet ps = null;marshal(new HashSet(ps), writer, context);} @Override public boolean canConvert(Class type) { return isAssignableFrom(class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamWriter",
    "boolean": 1,
    "context": "public class xstream_class_15 { public static void main(String[] arg) { XStream xs = new XStream(); registerConverter(new CollectionConverter getMapper()) { @Override public void marshal(Object source, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HierarchicalStreamWriter writer, MarshallingContext context) { PersistentSet ps = null;marshal(new HashSet(ps), writer, context);} @Override public boolean canConvert(Class type) { return isAssignableFrom(class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.MarshallingContext",
    "boolean": 1,
    "context": "public class xstream_class_15 { public static void main(String[] arg) { XStream xs = new XStream(); registerConverter(new CollectionConverter getMapper()) { @Override public void marshal(Object source, HierarchicalStreamWriter writer, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MarshallingContext context) { PersistentSet ps = null;marshal(new HashSet(ps), writer, context);} @Override public boolean canConvert(Class type) { return isAssignableFrom(class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "org.hibernate.collection",
    "truth_type": "org.hibernate.collection",
    "full_FQN": "org.hibernate.collection.PersistentSet",
    "boolean": 1,
    "context": "public class xstream_class_15 { public static void main(String[] arg) { XStream xs = new XStream(); registerConverter(new CollectionConverter getMapper()) { @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { <mask><mask><mask><mask><mask><mask><mask><mask>.PersistentSet ps = null;marshal(new HashSet(ps), writer, context);} @Override public boolean canConvert(Class type) { return isAssignableFrom(class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.HashSet()",
    "boolean": 1,
    "context": "public class xstream_class_15 { public static void main(String[] arg) { XStream xs = new XStream(); registerConverter(new CollectionConverter getMapper()) { @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { PersistentSet ps = null;marshal(new <mask><mask><mask>.HashSet(ps), writer, context);} @Override public boolean canConvert(Class type) { return isAssignableFrom(class);} }, PRIORITY_VERY_HIGH);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "org.hibernate.type.PersistentSet",
    "truth_type": "org.hibernate.collection.PersistentSet",
    "full_FQN": "org.hibernate.collection.PersistentSet.class",
    "boolean": 0,
    "context": " registerConverter(new CollectionConverter getMapper()) { @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { PersistentSet ps = null;marshal(new HashSet(ps), writer, context);} @Override public boolean canConvert(Class type) { return isAssignableFrom(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.class);} }, PRIORITY_VERY_HIGH);Object processInstance = null;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks..model.XType",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.PRIORITY_VERY_HIGH",
    "boolean": 0,
    "context": "super.marshal(new HashSet(ps), writer, context);} @Override public boolean canConvert(Class type) { return isAssignableFrom(class);} }, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.PRIORITY_VERY_HIGH);Object processInstance = null;String s = toXML(processInstance);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.toXML()",
    "boolean": 1,
    "context": "} }, PRIORITY_VERY_HIGH);Object processInstance = null;String s = <mask><mask><mask><mask><mask><mask><mask><mask>toXML(processInstance);} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream",
    "boolean": 1,
    "context": "public class xstream_class_16 { public static void main(String[] arg) { thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.XStream xstream = new thoughtworks XStream() { @Override protected thoughtworks MapperWrapper wrapMapper(thoughtworks MapperWrapper next) { return new thoughtworks MapperWrapper(next) { @Override public boolean shouldSerializeMember(Class definedIn, String fieldName) { if (definedIn == class) { return false;} return shouldSerializeMember(definedIn, fieldName);} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream()",
    "boolean": 1,
    "context": "public class xstream_class_16 { public static void main(String[] arg) { thoughtworks XStream xstream = new thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask>XStream() { @Override protected thoughtworks MapperWrapper wrapMapper(thoughtworks MapperWrapper next) { return new thoughtworks MapperWrapper(next) { @Override public boolean shouldSerializeMember(Class definedIn, String fieldName) { if (definedIn == class) { return false;} return shouldSerializeMember(definedIn, fieldName);} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.mapper",
    "truth_type": "com.thoughtworks.xstream.XStream.mapper",
    "full_FQN": "com.thoughtworks.xstream.XStream.mapper.MapperWrapper",
    "boolean": 1,
    "context": "public class xstream_class_16 { public static void main(String[] arg) { thoughtworks XStream xstream = new thoughtworks XStream() { @Override protected thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MapperWrapper wrapMapper(thoughtworks MapperWrapper next) { return new thoughtworks MapperWrapper(next) { @Override public boolean shouldSerializeMember(Class definedIn, String fieldName) { if (definedIn == class) { return false;} return shouldSerializeMember(definedIn, fieldName);} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.mapper",
    "truth_type": "com.thoughtworks.xstream.XStream.mapper",
    "full_FQN": "com.thoughtworks.xstream.XStream.mapper.MapperWrapper",
    "boolean": 1,
    "context": "public class xstream_class_16 { public static void main(String[] arg) { thoughtworks XStream xstream = new thoughtworks XStream() { @Override protected thoughtworks MapperWrapper wrapMapper(thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MapperWrapper next) { return new thoughtworks MapperWrapper(next) { @Override public boolean shouldSerializeMember(Class definedIn, String fieldName) { if (definedIn == class) { return false;} return shouldSerializeMember(definedIn, fieldName);} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.mapper.MapperWrapper()",
    "boolean": 1,
    "context": "public class xstream_class_16 { public static void main(String[] arg) { thoughtworks XStream xstream = new thoughtworks XStream() { @Override protected thoughtworks MapperWrapper wrapMapper(thoughtworks MapperWrapper next) { return new thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>MapperWrapper(next) { @Override public boolean shouldSerializeMember(Class definedIn, String fieldName) { if (definedIn == class) { return false;} return shouldSerializeMember(definedIn, fieldName);} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream",
    "boolean": 1,
    "context": "public final class xstream_class_17 { public static void main(String[] args) { thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.XStream xstream = new thoughtworks XStream(); thoughtworks autodetectAnnotations(true); thoughtworks registerConverter(new PositionConverter());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream()",
    "boolean": 1,
    "context": "public final class xstream_class_17 { public static void main(String[] args) { thoughtworks XStream xstream = new thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask>XStream(); thoughtworks autodetectAnnotations(true); thoughtworks registerConverter(new PositionConverter());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream.autodetectAnnotations()",
    "boolean": 1,
    "context": "public final class xstream_class_17 { public static void main(String[] args) { thoughtworks XStream xstream = new thoughtworks XStream(); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>autodetectAnnotations(true); thoughtworks registerConverter(new PositionConverter());final Position position = new Position();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream.registerConverter()",
    "boolean": 1,
    "context": "public final class xstream_class_17 { public static void main(String[] args) { thoughtworks XStream xstream = new thoughtworks XStream(); thoughtworks autodetectAnnotations(true); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>registerConverter(new PositionConverter());final Position position = new Position();setTitle(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.toXML()",
    "boolean": 1,
    "context": "position.setStartDate(String);setEndDate(String);final String xml = <mask><mask><mask><mask><mask><mask><mask><mask>toXML(position);println(String);println(xml);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.fromXML()",
    "boolean": 1,
    "context": "java.lang.System.out.println(String);println(xml);final Position genPosition = ((Position)  <mask><mask><mask><mask><mask><mask><mask><mask>fromXML(xml)));println(String);println(String + getTitle());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.annotations.XStreamAlias()",
    "boolean": 1,
    "context": "java.lang.System.out.println(String + getStartDate());println(String + getEndDate());} @thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>XStreamAlias(String) private static class Position { public String getEndDate() { return endDate;} public void setEndDate(String endDate) { endDate = endDate;} public String getStartDate() { return startDate;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.converters",
    "truth_type": "com.thoughtworks.xstream.XStream.converters",
    "full_FQN": "com.thoughtworks.xstream.XStream.converters.Converter",
    "boolean": 1,
    "context": "private String startDate;private String endDate;} private static class PositionConverter implements thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Converter { public boolean canConvert(Class clazz) { return class == clazz;} public void marshal(Object value, thoughtworks HierarchicalStreamWriter writer, thoughtworks MarshallingContext context) { Position position = ((Position) (value)); thoughtworks startNode(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.HierarchicalStreamWriter",
    "boolean": 1,
    "context": "private String endDate;} private static class PositionConverter implements thoughtworks Converter { public boolean canConvert(Class clazz) { return class == clazz;} public void marshal(Object value, thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HierarchicalStreamWriter writer, thoughtworks MarshallingContext context) { Position position = ((Position) (value)); thoughtworks startNode(String); thoughtworks startNode(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.converters",
    "truth_type": "com.thoughtworks.xstream.XStream.converters",
    "full_FQN": "com.thoughtworks.xstream.XStream.converters.MarshallingContext",
    "boolean": 1,
    "context": "private String endDate;} private static class PositionConverter implements thoughtworks Converter { public boolean canConvert(Class clazz) { return class == clazz;} public void marshal(Object value, thoughtworks HierarchicalStreamWriter writer, thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MarshallingContext context) { Position position = ((Position) (value)); thoughtworks startNode(String); thoughtworks startNode(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.HierarchicalStreamWriter.startNode()",
    "boolean": 1,
    "context": "} private static class PositionConverter implements thoughtworks Converter { public boolean canConvert(Class clazz) { return class == clazz;} public void marshal(Object value, thoughtworks HierarchicalStreamWriter writer, thoughtworks MarshallingContext context) { Position position = ((Position) (value)); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>startNode(String); thoughtworks startNode(String); thoughtworks setValue(getTitle());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.HierarchicalStreamWriter.startNode()",
    "boolean": 1,
    "context": "} public void marshal(Object value, thoughtworks HierarchicalStreamWriter writer, thoughtworks MarshallingContext context) { Position position = ((Position) (value)); thoughtworks startNode(String); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>startNode(String); thoughtworks setValue(getTitle()); thoughtworks endNode();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.HierarchicalStreamWriter.setValue()",
    "boolean": 1,
    "context": " thoughtworks startNode(String); thoughtworks startNode(String); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setValue(getTitle()); thoughtworks endNode(); thoughtworks startNode(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.HierarchicalStreamWriter.endNode()",
    "boolean": 1,
    "context": " thoughtworks startNode(String); thoughtworks setValue(getTitle()); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>endNode(); thoughtworks startNode(String); thoughtworks setValue(getStartDate());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.HierarchicalStreamWriter.startNode()",
    "boolean": 1,
    "context": " thoughtworks setValue(getTitle()); thoughtworks endNode(); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>startNode(String); thoughtworks setValue(getStartDate()); thoughtworks endNode();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.HierarchicalStreamWriter.setValue()",
    "boolean": 1,
    "context": " thoughtworks endNode(); thoughtworks startNode(String); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setValue(getStartDate()); thoughtworks endNode(); thoughtworks startNode(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.HierarchicalStreamWriter.endNode()",
    "boolean": 1,
    "context": " thoughtworks startNode(String); thoughtworks setValue(getStartDate()); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>endNode(); thoughtworks startNode(String); thoughtworks setValue(getEndDate());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.HierarchicalStreamWriter.startNode()",
    "boolean": 1,
    "context": " thoughtworks setValue(getStartDate()); thoughtworks endNode(); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>startNode(String); thoughtworks setValue(getEndDate()); thoughtworks endNode();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.HierarchicalStreamWriter.setValue()",
    "boolean": 1,
    "context": " thoughtworks endNode(); thoughtworks startNode(String); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setValue(getEndDate()); thoughtworks endNode(); thoughtworks endNode();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.HierarchicalStreamWriter.endNode()",
    "boolean": 1,
    "context": " thoughtworks startNode(String); thoughtworks setValue(getEndDate()); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>endNode(); thoughtworks endNode();} public Object unmarshal(thoughtworks HierarchicalStreamReader reader, thoughtworks UnmarshallingContext context) { Position position = new Position();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.HierarchicalStreamWriter.endNode()",
    "boolean": 1,
    "context": " thoughtworks setValue(getEndDate()); thoughtworks endNode(); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>endNode();} public Object unmarshal(thoughtworks HierarchicalStreamReader reader, thoughtworks UnmarshallingContext context) { Position position = new Position();// move it to <PositionBorder>  thoughtworks moveDown();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.HierarchicalStreamReader",
    "boolean": 1,
    "context": " thoughtworks endNode(); thoughtworks endNode();} public Object unmarshal(thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HierarchicalStreamReader reader, thoughtworks UnmarshallingContext context) { Position position = new Position();// move it to <PositionBorder>  thoughtworks moveDown();// now move it to <Title>  thoughtworks moveDown();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.ioverters",
    "truth_type": "com.thoughtworks.xstream.XStream.converters",
    "full_FQN": "com.thoughtworks.xstream.XStream.converters.UnmarshallingContext",
    "boolean": 0,
    "context": " thoughtworks endNode(); thoughtworks endNode();} public Object unmarshal(thoughtworks HierarchicalStreamReader reader, thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.UnmarshallingContext context) { Position position = new Position();// move it to <PositionBorder>  thoughtworks moveDown();// now move it to <Title>  thoughtworks moveDown();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.HierarchicalStreamReader.moveDown()",
    "boolean": 1,
    "context": " thoughtworks endNode();} public Object unmarshal(thoughtworks HierarchicalStreamReader reader, thoughtworks UnmarshallingContext context) { Position position = new Position();// move it to <PositionBorder>  thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>moveDown();// now move it to <Title>  thoughtworks moveDown();String title = thoughtworks getValue();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.HierarchicalStreamReader.moveDown()",
    "boolean": 1,
    "context": "} public Object unmarshal(thoughtworks HierarchicalStreamReader reader, thoughtworks UnmarshallingContext context) { Position position = new Position();// move it to <PositionBorder>  thoughtworks moveDown();// now move it to <Title>  thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>moveDown();String title = thoughtworks getValue();setTitle(title);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.HierarchicalStreamReader.getValue()",
    "boolean": 1,
    "context": "// move it to <PositionBorder>  thoughtworks moveDown();// now move it to <Title>  thoughtworks moveDown();String title = thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getValue();setTitle(title); thoughtworks moveUp();// moves back to <PositionBorder> thoughtworks moveDown();// should move down to <StartDate> tag String startDate = thoughtworks getValue();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.HierarchicalStreamReader.moveUp()",
    "boolean": 1,
    "context": "java.lang.String title = thoughtworks getValue();setTitle(title); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>moveUp();// moves back to <PositionBorder> thoughtworks moveDown();// should move down to <StartDate> tag String startDate = thoughtworks getValue();setStartDate(startDate); thoughtworks moveUp();// move back to <PositionBorder> thoughtworks moveDown();// should move down to <EndDate> tag String endDate = thoughtworks getValue();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.HierarchicalStreamReader.moveDown()",
    "boolean": 1,
    "context": "java.lang.String title = thoughtworks getValue();setTitle(title); thoughtworks moveUp();// moves back to <PositionBorder> thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>moveDown();// should move down to <StartDate> tag String startDate = thoughtworks getValue();setStartDate(startDate); thoughtworks moveUp();// move back to <PositionBorder> thoughtworks moveDown();// should move down to <EndDate> tag String endDate = thoughtworks getValue();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.HierarchicalStreamReader.getValue()",
    "boolean": 1,
    "context": "java.lang.String title = thoughtworks getValue();setTitle(title); thoughtworks moveUp();// moves back to <PositionBorder> thoughtworks moveDown();// should move down to <StartDate> tag String startDate = thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getValue();setStartDate(startDate); thoughtworks moveUp();// move back to <PositionBorder> thoughtworks moveDown();// should move down to <EndDate> tag String endDate = thoughtworks getValue();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.HierarchicalStreamReader.moveUp()",
    "boolean": 1,
    "context": " thoughtworks moveUp();// moves back to <PositionBorder> thoughtworks moveDown();// should move down to <StartDate> tag String startDate = thoughtworks getValue();setStartDate(startDate); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>moveUp();// move back to <PositionBorder> thoughtworks moveDown();// should move down to <EndDate> tag String endDate = thoughtworks getValue();setEndDate(endDate); thoughtworks moveUp();// move back to <PositionBorder> return position;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.HierarchicalStreamReader.moveDown()",
    "boolean": 1,
    "context": " thoughtworks moveUp();// moves back to <PositionBorder> thoughtworks moveDown();// should move down to <StartDate> tag String startDate = thoughtworks getValue();setStartDate(startDate); thoughtworks moveUp();// move back to <PositionBorder> thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>moveDown();// should move down to <EndDate> tag String endDate = thoughtworks getValue();setEndDate(endDate); thoughtworks moveUp();// move back to <PositionBorder> return position;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.HierarchicalStreamReader.getValue()",
    "boolean": 1,
    "context": " thoughtworks moveUp();// moves back to <PositionBorder> thoughtworks moveDown();// should move down to <StartDate> tag String startDate = thoughtworks getValue();setStartDate(startDate); thoughtworks moveUp();// move back to <PositionBorder> thoughtworks moveDown();// should move down to <EndDate> tag String endDate = thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getValue();setEndDate(endDate); thoughtworks moveUp();// move back to <PositionBorder> return position;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.HierarchicalStreamReader.moveUp()",
    "boolean": 1,
    "context": " thoughtworks moveUp();// move back to <PositionBorder> thoughtworks moveDown();// should move down to <EndDate> tag String endDate = thoughtworks getValue();setEndDate(endDate); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>moveUp();// move back to <PositionBorder> return position;} } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.Converter",
    "boolean": 1,
    "context": "public class xstream_class_18 { public class MapToAttributesConverter implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Converter { public MapToAttributesConverter() { } @Override public boolean canConvert(Class type) { return isAssignableFrom(type);} @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { Map<String, String> map = ((Map<String, String>) (source));for (Entry<String, String> entry : entrySet()) { addAttribute Map$getKey(), Map$getValue().toString());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util.Attributes",
    "truth_type": "java.util.Map",
    "full_FQN": "java.util.Map.class.isAssignableFrom()",
    "boolean": 0,
    "context": "public class xstream_class_18 { public class MapToAttributesConverter implements Converter { public MapToAttributesConverter() { } @Override public boolean canConvert(Class type) { return <mask><mask><mask><mask><mask>isAssignableFrom(type);} @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { Map<String, String> map = ((Map<String, String>) (source));for (Entry<String, String> entry : entrySet()) { addAttribute Map$getKey(), Map$getValue().toString());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamWriter",
    "boolean": 1,
    "context": "public class xstream_class_18 { public class MapToAttributesConverter implements Converter { public MapToAttributesConverter() { } @Override public boolean canConvert(Class type) { return isAssignableFrom(type);} @Override public void marshal(Object source, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HierarchicalStreamWriter writer, MarshallingContext context) { Map<String, String> map = ((Map<String, String>) (source));for (Entry<String, String> entry : entrySet()) { addAttribute Map$getKey(), Map$getValue().toString());} } @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { Map<String, String> map = new HashMap<String, String>();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.MarshallingContext",
    "boolean": 1,
    "context": "public class xstream_class_18 { public class MapToAttributesConverter implements Converter { public MapToAttributesConverter() { } @Override public boolean canConvert(Class type) { return isAssignableFrom(type);} @Override public void marshal(Object source, HierarchicalStreamWriter writer, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MarshallingContext context) { Map<String, String> map = ((Map<String, String>) (source));for (Entry<String, String> entry : entrySet()) { addAttribute Map$getKey(), Map$getValue().toString());} } @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { Map<String, String> map = new HashMap<String, String>();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map",
    "boolean": 1,
    "context": "public class xstream_class_18 { public class MapToAttributesConverter implements Converter { public MapToAttributesConverter() { } @Override public boolean canConvert(Class type) { return isAssignableFrom(type);} @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { <mask><mask><mask>.Map<String, String> map = ((Map<String, String>) (source));for (Entry<String, String> entry : entrySet()) { addAttribute Map$getKey(), Map$getValue().toString());} } @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { Map<String, String> map = new HashMap<String, String>();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map",
    "boolean": 1,
    "context": "public class xstream_class_18 { public class MapToAttributesConverter implements Converter { public MapToAttributesConverter() { } @Override public boolean canConvert(Class type) { return isAssignableFrom(type);} @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { Map<String, String> map = ((<mask><mask><mask>.Map<String, String>) (source));for (Entry<String, String> entry : entrySet()) { addAttribute Map$getKey(), Map$getValue().toString());} } @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { Map<String, String> map = new HashMap<String, String>();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util.Map",
    "truth_type": "java.util.Map",
    "full_FQN": "java.util.Map.Entry",
    "boolean": 1,
    "context": "public class xstream_class_18 { public class MapToAttributesConverter implements Converter { public MapToAttributesConverter() { } @Override public boolean canConvert(Class type) { return isAssignableFrom(type);} @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { Map<String, String> map = ((Map<String, String>) (source));for (<mask><mask><mask><mask><mask>.Entry<String, String> entry : entrySet()) { addAttribute Map$getKey(), Map$getValue().toString());} } @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { Map<String, String> map = new HashMap<String, String>();for (int i = 0; i < getAttributeCount(); i++) { String key = getAttributeName(i);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map.entrySet()",
    "boolean": 1,
    "context": "public class xstream_class_18 { public class MapToAttributesConverter implements Converter { public MapToAttributesConverter() { } @Override public boolean canConvert(Class type) { return isAssignableFrom(type);} @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { Map<String, String> map = ((Map<String, String>) (source));for (Entry<String, String> entry : <mask><mask><mask>entrySet()) { addAttribute Map$getKey(), Map$getValue().toString());} } @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { Map<String, String> map = new HashMap<String, String>();for (int i = 0; i < getAttributeCount(); i++) { String key = getAttributeName(i);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io.HierarchicalStreamWriter",
    "truth_type": "com.thoughtworks.xstream.io.HierarchicalStreamWriter",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamWriter.addAttribute",
    "boolean": 1,
    "context": "public class xstream_class_18 { public class MapToAttributesConverter implements Converter { public MapToAttributesConverter() { } @Override public boolean canConvert(Class type) { return isAssignableFrom(type);} @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { Map<String, String> map = ((Map<String, String>) (source));for (Entry<String, String> entry : entrySet()) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.addAttribute Map$getKey(), Map$getValue().toString());} } @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { Map<String, String> map = new HashMap<String, String>();for (int i = 0; i < getAttributeCount(); i++) { String key = getAttributeName(i);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map",
    "boolean": 1,
    "context": "public class xstream_class_18 { public class MapToAttributesConverter implements Converter { public MapToAttributesConverter() { } @Override public boolean canConvert(Class type) { return isAssignableFrom(type);} @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { Map<String, String> map = ((Map<String, String>) (source));for (Entry<String, String> entry : entrySet()) { addAttribute <mask><mask><mask>.Map$getKey(), Map$getValue().toString());} } @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { Map<String, String> map = new HashMap<String, String>();for (int i = 0; i < getAttributeCount(); i++) { String key = getAttributeName(i);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map",
    "boolean": 1,
    "context": "public class xstream_class_18 { public class MapToAttributesConverter implements Converter { public MapToAttributesConverter() { } @Override public boolean canConvert(Class type) { return isAssignableFrom(type);} @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { Map<String, String> map = ((Map<String, String>) (source));for (Entry<String, String> entry : entrySet()) { addAttribute Map$getKey(), <mask><mask><mask>.Map$getValue().toString());} } @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { Map<String, String> map = new HashMap<String, String>();for (int i = 0; i < getAttributeCount(); i++) { String key = getAttributeName(i);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader",
    "boolean": 1,
    "context": "} @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { Map<String, String> map = ((Map<String, String>) (source));for (Entry<String, String> entry : entrySet()) { addAttribute Map$getKey(), Map$getValue().toString());} } @Override public Object unmarshal(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HierarchicalStreamReader reader, UnmarshallingContext context) { Map<String, String> map = new HashMap<String, String>();for (int i = 0; i < getAttributeCount(); i++) { String key = getAttributeName(i);String value = getAttribute(key);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.UnmarshallingContext",
    "boolean": 1,
    "context": "} @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { Map<String, String> map = ((Map<String, String>) (source));for (Entry<String, String> entry : entrySet()) { addAttribute Map$getKey(), Map$getValue().toString());} } @Override public Object unmarshal(HierarchicalStreamReader reader, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.UnmarshallingContext context) { Map<String, String> map = new HashMap<String, String>();for (int i = 0; i < getAttributeCount(); i++) { String key = getAttributeName(i);String value = getAttribute(key);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map",
    "boolean": 1,
    "context": "} @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { Map<String, String> map = ((Map<String, String>) (source));for (Entry<String, String> entry : entrySet()) { addAttribute Map$getKey(), Map$getValue().toString());} } @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { <mask><mask><mask>.Map<String, String> map = new HashMap<String, String>();for (int i = 0; i < getAttributeCount(); i++) { String key = getAttributeName(i);String value = getAttribute(key);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.HashMap",
    "boolean": 1,
    "context": "} @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { Map<String, String> map = ((Map<String, String>) (source));for (Entry<String, String> entry : entrySet()) { addAttribute Map$getKey(), Map$getValue().toString());} } @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { Map<String, String> map = new <mask><mask><mask>.HashMap<String, String>();for (int i = 0; i < getAttributeCount(); i++) { String key = getAttributeName(i);String value = getAttribute(key);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.getAttributeCount()",
    "boolean": 1,
    "context": "for (Entry<String, String> entry : entrySet()) { addAttribute Map$getKey(), Map$getValue().toString());} } @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { Map<String, String> map = new HashMap<String, String>();for (int i = 0; i < <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getAttributeCount(); i++) { String key = getAttributeName(i);String value = getAttribute(key); put(key, value);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.getAttributeName()",
    "boolean": 1,
    "context": "for (Entry<String, String> entry : entrySet()) { addAttribute Map$getKey(), Map$getValue().toString());} } @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { Map<String, String> map = new HashMap<String, String>();for (int i = 0; i < getAttributeCount(); i++) { String key = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getAttributeName(i);String value = getAttribute(key); put(key, value);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.getAttribute()",
    "boolean": 1,
    "context": "} } @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { Map<String, String> map = new HashMap<String, String>();for (int i = 0; i < getAttributeCount(); i++) { String key = getAttributeName(i);String value = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getAttribute(key); put(key, value);} return map;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map.put()",
    "boolean": 1,
    "context": "for (int i = 0; i < getAttributeCount(); i++) { String key = getAttributeName(i);String value = getAttribute(key); <mask><mask><mask>put(key, value);} return map;} } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.Converter",
    "boolean": 1,
    "context": "public class xstream_class_19 { public class CustomConverter implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Converter { public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { // TODO: Get annotation value from object 'source' with name of tag via  // Or add a method to the AnimalConfig interface giving you tag name to put to serialization  } public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { Class canConvert = null;// TODO: use reflection to create animal object based on what you xml tag you have at  return convertAnother currentObject(), canConvert);} public boolean canConvert(Class type) { return true;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamWriter",
    "boolean": 1,
    "context": "public class xstream_class_19 { public class CustomConverter implements Converter { public void marshal(Object source, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HierarchicalStreamWriter writer, MarshallingContext context) { // TODO: Get annotation value from object 'source' with name of tag via  // Or add a method to the AnimalConfig interface giving you tag name to put to serialization  } public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { Class canConvert = null;// TODO: use reflection to create animal object based on what you xml tag you have at  return convertAnother currentObject(), canConvert);} public boolean canConvert(Class type) { return true;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.MarshallingContext",
    "boolean": 1,
    "context": "public class xstream_class_19 { public class CustomConverter implements Converter { public void marshal(Object source, HierarchicalStreamWriter writer, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MarshallingContext context) { // TODO: Get annotation value from object 'source' with name of tag via  // Or add a method to the AnimalConfig interface giving you tag name to put to serialization  } public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { Class canConvert = null;// TODO: use reflection to create animal object based on what you xml tag you have at  return convertAnother currentObject(), canConvert);} public boolean canConvert(Class type) { return true;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader",
    "boolean": 1,
    "context": "public class xstream_class_19 { public class CustomConverter implements Converter { public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { // TODO: Get annotation value from object 'source' with name of tag via  // Or add a method to the AnimalConfig interface giving you tag name to put to serialization  } public Object unmarshal(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HierarchicalStreamReader reader, UnmarshallingContext context) { Class canConvert = null;// TODO: use reflection to create animal object based on what you xml tag you have at  return convertAnother currentObject(), canConvert);} public boolean canConvert(Class type) { return true;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.UnmarshallingContext",
    "boolean": 1,
    "context": "public class xstream_class_19 { public class CustomConverter implements Converter { public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { // TODO: Get annotation value from object 'source' with name of tag via  // Or add a method to the AnimalConfig interface giving you tag name to put to serialization  } public Object unmarshal(HierarchicalStreamReader reader, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.UnmarshallingContext context) { Class canConvert = null;// TODO: use reflection to create animal object based on what you xml tag you have at  return convertAnother currentObject(), canConvert);} public boolean canConvert(Class type) { return true;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters.UnmarshallingContext",
    "truth_type": "com.thoughtworks.xstream.converters.UnmarshallingContext",
    "full_FQN": "com.thoughtworks.xstream.converters.UnmarshallingContext.convertAnother",
    "boolean": 1,
    "context": "public class xstream_class_19 { public class CustomConverter implements Converter { public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { // TODO: Get annotation value from object 'source' with name of tag via  // Or add a method to the AnimalConfig interface giving you tag name to put to serialization  } public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { Class canConvert = null;// TODO: use reflection to create animal object based on what you xml tag you have at  return <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.convertAnother currentObject(), canConvert);} public boolean canConvert(Class type) { return true;} } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.UnmarshallingContext.currentObject()",
    "boolean": 1,
    "context": "public class xstream_class_19 { public class CustomConverter implements Converter { public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { // TODO: Get annotation value from object 'source' with name of tag via  // Or add a method to the AnimalConfig interface giving you tag name to put to serialization  } public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { Class canConvert = null;// TODO: use reflection to create animal object based on what you xml tag you have at  return convertAnother <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>currentObject(), canConvert);} public boolean canConvert(Class type) { return true;} } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.IOException",
    "boolean": 1,
    "context": "// ID = 7491195 public class xstream_class_2 { public static void main(String[] arg) throws <mask><mask><mask>.IOException { thoughtworks XStream xstream = new thoughtworks XStream(new thoughtworks DomDriver());FileReader fin = new FileReader(String);BufferedReader br = new BufferedReader(fin);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream",
    "boolean": 1,
    "context": "// ID = 7491195 public class xstream_class_2 { public static void main(String[] arg) throws IOException { thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.XStream xstream = new thoughtworks XStream(new thoughtworks DomDriver());FileReader fin = new FileReader(String);BufferedReader br = new BufferedReader(fin);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream()",
    "boolean": 1,
    "context": "// ID = 7491195 public class xstream_class_2 { public static void main(String[] arg) throws IOException { thoughtworks XStream xstream = new thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask>XStream(new thoughtworks DomDriver());FileReader fin = new FileReader(String);BufferedReader br = new BufferedReader(fin);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.xml.DomDriver()",
    "boolean": 1,
    "context": "// ID = 7491195 public class xstream_class_2 { public static void main(String[] arg) throws IOException { thoughtworks XStream xstream = new thoughtworks XStream(new thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>DomDriver());FileReader fin = new FileReader(String);BufferedReader br = new BufferedReader(fin);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileReader",
    "boolean": 1,
    "context": "// ID = 7491195 public class xstream_class_2 { public static void main(String[] arg) throws IOException { thoughtworks XStream xstream = new thoughtworks XStream(new thoughtworks DomDriver());<mask><mask><mask>.FileReader fin = new FileReader(String);BufferedReader br = new BufferedReader(fin);String str = null;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileReader()",
    "boolean": 1,
    "context": "// ID = 7491195 public class xstream_class_2 { public static void main(String[] arg) throws IOException { thoughtworks XStream xstream = new thoughtworks XStream(new thoughtworks DomDriver());FileReader fin = new <mask><mask><mask>.FileReader(String);BufferedReader br = new BufferedReader(fin);String str = null;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.BufferedReader",
    "boolean": 1,
    "context": "// ID = 7491195 public class xstream_class_2 { public static void main(String[] arg) throws IOException { thoughtworks XStream xstream = new thoughtworks XStream(new thoughtworks DomDriver());FileReader fin = new FileReader(String);<mask><mask><mask>.BufferedReader br = new BufferedReader(fin);String str = null;while  ready()) { str += readLine() + String;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.BufferedReader()",
    "boolean": 1,
    "context": "// ID = 7491195 public class xstream_class_2 { public static void main(String[] arg) throws IOException { thoughtworks XStream xstream = new thoughtworks XStream(new thoughtworks DomDriver());FileReader fin = new FileReader(String);BufferedReader br = new <mask><mask><mask>.BufferedReader(fin);String str = null;while  ready()) { str += readLine() + String;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.BufferedReader.ready()",
    "boolean": 1,
    "context": "java.io.BufferedReader br = new BufferedReader(fin);String str = null;while  <mask><mask><mask>ready()) { str += readLine() + String;} } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.BufferedReader.readLine()",
    "boolean": 1,
    "context": "java.io.BufferedReader br = new BufferedReader(fin);String str = null;while  ready()) { str += <mask><mask><mask>readLine() + String;} } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File",
    "boolean": 1,
    "context": "public class xstream_class_20 { @SuppressWarnings(String) public static <A> A fromXML(Class c, <mask><mask><mask>.File file) { // Don't ever try to use  They are VERY  XStream xStream = new XStream();InputStream inputStream = null;Reader reader = null;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream",
    "boolean": 1,
    "context": "public class xstream_class_20 { @SuppressWarnings(String) public static <A> A fromXML(Class c, File file) { // Don't ever try to use  They are VERY  <mask><mask><mask><mask><mask><mask><mask><mask>.XStream xStream = new XStream();InputStream inputStream = null;Reader reader = null;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks",
    "truth_type": "com.thoughtworks",
    "full_FQN": "com.thoughtworks.xstream.XStream()",
    "boolean": 1,
    "context": "public class xstream_class_20 { @SuppressWarnings(String) public static <A> A fromXML(Class c, File file) { // Don't ever try to use  They are VERY  XStream xStream = new <mask><mask><mask><mask><mask>XStream();InputStream inputStream = null;Reader reader = null;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.InputStream",
    "boolean": 1,
    "context": "public class xstream_class_20 { @SuppressWarnings(String) public static <A> A fromXML(Class c, File file) { // Don't ever try to use  They are VERY  XStream xStream = new XStream();<mask><mask><mask>.InputStream inputStream = null;Reader reader = null;try { inputStream = new FileInputStream(file);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.Reader",
    "boolean": 1,
    "context": "public class xstream_class_20 { @SuppressWarnings(String) public static <A> A fromXML(Class c, File file) { // Don't ever try to use  They are VERY  XStream xStream = new XStream();InputStream inputStream = null;<mask><mask><mask>.Reader reader = null;try { inputStream = new FileInputStream(file);reader = new InputStreamReader(inputStream, forName(String));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileInputStream()",
    "boolean": 1,
    "context": "java.io.InputStream inputStream = null;Reader reader = null;try { inputStream = new <mask><mask><mask>.FileInputStream(file);reader = new InputStreamReader(inputStream, forName(String));Object object = fromXML(reader);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.InputStreamReader()",
    "boolean": 1,
    "context": "java.io.Reader reader = null;try { inputStream = new FileInputStream(file);reader = new <mask><mask><mask>.InputStreamReader(inputStream, forName(String));Object object = fromXML(reader);if  isInstance(object)) { return ((A) (object));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.nio.charset",
    "truth_type": "java.nio.charset",
    "full_FQN": "java.nio.charset.Charset.forName()",
    "boolean": 1,
    "context": "java.io.Reader reader = null;try { inputStream = new FileInputStream(file);reader = new InputStreamReader(inputStream, <mask><mask><mask><mask><mask><mask><mask><mask>forName(String));Object object = fromXML(reader);if  isInstance(object)) { return ((A) (object));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.fromXML()",
    "boolean": 1,
    "context": "try { inputStream = new FileInputStream(file);reader = new InputStreamReader(inputStream, forName(String));Object object = <mask><mask><mask><mask><mask><mask><mask><mask>fromXML(reader);if  isInstance(object)) { return ((A) (object));} } catch (Exception exp) { } finally { if (false) { return null;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.Converter",
    "boolean": 1,
    "context": "public class xstream_class_21 { static class MyConverter implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Converter { private final Map<String, String> attributes;private final Class<?> clazz;private final xstream Mapper mapper;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map",
    "boolean": 1,
    "context": "public class xstream_class_21 { static class MyConverter implements Converter { private final <mask><mask><mask>.Map<String, String> attributes;private final Class<?> clazz;private final xstream Mapper mapper;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks",
    "truth_type": "com.thoughtworks",
    "full_FQN": "com.thoughtworks.xstream",
    "boolean": 1,
    "context": "public class xstream_class_21 { static class MyConverter implements Converter { private final Map<String, String> attributes;private final Class<?> clazz;private final <mask><mask><mask><mask><mask>.xstream Mapper mapper;private final ReflectionProvider reflectionProvider;public MyConverter(xstream Mapper mapper, ReflectionProvider reflectionProvider, Class<?> clazz, Map<String, String> attributes) { super();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.mapper.Mapper",
    "truth_type": "com.thoughtworks.xstream.mapper.Mapper",
    "full_FQN": "com.thoughtworks.xstream.mapper.Mapper.Mapper",
    "boolean": 1,
    "context": "public class xstream_class_21 { static class MyConverter implements Converter { private final Map<String, String> attributes;private final Class<?> clazz;private final xstream <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Mapper mapper;private final ReflectionProvider reflectionProvider;public MyConverter(xstream Mapper mapper, ReflectionProvider reflectionProvider, Class<?> clazz, Map<String, String> attributes) { super();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters.reflection",
    "truth_type": "com.thoughtworks.xstream.converters.reflection",
    "full_FQN": "com.thoughtworks.xstream.converters.reflection.ReflectionProvider",
    "boolean": 1,
    "context": "private final Class<?> clazz;private final xstream Mapper mapper;private final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ReflectionProvider reflectionProvider;public MyConverter(xstream Mapper mapper, ReflectionProvider reflectionProvider, Class<?> clazz, Map<String, String> attributes) { super();mapper = mapper;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks",
    "truth_type": "com.thoughtworks",
    "full_FQN": "com.thoughtworks.xstream",
    "boolean": 1,
    "context": "private final xstream Mapper mapper;private final ReflectionProvider reflectionProvider;public MyConverter(<mask><mask><mask><mask><mask>.xstream Mapper mapper, ReflectionProvider reflectionProvider, Class<?> clazz, Map<String, String> attributes) { super();mapper = mapper;reflectionProvider = reflectionProvider;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.mapper.Mapper",
    "truth_type": "com.thoughtworks.xstream.mapper.Mapper",
    "full_FQN": "com.thoughtworks.xstream.mapper.Mapper.Mapper",
    "boolean": 1,
    "context": "private final xstream Mapper mapper;private final ReflectionProvider reflectionProvider;public MyConverter(xstream <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Mapper mapper, ReflectionProvider reflectionProvider, Class<?> clazz, Map<String, String> attributes) { super();mapper = mapper;reflectionProvider = reflectionProvider;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters.reflection",
    "truth_type": "com.thoughtworks.xstream.converters.reflection",
    "full_FQN": "com.thoughtworks.xstream.converters.reflection.ReflectionProvider",
    "boolean": 1,
    "context": "private final xstream Mapper mapper;private final ReflectionProvider reflectionProvider;public MyConverter(xstream Mapper mapper, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ReflectionProvider reflectionProvider, Class<?> clazz, Map<String, String> attributes) { super();mapper = mapper;reflectionProvider = reflectionProvider;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map",
    "boolean": 1,
    "context": "private final xstream Mapper mapper;private final ReflectionProvider reflectionProvider;public MyConverter(xstream Mapper mapper, ReflectionProvider reflectionProvider, Class<?> clazz, <mask><mask><mask>.Map<String, String> attributes) { super();mapper = mapper;reflectionProvider = reflectionProvider;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamWriter",
    "boolean": 1,
    "context": "this.clazz = clazz;} @Override public boolean canConvert(Class cls) { return cls == clazz;} @Override public void marshal(Object value, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HierarchicalStreamWriter writer, MarshallingContext context) { for (String key : keySet()) { addAttribute(key, get(key));} Converter converter = new ReflectionConverter(mapper, reflectionProvider);Object p = null;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.MarshallingContext",
    "boolean": 1,
    "context": "this.clazz = clazz;} @Override public boolean canConvert(Class cls) { return cls == clazz;} @Override public void marshal(Object value, HierarchicalStreamWriter writer, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MarshallingContext context) { for (String key : keySet()) { addAttribute(key, get(key));} Converter converter = new ReflectionConverter(mapper, reflectionProvider);Object p = null;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map.keySet()",
    "boolean": 1,
    "context": "this.clazz = clazz;} @Override public boolean canConvert(Class cls) { return cls == clazz;} @Override public void marshal(Object value, HierarchicalStreamWriter writer, MarshallingContext context) { for (String key : <mask><mask><mask>keySet()) { addAttribute(key, get(key));} Converter converter = new ReflectionConverter(mapper, reflectionProvider);Object p = null;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamWriter.addAttribute()",
    "boolean": 1,
    "context": "this.clazz = clazz;} @Override public boolean canConvert(Class cls) { return cls == clazz;} @Override public void marshal(Object value, HierarchicalStreamWriter writer, MarshallingContext context) { for (String key : keySet()) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addAttribute(key, get(key));} Converter converter = new ReflectionConverter(mapper, reflectionProvider);Object p = null;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map.get()",
    "boolean": 1,
    "context": "this.clazz = clazz;} @Override public boolean canConvert(Class cls) { return cls == clazz;} @Override public void marshal(Object value, HierarchicalStreamWriter writer, MarshallingContext context) { for (String key : keySet()) { addAttribute(key, <mask><mask><mask>get(key));} Converter converter = new ReflectionConverter(mapper, reflectionProvider);Object p = null;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.Converter",
    "boolean": 1,
    "context": "} @Override public boolean canConvert(Class cls) { return cls == clazz;} @Override public void marshal(Object value, HierarchicalStreamWriter writer, MarshallingContext context) { for (String key : keySet()) { addAttribute(key, get(key));} <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Converter converter = new ReflectionConverter(mapper, reflectionProvider);Object p = null; convertAnother(p, converter);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.reflection.ReflectionConverter()",
    "boolean": 1,
    "context": "} @Override public boolean canConvert(Class cls) { return cls == clazz;} @Override public void marshal(Object value, HierarchicalStreamWriter writer, MarshallingContext context) { for (String key : keySet()) { addAttribute(key, get(key));} Converter converter = new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>ReflectionConverter(mapper, reflectionProvider);Object p = null; convertAnother(p, converter);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.MarshallingContext.convertAnother()",
    "boolean": 1,
    "context": "} Converter converter = new ReflectionConverter(mapper, reflectionProvider);Object p = null; <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>convertAnother(p, converter);} @Override public Object unmarshal(HierarchicalStreamReader arg0, UnmarshallingContext arg1) { // TODO Auto-generated method stub return null;} } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader",
    "boolean": 1,
    "context": "java.lang.Object p = null; convertAnother(p, converter);} @Override public Object unmarshal(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HierarchicalStreamReader arg0, UnmarshallingContext arg1) { // TODO Auto-generated method stub return null;} } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.UnmarshallingContext",
    "boolean": 1,
    "context": "java.lang.Object p = null; convertAnother(p, converter);} @Override public Object unmarshal(HierarchicalStreamReader arg0, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.UnmarshallingContext arg1) { // TODO Auto-generated method stub return null;} } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.annotations.XStreamAlias()",
    "boolean": 1,
    "context": "@<mask><mask><mask><mask><mask><mask><mask><mask>XStreamAlias(String) public class xstream_class_22 { private String name;// any element named numberOfEmployees should go into this list @XStreamImplicit(itemFieldName = String) protected List<NumberOfPersonnel> numberOfEmployees;public xstream_class_22(String name, List<NumberOfPersonnel> noEmp) { name = name;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.annotations.XStreamImplicit()",
    "boolean": 1,
    "context": "@XStreamAlias(String) public class xstream_class_22 { private String name;// any element named numberOfEmployees should go into this list @<mask><mask><mask><mask><mask><mask><mask><mask>XStreamImplicit(itemFieldName = String) protected List<NumberOfPersonnel> numberOfEmployees;public xstream_class_22(String name, List<NumberOfPersonnel> noEmp) { name = name;numberOfEmployees = noEmp;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "@XStreamAlias(String) public class xstream_class_22 { private String name;// any element named numberOfEmployees should go into this list @XStreamImplicit(itemFieldName = String) protected <mask><mask><mask>.List<NumberOfPersonnel> numberOfEmployees;public xstream_class_22(String name, List<NumberOfPersonnel> noEmp) { name = name;numberOfEmployees = noEmp;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "@XStreamAlias(String) public class xstream_class_22 { private String name;// any element named numberOfEmployees should go into this list @XStreamImplicit(itemFieldName = String) protected List<NumberOfPersonnel> numberOfEmployees;public xstream_class_22(String name, <mask><mask><mask>.List<NumberOfPersonnel> noEmp) { name = name;numberOfEmployees = noEmp;} public String toString() { return (name + String) + numberOfEmployees;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream",
    "boolean": 1,
    "context": "this.numberOfEmployees = noEmp;} public String toString() { return (name + String) + numberOfEmployees;} public static void main(String[] args) throws Exception { <mask><mask><mask><mask><mask><mask><mask><mask>.XStream xs = new XStream(); processAnnotations(class);println(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks",
    "truth_type": "com.thoughtworks",
    "full_FQN": "com.thoughtworks.xstream.XStream()",
    "boolean": 1,
    "context": "this.numberOfEmployees = noEmp;} public String toString() { return (name + String) + numberOfEmployees;} public static void main(String[] args) throws Exception { XStream xs = new <mask><mask><mask><mask><mask>XStream(); processAnnotations(class);println(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.processAnnotations()",
    "boolean": 1,
    "context": "} public String toString() { return (name + String) + numberOfEmployees;} public static void main(String[] args) throws Exception { XStream xs = new XStream(); <mask><mask><mask><mask><mask><mask><mask><mask>processAnnotations(class);println(String);println fromXML(new File(String)));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.fromXML()",
    "boolean": 1,
    "context": " processAnnotations(class);println(String);println <mask><mask><mask><mask><mask><mask><mask><mask>fromXML(new File(String)));println(String);println toXML(new xstream_class_22(String, asList(new NumberOfPersonnel(2001, 1000), new NumberOfPersonnel(2002, 500)))));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File()",
    "boolean": 1,
    "context": " processAnnotations(class);println(String);println fromXML(new <mask><mask><mask>.File(String)));println(String);println toXML(new xstream_class_22(String, asList(new NumberOfPersonnel(2001, 1000), new NumberOfPersonnel(2002, 500)))));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.toXML()",
    "boolean": 1,
    "context": "java.lang.System.out.println fromXML(new File(String)));println(String);println <mask><mask><mask><mask><mask><mask><mask><mask>toXML(new xstream_class_22(String, asList(new NumberOfPersonnel(2001, 1000), new NumberOfPersonnel(2002, 500)))));} @XStreamConverter(value = class, strings = { String }) public static class NumberOfPersonnel { public NumberOfPersonnel(int year, double value) { year = year;value = value;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Arrays.asList()",
    "boolean": 1,
    "context": "java.lang.System.out.println fromXML(new File(String)));println(String);println toXML(new xstream_class_22(String, <mask><mask><mask>asList(new NumberOfPersonnel(2001, 1000), new NumberOfPersonnel(2002, 500)))));} @XStreamConverter(value = class, strings = { String }) public static class NumberOfPersonnel { public NumberOfPersonnel(int year, double value) { year = year;value = value;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.annotations.XStreamConverter()",
    "boolean": 1,
    "context": "java.lang.System.out.println(String);println toXML(new xstream_class_22(String, asList(new NumberOfPersonnel(2001, 1000), new NumberOfPersonnel(2002, 500)))));} @<mask><mask><mask><mask><mask><mask><mask><mask>XStreamConverter(value = class, strings = { String }) public static class NumberOfPersonnel { public NumberOfPersonnel(int year, double value) { year = year;value = value;} private int year;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converannot.Perver.TestOf.nelConverter",
    "truth_type": "com.thoughtworks.xstream.converters.extended.ToAttributedValueConverter",
    "full_FQN": "com.thoughtworks.xstream.converters.extended.ToAttributedValueConverter.class",
    "boolean": 0,
    "context": "java.lang.System.out.println(String);println toXML(new xstream_class_22(String, asList(new NumberOfPersonnel(2001, 1000), new NumberOfPersonnel(2002, 500)))));} @XStreamConverter(value = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.class, strings = { String }) public static class NumberOfPersonnel { public NumberOfPersonnel(int year, double value) { year = year;value = value;} private int year;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xance",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.annotations.XStreamAlias()",
    "boolean": 0,
    "context": "public class xstream_class_23 { @<mask><mask><mask><mask><mask><mask><mask><mask>XStreamAlias(String) public class TestObject { private String foo;public String getFoo() { // return foo; -- Adjusted for EDIT#2 return toLowerCase();} public void setFoo(String foo) { foo = foo;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream",
    "boolean": 1,
    "context": "public String getFoo() { // return foo; -- Adjusted for EDIT#2 return toLowerCase();} public void setFoo(String foo) { foo = foo;} } public void test() throws Exception { <mask><mask><mask><mask><mask><mask><mask><mask>.XStream x = new XStream(new XppDriver()); autodetectAnnotations(true); processAnnotations(class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks",
    "truth_type": "com.thoughtworks",
    "full_FQN": "com.thoughtworks.xstream.XStream()",
    "boolean": 1,
    "context": "public String getFoo() { // return foo; -- Adjusted for EDIT#2 return toLowerCase();} public void setFoo(String foo) { foo = foo;} } public void test() throws Exception { XStream x = new <mask><mask><mask><mask><mask>XStream(new XppDriver()); autodetectAnnotations(true); processAnnotations(class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.xml.XppDriver()",
    "boolean": 1,
    "context": "public String getFoo() { // return foo; -- Adjusted for EDIT#2 return toLowerCase();} public void setFoo(String foo) { foo = foo;} } public void test() throws Exception { XStream x = new XStream(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>XppDriver()); autodetectAnnotations(true); processAnnotations(class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.autodetectAnnotations()",
    "boolean": 1,
    "context": "} public void setFoo(String foo) { foo = foo;} } public void test() throws Exception { XStream x = new XStream(new XppDriver()); <mask><mask><mask><mask><mask><mask><mask><mask>autodetectAnnotations(true); processAnnotations(class); registerConverter(new JavaBeanConverter getMapper()));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.processAnnotations()",
    "boolean": 1,
    "context": "} } public void test() throws Exception { XStream x = new XStream(new XppDriver()); autodetectAnnotations(true); <mask><mask><mask><mask><mask><mask><mask><mask>processAnnotations(class); registerConverter(new JavaBeanConverter getMapper()));TestObject o = new TestObject();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.registerConverter()",
    "boolean": 1,
    "context": " autodetectAnnotations(true); processAnnotations(class); <mask><mask><mask><mask><mask><mask><mask><mask>registerConverter(new JavaBeanConverter getMapper()));TestObject o = new TestObject();// setFoo(String); -- Adjusted for EDIT#2 setFoo(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters.javabean",
    "truth_type": "com.thoughtworks.xstream.converters.javabean",
    "full_FQN": "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter",
    "boolean": 1,
    "context": " autodetectAnnotations(true); processAnnotations(class); registerConverter(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.JavaBeanConverter getMapper()));TestObject o = new TestObject();// setFoo(String); -- Adjusted for EDIT#2 setFoo(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.getMapper()",
    "boolean": 1,
    "context": " autodetectAnnotations(true); processAnnotations(class); registerConverter(new JavaBeanConverter <mask><mask><mask><mask><mask><mask><mask><mask>getMapper()));TestObject o = new TestObject();// setFoo(String); -- Adjusted for EDIT#2 setFoo(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.toXML()",
    "boolean": 1,
    "context": "TestObject o = new TestObject();// setFoo(String); -- Adjusted for EDIT#2 setFoo(String);String xml = <mask><mask><mask><mask><mask><mask><mask><mask>toXML(o);println(xml);/*  <test> <foo>bar</foo> </test> But instead  <test> <foo/> </test> */ } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.though",
    "truth_type": "Expecting..",
    "full_FQN": "Expecting...",
    "boolean": 0,
    "context": "java.lang.String xml = toXML(o);println(xml);/* <mask><mask><mask> <test> <foo>bar</foo> </test> But instead  <test> <foo/> </test> */ } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "<.",
    "truth_type": "getting..",
    "full_FQN": "getting...",
    "boolean": 0,
    "context": "java.lang.String xml = toXML(o);println(xml);/*  <test> <foo>bar</foo> </test> But instead <mask><mask> <test> <foo/> </test> */ } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters.reflection",
    "truth_type": "com.thoughtworks.xstream.converters.reflection",
    "full_FQN": "com.thoughtworks.xstream.converters.reflection.ReflectionConverter",
    "boolean": 1,
    "context": "public class xstream_class_24 { public class DetailDollarsConverter extends <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ReflectionConverter { public DetailDollarsConverter(xstream Mapper mapper, ReflectionProvider reflectionProvider) { super(mapper, reflectionProvider);} @Override public void marshal(Object obj, HierarchicalStreamWriter writer, MarshallingContext context) { marshal(obj, writer, context); startNode(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks",
    "truth_type": "com.thoughtworks",
    "full_FQN": "com.thoughtworks.xstream",
    "boolean": 1,
    "context": "public class xstream_class_24 { public class DetailDollarsConverter extends ReflectionConverter { public DetailDollarsConverter(<mask><mask><mask><mask><mask>.xstream Mapper mapper, ReflectionProvider reflectionProvider) { super(mapper, reflectionProvider);} @Override public void marshal(Object obj, HierarchicalStreamWriter writer, MarshallingContext context) { marshal(obj, writer, context); startNode(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.mapper.Mapper",
    "truth_type": "com.thoughtworks.xstream.mapper.Mapper",
    "full_FQN": "com.thoughtworks.xstream.mapper.Mapper.Mapper",
    "boolean": 1,
    "context": "public class xstream_class_24 { public class DetailDollarsConverter extends ReflectionConverter { public DetailDollarsConverter(xstream <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Mapper mapper, ReflectionProvider reflectionProvider) { super(mapper, reflectionProvider);} @Override public void marshal(Object obj, HierarchicalStreamWriter writer, MarshallingContext context) { marshal(obj, writer, context); startNode(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters.reflection",
    "truth_type": "com.thoughtworks.xstream.converters.reflection",
    "full_FQN": "com.thoughtworks.xstream.converters.reflection.ReflectionProvider",
    "boolean": 1,
    "context": "public class xstream_class_24 { public class DetailDollarsConverter extends ReflectionConverter { public DetailDollarsConverter(xstream Mapper mapper, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ReflectionProvider reflectionProvider) { super(mapper, reflectionProvider);} @Override public void marshal(Object obj, HierarchicalStreamWriter writer, MarshallingContext context) { marshal(obj, writer, context); startNode(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamWriter",
    "boolean": 1,
    "context": "public class xstream_class_24 { public class DetailDollarsConverter extends ReflectionConverter { public DetailDollarsConverter(xstream Mapper mapper, ReflectionProvider reflectionProvider) { super(mapper, reflectionProvider);} @Override public void marshal(Object obj, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HierarchicalStreamWriter writer, MarshallingContext context) { marshal(obj, writer, context); startNode(String); setValue(toString(20));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.MarshallingContext",
    "boolean": 1,
    "context": "public class xstream_class_24 { public class DetailDollarsConverter extends ReflectionConverter { public DetailDollarsConverter(xstream Mapper mapper, ReflectionProvider reflectionProvider) { super(mapper, reflectionProvider);} @Override public void marshal(Object obj, HierarchicalStreamWriter writer, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MarshallingContext context) { marshal(obj, writer, context); startNode(String); setValue(toString(20));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamWriter.startNode()",
    "boolean": 1,
    "context": "public class xstream_class_24 { public class DetailDollarsConverter extends ReflectionConverter { public DetailDollarsConverter(xstream Mapper mapper, ReflectionProvider reflectionProvider) { super(mapper, reflectionProvider);} @Override public void marshal(Object obj, HierarchicalStreamWriter writer, MarshallingContext context) { marshal(obj, writer, context); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>startNode(String); setValue(toString(20)); endNode();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamWriter.setValue()",
    "boolean": 1,
    "context": "} @Override public void marshal(Object obj, HierarchicalStreamWriter writer, MarshallingContext context) { marshal(obj, writer, context); startNode(String); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setValue(toString(20)); endNode();} @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { return unmarshal(reader, context);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamWriter.endNode()",
    "boolean": 1,
    "context": " startNode(String); setValue(toString(20)); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>endNode();} @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { return unmarshal(reader, context);} @SuppressWarnings(String) @Override public boolean canConvert(Class clazz) { Object o = null;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader",
    "boolean": 1,
    "context": " setValue(toString(20)); endNode();} @Override public Object unmarshal(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HierarchicalStreamReader reader, UnmarshallingContext context) { return unmarshal(reader, context);} @SuppressWarnings(String) @Override public boolean canConvert(Class clazz) { Object o = null;return equals(o);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.UnmarshallingContext",
    "boolean": 1,
    "context": " setValue(toString(20)); endNode();} @Override public Object unmarshal(HierarchicalStreamReader reader, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.UnmarshallingContext context) { return unmarshal(reader, context);} @SuppressWarnings(String) @Override public boolean canConvert(Class clazz) { Object o = null;return equals(o);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.annotations.XStreamAlias()",
    "boolean": 1,
    "context": "public class xstream_class_25 { public static void main(String[] arg) { @<mask><mask><mask><mask><mask><mask><mask><mask>XStreamAlias(String) @XStreamConverter(value = class, strings = { String }) class ResponseObject { @XStreamAlias(String) private String type;private String value;public ResponseObject() { } public String getType() { return type;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.annotations.XStreamConverter()",
    "boolean": 1,
    "context": "public class xstream_class_25 { public static void main(String[] arg) { @XStreamAlias(String) @<mask><mask><mask><mask><mask><mask><mask><mask>XStreamConverter(value = class, strings = { String }) class ResponseObject { @XStreamAlias(String) private String type;private String value;public ResponseObject() { } public String getType() { return type;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xuser...r..ums.ResponseTest..Converter",
    "truth_type": "com.thoughtworks.xstream.converters.extended.ToAttributedValueConverter",
    "full_FQN": "com.thoughtworks.xstream.converters.extended.ToAttributedValueConverter.class",
    "boolean": 0,
    "context": "public class xstream_class_25 { public static void main(String[] arg) { @XStreamAlias(String) @XStreamConverter(value = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.class, strings = { String }) class ResponseObject { @XStreamAlias(String) private String type;private String value;public ResponseObject() { } public String getType() { return type;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.annotations.XStreamAlias()",
    "boolean": 1,
    "context": "public class xstream_class_25 { public static void main(String[] arg) { @XStreamAlias(String) @XStreamConverter(value = class, strings = { String }) class ResponseObject { @<mask><mask><mask><mask><mask><mask><mask><mask>XStreamAlias(String) private String type;private String value;public ResponseObject() { } public String getType() { return type;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.SingleValueConverter",
    "boolean": 1,
    "context": "public class xstream_class_26 { public class IntegerListConverter implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.SingleValueConverter { @Override public boolean canConvert(Class clazz) { return isAssignableFrom(clazz);} @Override public Object fromString(String arg0) { Collection<Integer> collection = new ArrayList<Integer>();String[] integerStrings = split(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.lang.List",
    "truth_type": "java.util.List",
    "full_FQN": "java.util.List.class.isAssignableFrom()",
    "boolean": 0,
    "context": "public class xstream_class_26 { public class IntegerListConverter implements SingleValueConverter { @Override public boolean canConvert(Class clazz) { return <mask><mask><mask><mask><mask>isAssignableFrom(clazz);} @Override public Object fromString(String arg0) { Collection<Integer> collection = new ArrayList<Integer>();String[] integerStrings = split(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Collection",
    "boolean": 1,
    "context": "public class xstream_class_26 { public class IntegerListConverter implements SingleValueConverter { @Override public boolean canConvert(Class clazz) { return isAssignableFrom(clazz);} @Override public Object fromString(String arg0) { <mask><mask><mask>.Collection<Integer> collection = new ArrayList<Integer>();String[] integerStrings = split(String);for (int i = 0; i < length; i++) { add(valueOf(integerStrings[i]));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "public class xstream_class_26 { public class IntegerListConverter implements SingleValueConverter { @Override public boolean canConvert(Class clazz) { return isAssignableFrom(clazz);} @Override public Object fromString(String arg0) { Collection<Integer> collection = new <mask><mask><mask>.ArrayList<Integer>();String[] integerStrings = split(String);for (int i = 0; i < length; i++) { add(valueOf(integerStrings[i]));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.add()",
    "boolean": 1,
    "context": "} @Override public Object fromString(String arg0) { Collection<Integer> collection = new ArrayList<Integer>();String[] integerStrings = split(String);for (int i = 0; i < length; i++) { <mask><mask><mask>add(valueOf(integerStrings[i]));} return collection;} @Override public String toString(Object arg0) { List collection = ((List) (arg0));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "for (int i = 0; i < length; i++) { add(valueOf(integerStrings[i]));} return collection;} @Override public String toString(Object arg0) { <mask><mask><mask>.List collection = ((List) (arg0));StringBuffer sb = new StringBuffer();boolean first = true;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "for (int i = 0; i < length; i++) { add(valueOf(integerStrings[i]));} return collection;} @Override public String toString(Object arg0) { List collection = ((<mask><mask><mask>.List) (arg0));StringBuffer sb = new StringBuffer();boolean first = true;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.Converter",
    "boolean": 1,
    "context": "public class xstream_class_27 { private class ObjectContentConverter implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Converter { XStream xStream;private ObjectContentConverter(XStream xStream) { xStream = xStream;} @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { String className = uncapitalize(getClass().getSimpleName());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream",
    "boolean": 1,
    "context": "public class xstream_class_27 { private class ObjectContentConverter implements Converter { <mask><mask><mask><mask><mask><mask><mask><mask>.XStream xStream;private ObjectContentConverter(XStream xStream) { xStream = xStream;} @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { String className = uncapitalize(getClass().getSimpleName());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream",
    "boolean": 1,
    "context": "public class xstream_class_27 { private class ObjectContentConverter implements Converter { XStream xStream;private ObjectContentConverter(<mask><mask><mask><mask><mask><mask><mask><mask>.XStream xStream) { xStream = xStream;} @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { String className = uncapitalize(getClass().getSimpleName()); aliasField(className, class, String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamWriter",
    "boolean": 1,
    "context": "public class xstream_class_27 { private class ObjectContentConverter implements Converter { XStream xStream;private ObjectContentConverter(XStream xStream) { xStream = xStream;} @Override public void marshal(Object source, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HierarchicalStreamWriter writer, MarshallingContext context) { String className = uncapitalize(getClass().getSimpleName()); aliasField(className, class, String); marshal(source, writer);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.MarshallingContext",
    "boolean": 1,
    "context": "public class xstream_class_27 { private class ObjectContentConverter implements Converter { XStream xStream;private ObjectContentConverter(XStream xStream) { xStream = xStream;} @Override public void marshal(Object source, HierarchicalStreamWriter writer, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MarshallingContext context) { String className = uncapitalize(getClass().getSimpleName()); aliasField(className, class, String); marshal(source, writer);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xation",
    "truth_type": "org.apache.commons.lang",
    "full_FQN": "org.apache.commons.lang.WordUtils.uncapitalize()",
    "boolean": 0,
    "context": "public class xstream_class_27 { private class ObjectContentConverter implements Converter { XStream xStream;private ObjectContentConverter(XStream xStream) { xStream = xStream;} @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { String className = <mask><mask><mask><mask><mask><mask><mask><mask>uncapitalize(getClass().getSimpleName()); aliasField(className, class, String); marshal(source, writer);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.aliasField()",
    "boolean": 1,
    "context": "private ObjectContentConverter(XStream xStream) { xStream = xStream;} @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { String className = uncapitalize(getClass().getSimpleName()); <mask><mask><mask><mask><mask><mask><mask><mask>aliasField(className, class, String); marshal(source, writer);} @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { return null;// To change body of implemented methods use File | Settings | File  } @Override public boolean canConvert(Class type) { return true;// To change body of implemented methods use File | Settings | File  } } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.acceptance.objects.Software",
    "truth_type": "javax.swing.text.AbstractDocument.Content",
    "full_FQN": "javax.swing.text.AbstractDocument.Content.class",
    "boolean": 0,
    "context": "private ObjectContentConverter(XStream xStream) { xStream = xStream;} @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { String className = uncapitalize(getClass().getSimpleName()); aliasField(className, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.class, String); marshal(source, writer);} @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { return null;// To change body of implemented methods use File | Settings | File  } @Override public boolean canConvert(Class type) { return true;// To change body of implemented methods use File | Settings | File  } } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.marshal()",
    "boolean": 1,
    "context": "} @Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) { String className = uncapitalize(getClass().getSimpleName()); aliasField(className, class, String); <mask><mask><mask><mask><mask><mask><mask><mask>marshal(source, writer);} @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { return null;// To change body of implemented methods use File | Settings | File  } @Override public boolean canConvert(Class type) { return true;// To change body of implemented methods use File | Settings | File  } } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader",
    "boolean": 1,
    "context": " aliasField(className, class, String); marshal(source, writer);} @Override public Object unmarshal(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HierarchicalStreamReader reader, UnmarshallingContext context) { return null;// To change body of implemented methods use File | Settings | File  } @Override public boolean canConvert(Class type) { return true;// To change body of implemented methods use File | Settings | File  } } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.UnmarshallingContext",
    "boolean": 1,
    "context": " aliasField(className, class, String); marshal(source, writer);} @Override public Object unmarshal(HierarchicalStreamReader reader, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.UnmarshallingContext context) { return null;// To change body of implemented methods use File | Settings | File  } @Override public boolean canConvert(Class type) { return true;// To change body of implemented methods use File | Settings | File  } } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util.Map",
    "truth_type": "java.util.Map",
    "full_FQN": "java.util.Map.class.isAssignableFrom()",
    "boolean": 1,
    "context": "public class xstream_class_28 { public class MapEntryConverter{ public class java { } public boolean canConvert(Class clazz) { return <mask><mask><mask><mask><mask>isAssignableFrom(clazz);} public void marshal(Object value, HierarchicalStreamWriter writer, MarshallingContext context) { Map<String, Integer> map = (Map<String, Integer>) value;for (Entry<String, Integer> entry : entrySet()) { startNode Map$getKey().toString());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamWriter",
    "boolean": 1,
    "context": "public class xstream_class_28 { public class MapEntryConverter{ public class java { } public boolean canConvert(Class clazz) { return isAssignableFrom(clazz);} public void marshal(Object value, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HierarchicalStreamWriter writer, MarshallingContext context) { Map<String, Integer> map = (Map<String, Integer>) value;for (Entry<String, Integer> entry : entrySet()) { startNode Map$getKey().toString()); setValue Map$getValue().toString());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.MarshallingContext",
    "boolean": 1,
    "context": "public class xstream_class_28 { public class MapEntryConverter{ public class java { } public boolean canConvert(Class clazz) { return isAssignableFrom(clazz);} public void marshal(Object value, HierarchicalStreamWriter writer, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MarshallingContext context) { Map<String, Integer> map = (Map<String, Integer>) value;for (Entry<String, Integer> entry : entrySet()) { startNode Map$getKey().toString()); setValue Map$getValue().toString());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map",
    "boolean": 1,
    "context": "public class xstream_class_28 { public class MapEntryConverter{ public class java { } public boolean canConvert(Class clazz) { return isAssignableFrom(clazz);} public void marshal(Object value, HierarchicalStreamWriter writer, MarshallingContext context) { <mask><mask><mask>.Map<String, Integer> map = (Map<String, Integer>) value;for (Entry<String, Integer> entry : entrySet()) { startNode Map$getKey().toString()); setValue Map$getValue().toString());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map",
    "boolean": 1,
    "context": "public class xstream_class_28 { public class MapEntryConverter{ public class java { } public boolean canConvert(Class clazz) { return isAssignableFrom(clazz);} public void marshal(Object value, HierarchicalStreamWriter writer, MarshallingContext context) { Map<String, Integer> map = (<mask><mask><mask>.Map<String, Integer>) value;for (Entry<String, Integer> entry : entrySet()) { startNode Map$getKey().toString()); setValue Map$getValue().toString());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util.Map",
    "truth_type": "java.util.Map",
    "full_FQN": "java.util.Map.Entry",
    "boolean": 1,
    "context": "public class xstream_class_28 { public class MapEntryConverter{ public class java { } public boolean canConvert(Class clazz) { return isAssignableFrom(clazz);} public void marshal(Object value, HierarchicalStreamWriter writer, MarshallingContext context) { Map<String, Integer> map = (Map<String, Integer>) value;for (<mask><mask><mask><mask><mask>.Entry<String, Integer> entry : entrySet()) { startNode Map$getKey().toString()); setValue Map$getValue().toString()); endNode();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map.entrySet()",
    "boolean": 1,
    "context": "public class xstream_class_28 { public class MapEntryConverter{ public class java { } public boolean canConvert(Class clazz) { return isAssignableFrom(clazz);} public void marshal(Object value, HierarchicalStreamWriter writer, MarshallingContext context) { Map<String, Integer> map = (Map<String, Integer>) value;for (Entry<String, Integer> entry : <mask><mask><mask>entrySet()) { startNode Map$getKey().toString()); setValue Map$getValue().toString()); endNode();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io.HierarchicalStreamWriter",
    "truth_type": "com.thoughtworks.xstream.io.HierarchicalStreamWriter",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamWriter.startNode",
    "boolean": 1,
    "context": "public class xstream_class_28 { public class MapEntryConverter{ public class java { } public boolean canConvert(Class clazz) { return isAssignableFrom(clazz);} public void marshal(Object value, HierarchicalStreamWriter writer, MarshallingContext context) { Map<String, Integer> map = (Map<String, Integer>) value;for (Entry<String, Integer> entry : entrySet()) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.startNode Map$getKey().toString()); setValue Map$getValue().toString()); endNode();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map",
    "boolean": 1,
    "context": "public class xstream_class_28 { public class MapEntryConverter{ public class java { } public boolean canConvert(Class clazz) { return isAssignableFrom(clazz);} public void marshal(Object value, HierarchicalStreamWriter writer, MarshallingContext context) { Map<String, Integer> map = (Map<String, Integer>) value;for (Entry<String, Integer> entry : entrySet()) { startNode <mask><mask><mask>.Map$getKey().toString()); setValue Map$getValue().toString()); endNode();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io.HierarchicalStreamWriter",
    "truth_type": "com.thoughtworks.xstream.io.HierarchicalStreamWriter",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamWriter.setValue",
    "boolean": 1,
    "context": "} public void marshal(Object value, HierarchicalStreamWriter writer, MarshallingContext context) { Map<String, Integer> map = (Map<String, Integer>) value;for (Entry<String, Integer> entry : entrySet()) { startNode Map$getKey().toString()); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.setValue Map$getValue().toString()); endNode();} } public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { Map<String, Integer> map = new HashMap<String, Integer>();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map",
    "boolean": 1,
    "context": "} public void marshal(Object value, HierarchicalStreamWriter writer, MarshallingContext context) { Map<String, Integer> map = (Map<String, Integer>) value;for (Entry<String, Integer> entry : entrySet()) { startNode Map$getKey().toString()); setValue <mask><mask><mask>.Map$getValue().toString()); endNode();} } public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { Map<String, Integer> map = new HashMap<String, Integer>();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamWriter.endNode()",
    "boolean": 1,
    "context": "for (Entry<String, Integer> entry : entrySet()) { startNode Map$getKey().toString()); setValue Map$getValue().toString()); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>endNode();} } public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { Map<String, Integer> map = new HashMap<String, Integer>();while  hasMoreChildren()) { moveDown();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader",
    "boolean": 1,
    "context": " setValue Map$getValue().toString()); endNode();} } public Object unmarshal(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HierarchicalStreamReader reader, UnmarshallingContext context) { Map<String, Integer> map = new HashMap<String, Integer>();while  hasMoreChildren()) { moveDown(); put getNodeName(), new Integer getValue()));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters.collectionsMarshallingConverter",
    "truth_type": "com.sun.xml.internal.bind.v2.runtime.unmarshaller",
    "full_FQN": "com.sun.xml.internal.bind.v2.runtime.unmarshaller.UnmarshallingContext",
    "boolean": 0,
    "context": " setValue Map$getValue().toString()); endNode();} } public Object unmarshal(HierarchicalStreamReader reader, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.UnmarshallingContext context) { Map<String, Integer> map = new HashMap<String, Integer>();while  hasMoreChildren()) { moveDown(); put getNodeName(), new Integer getValue()));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map",
    "boolean": 1,
    "context": " setValue Map$getValue().toString()); endNode();} } public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { <mask><mask><mask>.Map<String, Integer> map = new HashMap<String, Integer>();while  hasMoreChildren()) { moveDown(); put getNodeName(), new Integer getValue()));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.HashMap",
    "boolean": 1,
    "context": " setValue Map$getValue().toString()); endNode();} } public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { Map<String, Integer> map = new <mask><mask><mask>.HashMap<String, Integer>();while  hasMoreChildren()) { moveDown(); put getNodeName(), new Integer getValue()));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.hasMoreChildren()",
    "boolean": 1,
    "context": " endNode();} } public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { Map<String, Integer> map = new HashMap<String, Integer>();while  <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>hasMoreChildren()) { moveDown(); put getNodeName(), new Integer getValue())); moveUp();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.moveDown()",
    "boolean": 1,
    "context": " endNode();} } public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { Map<String, Integer> map = new HashMap<String, Integer>();while  hasMoreChildren()) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>moveDown(); put getNodeName(), new Integer getValue())); moveUp();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util.Map",
    "truth_type": "java.util.Map",
    "full_FQN": "java.util.Map.put",
    "boolean": 1,
    "context": "} } public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { Map<String, Integer> map = new HashMap<String, Integer>();while  hasMoreChildren()) { moveDown(); <mask><mask><mask><mask><mask>.put getNodeName(), new Integer getValue())); moveUp();} return map;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.getNodeName()",
    "boolean": 1,
    "context": "} } public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { Map<String, Integer> map = new HashMap<String, Integer>();while  hasMoreChildren()) { moveDown(); put <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getNodeName(), new Integer getValue())); moveUp();} return map;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.getValue()",
    "boolean": 1,
    "context": "} } public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { Map<String, Integer> map = new HashMap<String, Integer>();while  hasMoreChildren()) { moveDown(); put getNodeName(), new Integer <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getValue())); moveUp();} return map;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.moveUp()",
    "boolean": 1,
    "context": "while  hasMoreChildren()) { moveDown(); put getNodeName(), new Integer getValue())); <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>moveUp();} return map;} } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream",
    "boolean": 1,
    "context": "public class xstream_class_29 { private static void createXmlEmail() { thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.XStream xstream = new thoughtworks XStream(new thoughtworks DomDriver()); thoughtworks setMode(thoughtworks NO_REFERENCES); thoughtworks alias(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream()",
    "boolean": 1,
    "context": "public class xstream_class_29 { private static void createXmlEmail() { thoughtworks XStream xstream = new thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask>XStream(new thoughtworks DomDriver()); thoughtworks setMode(thoughtworks NO_REFERENCES); thoughtworks alias(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.xml.DomDriver()",
    "boolean": 1,
    "context": "public class xstream_class_29 { private static void createXmlEmail() { thoughtworks XStream xstream = new thoughtworks XStream(new thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>DomDriver()); thoughtworks setMode(thoughtworks NO_REFERENCES); thoughtworks alias(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream.setMode()",
    "boolean": 1,
    "context": "public class xstream_class_29 { private static void createXmlEmail() { thoughtworks XStream xstream = new thoughtworks XStream(new thoughtworks DomDriver()); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setMode(thoughtworks NO_REFERENCES); thoughtworks alias(String, class); thoughtworks alias(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream.NO_REFERENCES",
    "boolean": 1,
    "context": "public class xstream_class_29 { private static void createXmlEmail() { thoughtworks XStream xstream = new thoughtworks XStream(new thoughtworks DomDriver()); thoughtworks setMode(thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.NO_REFERENCES); thoughtworks alias(String, class); thoughtworks alias(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream.alias()",
    "boolean": 1,
    "context": "public class xstream_class_29 { private static void createXmlEmail() { thoughtworks XStream xstream = new thoughtworks XStream(new thoughtworks DomDriver()); thoughtworks setMode(thoughtworks NO_REFERENCES); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>alias(String, class); thoughtworks alias(String, class);EmailPojo ep = new EmailPojo();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream.alias()",
    "boolean": 1,
    "context": " thoughtworks setMode(thoughtworks NO_REFERENCES); thoughtworks alias(String, class); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>alias(String, class);EmailPojo ep = new EmailPojo();List<Recipient> toRecipient = new ArrayList<Recipient>();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": " thoughtworks alias(String, class);EmailPojo ep = new EmailPojo();<mask><mask><mask>.List<Recipient> toRecipient = new ArrayList<Recipient>(); add(new Recipient(String)); add(new Recipient(String));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": " thoughtworks alias(String, class);EmailPojo ep = new EmailPojo();List<Recipient> toRecipient = new <mask><mask><mask>.ArrayList<Recipient>(); add(new Recipient(String)); add(new Recipient(String));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.add()",
    "boolean": 1,
    "context": "EmailPojo ep = new EmailPojo();List<Recipient> toRecipient = new ArrayList<Recipient>(); <mask><mask><mask>add(new Recipient(String)); add(new Recipient(String));List<Recipient> ccRecipient = new ArrayList<Recipient>();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.add()",
    "boolean": 1,
    "context": "java.util.List<Recipient> toRecipient = new ArrayList<Recipient>(); add(new Recipient(String)); <mask><mask><mask>add(new Recipient(String));List<Recipient> ccRecipient = new ArrayList<Recipient>(); add(new Recipient(String));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": " add(new Recipient(String)); add(new Recipient(String));<mask><mask><mask>.List<Recipient> ccRecipient = new ArrayList<Recipient>(); add(new Recipient(String)); add(new Recipient(String));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": " add(new Recipient(String)); add(new Recipient(String));List<Recipient> ccRecipient = new <mask><mask><mask>.ArrayList<Recipient>(); add(new Recipient(String)); add(new Recipient(String));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.add()",
    "boolean": 1,
    "context": " add(new Recipient(String));List<Recipient> ccRecipient = new ArrayList<Recipient>(); <mask><mask><mask>add(new Recipient(String)); add(new Recipient(String));List<Recipient> bccRecipient = new ArrayList<Recipient>();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.add()",
    "boolean": 1,
    "context": "java.util.List<Recipient> ccRecipient = new ArrayList<Recipient>(); add(new Recipient(String)); <mask><mask><mask>add(new Recipient(String));List<Recipient> bccRecipient = new ArrayList<Recipient>(); add(new Recipient(String));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": " add(new Recipient(String)); add(new Recipient(String));<mask><mask><mask>.List<Recipient> bccRecipient = new ArrayList<Recipient>(); add(new Recipient(String)); add(new Recipient(String));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": " add(new Recipient(String)); add(new Recipient(String));List<Recipient> bccRecipient = new <mask><mask><mask>.ArrayList<Recipient>(); add(new Recipient(String)); add(new Recipient(String));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.add()",
    "boolean": 1,
    "context": " add(new Recipient(String));List<Recipient> bccRecipient = new ArrayList<Recipient>(); <mask><mask><mask>add(new Recipient(String)); add(new Recipient(String));setTo(toRecipient);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.add()",
    "boolean": 1,
    "context": "java.util.List<Recipient> bccRecipient = new ArrayList<Recipient>(); add(new Recipient(String)); <mask><mask><mask>add(new Recipient(String));setTo(toRecipient);setCc(ccRecipient);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.toXML()",
    "boolean": 1,
    "context": "ep.setSubject(String);setBody(String);String xml = <mask><mask><mask><mask><mask><mask><mask><mask>toXML(ep);println(xml);} public static class EmailPojo { private List<Recipient> to;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.debug",
    "truth_type": "System.out",
    "full_FQN": "System.out.println()",
    "boolean": 0,
    "context": "ep.setBody(String);String xml = toXML(ep);<mask><mask><mask>.println(xml);} public static class EmailPojo { private List<Recipient> to;private List<Recipient> cc;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "String xml = toXML(ep);println(xml);} public static class EmailPojo { private <mask><mask><mask>.List<Recipient> to;private List<Recipient> cc;private List<Recipient> bcc;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "System.out.println(xml);} public static class EmailPojo { private List<Recipient> to;private <mask><mask><mask>.List<Recipient> cc;private List<Recipient> bcc;private String subject;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "} public static class EmailPojo { private List<Recipient> to;private List<Recipient> cc;private <mask><mask><mask>.List<Recipient> bcc;private String subject;private String body;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "private String subject;private String body;public <mask><mask><mask>.List<Recipient> getTo() { return to;} public void setTo(List<Recipient> to) { to = to;} public List<Recipient> getCc() { return cc;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "private String body;public List<Recipient> getTo() { return to;} public void setTo(<mask><mask><mask>.List<Recipient> to) { to = to;} public List<Recipient> getCc() { return cc;} public void setCc(List<Recipient> cc) { cc = cc;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "public List<Recipient> getTo() { return to;} public void setTo(List<Recipient> to) { to = to;} public <mask><mask><mask>.List<Recipient> getCc() { return cc;} public void setCc(List<Recipient> cc) { cc = cc;} public List<Recipient> getBcc() { return bcc;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "} public void setTo(List<Recipient> to) { to = to;} public List<Recipient> getCc() { return cc;} public void setCc(<mask><mask><mask>.List<Recipient> cc) { cc = cc;} public List<Recipient> getBcc() { return bcc;} public void setBcc(List<Recipient> bcc) { bcc = bcc;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "} public List<Recipient> getCc() { return cc;} public void setCc(List<Recipient> cc) { cc = cc;} public <mask><mask><mask>.List<Recipient> getBcc() { return bcc;} public void setBcc(List<Recipient> bcc) { bcc = bcc;} public String getSubject() { return subject;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "} public void setCc(List<Recipient> cc) { cc = cc;} public List<Recipient> getBcc() { return bcc;} public void setBcc(<mask><mask><mask>.List<Recipient> bcc) { bcc = bcc;} public String getSubject() { return subject;} public void setSubject(String subject) { subject = subject;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io.json",
    "truth_type": "com.thoughtworks.xstream.XStream.io.json",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.json.JettisonMappedXmlDriver",
    "boolean": 1,
    "context": "public class xstream_class_3 { public static void main(String[] args) { thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.JettisonMappedXmlDriver xmlDriver = new thoughtworks JettisonMappedXmlDriver();thoughtworks XStream xstream = new thoughtworks XStream(xmlDriver);MockMessage mock1 = new MockMessage();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.json.JettisonMappedXmlDriver()",
    "boolean": 1,
    "context": "public class xstream_class_3 { public static void main(String[] args) { thoughtworks JettisonMappedXmlDriver xmlDriver = new thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>JettisonMappedXmlDriver();thoughtworks XStream xstream = new thoughtworks XStream(xmlDriver);MockMessage mock1 = new MockMessage();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream",
    "boolean": 1,
    "context": "public class xstream_class_3 { public static void main(String[] args) { thoughtworks JettisonMappedXmlDriver xmlDriver = new thoughtworks JettisonMappedXmlDriver();thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.XStream xstream = new thoughtworks XStream(xmlDriver);MockMessage mock1 = new MockMessage();MockMessage mock2 = new MockMessage();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream()",
    "boolean": 1,
    "context": "public class xstream_class_3 { public static void main(String[] args) { thoughtworks JettisonMappedXmlDriver xmlDriver = new thoughtworks JettisonMappedXmlDriver();thoughtworks XStream xstream = new thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask>XStream(xmlDriver);MockMessage mock1 = new MockMessage();MockMessage mock2 = new MockMessage();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "MockMessage mock2 = new MockMessage();MockMessageOther mock3 = new MockMessageOther();<mask><mask><mask>.List messages = new ArrayList(); add(mock1); add(mock2);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList()",
    "boolean": 1,
    "context": "MockMessage mock2 = new MockMessage();MockMessageOther mock3 = new MockMessageOther();List messages = new <mask><mask><mask>.ArrayList(); add(mock1); add(mock2);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.add()",
    "boolean": 1,
    "context": "MockMessageOther mock3 = new MockMessageOther();List messages = new ArrayList(); <mask><mask><mask>add(mock1); add(mock2); add(mock3);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.add()",
    "boolean": 1,
    "context": "java.util.List messages = new ArrayList(); add(mock1); <mask><mask><mask>add(mock2); add(mock3);String jsonString = toXML(messages);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.add()",
    "boolean": 1,
    "context": " add(mock1); add(mock2); <mask><mask><mask>add(mock3);String jsonString = toXML(messages);// JSON list format is non-intuitive single element array with class name fields println(jsonString);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.toXML()",
    "boolean": 1,
    "context": " add(mock2); add(mock3);String jsonString = <mask><mask><mask><mask><mask><mask><mask><mask>toXML(messages);// JSON list format is non-intuitive single element array with class name fields println(jsonString);List xstreamJSONUnmarshalledMessages = ((List)  fromXML(jsonString)));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "java.lang.String jsonString = toXML(messages);// JSON list format is non-intuitive single element array with class name fields println(jsonString);<mask><mask><mask>.List xstreamJSONUnmarshalledMessages = ((List)  fromXML(jsonString)));// This will print 3 messages unmarshalled println(String + size());// Attempt to deserialize a reasonable looking JSON string String jsonTest = String + ((((((((((((((Stringlist\\String + String) + StringMockMessage\\String) + Stringval\\String) + String) + String) + StringMockMessage\\String) + Stringval\\String) + String) + String) + StringMockMessageOther\\String) + StringotherVal\\String) + String) + String) + String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "java.lang.String jsonString = toXML(messages);// JSON list format is non-intuitive single element array with class name fields println(jsonString);List xstreamJSONUnmarshalledMessages = ((<mask><mask><mask>.List)  fromXML(jsonString)));// This will print 3 messages unmarshalled println(String + size());// Attempt to deserialize a reasonable looking JSON string String jsonTest = String + ((((((((((((((Stringlist\\String + String) + StringMockMessage\\String) + Stringval\\String) + String) + String) + StringMockMessage\\String) + Stringval\\String) + String) + String) + StringMockMessageOther\\String) + StringotherVal\\String) + String) + String) + String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.fromXML()",
    "boolean": 1,
    "context": "java.lang.String jsonString = toXML(messages);// JSON list format is non-intuitive single element array with class name fields println(jsonString);List xstreamJSONUnmarshalledMessages = ((List)  <mask><mask><mask><mask><mask><mask><mask><mask>fromXML(jsonString)));// This will print 3 messages unmarshalled println(String + size());// Attempt to deserialize a reasonable looking JSON string String jsonTest = String + ((((((((((((((Stringlist\\String + String) + StringMockMessage\\String) + Stringval\\String) + String) + String) + StringMockMessage\\String) + Stringval\\String) + String) + String) + StringMockMessageOther\\String) + StringotherVal\\String) + String) + String) + String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.size()",
    "boolean": 1,
    "context": "// JSON list format is non-intuitive single element array with class name fields println(jsonString);List xstreamJSONUnmarshalledMessages = ((List)  fromXML(jsonString)));// This will print 3 messages unmarshalled println(String + <mask><mask><mask>size());// Attempt to deserialize a reasonable looking JSON string String jsonTest = String + ((((((((((((((Stringlist\\String + String) + StringMockMessage\\String) + Stringval\\String) + String) + String) + StringMockMessage\\String) + Stringval\\String) + String) + String) + StringMockMessageOther\\String) + StringotherVal\\String) + String) + String) + String);List unmarshalledMessages = ((List)  fromXML(jsonTest)));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "// This will print 3 messages unmarshalled println(String + size());// Attempt to deserialize a reasonable looking JSON string String jsonTest = String + ((((((((((((((Stringlist\\String + String) + StringMockMessage\\String) + Stringval\\String) + String) + String) + StringMockMessage\\String) + Stringval\\String) + String) + String) + StringMockMessageOther\\String) + StringotherVal\\String) + String) + String) + String);<mask><mask><mask>.List unmarshalledMessages = ((List)  fromXML(jsonTest)));// We expect 3 messages but XStream only deserializes one println(String + size());} public static class MockMessage { int val = 1;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "// This will print 3 messages unmarshalled println(String + size());// Attempt to deserialize a reasonable looking JSON string String jsonTest = String + ((((((((((((((Stringlist\\String + String) + StringMockMessage\\String) + Stringval\\String) + String) + String) + StringMockMessage\\String) + Stringval\\String) + String) + String) + StringMockMessageOther\\String) + StringotherVal\\String) + String) + String) + String);List unmarshalledMessages = ((<mask><mask><mask>.List)  fromXML(jsonTest)));// We expect 3 messages but XStream only deserializes one println(String + size());} public static class MockMessage { int val = 1;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.fromXML()",
    "boolean": 1,
    "context": "// This will print 3 messages unmarshalled println(String + size());// Attempt to deserialize a reasonable looking JSON string String jsonTest = String + ((((((((((((((Stringlist\\String + String) + StringMockMessage\\String) + Stringval\\String) + String) + String) + StringMockMessage\\String) + Stringval\\String) + String) + String) + StringMockMessageOther\\String) + StringotherVal\\String) + String) + String) + String);List unmarshalledMessages = ((List)  <mask><mask><mask><mask><mask><mask><mask><mask>fromXML(jsonTest)));// We expect 3 messages but XStream only deserializes one println(String + size());} public static class MockMessage { int val = 1;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.size()",
    "boolean": 1,
    "context": "// Attempt to deserialize a reasonable looking JSON string String jsonTest = String + ((((((((((((((Stringlist\\String + String) + StringMockMessage\\String) + Stringval\\String) + String) + String) + StringMockMessage\\String) + Stringval\\String) + String) + String) + StringMockMessageOther\\String) + StringotherVal\\String) + String) + String) + String);List unmarshalledMessages = ((List)  fromXML(jsonTest)));// We expect 3 messages but XStream only deserializes one println(String + <mask><mask><mask>size());} public static class MockMessage { int val = 1;} public static class MockMessageOther { int otherVal = 1;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.Converter",
    "boolean": 1,
    "context": "public class xstream_class_30 implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Converter { @Override public void marshal(Object o, HierarchicalStreamWriter hierarchicalStreamWriter, MarshallingContext marshallingContext) { // implement logic for marshalling to xml } @Override public Object unmarshal(HierarchicalStreamReader hierarchicalStreamReader, UnmarshallingContext unmarshallingContext) { Items items = new Items();while  hasMoreChildren()) { moveDown();final String currentAttribute = getAttribute(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamWriter",
    "boolean": 1,
    "context": "public class xstream_class_30 implements Converter { @Override public void marshal(Object o, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HierarchicalStreamWriter hierarchicalStreamWriter, MarshallingContext marshallingContext) { // implement logic for marshalling to xml } @Override public Object unmarshal(HierarchicalStreamReader hierarchicalStreamReader, UnmarshallingContext unmarshallingContext) { Items items = new Items();while  hasMoreChildren()) { moveDown();final String currentAttribute = getAttribute(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.MarshallingContext",
    "boolean": 1,
    "context": "public class xstream_class_30 implements Converter { @Override public void marshal(Object o, HierarchicalStreamWriter hierarchicalStreamWriter, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MarshallingContext marshallingContext) { // implement logic for marshalling to xml } @Override public Object unmarshal(HierarchicalStreamReader hierarchicalStreamReader, UnmarshallingContext unmarshallingContext) { Items items = new Items();while  hasMoreChildren()) { moveDown();final String currentAttribute = getAttribute(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader",
    "boolean": 1,
    "context": "public class xstream_class_30 implements Converter { @Override public void marshal(Object o, HierarchicalStreamWriter hierarchicalStreamWriter, MarshallingContext marshallingContext) { // implement logic for marshalling to xml } @Override public Object unmarshal(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HierarchicalStreamReader hierarchicalStreamReader, UnmarshallingContext unmarshallingContext) { Items items = new Items();while  hasMoreChildren()) { moveDown();final String currentAttribute = getAttribute(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.UnmarshallingContext",
    "boolean": 1,
    "context": "public class xstream_class_30 implements Converter { @Override public void marshal(Object o, HierarchicalStreamWriter hierarchicalStreamWriter, MarshallingContext marshallingContext) { // implement logic for marshalling to xml } @Override public Object unmarshal(HierarchicalStreamReader hierarchicalStreamReader, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.UnmarshallingContext unmarshallingContext) { Items items = new Items();while  hasMoreChildren()) { moveDown();final String currentAttribute = getAttribute(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.hasMoreChildren()",
    "boolean": 1,
    "context": "public class xstream_class_30 implements Converter { @Override public void marshal(Object o, HierarchicalStreamWriter hierarchicalStreamWriter, MarshallingContext marshallingContext) { // implement logic for marshalling to xml } @Override public Object unmarshal(HierarchicalStreamReader hierarchicalStreamReader, UnmarshallingContext unmarshallingContext) { Items items = new Items();while  <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>hasMoreChildren()) { moveDown();final String currentAttribute = getAttribute(String);if (equals(currentAttribute)) { setId getValue());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.moveDown()",
    "boolean": 1,
    "context": "public class xstream_class_30 implements Converter { @Override public void marshal(Object o, HierarchicalStreamWriter hierarchicalStreamWriter, MarshallingContext marshallingContext) { // implement logic for marshalling to xml } @Override public Object unmarshal(HierarchicalStreamReader hierarchicalStreamReader, UnmarshallingContext unmarshallingContext) { Items items = new Items();while  hasMoreChildren()) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>moveDown();final String currentAttribute = getAttribute(String);if (equals(currentAttribute)) { setId getValue());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.getAttribute()",
    "boolean": 1,
    "context": "public class xstream_class_30 implements Converter { @Override public void marshal(Object o, HierarchicalStreamWriter hierarchicalStreamWriter, MarshallingContext marshallingContext) { // implement logic for marshalling to xml } @Override public Object unmarshal(HierarchicalStreamReader hierarchicalStreamReader, UnmarshallingContext unmarshallingContext) { Items items = new Items();while  hasMoreChildren()) { moveDown();final String currentAttribute = <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getAttribute(String);if (equals(currentAttribute)) { setId getValue());} else if (equals(currentAttribute)) { setFirstName getValue());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.getValue()",
    "boolean": 1,
    "context": "while  hasMoreChildren()) { moveDown();final String currentAttribute = getAttribute(String);if (equals(currentAttribute)) { setId <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getValue());} else if (equals(currentAttribute)) { setFirstName getValue());} else if (equals(currentAttribute)) { setLastName getValue());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.getValue()",
    "boolean": 1,
    "context": "final String currentAttribute = getAttribute(String);if (equals(currentAttribute)) { setId getValue());} else if (equals(currentAttribute)) { setFirstName <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getValue());} else if (equals(currentAttribute)) { setLastName getValue());} else if (equals(currentAttribute)) { setAddress getValue());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.getValue()",
    "boolean": 1,
    "context": "if (equals(currentAttribute)) { setId getValue());} else if (equals(currentAttribute)) { setFirstName getValue());} else if (equals(currentAttribute)) { setLastName <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getValue());} else if (equals(currentAttribute)) { setAddress getValue());} else if (equals(currentAttribute)) { setZip getValue());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.getValue()",
    "boolean": 1,
    "context": "} else if (equals(currentAttribute)) { setFirstName getValue());} else if (equals(currentAttribute)) { setLastName getValue());} else if (equals(currentAttribute)) { setAddress <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getValue());} else if (equals(currentAttribute)) { setZip getValue());} moveUp();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.getValue()",
    "boolean": 1,
    "context": "} else if (equals(currentAttribute)) { setLastName getValue());} else if (equals(currentAttribute)) { setAddress getValue());} else if (equals(currentAttribute)) { setZip <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getValue());} moveUp();} return items;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.moveUp()",
    "boolean": 1,
    "context": "} else if (equals(currentAttribute)) { setAddress getValue());} else if (equals(currentAttribute)) { setZip getValue());} <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>moveUp();} return items;} @Override public boolean canConvert(Class aClass) { return aClass == class;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xance",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.annotations.XStreamAlias()",
    "boolean": 0,
    "context": "@<mask><mask><mask><mask><mask><mask><mask><mask>XStreamAlias(String) public class xstream_class_31 { static String xml1 = String;public static void main(String[] args) { XStream xStream = new XStream(); processAnnotations(class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream",
    "boolean": 1,
    "context": "@XStreamAlias(String) public class xstream_class_31 { static String xml1 = String;public static void main(String[] args) { <mask><mask><mask><mask><mask><mask><mask><mask>.XStream xStream = new XStream(); processAnnotations(class);Music musicObject = ((Music)  fromXML(xml1)));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks",
    "truth_type": "com.thoughtworks",
    "full_FQN": "com.thoughtworks.xstream.XStream()",
    "boolean": 1,
    "context": "@XStreamAlias(String) public class xstream_class_31 { static String xml1 = String;public static void main(String[] args) { XStream xStream = new <mask><mask><mask><mask><mask>XStream(); processAnnotations(class);Music musicObject = ((Music)  fromXML(xml1)));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.processAnnotations()",
    "boolean": 1,
    "context": "@XStreamAlias(String) public class xstream_class_31 { static String xml1 = String;public static void main(String[] args) { XStream xStream = new XStream(); <mask><mask><mask><mask><mask><mask><mask><mask>processAnnotations(class);Music musicObject = ((Music)  fromXML(xml1)));println(musicObject);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "xstream.Music",
    "truth_type": "xstream.Music",
    "full_FQN": "xstream.Music.class",
    "boolean": 1,
    "context": "@XStreamAlias(String) public class xstream_class_31 { static String xml1 = String;public static void main(String[] args) { XStream xStream = new XStream(); processAnnotations(<mask><mask><mask><mask>.class);Music musicObject = ((Music)  fromXML(xml1)));println(musicObject);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.fromXML()",
    "boolean": 1,
    "context": "public static void main(String[] args) { XStream xStream = new XStream(); processAnnotations(class);Music musicObject = ((Music)  <mask><mask><mask><mask><mask><mask><mask><mask>fromXML(xml1)));println(musicObject);// prints Music [type=ROCK] } } class Music { public enum genre { ROCK, JAZZ;} genre type;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "X..ification",
    "truth_type": "xstream.Music",
    "full_FQN": "xstream.Music.genre",
    "boolean": 0,
    "context": "xstream.Music musicObject = ((Music)  fromXML(xml1)));println(musicObject);// prints Music [type=ROCK] } } class Music { public enum genre { ROCK, JAZZ;} <mask><mask><mask><mask>.genre type;@Override public String toString() { return (String + type) + String;} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream",
    "boolean": 1,
    "context": "public class xstream_class_32 { public static <mask><mask><mask><mask><mask><mask><mask><mask>.XStream instanciateXstreamForHibernate() { XStream xstream1 = new XStream() { protected MapperWrapper wrapMapper(final MapperWrapper next) { return new HibernateMapper(next);} }; registerConverter(new HibernateProxyConverter());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream",
    "boolean": 1,
    "context": "public class xstream_class_32 { public static XStream instanciateXstreamForHibernate() { <mask><mask><mask><mask><mask><mask><mask><mask>.XStream xstream1 = new XStream() { protected MapperWrapper wrapMapper(final MapperWrapper next) { return new HibernateMapper(next);} }; registerConverter(new HibernateProxyConverter());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks",
    "truth_type": "com.thoughtworks",
    "full_FQN": "com.thoughtworks.xstream.XStream()",
    "boolean": 1,
    "context": "public class xstream_class_32 { public static XStream instanciateXstreamForHibernate() { XStream xstream1 = new <mask><mask><mask><mask><mask>XStream() { protected MapperWrapper wrapMapper(final MapperWrapper next) { return new HibernateMapper(next);} }; registerConverter(new HibernateProxyConverter());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.mapper",
    "truth_type": "com.thoughtworks.xstream.mapper",
    "full_FQN": "com.thoughtworks.xstream.mapper.MapperWrapper",
    "boolean": 1,
    "context": "public class xstream_class_32 { public static XStream instanciateXstreamForHibernate() { XStream xstream1 = new XStream() { protected <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MapperWrapper wrapMapper(final MapperWrapper next) { return new HibernateMapper(next);} }; registerConverter(new HibernateProxyConverter());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.mapper",
    "truth_type": "com.thoughtworks.xstream.mapper",
    "full_FQN": "com.thoughtworks.xstream.mapper.MapperWrapper",
    "boolean": 1,
    "context": "public class xstream_class_32 { public static XStream instanciateXstreamForHibernate() { XStream xstream1 = new XStream() { protected MapperWrapper wrapMapper(final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MapperWrapper next) { return new HibernateMapper(next);} }; registerConverter(new HibernateProxyConverter());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.mverm.",
    "truth_type": "com.thoughtworks.xstream.hibernate",
    "full_FQN": "com.thoughtworks.xstream.hibernate.mapper.HibernateMapper()",
    "boolean": 0,
    "context": "public class xstream_class_32 { public static XStream instanciateXstreamForHibernate() { XStream xstream1 = new XStream() { protected MapperWrapper wrapMapper(final MapperWrapper next) { return new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>HibernateMapper(next);} }; registerConverter(new HibernateProxyConverter());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.registerConverter()",
    "boolean": 1,
    "context": "public class xstream_class_32 { public static XStream instanciateXstreamForHibernate() { XStream xstream1 = new XStream() { protected MapperWrapper wrapMapper(final MapperWrapper next) { return new HibernateMapper(next);} }; <mask><mask><mask><mask><mask><mask><mask><mask>registerConverter(new HibernateProxyConverter()); registerConverter(new HibernatePersistentCollectionConverter getMapper())); registerConverter(new HibernatePersistentMapConverter getMapper()));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.test.mate",
    "truth_type": "com.thoughtworks.xstream.hibernate",
    "full_FQN": "com.thoughtworks.xstream.hibernate.converter.HibernateProxyConverter()",
    "boolean": 0,
    "context": "public class xstream_class_32 { public static XStream instanciateXstreamForHibernate() { XStream xstream1 = new XStream() { protected MapperWrapper wrapMapper(final MapperWrapper next) { return new HibernateMapper(next);} }; registerConverter(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>HibernateProxyConverter()); registerConverter(new HibernatePersistentCollectionConverter getMapper())); registerConverter(new HibernatePersistentMapConverter getMapper()));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.registerConverter()",
    "boolean": 1,
    "context": "} }; registerConverter(new HibernateProxyConverter()); <mask><mask><mask><mask><mask><mask><mask><mask>registerConverter(new HibernatePersistentCollectionConverter getMapper())); registerConverter(new HibernatePersistentMapConverter getMapper())); registerConverter(new HibernatePersistentSortedMapConverter getMapper()));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.test.nvert.converter",
    "truth_type": "com.thoughtworks.xstream.hibernate.converter",
    "full_FQN": "com.thoughtworks.xstream.hibernate.converter.HibernatePersistentCollectionConverter",
    "boolean": 0,
    "context": "} }; registerConverter(new HibernateProxyConverter()); registerConverter(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HibernatePersistentCollectionConverter getMapper())); registerConverter(new HibernatePersistentMapConverter getMapper())); registerConverter(new HibernatePersistentSortedMapConverter getMapper()));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.getMapper()",
    "boolean": 1,
    "context": "} }; registerConverter(new HibernateProxyConverter()); registerConverter(new HibernatePersistentCollectionConverter <mask><mask><mask><mask><mask><mask><mask><mask>getMapper())); registerConverter(new HibernatePersistentMapConverter getMapper())); registerConverter(new HibernatePersistentSortedMapConverter getMapper()));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.registerConverter()",
    "boolean": 1,
    "context": " registerConverter(new HibernateProxyConverter()); registerConverter(new HibernatePersistentCollectionConverter getMapper())); <mask><mask><mask><mask><mask><mask><mask><mask>registerConverter(new HibernatePersistentMapConverter getMapper())); registerConverter(new HibernatePersistentSortedMapConverter getMapper())); registerConverter(new HibernatePersistentSortedSetConverter getMapper()));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.conibernvert.converter",
    "truth_type": "com.thoughtworks.xstream.hibernate.converter",
    "full_FQN": "com.thoughtworks.xstream.hibernate.converter.HibernatePersistentMapConverter",
    "boolean": 0,
    "context": " registerConverter(new HibernateProxyConverter()); registerConverter(new HibernatePersistentCollectionConverter getMapper())); registerConverter(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HibernatePersistentMapConverter getMapper())); registerConverter(new HibernatePersistentSortedMapConverter getMapper())); registerConverter(new HibernatePersistentSortedSetConverter getMapper()));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.getMapper()",
    "boolean": 1,
    "context": " registerConverter(new HibernateProxyConverter()); registerConverter(new HibernatePersistentCollectionConverter getMapper())); registerConverter(new HibernatePersistentMapConverter <mask><mask><mask><mask><mask><mask><mask><mask>getMapper())); registerConverter(new HibernatePersistentSortedMapConverter getMapper())); registerConverter(new HibernatePersistentSortedSetConverter getMapper()));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.registerConverter()",
    "boolean": 1,
    "context": " registerConverter(new HibernatePersistentCollectionConverter getMapper())); registerConverter(new HibernatePersistentMapConverter getMapper())); <mask><mask><mask><mask><mask><mask><mask><mask>registerConverter(new HibernatePersistentSortedMapConverter getMapper())); registerConverter(new HibernatePersistentSortedSetConverter getMapper()));return xstream1;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.test.n..converter",
    "truth_type": "com.thoughtworks.xstream.hibernate.converter",
    "full_FQN": "com.thoughtworks.xstream.hibernate.converter.HibernatePersistentSortedMapConverter",
    "boolean": 0,
    "context": " registerConverter(new HibernatePersistentCollectionConverter getMapper())); registerConverter(new HibernatePersistentMapConverter getMapper())); registerConverter(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HibernatePersistentSortedMapConverter getMapper())); registerConverter(new HibernatePersistentSortedSetConverter getMapper()));return xstream1;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.getMapper()",
    "boolean": 1,
    "context": " registerConverter(new HibernatePersistentCollectionConverter getMapper())); registerConverter(new HibernatePersistentMapConverter getMapper())); registerConverter(new HibernatePersistentSortedMapConverter <mask><mask><mask><mask><mask><mask><mask><mask>getMapper())); registerConverter(new HibernatePersistentSortedSetConverter getMapper()));return xstream1;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.registerConverter()",
    "boolean": 1,
    "context": " registerConverter(new HibernatePersistentMapConverter getMapper())); registerConverter(new HibernatePersistentSortedMapConverter getMapper())); <mask><mask><mask><mask><mask><mask><mask><mask>registerConverter(new HibernatePersistentSortedSetConverter getMapper()));return xstream1;} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.con.n..converter",
    "truth_type": "com.thoughtworks.xstream.hibernate.converter",
    "full_FQN": "com.thoughtworks.xstream.hibernate.converter.HibernatePersistentSortedSetConverter",
    "boolean": 0,
    "context": " registerConverter(new HibernatePersistentMapConverter getMapper())); registerConverter(new HibernatePersistentSortedMapConverter getMapper())); registerConverter(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HibernatePersistentSortedSetConverter getMapper()));return xstream1;} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.getMapper()",
    "boolean": 1,
    "context": " registerConverter(new HibernatePersistentMapConverter getMapper())); registerConverter(new HibernatePersistentSortedMapConverter getMapper())); registerConverter(new HibernatePersistentSortedSetConverter <mask><mask><mask><mask><mask><mask><mask><mask>getMapper()));return xstream1;} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream",
    "boolean": 1,
    "context": "public class xstream_class_33 { private static thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.XStream xstream;public static thoughtworks XStream getXStream() { if (xstream == null) { xstream = new thoughtworks XStream(new thoughtworks DomDriver());alias(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream",
    "boolean": 1,
    "context": "public class xstream_class_33 { private static thoughtworks XStream xstream;public static thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.XStream getXStream() { if (xstream == null) { xstream = new thoughtworks XStream(new thoughtworks DomDriver());alias(String, class);alias(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream()",
    "boolean": 1,
    "context": "public class xstream_class_33 { private static thoughtworks XStream xstream;public static thoughtworks XStream getXStream() { if (xstream == null) { xstream = new thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask>XStream(new thoughtworks DomDriver());alias(String, class);alias(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.xml.DomDriver()",
    "boolean": 1,
    "context": "public class xstream_class_33 { private static thoughtworks XStream xstream;public static thoughtworks XStream getXStream() { if (xstream == null) { xstream = new thoughtworks XStream(new thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>DomDriver());alias(String, class);alias(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.though..io.am...Software",
    "truth_type": "flex.messaging.io.amf.ActionMessage",
    "full_FQN": "flex.messaging.io.amf.ActionMessage.class",
    "boolean": 0,
    "context": "public class xstream_class_33 { private static thoughtworks XStream xstream;public static thoughtworks XStream getXStream() { if (xstream == null) { xstream = new thoughtworks XStream(new thoughtworks DomDriver());alias(String, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.class);alias(String, class);alias(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.though..io..f.TypeFile",
    "truth_type": "flex.messaging.io.amf.MessageHeader",
    "full_FQN": "flex.messaging.io.amf.MessageHeader.class",
    "boolean": 0,
    "context": "public static thoughtworks XStream getXStream() { if (xstream == null) { xstream = new thoughtworks XStream(new thoughtworks DomDriver());alias(String, class);alias(String, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.class);alias(String, class);alias(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "org.ax..io.am..MessageMessage",
    "truth_type": "flex.messaging.io.amf.MessageBody",
    "full_FQN": "flex.messaging.io.amf.MessageBody.class",
    "boolean": 0,
    "context": "alias(String, class);alias(String, class);alias(String, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.class);alias(String, class);alias(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "org.ax....ap..Message",
    "truth_type": "flex.messaging.messages.RemotingMessage",
    "full_FQN": "flex.messaging.messages.RemotingMessage.class",
    "boolean": 0,
    "context": "alias(String, class);alias(String, class);alias(String, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.class);alias(String, class);alias(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "org.messaging.logws.Responseable",
    "truth_type": "flex.messaging.messages.CommandMessage",
    "full_FQN": "flex.messaging.messages.CommandMessage.class",
    "boolean": 0,
    "context": "alias(String, class);alias(String, class);alias(String, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.class);alias(String, class);alias(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "org.ax..sw.userSystem.APages",
    "truth_type": "flex.messaging.messages.AcknowledgeMessage",
    "full_FQN": "flex.messaging.messages.AcknowledgeMessage.class",
    "boolean": 0,
    "context": "alias(String, class);alias(String, class);alias(String, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.class);alias(String, class);alias(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "j.axaging.dages.utorable",
    "truth_type": "flex.messaging.messages.ErrorMessage",
    "full_FQN": "flex.messaging.messages.ErrorMessage.class",
    "boolean": 0,
    "context": "alias(String, class);alias(String, class);alias(String, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.class);alias(String, class);alias(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "org.ax...ages.SystemserverooMessage",
    "truth_type": "flex.messaging.io.amf.ASObject",
    "full_FQN": "flex.messaging.io.amf.ASObject.class",
    "boolean": 0,
    "context": "alias(String, class);alias(String, class);alias(String, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.class);alias(String, class);alias(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "j.ax..logSS.ErrorObject",
    "truth_type": "flex.messaging.messages.AsyncMessage",
    "full_FQN": "flex.messaging.messages.AsyncMessage.class",
    "boolean": 0,
    "context": "alias(String, class);alias(String, class);alias(String, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.class);alias(String, class);alias(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "org.though...oos..ReObject",
    "truth_type": "flex.messaging.messages.CommandMessageExt",
    "full_FQN": "flex.messaging.messages.CommandMessageExt.class",
    "boolean": 0,
    "context": "alias(String, class);alias(String, class);alias(String, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.class);alias(String, class);// Better ASObject Converter thoughtworks XStream Mapper mapper = getMapper();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.acceptance.someobjects.String",
    "truth_type": "flex.messaging.messages.AcknowledgeMessageExt",
    "full_FQN": "flex.messaging.messages.AcknowledgeMessageExt.class",
    "boolean": 0,
    "context": "alias(String, class);alias(String, class);alias(String, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.class);// Better ASObject Converter thoughtworks XStream Mapper mapper = getMapper();} return xstream;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream",
    "boolean": 1,
    "context": "alias(String, class);alias(String, class);// Better ASObject Converter thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask>.XStream Mapper mapper = getMapper();} return xstream;} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.mapper.Mapper",
    "truth_type": "com.thoughtworks.xstream.mapper.Mapper",
    "full_FQN": "com.thoughtworks.xstream.mapper.Mapper.Mapper",
    "boolean": 1,
    "context": "alias(String, class);alias(String, class);// Better ASObject Converter thoughtworks XStream <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Mapper mapper = getMapper();} return xstream;} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.annotations.XStreamAlias()",
    "boolean": 1,
    "context": "public class xstream_class_34 { @thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>XStreamAlias(String) public class ConfigParameters extends ParameterHolder { @thoughtworks XStreamImplicit(itemFieldName = String) private List<ResourceSettings> resources;@thoughtworks XStreamImplicit(itemFieldName = String) private List<Environment> environments;public ConfigParameters() { } public List<Environment> getEnvironments() { if (environments == null) { environments = new ArrayList<Environment>();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks..ance",
    "truth_type": "com.cloudbees.api.config",
    "full_FQN": "com.cloudbees.api.config.ParameterHolder",
    "boolean": 0,
    "context": "public class xstream_class_34 { @thoughtworks XStreamAlias(String) public class ConfigParameters extends <mask><mask><mask><mask><mask><mask><mask><mask>.ParameterHolder { @thoughtworks XStreamImplicit(itemFieldName = String) private List<ResourceSettings> resources;@thoughtworks XStreamImplicit(itemFieldName = String) private List<Environment> environments;public ConfigParameters() { } public List<Environment> getEnvironments() { if (environments == null) { environments = new ArrayList<Environment>();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.annotations.XStreamImplicit()",
    "boolean": 1,
    "context": "public class xstream_class_34 { @thoughtworks XStreamAlias(String) public class ConfigParameters extends ParameterHolder { @thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>XStreamImplicit(itemFieldName = String) private List<ResourceSettings> resources;@thoughtworks XStreamImplicit(itemFieldName = String) private List<Environment> environments;public ConfigParameters() { } public List<Environment> getEnvironments() { if (environments == null) { environments = new ArrayList<Environment>();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "public class xstream_class_34 { @thoughtworks XStreamAlias(String) public class ConfigParameters extends ParameterHolder { @thoughtworks XStreamImplicit(itemFieldName = String) private <mask><mask><mask>.List<ResourceSettings> resources;@thoughtworks XStreamImplicit(itemFieldName = String) private List<Environment> environments;public ConfigParameters() { } public List<Environment> getEnvironments() { if (environments == null) { environments = new ArrayList<Environment>();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.though..api.settings",
    "truth_type": "com.cloudbees.api.config",
    "full_FQN": "com.cloudbees.api.config.ResourceSettings",
    "boolean": 0,
    "context": "public class xstream_class_34 { @thoughtworks XStreamAlias(String) public class ConfigParameters extends ParameterHolder { @thoughtworks XStreamImplicit(itemFieldName = String) private List<<mask><mask><mask><mask><mask><mask><mask><mask>.ResourceSettings> resources;@thoughtworks XStreamImplicit(itemFieldName = String) private List<Environment> environments;public ConfigParameters() { } public List<Environment> getEnvironments() { if (environments == null) { environments = new ArrayList<Environment>();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.annotations.XStreamImplicit()",
    "boolean": 1,
    "context": "public class xstream_class_34 { @thoughtworks XStreamAlias(String) public class ConfigParameters extends ParameterHolder { @thoughtworks XStreamImplicit(itemFieldName = String) private List<ResourceSettings> resources;@thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>XStreamImplicit(itemFieldName = String) private List<Environment> environments;public ConfigParameters() { } public List<Environment> getEnvironments() { if (environments == null) { environments = new ArrayList<Environment>();} return environments;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "public class xstream_class_34 { @thoughtworks XStreamAlias(String) public class ConfigParameters extends ParameterHolder { @thoughtworks XStreamImplicit(itemFieldName = String) private List<ResourceSettings> resources;@thoughtworks XStreamImplicit(itemFieldName = String) private <mask><mask><mask>.List<Environment> environments;public ConfigParameters() { } public List<Environment> getEnvironments() { if (environments == null) { environments = new ArrayList<Environment>();} return environments;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.apachetw.api.config",
    "truth_type": "com.cloudbees.api.config",
    "full_FQN": "com.cloudbees.api.config.Environment",
    "boolean": 0,
    "context": "public class xstream_class_34 { @thoughtworks XStreamAlias(String) public class ConfigParameters extends ParameterHolder { @thoughtworks XStreamImplicit(itemFieldName = String) private List<ResourceSettings> resources;@thoughtworks XStreamImplicit(itemFieldName = String) private List<<mask><mask><mask><mask><mask><mask><mask><mask>.Environment> environments;public ConfigParameters() { } public List<Environment> getEnvironments() { if (environments == null) { environments = new ArrayList<Environment>();} return environments;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "public class xstream_class_34 { @thoughtworks XStreamAlias(String) public class ConfigParameters extends ParameterHolder { @thoughtworks XStreamImplicit(itemFieldName = String) private List<ResourceSettings> resources;@thoughtworks XStreamImplicit(itemFieldName = String) private List<Environment> environments;public ConfigParameters() { } public <mask><mask><mask>.List<Environment> getEnvironments() { if (environments == null) { environments = new ArrayList<Environment>();} return environments;} public void setEnvironments(List<Environment> environments) { environments = environments;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.cloudbees.api.config",
    "truth_type": "com.cloudbees.api.config",
    "full_FQN": "com.cloudbees.api.config.Environment",
    "boolean": 1,
    "context": "public class xstream_class_34 { @thoughtworks XStreamAlias(String) public class ConfigParameters extends ParameterHolder { @thoughtworks XStreamImplicit(itemFieldName = String) private List<ResourceSettings> resources;@thoughtworks XStreamImplicit(itemFieldName = String) private List<Environment> environments;public ConfigParameters() { } public List<<mask><mask><mask><mask><mask><mask><mask><mask>.Environment> getEnvironments() { if (environments == null) { environments = new ArrayList<Environment>();} return environments;} public void setEnvironments(List<Environment> environments) { environments = environments;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "public class xstream_class_34 { @thoughtworks XStreamAlias(String) public class ConfigParameters extends ParameterHolder { @thoughtworks XStreamImplicit(itemFieldName = String) private List<ResourceSettings> resources;@thoughtworks XStreamImplicit(itemFieldName = String) private List<Environment> environments;public ConfigParameters() { } public List<Environment> getEnvironments() { if (environments == null) { environments = new <mask><mask><mask>.ArrayList<Environment>();} return environments;} public void setEnvironments(List<Environment> environments) { environments = environments;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.cloud..api.config",
    "truth_type": "com.cloudbees.api.config",
    "full_FQN": "com.cloudbees.api.config.Environment",
    "boolean": 0,
    "context": "public class xstream_class_34 { @thoughtworks XStreamAlias(String) public class ConfigParameters extends ParameterHolder { @thoughtworks XStreamImplicit(itemFieldName = String) private List<ResourceSettings> resources;@thoughtworks XStreamImplicit(itemFieldName = String) private List<Environment> environments;public ConfigParameters() { } public List<Environment> getEnvironments() { if (environments == null) { environments = new ArrayList<<mask><mask><mask><mask><mask><mask><mask><mask>.Environment>();} return environments;} public void setEnvironments(List<Environment> environments) { environments = environments;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "public ConfigParameters() { } public List<Environment> getEnvironments() { if (environments == null) { environments = new ArrayList<Environment>();} return environments;} public void setEnvironments(<mask><mask><mask>.List<Environment> environments) { environments = environments;} public void setEnvironment(Environment environment) { deleteEnvironment getName());getEnvironments().add(environment);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.cloudbe.api.config",
    "truth_type": "com.cloudbees.api.config",
    "full_FQN": "com.cloudbees.api.config.Environment",
    "boolean": 0,
    "context": "public ConfigParameters() { } public List<Environment> getEnvironments() { if (environments == null) { environments = new ArrayList<Environment>();} return environments;} public void setEnvironments(List<<mask><mask><mask><mask><mask><mask><mask><mask>.Environment> environments) { environments = environments;} public void setEnvironment(Environment environment) { deleteEnvironment getName());getEnvironments().add(environment);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.cloudbe.api.config",
    "truth_type": "com.cloudbees.api.config",
    "full_FQN": "com.cloudbees.api.config.Environment",
    "boolean": 0,
    "context": "} return environments;} public void setEnvironments(List<Environment> environments) { environments = environments;} public void setEnvironment(<mask><mask><mask><mask><mask><mask><mask><mask>.Environment environment) { deleteEnvironment getName());getEnvironments().add(environment);} public Environment getEnvironment(String env) { for (Environment environment : getEnvironments()) { if (equals getName())) { return environment;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.cloudbeans.api.config",
    "truth_type": "com.cloudbees.api.config",
    "full_FQN": "com.cloudbees.api.config.Environment.getName()",
    "boolean": 0,
    "context": "} return environments;} public void setEnvironments(List<Environment> environments) { environments = environments;} public void setEnvironment(Environment environment) { deleteEnvironment <mask><mask><mask><mask><mask><mask><mask><mask>getName());getEnvironments().add(environment);} public Environment getEnvironment(String env) { for (Environment environment : getEnvironments()) { if (equals getName())) { return environment;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.cloud..api.config",
    "truth_type": "com.cloudbees.api.config",
    "full_FQN": "com.cloudbees.api.config.Environment",
    "boolean": 0,
    "context": "} public void setEnvironment(Environment environment) { deleteEnvironment getName());getEnvironments().add(environment);} public <mask><mask><mask><mask><mask><mask><mask><mask>.Environment getEnvironment(String env) { for (Environment environment : getEnvironments()) { if (equals getName())) { return environment;} } return null;} public void deleteEnvironment(String name) { Iterator<Environment> it = getEnvironments().iterator();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.cloudbe.api.config",
    "truth_type": "com.cloudbees.api.config",
    "full_FQN": "com.cloudbees.api.config.Environment",
    "boolean": 0,
    "context": "} public void setEnvironment(Environment environment) { deleteEnvironment getName());getEnvironments().add(environment);} public Environment getEnvironment(String env) { for (<mask><mask><mask><mask><mask><mask><mask><mask>.Environment environment : getEnvironments()) { if (equals getName())) { return environment;} } return null;} public void deleteEnvironment(String name) { Iterator<Environment> it = getEnvironments().iterator();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.cloudbees.api.config",
    "truth_type": "com.cloudbees.api.config",
    "full_FQN": "com.cloudbees.api.config.Environment.getName()",
    "boolean": 1,
    "context": "} public void setEnvironment(Environment environment) { deleteEnvironment getName());getEnvironments().add(environment);} public Environment getEnvironment(String env) { for (Environment environment : getEnvironments()) { if (equals <mask><mask><mask><mask><mask><mask><mask><mask>getName())) { return environment;} } return null;} public void deleteEnvironment(String name) { Iterator<Environment> it = getEnvironments().iterator();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator",
    "boolean": 1,
    "context": "} public Environment getEnvironment(String env) { for (Environment environment : getEnvironments()) { if (equals getName())) { return environment;} } return null;} public void deleteEnvironment(String name) { <mask><mask><mask>.Iterator<Environment> it = getEnvironments().iterator();while  hasNext()) { if  next().getName().equals(name)) { remove();} } } public List<ResourceSettings> getResources() { if (resources == null) { resources = new ArrayList<ResourceSettings>();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.cloudbees.api.config",
    "truth_type": "com.cloudbees.api.config",
    "full_FQN": "com.cloudbees.api.config.Environment",
    "boolean": 1,
    "context": "} public Environment getEnvironment(String env) { for (Environment environment : getEnvironments()) { if (equals getName())) { return environment;} } return null;} public void deleteEnvironment(String name) { Iterator<<mask><mask><mask><mask><mask><mask><mask><mask>.Environment> it = getEnvironments().iterator();while  hasNext()) { if  next().getName().equals(name)) { remove();} } } public List<ResourceSettings> getResources() { if (resources == null) { resources = new ArrayList<ResourceSettings>();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator.hasNext()",
    "boolean": 1,
    "context": "} } return null;} public void deleteEnvironment(String name) { Iterator<Environment> it = getEnvironments().iterator();while  <mask><mask><mask>hasNext()) { if  next().getName().equals(name)) { remove();} } } public List<ResourceSettings> getResources() { if (resources == null) { resources = new ArrayList<ResourceSettings>();} return resources;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator.next()",
    "boolean": 1,
    "context": "} } return null;} public void deleteEnvironment(String name) { Iterator<Environment> it = getEnvironments().iterator();while  hasNext()) { if  <mask><mask><mask>next().getName().equals(name)) { remove();} } } public List<ResourceSettings> getResources() { if (resources == null) { resources = new ArrayList<ResourceSettings>();} return resources;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator.remove()",
    "boolean": 1,
    "context": "} } return null;} public void deleteEnvironment(String name) { Iterator<Environment> it = getEnvironments().iterator();while  hasNext()) { if  next().getName().equals(name)) { <mask><mask><mask>remove();} } } public List<ResourceSettings> getResources() { if (resources == null) { resources = new ArrayList<ResourceSettings>();} return resources;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "} public void deleteEnvironment(String name) { Iterator<Environment> it = getEnvironments().iterator();while  hasNext()) { if  next().getName().equals(name)) { remove();} } } public <mask><mask><mask>.List<ResourceSettings> getResources() { if (resources == null) { resources = new ArrayList<ResourceSettings>();} return resources;} public void setResources(List<ResourceSettings> resources) { resources = resources;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.apache..api.config",
    "truth_type": "com.cloudbees.api.config",
    "full_FQN": "com.cloudbees.api.config.ResourceSettings",
    "boolean": 0,
    "context": "} public void deleteEnvironment(String name) { Iterator<Environment> it = getEnvironments().iterator();while  hasNext()) { if  next().getName().equals(name)) { remove();} } } public List<<mask><mask><mask><mask><mask><mask><mask><mask>.ResourceSettings> getResources() { if (resources == null) { resources = new ArrayList<ResourceSettings>();} return resources;} public void setResources(List<ResourceSettings> resources) { resources = resources;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "} public void deleteEnvironment(String name) { Iterator<Environment> it = getEnvironments().iterator();while  hasNext()) { if  next().getName().equals(name)) { remove();} } } public List<ResourceSettings> getResources() { if (resources == null) { resources = new <mask><mask><mask>.ArrayList<ResourceSettings>();} return resources;} public void setResources(List<ResourceSettings> resources) { resources = resources;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.apache..api.config",
    "truth_type": "com.cloudbees.api.config",
    "full_FQN": "com.cloudbees.api.config.ResourceSettings",
    "boolean": 0,
    "context": "} public void deleteEnvironment(String name) { Iterator<Environment> it = getEnvironments().iterator();while  hasNext()) { if  next().getName().equals(name)) { remove();} } } public List<ResourceSettings> getResources() { if (resources == null) { resources = new ArrayList<<mask><mask><mask><mask><mask><mask><mask><mask>.ResourceSettings>();} return resources;} public void setResources(List<ResourceSettings> resources) { resources = resources;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "} } } public List<ResourceSettings> getResources() { if (resources == null) { resources = new ArrayList<ResourceSettings>();} return resources;} public void setResources(<mask><mask><mask>.List<ResourceSettings> resources) { resources = resources;} public void setResource(ResourceSettings resource) { deleteResource getName());getResources().add(resource);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.cloudobe.api.config",
    "truth_type": "com.cloudbees.api.config",
    "full_FQN": "com.cloudbees.api.config.ResourceSettings",
    "boolean": 0,
    "context": "} } } public List<ResourceSettings> getResources() { if (resources == null) { resources = new ArrayList<ResourceSettings>();} return resources;} public void setResources(List<<mask><mask><mask><mask><mask><mask><mask><mask>.ResourceSettings> resources) { resources = resources;} public void setResource(ResourceSettings resource) { deleteResource getName());getResources().add(resource);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.googleobe.api.config",
    "truth_type": "com.cloudbees.api.config",
    "full_FQN": "com.cloudbees.api.config.ResourceSettings",
    "boolean": 0,
    "context": "} return resources;} public void setResources(List<ResourceSettings> resources) { resources = resources;} public void setResource(<mask><mask><mask><mask><mask><mask><mask><mask>.ResourceSettings resource) { deleteResource getName());getResources().add(resource);} public ResourceSettings getResource(String name) { for (ResourceSettings resource : getResources()) { if  getName().equals(name)) { return resource;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.cloudobe.api.config",
    "truth_type": "com.cloudbees.api.config",
    "full_FQN": "com.cloudbees.api.config.ResourceSettings.getName()",
    "boolean": 0,
    "context": "} return resources;} public void setResources(List<ResourceSettings> resources) { resources = resources;} public void setResource(ResourceSettings resource) { deleteResource <mask><mask><mask><mask><mask><mask><mask><mask>getName());getResources().add(resource);} public ResourceSettings getResource(String name) { for (ResourceSettings resource : getResources()) { if  getName().equals(name)) { return resource;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.cloudbees.api.config",
    "truth_type": "com.cloudbees.api.config",
    "full_FQN": "com.cloudbees.api.config.ResourceSettings",
    "boolean": 1,
    "context": "} public void setResource(ResourceSettings resource) { deleteResource getName());getResources().add(resource);} public <mask><mask><mask><mask><mask><mask><mask><mask>.ResourceSettings getResource(String name) { for (ResourceSettings resource : getResources()) { if  getName().equals(name)) { return resource;} } return null;} public void deleteResource(String name) { Iterator<ResourceSettings> it = getResources().iterator();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.cloudobe.api.config",
    "truth_type": "com.cloudbees.api.config",
    "full_FQN": "com.cloudbees.api.config.ResourceSettings",
    "boolean": 0,
    "context": "} public void setResource(ResourceSettings resource) { deleteResource getName());getResources().add(resource);} public ResourceSettings getResource(String name) { for (<mask><mask><mask><mask><mask><mask><mask><mask>.ResourceSettings resource : getResources()) { if  getName().equals(name)) { return resource;} } return null;} public void deleteResource(String name) { Iterator<ResourceSettings> it = getResources().iterator();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.cloudobe.api.config",
    "truth_type": "com.cloudbees.api.config",
    "full_FQN": "com.cloudbees.api.config.ResourceSettings.getName()",
    "boolean": 0,
    "context": "} public void setResource(ResourceSettings resource) { deleteResource getName());getResources().add(resource);} public ResourceSettings getResource(String name) { for (ResourceSettings resource : getResources()) { if  <mask><mask><mask><mask><mask><mask><mask><mask>getName().equals(name)) { return resource;} } return null;} public void deleteResource(String name) { Iterator<ResourceSettings> it = getResources().iterator();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator",
    "boolean": 1,
    "context": "} public ResourceSettings getResource(String name) { for (ResourceSettings resource : getResources()) { if  getName().equals(name)) { return resource;} } return null;} public void deleteResource(String name) { <mask><mask><mask>.Iterator<ResourceSettings> it = getResources().iterator();while  hasNext()) { if  next().getName().equals(name)) { remove();} } } private thoughtworks XStream createXStream() { thoughtworks XStream xstream = new thoughtworks XStream() { protected thoughtworks MapperWrapper wrapMapper(thoughtworks MapperWrapper next) { return new thoughtworks MapperWrapper(next) { public boolean shouldSerializeMember(Class definedIn, String fieldName) { return (definedIn != class) && shouldSerializeMember(definedIn, fieldName);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.cloud..api.config",
    "truth_type": "com.cloudbees.api.config",
    "full_FQN": "com.cloudbees.api.config.ResourceSettings",
    "boolean": 0,
    "context": "} public ResourceSettings getResource(String name) { for (ResourceSettings resource : getResources()) { if  getName().equals(name)) { return resource;} } return null;} public void deleteResource(String name) { Iterator<<mask><mask><mask><mask><mask><mask><mask><mask>.ResourceSettings> it = getResources().iterator();while  hasNext()) { if  next().getName().equals(name)) { remove();} } } private thoughtworks XStream createXStream() { thoughtworks XStream xstream = new thoughtworks XStream() { protected thoughtworks MapperWrapper wrapMapper(thoughtworks MapperWrapper next) { return new thoughtworks MapperWrapper(next) { public boolean shouldSerializeMember(Class definedIn, String fieldName) { return (definedIn != class) && shouldSerializeMember(definedIn, fieldName);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator.hasNext()",
    "boolean": 1,
    "context": "} } return null;} public void deleteResource(String name) { Iterator<ResourceSettings> it = getResources().iterator();while  <mask><mask><mask>hasNext()) { if  next().getName().equals(name)) { remove();} } } private thoughtworks XStream createXStream() { thoughtworks XStream xstream = new thoughtworks XStream() { protected thoughtworks MapperWrapper wrapMapper(thoughtworks MapperWrapper next) { return new thoughtworks MapperWrapper(next) { public boolean shouldSerializeMember(Class definedIn, String fieldName) { return (definedIn != class) && shouldSerializeMember(definedIn, fieldName);} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator.next()",
    "boolean": 1,
    "context": "} } return null;} public void deleteResource(String name) { Iterator<ResourceSettings> it = getResources().iterator();while  hasNext()) { if  <mask><mask><mask>next().getName().equals(name)) { remove();} } } private thoughtworks XStream createXStream() { thoughtworks XStream xstream = new thoughtworks XStream() { protected thoughtworks MapperWrapper wrapMapper(thoughtworks MapperWrapper next) { return new thoughtworks MapperWrapper(next) { public boolean shouldSerializeMember(Class definedIn, String fieldName) { return (definedIn != class) && shouldSerializeMember(definedIn, fieldName);} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Iterator.remove()",
    "boolean": 1,
    "context": "} } return null;} public void deleteResource(String name) { Iterator<ResourceSettings> it = getResources().iterator();while  hasNext()) { if  next().getName().equals(name)) { <mask><mask><mask>remove();} } } private thoughtworks XStream createXStream() { thoughtworks XStream xstream = new thoughtworks XStream() { protected thoughtworks MapperWrapper wrapMapper(thoughtworks MapperWrapper next) { return new thoughtworks MapperWrapper(next) { public boolean shouldSerializeMember(Class definedIn, String fieldName) { return (definedIn != class) && shouldSerializeMember(definedIn, fieldName);} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream",
    "boolean": 1,
    "context": "} public void deleteResource(String name) { Iterator<ResourceSettings> it = getResources().iterator();while  hasNext()) { if  next().getName().equals(name)) { remove();} } } private thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.XStream createXStream() { thoughtworks XStream xstream = new thoughtworks XStream() { protected thoughtworks MapperWrapper wrapMapper(thoughtworks MapperWrapper next) { return new thoughtworks MapperWrapper(next) { public boolean shouldSerializeMember(Class definedIn, String fieldName) { return (definedIn != class) && shouldSerializeMember(definedIn, fieldName);} };} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream",
    "boolean": 1,
    "context": "} public void deleteResource(String name) { Iterator<ResourceSettings> it = getResources().iterator();while  hasNext()) { if  next().getName().equals(name)) { remove();} } } private thoughtworks XStream createXStream() { thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.XStream xstream = new thoughtworks XStream() { protected thoughtworks MapperWrapper wrapMapper(thoughtworks MapperWrapper next) { return new thoughtworks MapperWrapper(next) { public boolean shouldSerializeMember(Class definedIn, String fieldName) { return (definedIn != class) && shouldSerializeMember(definedIn, fieldName);} };} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream()",
    "boolean": 1,
    "context": "} public void deleteResource(String name) { Iterator<ResourceSettings> it = getResources().iterator();while  hasNext()) { if  next().getName().equals(name)) { remove();} } } private thoughtworks XStream createXStream() { thoughtworks XStream xstream = new thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask>XStream() { protected thoughtworks MapperWrapper wrapMapper(thoughtworks MapperWrapper next) { return new thoughtworks MapperWrapper(next) { public boolean shouldSerializeMember(Class definedIn, String fieldName) { return (definedIn != class) && shouldSerializeMember(definedIn, fieldName);} };} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.mapper",
    "truth_type": "com.thoughtworks.xstream.XStream.mapper",
    "full_FQN": "com.thoughtworks.xstream.XStream.mapper.MapperWrapper",
    "boolean": 1,
    "context": "} public void deleteResource(String name) { Iterator<ResourceSettings> it = getResources().iterator();while  hasNext()) { if  next().getName().equals(name)) { remove();} } } private thoughtworks XStream createXStream() { thoughtworks XStream xstream = new thoughtworks XStream() { protected thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MapperWrapper wrapMapper(thoughtworks MapperWrapper next) { return new thoughtworks MapperWrapper(next) { public boolean shouldSerializeMember(Class definedIn, String fieldName) { return (definedIn != class) && shouldSerializeMember(definedIn, fieldName);} };} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.mapper",
    "truth_type": "com.thoughtworks.xstream.XStream.mapper",
    "full_FQN": "com.thoughtworks.xstream.XStream.mapper.MapperWrapper",
    "boolean": 1,
    "context": "} public void deleteResource(String name) { Iterator<ResourceSettings> it = getResources().iterator();while  hasNext()) { if  next().getName().equals(name)) { remove();} } } private thoughtworks XStream createXStream() { thoughtworks XStream xstream = new thoughtworks XStream() { protected thoughtworks MapperWrapper wrapMapper(thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MapperWrapper next) { return new thoughtworks MapperWrapper(next) { public boolean shouldSerializeMember(Class definedIn, String fieldName) { return (definedIn != class) && shouldSerializeMember(definedIn, fieldName);} };} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.mapper.MapperWrapper()",
    "boolean": 1,
    "context": "} public void deleteResource(String name) { Iterator<ResourceSettings> it = getResources().iterator();while  hasNext()) { if  next().getName().equals(name)) { remove();} } } private thoughtworks XStream createXStream() { thoughtworks XStream xstream = new thoughtworks XStream() { protected thoughtworks MapperWrapper wrapMapper(thoughtworks MapperWrapper next) { return new thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>MapperWrapper(next) { public boolean shouldSerializeMember(Class definedIn, String fieldName) { return (definedIn != class) && shouldSerializeMember(definedIn, fieldName);} };} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream.setClassLoader()",
    "boolean": 1,
    "context": "} };} }; thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setClassLoader(getClassLoader()); thoughtworks processAnnotations(class); thoughtworks processAnnotations(class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream.processAnnotations()",
    "boolean": 1,
    "context": "} }; thoughtworks setClassLoader(getClassLoader()); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>processAnnotations(class); thoughtworks processAnnotations(class); thoughtworks processAnnotations(class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.axtworks..ations.FeatureType",
    "truth_type": "com.cloudbees.api.config.ResourceSettings",
    "full_FQN": "com.cloudbees.api.config.ResourceSettings.class",
    "boolean": 0,
    "context": "} }; thoughtworks setClassLoader(getClassLoader()); thoughtworks processAnnotations(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.class); thoughtworks processAnnotations(class); thoughtworks processAnnotations(class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream.processAnnotations()",
    "boolean": 1,
    "context": " thoughtworks setClassLoader(getClassLoader()); thoughtworks processAnnotations(class); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>processAnnotations(class); thoughtworks processAnnotations(class); thoughtworks processAnnotations(class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.ax..common.config.Example",
    "truth_type": "com.cloudbees.api.config.Environment",
    "full_FQN": "com.cloudbees.api.config.Environment.class",
    "boolean": 0,
    "context": " thoughtworks setClassLoader(getClassLoader()); thoughtworks processAnnotations(class); thoughtworks processAnnotations(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.class); thoughtworks processAnnotations(class); thoughtworks processAnnotations(class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream.processAnnotations()",
    "boolean": 1,
    "context": " thoughtworks processAnnotations(class); thoughtworks processAnnotations(class); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>processAnnotations(class); thoughtworks processAnnotations(class);return xstream;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream.processAnnotations()",
    "boolean": 1,
    "context": " thoughtworks processAnnotations(class); thoughtworks processAnnotations(class); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>processAnnotations(class);return xstream;} /** * Returns a string representation of  */ public String toXML() { return createXStream().toXML(this);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtw...ance.AbstractStreamException",
    "truth_type": "com.cloudbees.api.config.ParameterHolder",
    "full_FQN": "com.cloudbees.api.config.ParameterHolder.class",
    "boolean": 0,
    "context": " thoughtworks processAnnotations(class); thoughtworks processAnnotations(class); thoughtworks processAnnotations(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.class);return xstream;} /** * Returns a string representation of  */ public String toXML() { return createXStream().toXML(this);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.SingleValueConverter",
    "boolean": 1,
    "context": "public CompositeClass anotherValue = new CompositeClass();} public static class CompositeClass { public Integer value = 42;} public static class ToSingleValue implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.SingleValueConverter { @Override public boolean canConvert(Class type) { return class == type;} @Override public String toString(Object obj) { CompositeClass cCompositeClass = ((CompositeClass) (obj));return cCompositeClass toString();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "org.junit",
    "truth_type": "org.junit",
    "full_FQN": "org.junit.Test",
    "boolean": 1,
    "context": "return cCompositeClass toString();} @Override public Object fromString(String str) { return new CompositeClass();} } @<mask><mask><mask><mask>.Test public void testName() throws Exception { XStream xStream = new XStream(); registerConverter(new ToSingleValue());xstream Mapper mapper = getMapper();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream",
    "boolean": 1,
    "context": "return cCompositeClass toString();} @Override public Object fromString(String str) { return new CompositeClass();} } @Test public void testName() throws Exception { <mask><mask><mask><mask><mask><mask><mask><mask>.XStream xStream = new XStream(); registerConverter(new ToSingleValue());xstream Mapper mapper = getMapper();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks",
    "truth_type": "com.thoughtworks",
    "full_FQN": "com.thoughtworks.xstream.XStream()",
    "boolean": 1,
    "context": "return cCompositeClass toString();} @Override public Object fromString(String str) { return new CompositeClass();} } @Test public void testName() throws Exception { XStream xStream = new <mask><mask><mask><mask><mask>XStream(); registerConverter(new ToSingleValue());xstream Mapper mapper = getMapper();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.registerConverter()",
    "boolean": 1,
    "context": "} @Override public Object fromString(String str) { return new CompositeClass();} } @Test public void testName() throws Exception { XStream xStream = new XStream(); <mask><mask><mask><mask><mask><mask><mask><mask>registerConverter(new ToSingleValue());xstream Mapper mapper = getMapper();ReflectionProvider reflectionProvider = getReflectionProvider();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks",
    "truth_type": "com.thoughtworks",
    "full_FQN": "com.thoughtworks.xstream",
    "boolean": 1,
    "context": "} } @Test public void testName() throws Exception { XStream xStream = new XStream(); registerConverter(new ToSingleValue());<mask><mask><mask><mask><mask>.xstream Mapper mapper = getMapper();ReflectionProvider reflectionProvider = getReflectionProvider();ConverterLookup converterLookup = getConverterLookup();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.mapper.Mapper",
    "truth_type": "com.thoughtworks.xstream.mapper.Mapper",
    "full_FQN": "com.thoughtworks.xstream.mapper.Mapper.Mapper",
    "boolean": 1,
    "context": "} } @Test public void testName() throws Exception { XStream xStream = new XStream(); registerConverter(new ToSingleValue());xstream <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Mapper mapper = getMapper();ReflectionProvider reflectionProvider = getReflectionProvider();ConverterLookup converterLookup = getConverterLookup();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.getMapper()",
    "boolean": 1,
    "context": "} } @Test public void testName() throws Exception { XStream xStream = new XStream(); registerConverter(new ToSingleValue());xstream Mapper mapper = <mask><mask><mask><mask><mask><mask><mask><mask>getMapper();ReflectionProvider reflectionProvider = getReflectionProvider();ConverterLookup converterLookup = getConverterLookup();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters.reflection",
    "truth_type": "com.thoughtworks.xstream.converters.reflection",
    "full_FQN": "com.thoughtworks.xstream.converters.reflection.ReflectionProvider",
    "boolean": 1,
    "context": " registerConverter(new ToSingleValue());xstream Mapper mapper = getMapper();<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ReflectionProvider reflectionProvider = getReflectionProvider();ConverterLookup converterLookup = getConverterLookup();String valueField = null;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.getReflectionProvider()",
    "boolean": 1,
    "context": " registerConverter(new ToSingleValue());xstream Mapper mapper = getMapper();ReflectionProvider reflectionProvider = <mask><mask><mask><mask><mask><mask><mask><mask>getReflectionProvider();ConverterLookup converterLookup = getConverterLookup();String valueField = null;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.ConverterLookup",
    "boolean": 1,
    "context": "com.thoughtworks.xstream Mapper mapper = getMapper();ReflectionProvider reflectionProvider = getReflectionProvider();<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.ConverterLookup converterLookup = getConverterLookup();String valueField = null;Converter converter = null;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.getConverterLookup()",
    "boolean": 1,
    "context": "com.thoughtworks.xstream Mapper mapper = getMapper();ReflectionProvider reflectionProvider = getReflectionProvider();ConverterLookup converterLookup = <mask><mask><mask><mask><mask><mask><mask><mask>getConverterLookup();String valueField = null;Converter converter = null;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.Converter",
    "boolean": 1,
    "context": "com.thoughtworks.xstream.converters.ConverterLookup converterLookup = getConverterLookup();String valueField = null;<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Converter converter = null; registerConverter(converter);println toXML(new AClass()));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.registerConverter()",
    "boolean": 1,
    "context": "java.lang.String valueField = null;Converter converter = null; <mask><mask><mask><mask><mask><mask><mask><mask>registerConverter(converter);println toXML(new AClass()));} protected xstream MapperWrapper wrapMapper(xstream MapperWrapper next) { return next;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.toXML()",
    "boolean": 1,
    "context": "com.thoughtworks.xstream.converters.Converter converter = null; registerConverter(converter);println <mask><mask><mask><mask><mask><mask><mask><mask>toXML(new AClass()));} protected xstream MapperWrapper wrapMapper(xstream MapperWrapper next) { return next;} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks",
    "truth_type": "com.thoughtworks",
    "full_FQN": "com.thoughtworks.xstream",
    "boolean": 1,
    "context": " registerConverter(converter);println toXML(new AClass()));} protected <mask><mask><mask><mask><mask>.xstream MapperWrapper wrapMapper(xstream MapperWrapper next) { return next;} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.mapper.Mapper",
    "truth_type": "com.thoughtworks.xstream.mapper.Mapper",
    "full_FQN": "com.thoughtworks.xstream.mapper.Mapper.MapperWrapper",
    "boolean": 1,
    "context": " registerConverter(converter);println toXML(new AClass()));} protected xstream <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MapperWrapper wrapMapper(xstream MapperWrapper next) { return next;} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks",
    "truth_type": "com.thoughtworks",
    "full_FQN": "com.thoughtworks.xstream",
    "boolean": 1,
    "context": " registerConverter(converter);println toXML(new AClass()));} protected xstream MapperWrapper wrapMapper(<mask><mask><mask><mask><mask>.xstream MapperWrapper next) { return next;} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.mapper.Mapper",
    "truth_type": "com.thoughtworks.xstream.mapper.Mapper",
    "full_FQN": "com.thoughtworks.xstream.mapper.Mapper.MapperWrapper",
    "boolean": 1,
    "context": " registerConverter(converter);println toXML(new AClass()));} protected xstream MapperWrapper wrapMapper(xstream <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MapperWrapper next) { return next;} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map",
    "boolean": 1,
    "context": "public class xstream_class_36 { public class MapTest { private <mask><mask><mask>.Map<String, String> mapList;public MapTest() { mapList = new HashMap<String, String>();} public void setServicesHealth(String id, String name) { put(id, name);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.HashMap",
    "boolean": 1,
    "context": "public class xstream_class_36 { public class MapTest { private Map<String, String> mapList;public MapTest() { mapList = new <mask><mask><mask>.HashMap<String, String>();} public void setServicesHealth(String id, String name) { put(id, name);} } public static void main(String[] arg) { MapTest services = null;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.Map.put()",
    "boolean": 1,
    "context": "public class xstream_class_36 { public class MapTest { private Map<String, String> mapList;public MapTest() { mapList = new HashMap<String, String>();} public void setServicesHealth(String id, String name) { <mask><mask><mask>put(id, name);} } public static void main(String[] arg) { MapTest services = null;setServicesHealth(String, String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream",
    "boolean": 1,
    "context": "services.setServicesHealth(String, String);setServicesHealth(String, String);<mask><mask><mask><mask><mask><mask><mask><mask>.XStream stream = new XStream(new StaxDriver()); alias(String, class); addImplicitMap(class, String, String, class, String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks",
    "truth_type": "com.thoughtworks",
    "full_FQN": "com.thoughtworks.xstream.XStream()",
    "boolean": 1,
    "context": "services.setServicesHealth(String, String);setServicesHealth(String, String);XStream stream = new <mask><mask><mask><mask><mask>XStream(new StaxDriver()); alias(String, class); addImplicitMap(class, String, String, class, String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.xml.StaxDriver()",
    "boolean": 1,
    "context": "services.setServicesHealth(String, String);setServicesHealth(String, String);XStream stream = new XStream(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>StaxDriver()); alias(String, class); addImplicitMap(class, String, String, class, String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.alias()",
    "boolean": 1,
    "context": "services.setServicesHealth(String, String);XStream stream = new XStream(new StaxDriver()); <mask><mask><mask><mask><mask><mask><mask><mask>alias(String, class); addImplicitMap(class, String, String, class, String);String xmlStr = toXML(services);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.addImplicitMap()",
    "boolean": 1,
    "context": "com.thoughtworks.xstream.XStream stream = new XStream(new StaxDriver()); alias(String, class); <mask><mask><mask><mask><mask><mask><mask><mask>addImplicitMap(class, String, String, class, String);String xmlStr = toXML(services);println(xmlStr);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.toXML()",
    "boolean": 1,
    "context": " alias(String, class); addImplicitMap(class, String, String, class, String);String xmlStr = <mask><mask><mask><mask><mask><mask><mask><mask>toXML(services);println(xmlStr);} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.Converter",
    "boolean": 1,
    "context": "public class xstream_class_37 { public class FieldDtoConvertor implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Converter { public boolean canConvert(Class clazz) { return equals(class);} public void marshal(final Object value, final HierarchicalStreamWriter writer, final MarshallingContext context) { final FieldDto fieldDto = ((FieldDto) (value));for (int i = 0; i < getSize(); i++) { addAttribute(getAttributeName(i), getAttributeValue(i));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamWriter",
    "boolean": 1,
    "context": "public class xstream_class_37 { public class FieldDtoConvertor implements Converter { public boolean canConvert(Class clazz) { return equals(class);} public void marshal(final Object value, final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HierarchicalStreamWriter writer, final MarshallingContext context) { final FieldDto fieldDto = ((FieldDto) (value));for (int i = 0; i < getSize(); i++) { addAttribute(getAttributeName(i), getAttributeValue(i));} setValue(getText());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.MarshallingContext",
    "boolean": 1,
    "context": "public class xstream_class_37 { public class FieldDtoConvertor implements Converter { public boolean canConvert(Class clazz) { return equals(class);} public void marshal(final Object value, final HierarchicalStreamWriter writer, final <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MarshallingContext context) { final FieldDto fieldDto = ((FieldDto) (value));for (int i = 0; i < getSize(); i++) { addAttribute(getAttributeName(i), getAttributeValue(i));} setValue(getText());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamWriter.addAttribute()",
    "boolean": 1,
    "context": "public class xstream_class_37 { public class FieldDtoConvertor implements Converter { public boolean canConvert(Class clazz) { return equals(class);} public void marshal(final Object value, final HierarchicalStreamWriter writer, final MarshallingContext context) { final FieldDto fieldDto = ((FieldDto) (value));for (int i = 0; i < getSize(); i++) { <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addAttribute(getAttributeName(i), getAttributeValue(i));} setValue(getText());} public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { FieldDto fieldDto = new FieldDto();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamWriter.setValue()",
    "boolean": 1,
    "context": "} public void marshal(final Object value, final HierarchicalStreamWriter writer, final MarshallingContext context) { final FieldDto fieldDto = ((FieldDto) (value));for (int i = 0; i < getSize(); i++) { addAttribute(getAttributeName(i), getAttributeValue(i));} <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>setValue(getText());} public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { FieldDto fieldDto = new FieldDto();for (int i = 0; i < getAttributeCount(); i++) { addAttribute getAttributeName(i), getAttribute(i));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader",
    "boolean": 1,
    "context": "for (int i = 0; i < getSize(); i++) { addAttribute(getAttributeName(i), getAttributeValue(i));} setValue(getText());} public Object unmarshal(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HierarchicalStreamReader reader, UnmarshallingContext context) { FieldDto fieldDto = new FieldDto();for (int i = 0; i < getAttributeCount(); i++) { addAttribute getAttributeName(i), getAttribute(i));} setText getValue());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.UnmarshallingContext",
    "boolean": 1,
    "context": "for (int i = 0; i < getSize(); i++) { addAttribute(getAttributeName(i), getAttributeValue(i));} setValue(getText());} public Object unmarshal(HierarchicalStreamReader reader, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.UnmarshallingContext context) { FieldDto fieldDto = new FieldDto();for (int i = 0; i < getAttributeCount(); i++) { addAttribute getAttributeName(i), getAttribute(i));} setText getValue());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.getAttributeCount()",
    "boolean": 1,
    "context": "} setValue(getText());} public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { FieldDto fieldDto = new FieldDto();for (int i = 0; i < <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getAttributeCount(); i++) { addAttribute getAttributeName(i), getAttribute(i));} setText getValue());return fieldDto;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.getAttributeName()",
    "boolean": 1,
    "context": "} setValue(getText());} public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { FieldDto fieldDto = new FieldDto();for (int i = 0; i < getAttributeCount(); i++) { addAttribute <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getAttributeName(i), getAttribute(i));} setText getValue());return fieldDto;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.getAttribute()",
    "boolean": 1,
    "context": "} setValue(getText());} public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { FieldDto fieldDto = new FieldDto();for (int i = 0; i < getAttributeCount(); i++) { addAttribute getAttributeName(i), <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getAttribute(i));} setText getValue());return fieldDto;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.getValue()",
    "boolean": 1,
    "context": "} public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { FieldDto fieldDto = new FieldDto();for (int i = 0; i < getAttributeCount(); i++) { addAttribute getAttributeName(i), getAttribute(i));} setText <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getValue());return fieldDto;} } public class FieldDto { private ArrayList<String> attributeName = null;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "} setText getValue());return fieldDto;} } public class FieldDto { private <mask><mask><mask>.ArrayList<String> attributeName = null;private ArrayList<String> attributeValue = null;private String text;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "return fieldDto;} } public class FieldDto { private ArrayList<String> attributeName = null;private <mask><mask><mask>.ArrayList<String> attributeValue = null;private String text;public FieldDto() { attributeName = new ArrayList<String>();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "private ArrayList<String> attributeValue = null;private String text;public FieldDto() { attributeName = new <mask><mask><mask>.ArrayList<String>();attributeValue = new ArrayList<String>();} public String getAttributeName(int index) { return get(index);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "private String text;public FieldDto() { attributeName = new ArrayList<String>();attributeValue = new <mask><mask><mask>.ArrayList<String>();} public String getAttributeName(int index) { return get(index);} public void addAttribute(String attributeName, String attributeValue) { this add(attributeName);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.get()",
    "boolean": 1,
    "context": "public FieldDto() { attributeName = new ArrayList<String>();attributeValue = new ArrayList<String>();} public String getAttributeName(int index) { return <mask><mask><mask>get(index);} public void addAttribute(String attributeName, String attributeValue) { this add(attributeName);this add(attributeValue);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.add()",
    "boolean": 1,
    "context": "attributeValue = new ArrayList<String>();} public String getAttributeName(int index) { return get(index);} public void addAttribute(String attributeName, String attributeValue) { this <mask><mask><mask>add(attributeName);this add(attributeValue);} public String getAttributeValue(int index) { return get(index);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.add()",
    "boolean": 1,
    "context": "} public String getAttributeName(int index) { return get(index);} public void addAttribute(String attributeName, String attributeValue) { this add(attributeName);this <mask><mask><mask>add(attributeValue);} public String getAttributeValue(int index) { return get(index);} public String getText() { return text;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.get()",
    "boolean": 1,
    "context": "} public void addAttribute(String attributeName, String attributeValue) { this add(attributeName);this add(attributeValue);} public String getAttributeValue(int index) { return <mask><mask><mask>get(index);} public String getText() { return text;} public void setText(String text) { text = text;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.size()",
    "boolean": 1,
    "context": "} public String getText() { return text;} public void setText(String text) { text = text;} public int getSize() { return <mask><mask><mask>size();} } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream",
    "boolean": 1,
    "context": "public class xstream_class_38 { thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.XStream xstream = new thoughtworks XStream();@thoughtworks XStreamAlias(String) public class BookDetails { private int bookId;private String bookName;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream()",
    "boolean": 1,
    "context": "public class xstream_class_38 { thoughtworks XStream xstream = new thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask>XStream();@thoughtworks XStreamAlias(String) public class BookDetails { private int bookId;private String bookName;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.annotations.XStreamAlias()",
    "boolean": 1,
    "context": "public class xstream_class_38 { thoughtworks XStream xstream = new thoughtworks XStream();@thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>XStreamAlias(String) public class BookDetails { private int bookId;private String bookName;private int amount;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.annotations.XStreamAlias()",
    "boolean": 1,
    "context": "private String bookName;private int amount;} @thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>XStreamAlias(String) public class Books { private List<BookDetails> bookDetails = new ArrayList<BookDetails>();} public BookDetails convertXml(String xml) { processAnnotations(class); thoughtworks processAnnotations(class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "private String bookName;private int amount;} @thoughtworks XStreamAlias(String) public class Books { private <mask><mask><mask>.List<BookDetails> bookDetails = new ArrayList<BookDetails>();} public BookDetails convertXml(String xml) { processAnnotations(class); thoughtworks processAnnotations(class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "private String bookName;private int amount;} @thoughtworks XStreamAlias(String) public class Books { private List<BookDetails> bookDetails = new <mask><mask><mask>.ArrayList<BookDetails>();} public BookDetails convertXml(String xml) { processAnnotations(class); thoughtworks processAnnotations(class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.processAnnotations()",
    "boolean": 1,
    "context": "private int amount;} @thoughtworks XStreamAlias(String) public class Books { private List<BookDetails> bookDetails = new ArrayList<BookDetails>();} public BookDetails convertXml(String xml) { <mask><mask><mask><mask><mask><mask><mask><mask>processAnnotations(class); thoughtworks processAnnotations(class); thoughtworks addImplicitCollection(class, String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream.processAnnotations()",
    "boolean": 1,
    "context": "} @thoughtworks XStreamAlias(String) public class Books { private List<BookDetails> bookDetails = new ArrayList<BookDetails>();} public BookDetails convertXml(String xml) { processAnnotations(class); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>processAnnotations(class); thoughtworks addImplicitCollection(class, String);Books b = (()  fromXML(xml)));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream.addImplicitCollection()",
    "boolean": 1,
    "context": "} public BookDetails convertXml(String xml) { processAnnotations(class); thoughtworks processAnnotations(class); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>addImplicitCollection(class, String);Books b = (()  fromXML(xml)));// and now you can return your BookDetails element (in case you want only first one) return b get(0);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.fromXML()",
    "boolean": 1,
    "context": " thoughtworks processAnnotations(class); thoughtworks addImplicitCollection(class, String);Books b = (()  <mask><mask><mask><mask><mask><mask><mask><mask>fromXML(xml)));// and now you can return your BookDetails element (in case you want only first one) return b get(0);} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.get()",
    "boolean": 1,
    "context": " thoughtworks addImplicitCollection(class, String);Books b = (()  fromXML(xml)));// and now you can return your BookDetails element (in case you want only first one) return b <mask><mask><mask>get(0);} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream",
    "boolean": 1,
    "context": "public class xstream_class_39 { private static thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.XStream xstream = new thoughtworks XStream(new thoughtworks XppDriver() { @Override public thoughtworks HierarchicalStreamWriter createWriter(Writer out) { return new thoughtworks PrettyPrintWriter(out) { // Add CDATA block boolean cdata;// I need to add cdata for some fields only boolean isNeedUpper;// only some will need this protected void writeText(thoughtworks QuickWriter writer, String text) { if (cdata) { thoughtworks write(String); thoughtworks write(text); thoughtworks write(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream()",
    "boolean": 1,
    "context": "public class xstream_class_39 { private static thoughtworks XStream xstream = new thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask>XStream(new thoughtworks XppDriver() { @Override public thoughtworks HierarchicalStreamWriter createWriter(Writer out) { return new thoughtworks PrettyPrintWriter(out) { // Add CDATA block boolean cdata;// I need to add cdata for some fields only boolean isNeedUpper;// only some will need this protected void writeText(thoughtworks QuickWriter writer, String text) { if (cdata) { thoughtworks write(String); thoughtworks write(text); thoughtworks write(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.xml.XppDriver()",
    "boolean": 1,
    "context": "public class xstream_class_39 { private static thoughtworks XStream xstream = new thoughtworks XStream(new thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>XppDriver() { @Override public thoughtworks HierarchicalStreamWriter createWriter(Writer out) { return new thoughtworks PrettyPrintWriter(out) { // Add CDATA block boolean cdata;// I need to add cdata for some fields only boolean isNeedUpper;// only some will need this protected void writeText(thoughtworks QuickWriter writer, String text) { if (cdata) { thoughtworks write(String); thoughtworks write(text); thoughtworks write(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.HierarchicalStreamWriter",
    "boolean": 1,
    "context": "public class xstream_class_39 { private static thoughtworks XStream xstream = new thoughtworks XStream(new thoughtworks XppDriver() { @Override public thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HierarchicalStreamWriter createWriter(Writer out) { return new thoughtworks PrettyPrintWriter(out) { // Add CDATA block boolean cdata;// I need to add cdata for some fields only boolean isNeedUpper;// only some will need this protected void writeText(thoughtworks QuickWriter writer, String text) { if (cdata) { thoughtworks write(String); thoughtworks write(text); thoughtworks write(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.Writer",
    "boolean": 1,
    "context": "public class xstream_class_39 { private static thoughtworks XStream xstream = new thoughtworks XStream(new thoughtworks XppDriver() { @Override public thoughtworks HierarchicalStreamWriter createWriter(<mask><mask><mask>.Writer out) { return new thoughtworks PrettyPrintWriter(out) { // Add CDATA block boolean cdata;// I need to add cdata for some fields only boolean isNeedUpper;// only some will need this protected void writeText(thoughtworks QuickWriter writer, String text) { if (cdata) { thoughtworks write(String); thoughtworks write(text); thoughtworks write(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.xml.PrettyPrintWriter()",
    "boolean": 1,
    "context": "public class xstream_class_39 { private static thoughtworks XStream xstream = new thoughtworks XStream(new thoughtworks XppDriver() { @Override public thoughtworks HierarchicalStreamWriter createWriter(Writer out) { return new thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>PrettyPrintWriter(out) { // Add CDATA block boolean cdata;// I need to add cdata for some fields only boolean isNeedUpper;// only some will need this protected void writeText(thoughtworks QuickWriter writer, String text) { if (cdata) { thoughtworks write(String); thoughtworks write(text); thoughtworks write(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.core.util",
    "truth_type": "com.thoughtworks.xstream.XStream.core.util",
    "full_FQN": "com.thoughtworks.xstream.XStream.core.util.QuickWriter",
    "boolean": 1,
    "context": "public class xstream_class_39 { private static thoughtworks XStream xstream = new thoughtworks XStream(new thoughtworks XppDriver() { @Override public thoughtworks HierarchicalStreamWriter createWriter(Writer out) { return new thoughtworks PrettyPrintWriter(out) { // Add CDATA block boolean cdata;// I need to add cdata for some fields only boolean isNeedUpper;// only some will need this protected void writeText(thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.QuickWriter writer, String text) { if (cdata) { thoughtworks write(String); thoughtworks write(text); thoughtworks write(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io.util",
    "truth_type": "com.thoughtworks.xstream.XStream.core.util",
    "full_FQN": "com.thoughtworks.xstream.XStream.core.util.QuickWriter.write()",
    "boolean": 0,
    "context": "public class xstream_class_39 { private static thoughtworks XStream xstream = new thoughtworks XStream(new thoughtworks XppDriver() { @Override public thoughtworks HierarchicalStreamWriter createWriter(Writer out) { return new thoughtworks PrettyPrintWriter(out) { // Add CDATA block boolean cdata;// I need to add cdata for some fields only boolean isNeedUpper;// only some will need this protected void writeText(thoughtworks QuickWriter writer, String text) { if (cdata) { thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>write(String); thoughtworks write(text); thoughtworks write(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.core.util",
    "truth_type": "com.thoughtworks.xstream.XStream.core.util",
    "full_FQN": "com.thoughtworks.xstream.XStream.core.util.QuickWriter.write()",
    "boolean": 1,
    "context": "public class xstream_class_39 { private static thoughtworks XStream xstream = new thoughtworks XStream(new thoughtworks XppDriver() { @Override public thoughtworks HierarchicalStreamWriter createWriter(Writer out) { return new thoughtworks PrettyPrintWriter(out) { // Add CDATA block boolean cdata;// I need to add cdata for some fields only boolean isNeedUpper;// only some will need this protected void writeText(thoughtworks QuickWriter writer, String text) { if (cdata) { thoughtworks write(String); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>write(text); thoughtworks write(String);} else if (isNeedUpper) { thoughtworks write(toUpperCase());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.core.util",
    "truth_type": "com.thoughtworks.xstream.XStream.core.util",
    "full_FQN": "com.thoughtworks.xstream.XStream.core.util.QuickWriter.write()",
    "boolean": 1,
    "context": "public class xstream_class_39 { private static thoughtworks XStream xstream = new thoughtworks XStream(new thoughtworks XppDriver() { @Override public thoughtworks HierarchicalStreamWriter createWriter(Writer out) { return new thoughtworks PrettyPrintWriter(out) { // Add CDATA block boolean cdata;// I need to add cdata for some fields only boolean isNeedUpper;// only some will need this protected void writeText(thoughtworks QuickWriter writer, String text) { if (cdata) { thoughtworks write(String); thoughtworks write(text); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>write(String);} else if (isNeedUpper) { thoughtworks write(toUpperCase());} else { thoughtworks write(text);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.core.util",
    "truth_type": "com.thoughtworks.xstream.XStream.core.util",
    "full_FQN": "com.thoughtworks.xstream.XStream.core.util.QuickWriter.write()",
    "boolean": 1,
    "context": " thoughtworks write(text); thoughtworks write(String);} else if (isNeedUpper) { thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>write(toUpperCase());} else { thoughtworks write(text);} } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.core.util",
    "truth_type": "com.thoughtworks.xstream.XStream.core.util",
    "full_FQN": "com.thoughtworks.xstream.XStream.core.util.QuickWriter.write()",
    "boolean": 1,
    "context": " thoughtworks write(String);} else if (isNeedUpper) { thoughtworks write(toUpperCase());} else { thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>write(text);} } };} });"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "public class xstream_class_4 { public static void main(String[] args) { <mask><mask><mask>.ArrayList<Class<?>> classes = new ArrayList<Class<?>>(); add(class); add(class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "public class xstream_class_4 { public static void main(String[] args) { ArrayList<Class<?>> classes = new <mask><mask><mask>.ArrayList<Class<?>>(); add(class); add(class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.add()",
    "boolean": 1,
    "context": "public class xstream_class_4 { public static void main(String[] args) { ArrayList<Class<?>> classes = new ArrayList<Class<?>>(); <mask><mask><mask>add(class); add(class); add(class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.add()",
    "boolean": 1,
    "context": "public class xstream_class_4 { public static void main(String[] args) { ArrayList<Class<?>> classes = new ArrayList<Class<?>>(); add(class); <mask><mask><mask>add(class); add(class); add(class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.add()",
    "boolean": 1,
    "context": " add(class); add(class); <mask><mask><mask>add(class); add(class);ArrayList<Number> numbers = new ArrayList<Number>();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.add()",
    "boolean": 1,
    "context": " add(class); add(class); <mask><mask><mask>add(class);ArrayList<Number> numbers = new ArrayList<Number>(); add(new Integer(3));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": " add(class); add(class);<mask><mask><mask>.ArrayList<Number> numbers = new ArrayList<Number>(); add(new Integer(3)); add(new Long(3));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": " add(class); add(class);ArrayList<Number> numbers = new <mask><mask><mask>.ArrayList<Number>(); add(new Integer(3)); add(new Long(3));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.add()",
    "boolean": 1,
    "context": " add(class);ArrayList<Number> numbers = new ArrayList<Number>(); <mask><mask><mask>add(new Integer(3)); add(new Long(3)); add(new Double(3));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.add()",
    "boolean": 1,
    "context": "java.util.ArrayList<Number> numbers = new ArrayList<Number>(); add(new Integer(3)); <mask><mask><mask>add(new Long(3)); add(new Double(3)); add(new Float(3));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.add()",
    "boolean": 1,
    "context": " add(new Integer(3)); add(new Long(3)); <mask><mask><mask>add(new Double(3)); add(new Float(3));XStream xml = new XStream();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList.add()",
    "boolean": 1,
    "context": " add(new Long(3)); add(new Double(3)); <mask><mask><mask>add(new Float(3));XStream xml = new XStream(); alias(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream",
    "boolean": 1,
    "context": " add(new Double(3)); add(new Float(3));<mask><mask><mask><mask><mask><mask><mask><mask>.XStream xml = new XStream(); alias(String, class); aliasType(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks",
    "truth_type": "com.thoughtworks",
    "full_FQN": "com.thoughtworks.xstream.XStream()",
    "boolean": 1,
    "context": " add(new Double(3)); add(new Float(3));XStream xml = new <mask><mask><mask><mask><mask>XStream(); alias(String, class); aliasType(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.alias()",
    "boolean": 1,
    "context": " add(new Float(3));XStream xml = new XStream(); <mask><mask><mask><mask><mask><mask><mask><mask>alias(String, class); aliasType(String, class); aliasPackage(String, String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.aliasType()",
    "boolean": 1,
    "context": "com.thoughtworks.xstream.XStream xml = new XStream(); alias(String, class); <mask><mask><mask><mask><mask><mask><mask><mask>aliasType(String, class); aliasPackage(String, String);println toXML(classes));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.aliasPackage()",
    "boolean": 1,
    "context": " alias(String, class); aliasType(String, class); <mask><mask><mask><mask><mask><mask><mask><mask>aliasPackage(String, String);println toXML(classes));println toXML(numbers));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.toXML()",
    "boolean": 1,
    "context": " aliasType(String, class); aliasPackage(String, String);println <mask><mask><mask><mask><mask><mask><mask><mask>toXML(classes));println toXML(numbers));} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.toXML()",
    "boolean": 1,
    "context": " aliasPackage(String, String);println toXML(classes));println <mask><mask><mask><mask><mask><mask><mask><mask>toXML(numbers));} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.Converter",
    "boolean": 1,
    "context": "public class xstream_class_40 implements <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.Converter { @SuppressWarnings(String) @Override public boolean canConvert(Class clazz) { return equals(class);} @Override public void marshal(Object object, HierarchicalStreamWriter writer, MarshallingContext context) { } @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { String text = ((String)  getValue()));Integer number = parseInt(trim());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamWriter",
    "boolean": 1,
    "context": "public class xstream_class_40 implements Converter { @SuppressWarnings(String) @Override public boolean canConvert(Class clazz) { return equals(class);} @Override public void marshal(Object object, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HierarchicalStreamWriter writer, MarshallingContext context) { } @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { String text = ((String)  getValue()));Integer number = parseInt(trim());return number;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.MarshallingContext",
    "boolean": 1,
    "context": "public class xstream_class_40 implements Converter { @SuppressWarnings(String) @Override public boolean canConvert(Class clazz) { return equals(class);} @Override public void marshal(Object object, HierarchicalStreamWriter writer, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.MarshallingContext context) { } @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { String text = ((String)  getValue()));Integer number = parseInt(trim());return number;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader",
    "boolean": 1,
    "context": "public class xstream_class_40 implements Converter { @SuppressWarnings(String) @Override public boolean canConvert(Class clazz) { return equals(class);} @Override public void marshal(Object object, HierarchicalStreamWriter writer, MarshallingContext context) { } @Override public Object unmarshal(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.HierarchicalStreamReader reader, UnmarshallingContext context) { String text = ((String)  getValue()));Integer number = parseInt(trim());return number;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.converters",
    "truth_type": "com.thoughtworks.xstream.converters",
    "full_FQN": "com.thoughtworks.xstream.converters.UnmarshallingContext",
    "boolean": 1,
    "context": "public class xstream_class_40 implements Converter { @SuppressWarnings(String) @Override public boolean canConvert(Class clazz) { return equals(class);} @Override public void marshal(Object object, HierarchicalStreamWriter writer, MarshallingContext context) { } @Override public Object unmarshal(HierarchicalStreamReader reader, <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.UnmarshallingContext context) { String text = ((String)  getValue()));Integer number = parseInt(trim());return number;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.HierarchicalStreamReader.getValue()",
    "boolean": 1,
    "context": "public class xstream_class_40 implements Converter { @SuppressWarnings(String) @Override public boolean canConvert(Class clazz) { return equals(class);} @Override public void marshal(Object object, HierarchicalStreamWriter writer, MarshallingContext context) { } @Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) { String text = ((String)  <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>getValue()));Integer number = parseInt(trim());return number;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream",
    "boolean": 1,
    "context": "public class xstream_class_41 { public static void main(String[] arg) { thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.XStream xstream = new thoughtworks XStream(new thoughtworks StaxDriver()); thoughtworks alias(String, class); thoughtworks alias(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream()",
    "boolean": 1,
    "context": "public class xstream_class_41 { public static void main(String[] arg) { thoughtworks XStream xstream = new thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask>XStream(new thoughtworks StaxDriver()); thoughtworks alias(String, class); thoughtworks alias(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.xml.StaxDriver()",
    "boolean": 1,
    "context": "public class xstream_class_41 { public static void main(String[] arg) { thoughtworks XStream xstream = new thoughtworks XStream(new thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>StaxDriver()); thoughtworks alias(String, class); thoughtworks alias(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream.alias()",
    "boolean": 1,
    "context": "public class xstream_class_41 { public static void main(String[] arg) { thoughtworks XStream xstream = new thoughtworks XStream(new thoughtworks StaxDriver()); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>alias(String, class); thoughtworks alias(String, class);String s = new String(String + (((String + String) + String) + String));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream.alias()",
    "boolean": 1,
    "context": "public class xstream_class_41 { public static void main(String[] arg) { thoughtworks XStream xstream = new thoughtworks XStream(new thoughtworks StaxDriver()); thoughtworks alias(String, class); thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>alias(String, class);String s = new String(String + (((String + String) + String) + String));println(s);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.fromXML()",
    "boolean": 1,
    "context": "java.lang.String s = new String(String + (((String + String) + String) + String));println(s);DetList data = ((DetList)  <mask><mask><mask><mask><mask><mask><mask><mask>fromXML(s)));} public class DetList { private List<Details> detlist;public List<Details> getDetlist() { return detlist;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "java.lang.System.out.println(s);DetList data = ((DetList)  fromXML(s)));} public class DetList { private <mask><mask><mask>.List<Details> detlist;public List<Details> getDetlist() { return detlist;} public void setDetlist(List<Details> detlist) { detlist = detlist;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "xstream_class_41.DetList data = ((DetList)  fromXML(s)));} public class DetList { private List<Details> detlist;public <mask><mask><mask>.List<Details> getDetlist() { return detlist;} public void setDetlist(List<Details> detlist) { detlist = detlist;} } // Getters and Setters are  public class Details { private String Name;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "} public class DetList { private List<Details> detlist;public List<Details> getDetlist() { return detlist;} public void setDetlist(<mask><mask><mask>.List<Details> detlist) { detlist = detlist;} } // Getters and Setters are  public class Details { private String Name;private String type;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.annotations.XStreamAlias()",
    "boolean": 1,
    "context": "public class xstream_class_42 { @<mask><mask><mask><mask><mask><mask><mask><mask>XStreamAlias(String) public class AddressServiceConfig { private String pathToCodeposFiles;@XStreamImplicit(itemFieldName = String) private List<Region> regions;} @XStreamAlias(String) public class Region { private String regionName;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.annotations.XStreamImplicit()",
    "boolean": 1,
    "context": "public class xstream_class_42 { @XStreamAlias(String) public class AddressServiceConfig { private String pathToCodeposFiles;@<mask><mask><mask><mask><mask><mask><mask><mask>XStreamImplicit(itemFieldName = String) private List<Region> regions;} @XStreamAlias(String) public class Region { private String regionName;@XStreamImplicit(itemFieldName = String) private List<Province> provinces;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "public class xstream_class_42 { @XStreamAlias(String) public class AddressServiceConfig { private String pathToCodeposFiles;@XStreamImplicit(itemFieldName = String) private <mask><mask><mask>.List<Region> regions;} @XStreamAlias(String) public class Region { private String regionName;@XStreamImplicit(itemFieldName = String) private List<Province> provinces;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.annotations.XStreamAlias()",
    "boolean": 1,
    "context": "public class xstream_class_42 { @XStreamAlias(String) public class AddressServiceConfig { private String pathToCodeposFiles;@XStreamImplicit(itemFieldName = String) private List<Region> regions;} @<mask><mask><mask><mask><mask><mask><mask><mask>XStreamAlias(String) public class Region { private String regionName;@XStreamImplicit(itemFieldName = String) private List<Province> provinces;} @XStreamAlias(String) public class Province { private int code;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.annotations.XStreamImplicit()",
    "boolean": 1,
    "context": "@XStreamImplicit(itemFieldName = String) private List<Region> regions;} @XStreamAlias(String) public class Region { private String regionName;@<mask><mask><mask><mask><mask><mask><mask><mask>XStreamImplicit(itemFieldName = String) private List<Province> provinces;} @XStreamAlias(String) public class Province { private int code;private String name;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "@XStreamImplicit(itemFieldName = String) private List<Region> regions;} @XStreamAlias(String) public class Region { private String regionName;@XStreamImplicit(itemFieldName = String) private <mask><mask><mask>.List<Province> provinces;} @XStreamAlias(String) public class Province { private int code;private String name;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.annotations.XStreamAlias()",
    "boolean": 1,
    "context": "} @XStreamAlias(String) public class Region { private String regionName;@XStreamImplicit(itemFieldName = String) private List<Province> provinces;} @<mask><mask><mask><mask><mask><mask><mask><mask>XStreamAlias(String) public class Province { private int code;private String name;} };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "public class xstream_class_43 { public <mask><mask><mask>.List<Book> books;public xstream_class_43(List<Book> books) { books = books;} @Override public String toString() { StringBuilder b = new StringBuilder();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "public class xstream_class_43 { public List<Book> books;public xstream_class_43(<mask><mask><mask>.List<Book> books) { books = books;} @Override public String toString() { StringBuilder b = new StringBuilder(); append((String + size()) + String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.size()",
    "boolean": 1,
    "context": "public xstream_class_43(List<Book> books) { books = books;} @Override public String toString() { StringBuilder b = new StringBuilder(); append((String + <mask><mask><mask>size()) + String);for (Book book : books) { append(toString());// Skip a line append(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List",
    "boolean": 1,
    "context": "this.author = author;} @Override public String toString() { return ((StringString\\String) + author;} } public static void main(String[] args) { <mask><mask><mask>.List<Book> books = new ArrayList<Book>(); add(new Book(String, String));xstream_class_43 lib = new xstream_class_43(books);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.ArrayList",
    "boolean": 1,
    "context": "this.author = author;} @Override public String toString() { return ((StringString\\String) + author;} } public static void main(String[] args) { List<Book> books = new <mask><mask><mask>.ArrayList<Book>(); add(new Book(String, String));xstream_class_43 lib = new xstream_class_43(books);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.util",
    "truth_type": "java.util",
    "full_FQN": "java.util.List.add()",
    "boolean": 1,
    "context": "} @Override public String toString() { return ((StringString\\String) + author;} } public static void main(String[] args) { List<Book> books = new ArrayList<Book>(); <mask><mask><mask>add(new Book(String, String));xstream_class_43 lib = new xstream_class_43(books);// Handles conversion of our objects into XML XStream stream = new XStream(new DomDriver());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream",
    "boolean": 1,
    "context": " add(new Book(String, String));xstream_class_43 lib = new xstream_class_43(books);// Handles conversion of our objects into XML <mask><mask><mask><mask><mask><mask><mask><mask>.XStream stream = new XStream(new DomDriver());String xml = toXML(lib);// fromXML returns a general Object; need to cast it into a Library xstream_class_43 lib2 = ((xstream_class_43)  fromXML(xml)));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks",
    "truth_type": "com.thoughtworks",
    "full_FQN": "com.thoughtworks.xstream.XStream()",
    "boolean": 1,
    "context": " add(new Book(String, String));xstream_class_43 lib = new xstream_class_43(books);// Handles conversion of our objects into XML XStream stream = new <mask><mask><mask><mask><mask>XStream(new DomDriver());String xml = toXML(lib);// fromXML returns a general Object; need to cast it into a Library xstream_class_43 lib2 = ((xstream_class_43)  fromXML(xml)));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.xml.DomDriver()",
    "boolean": 1,
    "context": " add(new Book(String, String));xstream_class_43 lib = new xstream_class_43(books);// Handles conversion of our objects into XML XStream stream = new XStream(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>DomDriver());String xml = toXML(lib);// fromXML returns a general Object; need to cast it into a Library xstream_class_43 lib2 = ((xstream_class_43)  fromXML(xml)));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.toXML()",
    "boolean": 1,
    "context": "xstream_class_43 lib = new xstream_class_43(books);// Handles conversion of our objects into XML XStream stream = new XStream(new DomDriver());String xml = <mask><mask><mask><mask><mask><mask><mask><mask>toXML(lib);// fromXML returns a general Object; need to cast it into a Library xstream_class_43 lib2 = ((xstream_class_43)  fromXML(xml)));println(xml);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.fromXML()",
    "boolean": 1,
    "context": "// Handles conversion of our objects into XML XStream stream = new XStream(new DomDriver());String xml = toXML(lib);// fromXML returns a general Object; need to cast it into a Library xstream_class_43 lib2 = ((xstream_class_43)  <mask><mask><mask><mask><mask><mask><mask><mask>fromXML(xml)));println(xml);println(lib);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File",
    "boolean": 1,
    "context": "public static int MAX_DEPTH = 800;/** * * * @param args * * @throws FileNotFoundException * */ public static void main(String[] args) { try { TestObject object = getNewTestObject();<mask><mask><mask>.File persistFile = new File(String);FileOutputStream outStream = new FileOutputStream(persistFile);XStream x = new XStream();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File()",
    "boolean": 1,
    "context": "public static int MAX_DEPTH = 800;/** * * * @param args * * @throws FileNotFoundException * */ public static void main(String[] args) { try { TestObject object = getNewTestObject();File persistFile = new <mask><mask><mask>.File(String);FileOutputStream outStream = new FileOutputStream(persistFile);XStream x = new XStream();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileOutputStream",
    "boolean": 1,
    "context": "/** * * * @param args * * @throws FileNotFoundException * */ public static void main(String[] args) { try { TestObject object = getNewTestObject();File persistFile = new File(String);<mask><mask><mask>.FileOutputStream outStream = new FileOutputStream(persistFile);XStream x = new XStream(); alias(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileOutputStream()",
    "boolean": 1,
    "context": "/** * * * @param args * * @throws FileNotFoundException * */ public static void main(String[] args) { try { TestObject object = getNewTestObject();File persistFile = new File(String);FileOutputStream outStream = new <mask><mask><mask>.FileOutputStream(persistFile);XStream x = new XStream(); alias(String, class);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream",
    "boolean": 1,
    "context": "java.io.File persistFile = new File(String);FileOutputStream outStream = new FileOutputStream(persistFile);<mask><mask><mask><mask><mask><mask><mask><mask>.XStream x = new XStream(); alias(String, class); toXML(object, outStream);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks",
    "truth_type": "com.thoughtworks",
    "full_FQN": "com.thoughtworks.xstream.XStream()",
    "boolean": 1,
    "context": "java.io.File persistFile = new File(String);FileOutputStream outStream = new FileOutputStream(persistFile);XStream x = new <mask><mask><mask><mask><mask>XStream(); alias(String, class); toXML(object, outStream);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.alias()",
    "boolean": 1,
    "context": "java.io.FileOutputStream outStream = new FileOutputStream(persistFile);XStream x = new XStream(); <mask><mask><mask><mask><mask><mask><mask><mask>alias(String, class); toXML(object, outStream); close();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.toXML()",
    "boolean": 1,
    "context": "com.thoughtworks.xstream.XStream x = new XStream(); alias(String, class); <mask><mask><mask><mask><mask><mask><mask><mask>toXML(object, outStream); close();} catch (Throwable e) { printStackTrace();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileOutputStream.close()",
    "boolean": 1,
    "context": " alias(String, class); toXML(object, outStream); <mask><mask><mask>close();} catch (Throwable e) { printStackTrace();} } public static TestObject getNewTestObject() { TestObject orderRecord = null;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileNotFoundException",
    "boolean": 1,
    "context": "public class xstream_class_5 { public class Test { public void main(String[] args) throws <mask><mask><mask>.FileNotFoundException { XStream xs = new XStream(new DomDriver());Foo f = new Foo(1, String, new Bar(42));PrintWriter pw = new PrintWriter(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream",
    "boolean": 1,
    "context": "public class xstream_class_5 { public class Test { public void main(String[] args) throws FileNotFoundException { <mask><mask><mask><mask><mask><mask><mask><mask>.XStream xs = new XStream(new DomDriver());Foo f = new Foo(1, String, new Bar(42));PrintWriter pw = new PrintWriter(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks",
    "truth_type": "com.thoughtworks",
    "full_FQN": "com.thoughtworks.xstream.XStream()",
    "boolean": 1,
    "context": "public class xstream_class_5 { public class Test { public void main(String[] args) throws FileNotFoundException { XStream xs = new <mask><mask><mask><mask><mask>XStream(new DomDriver());Foo f = new Foo(1, String, new Bar(42));PrintWriter pw = new PrintWriter(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.xml.DomDriver()",
    "boolean": 1,
    "context": "public class xstream_class_5 { public class Test { public void main(String[] args) throws FileNotFoundException { XStream xs = new XStream(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>DomDriver());Foo f = new Foo(1, String, new Bar(42));PrintWriter pw = new PrintWriter(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.PrintWriter",
    "boolean": 1,
    "context": "public class xstream_class_5 { public class Test { public void main(String[] args) throws FileNotFoundException { XStream xs = new XStream(new DomDriver());Foo f = new Foo(1, String, new Bar(42));<mask><mask><mask>.PrintWriter pw = new PrintWriter(String); toXML(f, pw);} } public class Bar { public int id;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.PrintWriter()",
    "boolean": 1,
    "context": "public class xstream_class_5 { public class Test { public void main(String[] args) throws FileNotFoundException { XStream xs = new XStream(new DomDriver());Foo f = new Foo(1, String, new Bar(42));PrintWriter pw = new <mask><mask><mask>.PrintWriter(String); toXML(f, pw);} } public class Bar { public int id;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.toXML()",
    "boolean": 1,
    "context": "Foo f = new Foo(1, String, new Bar(42));PrintWriter pw = new PrintWriter(String); <mask><mask><mask><mask><mask><mask><mask><mask>toXML(f, pw);} } public class Bar { public int id;public Bar(int id) { id = id;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.File",
    "boolean": 1,
    "context": "public class xstream_class_6 { public static boolean toXML(Object object, <mask><mask><mask>.File file) { XStream xStream = new XStream(new DomDriver(String));OutputStream outputStream = null;try { outputStream = new FileOutputStream(file);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream",
    "boolean": 1,
    "context": "public class xstream_class_6 { public static boolean toXML(Object object, File file) { <mask><mask><mask><mask><mask><mask><mask><mask>.XStream xStream = new XStream(new DomDriver(String));OutputStream outputStream = null;try { outputStream = new FileOutputStream(file);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks",
    "truth_type": "com.thoughtworks",
    "full_FQN": "com.thoughtworks.xstream.XStream()",
    "boolean": 1,
    "context": "public class xstream_class_6 { public static boolean toXML(Object object, File file) { XStream xStream = new <mask><mask><mask><mask><mask>XStream(new DomDriver(String));OutputStream outputStream = null;try { outputStream = new FileOutputStream(file);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.xml.DomDriver()",
    "boolean": 1,
    "context": "public class xstream_class_6 { public static boolean toXML(Object object, File file) { XStream xStream = new XStream(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>DomDriver(String));OutputStream outputStream = null;try { outputStream = new FileOutputStream(file);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.OutputStream",
    "boolean": 1,
    "context": "public class xstream_class_6 { public static boolean toXML(Object object, File file) { XStream xStream = new XStream(new DomDriver(String));<mask><mask><mask>.OutputStream outputStream = null;try { outputStream = new FileOutputStream(file); toXML(object, outputStream);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileOutputStream()",
    "boolean": 1,
    "context": "public class xstream_class_6 { public static boolean toXML(Object object, File file) { XStream xStream = new XStream(new DomDriver(String));OutputStream outputStream = null;try { outputStream = new <mask><mask><mask>.FileOutputStream(file); toXML(object, outputStream);} catch (Exception exp) { return false;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.toXML()",
    "boolean": 1,
    "context": "java.io.OutputStream outputStream = null;try { outputStream = new FileOutputStream(file); <mask><mask><mask><mask><mask><mask><mask><mask>toXML(object, outputStream);} catch (Exception exp) { return false;} finally { if (true) { return false;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.annotations",
    "truth_type": "com.thoughtworks.xstream.annotations",
    "full_FQN": "com.thoughtworks.xstream.annotations.XStreamAsAttribute",
    "boolean": 1,
    "context": "// ID = 6810856 // getters omitted public class xstream_class_7 { @<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.XStreamAsAttribute private String type;private String value;public xstream_class_7(String type, String value) { type = type;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "android.app",
    "truth_type": "android.app",
    "full_FQN": "android.app.Activity",
    "boolean": 1,
    "context": "public class xstream_class_8 extends <mask><mask><mask>.Activity { private String METHOD_NAME = String; // our webservice method name private String NAMESPACE = String; // Here package // name in // webservice // with reverse //  private String SOAP_ACTION = String; // NAMESPACE // + // method public TextView t; // name private static String URL = String;/** Called when the activity is first  */ @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);// Initialize soap request + add parameters SoapObject request = new SoapObject(NAMESPACE, METHOD_NAME);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView",
    "boolean": 1,
    "context": "public class xstream_class_8 extends Activity { private String METHOD_NAME = String; // our webservice method name private String NAMESPACE = String; // Here package // name in // webservice // with reverse //  private String SOAP_ACTION = String; // NAMESPACE // + // method public <mask><mask><mask>.TextView t; // name private static String URL = String;/** Called when the activity is first  */ @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);// Initialize soap request + add parameters SoapObject request = new SoapObject(NAMESPACE, METHOD_NAME);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "android.util",
    "truth_type": "android.os",
    "full_FQN": "android.os.Bundle",
    "boolean": 0,
    "context": "public class xstream_class_8 extends Activity { private String METHOD_NAME = String; // our webservice method name private String NAMESPACE = String; // Here package // name in // webservice // with reverse //  private String SOAP_ACTION = String; // NAMESPACE // + // method public TextView t; // name private static String URL = String;/** Called when the activity is first  */ @Override public void onCreate(<mask><mask><mask>.Bundle savedInstanceState) { onCreate(savedInstanceState);// Initialize soap request + add parameters SoapObject request = new SoapObject(NAMESPACE, METHOD_NAME); addProperty(String, String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "org.android.xml..soap",
    "truth_type": "org.ksoap2.serialization",
    "full_FQN": "org.ksoap2.serialization.SoapObject",
    "boolean": 0,
    "context": "public class xstream_class_8 extends Activity { private String METHOD_NAME = String; // our webservice method name private String NAMESPACE = String; // Here package // name in // webservice // with reverse //  private String SOAP_ACTION = String; // NAMESPACE // + // method public TextView t; // name private static String URL = String;/** Called when the activity is first  */ @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);// Initialize soap request + add parameters <mask><mask><mask><mask><mask><mask><mask><mask><mask>.SoapObject request = new SoapObject(NAMESPACE, METHOD_NAME); addProperty(String, String); addProperty(String, String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "org.android.internalap",
    "truth_type": "org.ksoap2",
    "full_FQN": "org.ksoap2.serialization.SoapObject()",
    "boolean": 0,
    "context": "public class xstream_class_8 extends Activity { private String METHOD_NAME = String; // our webservice method name private String NAMESPACE = String; // Here package // name in // webservice // with reverse //  private String SOAP_ACTION = String; // NAMESPACE // + // method public TextView t; // name private static String URL = String;/** Called when the activity is first  */ @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);// Initialize soap request + add parameters SoapObject request = new <mask><mask><mask><mask><mask><mask>SoapObject(NAMESPACE, METHOD_NAME); addProperty(String, String); addProperty(String, String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "org.ax.xml..soap",
    "truth_type": "org.ksoap2.serialization",
    "full_FQN": "org.ksoap2.serialization.SoapObject.addProperty()",
    "boolean": 0,
    "context": "/** Called when the activity is first  */ @Override public void onCreate(Bundle savedInstanceState) { onCreate(savedInstanceState);// Initialize soap request + add parameters SoapObject request = new SoapObject(NAMESPACE, METHOD_NAME); <mask><mask><mask><mask><mask><mask><mask><mask><mask>addProperty(String, String); addProperty(String, String);SoapSerializationEnvelope envelope = new SoapSerializationEnvelope(VER11);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "org.ax.xml..soap",
    "truth_type": "org.ksoap2.serialization",
    "full_FQN": "org.ksoap2.serialization.SoapObject.addProperty()",
    "boolean": 0,
    "context": "// Initialize soap request + add parameters SoapObject request = new SoapObject(NAMESPACE, METHOD_NAME); addProperty(String, String); <mask><mask><mask><mask><mask><mask><mask><mask><mask>addProperty(String, String);SoapSerializationEnvelope envelope = new SoapSerializationEnvelope(VER11); setOutputSoapObject(request);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "org.ax.xml..soization",
    "truth_type": "org.ksoap2.serialization",
    "full_FQN": "org.ksoap2.serialization.SoapSerializationEnvelope",
    "boolean": 0,
    "context": " addProperty(String, String); addProperty(String, String);<mask><mask><mask><mask><mask><mask><mask><mask><mask>.SoapSerializationEnvelope envelope = new SoapSerializationEnvelope(VER11); setOutputSoapObject(request);// Make the soap  HttpTransportSE androidHttpTransport = new HttpTransportSE(URL);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "org.k.xmlap",
    "truth_type": "org.ksoap2",
    "full_FQN": "org.ksoap2.serialization.SoapSerializationEnvelope()",
    "boolean": 0,
    "context": " addProperty(String, String); addProperty(String, String);SoapSerializationEnvelope envelope = new <mask><mask><mask><mask><mask><mask>SoapSerializationEnvelope(VER11); setOutputSoapObject(request);// Make the soap  HttpTransportSE androidHttpTransport = new HttpTransportSE(URL);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "org.k.xml.internal.J.APVersion",
    "truth_type": "org.ksoap2.SoapEnvelope",
    "full_FQN": "org.ksoap2.SoapEnvelope.VER11",
    "boolean": 0,
    "context": " addProperty(String, String); addProperty(String, String);SoapSerializationEnvelope envelope = new SoapSerializationEnvelope(<mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.VER11); setOutputSoapObject(request);// Make the soap  HttpTransportSE androidHttpTransport = new HttpTransportSE(URL);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "org.ax.xml..soap",
    "truth_type": "org.ksoap2.serialization",
    "full_FQN": "org.ksoap2.serialization.SoapSerializationEnvelope.setOutputSoapObject()",
    "boolean": 0,
    "context": " addProperty(String, String);SoapSerializationEnvelope envelope = new SoapSerializationEnvelope(VER11); <mask><mask><mask><mask><mask><mask><mask><mask><mask>setOutputSoapObject(request);// Make the soap  HttpTransportSE androidHttpTransport = new HttpTransportSE(URL);// this is the actual part that will call the webservice try { call(SOAP_ACTION, envelope);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "org.k.xml2..http",
    "truth_type": "org.ksoap2.transport",
    "full_FQN": "org.ksoap2.transport.HttpTransportSE",
    "boolean": 0,
    "context": "org.ksoap2.serialization.SoapSerializationEnvelope envelope = new SoapSerializationEnvelope(VER11); setOutputSoapObject(request);// Make the soap  <mask><mask><mask><mask><mask><mask><mask><mask><mask>.HttpTransportSE androidHttpTransport = new HttpTransportSE(URL);// this is the actual part that will call the webservice try { call(SOAP_ACTION, envelope);SoapObject result = (SoapObject) bodyIn;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "org.apache...",
    "truth_type": "org.ksoap2",
    "full_FQN": "org.ksoap2.transport.HttpTransportSE()",
    "boolean": 0,
    "context": "org.ksoap2.serialization.SoapSerializationEnvelope envelope = new SoapSerializationEnvelope(VER11); setOutputSoapObject(request);// Make the soap  HttpTransportSE androidHttpTransport = new <mask><mask><mask><mask><mask><mask>HttpTransportSE(URL);// this is the actual part that will call the webservice try { call(SOAP_ACTION, envelope);SoapObject result = (SoapObject) bodyIn;"
  },
  {
    "lib_name": "xstream",
    "pred_type": "org.k.xml.ws.http",
    "truth_type": "org.ksoap2.transport",
    "full_FQN": "org.ksoap2.transport.HttpTransportSE.call()",
    "boolean": 0,
    "context": " setOutputSoapObject(request);// Make the soap  HttpTransportSE androidHttpTransport = new HttpTransportSE(URL);// this is the actual part that will call the webservice try { <mask><mask><mask><mask><mask><mask><mask><mask><mask>call(SOAP_ACTION, envelope);SoapObject result = (SoapObject) bodyIn;//SoapObject result = (SoapObject) response();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "org.ax.xml..soap",
    "truth_type": "org.ksoap2.serialization",
    "full_FQN": "org.ksoap2.serialization.SoapObject",
    "boolean": 0,
    "context": "// Make the soap  HttpTransportSE androidHttpTransport = new HttpTransportSE(URL);// this is the actual part that will call the webservice try { call(SOAP_ACTION, envelope);<mask><mask><mask><mask><mask><mask><mask><mask><mask>.SoapObject result = (SoapObject) bodyIn;//SoapObject result = (SoapObject) response();if (result != null) { XStream xstreams = new XStream(new DomDriver());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "org.ax.xml..soap",
    "truth_type": "org.ksoap2.serialization",
    "full_FQN": "org.ksoap2.serialization.SoapObject",
    "boolean": 0,
    "context": "// Make the soap  HttpTransportSE androidHttpTransport = new HttpTransportSE(URL);// this is the actual part that will call the webservice try { call(SOAP_ACTION, envelope);SoapObject result = (<mask><mask><mask><mask><mask><mask><mask><mask><mask>.SoapObject) bodyIn;//SoapObject result = (SoapObject) response();if (result != null) { XStream xstreams = new XStream(new DomDriver());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.sun.xml.internal.ws.clientapSerializationEnvelope",
    "truth_type": "org.ksoap2.serialization.SoapSerializationEnvelope",
    "full_FQN": "org.ksoap2.serialization.SoapSerializationEnvelope.bodyIn",
    "boolean": 0,
    "context": "// Make the soap  HttpTransportSE androidHttpTransport = new HttpTransportSE(URL);// this is the actual part that will call the webservice try { call(SOAP_ACTION, envelope);SoapObject result = (SoapObject) <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.bodyIn;//SoapObject result = (SoapObject) response();if (result != null) { XStream xstreams = new XStream(new DomDriver());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "org.ax.xml..soap",
    "truth_type": "org.ksoap2.serialization",
    "full_FQN": "org.ksoap2.serialization.SoapSerializationEnvelope.response()",
    "boolean": 0,
    "context": "// this is the actual part that will call the webservice try { call(SOAP_ACTION, envelope);SoapObject result = (SoapObject) bodyIn;//SoapObject result = (SoapObject) <mask><mask><mask><mask><mask><mask><mask><mask><mask>response();if (result != null) { XStream xstreams = new XStream(new DomDriver());String text = getProperty(0).toString();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream",
    "boolean": 1,
    "context": "org.ksoap2.serialization.SoapObject result = (SoapObject) bodyIn;//SoapObject result = (SoapObject) response();if (result != null) { <mask><mask><mask><mask><mask><mask><mask><mask>.XStream xstreams = new XStream(new DomDriver());String text = getProperty(0).toString();} } catch (Exception e) { // TODO Auto-generated catch block setText(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks",
    "truth_type": "com.thoughtworks",
    "full_FQN": "com.thoughtworks.xstream.XStream()",
    "boolean": 1,
    "context": "org.ksoap2.serialization.SoapObject result = (SoapObject) bodyIn;//SoapObject result = (SoapObject) response();if (result != null) { XStream xstreams = new <mask><mask><mask><mask><mask>XStream(new DomDriver());String text = getProperty(0).toString();} } catch (Exception e) { // TODO Auto-generated catch block setText(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.androidtworks.acceptxml.io",
    "truth_type": "com.thoughtworks.xstream.io",
    "full_FQN": "com.thoughtworks.xstream.io.xml.DomDriver()",
    "boolean": 0,
    "context": "org.ksoap2.serialization.SoapObject result = (SoapObject) bodyIn;//SoapObject result = (SoapObject) response();if (result != null) { XStream xstreams = new XStream(new <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>DomDriver());String text = getProperty(0).toString();} } catch (Exception e) { // TODO Auto-generated catch block setText(String);"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.though.xml..soap",
    "truth_type": "org.ksoap2.serialization",
    "full_FQN": "org.ksoap2.serialization.SoapObject.getProperty()",
    "boolean": 0,
    "context": "//SoapObject result = (SoapObject) response();if (result != null) { XStream xstreams = new XStream(new DomDriver());String text = <mask><mask><mask><mask><mask><mask><mask><mask><mask>getProperty(0).toString();} } catch (Exception e) { // TODO Auto-generated catch block setText(String);} } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "android.widget",
    "truth_type": "android.widget",
    "full_FQN": "android.widget.TextView.setText()",
    "boolean": 1,
    "context": "if (result != null) { XStream xstreams = new XStream(new DomDriver());String text = getProperty(0).toString();} } catch (Exception e) { // TODO Auto-generated catch block <mask><mask><mask>setText(String);} } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream",
    "truth_type": "com.thoughtworks.xstream.XStream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream",
    "boolean": 1,
    "context": "} } public class ServerHandler { private String fileName = String;private String path = String;private thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>.XStream xstream = new thoughtworks XStream(new thoughtworks DomDriver());public void readFromXML() { try { FileInputStream fis = new FileInputStream(path + fileName);ServerIP server = ((ServerIP)  fromXML(fis, new ServerIP())));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.XStream()",
    "boolean": 1,
    "context": "} } public class ServerHandler { private String fileName = String;private String path = String;private thoughtworks XStream xstream = new thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask>XStream(new thoughtworks DomDriver());public void readFromXML() { try { FileInputStream fis = new FileInputStream(path + fileName);ServerIP server = ((ServerIP)  fromXML(fis, new ServerIP())));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream.XStream.io",
    "truth_type": "com.thoughtworks.xstream.XStream.io",
    "full_FQN": "com.thoughtworks.xstream.XStream.io.xml.DomDriver()",
    "boolean": 1,
    "context": "} } public class ServerHandler { private String fileName = String;private String path = String;private thoughtworks XStream xstream = new thoughtworks XStream(new thoughtworks <mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask><mask>DomDriver());public void readFromXML() { try { FileInputStream fis = new FileInputStream(path + fileName);ServerIP server = ((ServerIP)  fromXML(fis, new ServerIP())));"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileInputStream",
    "boolean": 1,
    "context": "private String path = String;private thoughtworks XStream xstream = new thoughtworks XStream(new thoughtworks DomDriver());public void readFromXML() { try { <mask><mask><mask>.FileInputStream fis = new FileInputStream(path + fileName);ServerIP server = ((ServerIP)  fromXML(fis, new ServerIP())));println(String + getIp());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileInputStream()",
    "boolean": 1,
    "context": "private String path = String;private thoughtworks XStream xstream = new thoughtworks XStream(new thoughtworks DomDriver());public void readFromXML() { try { FileInputStream fis = new <mask><mask><mask>.FileInputStream(path + fileName);ServerIP server = ((ServerIP)  fromXML(fis, new ServerIP())));println(String + getIp());"
  },
  {
    "lib_name": "xstream",
    "pred_type": "com.thoughtworks.xstream",
    "truth_type": "com.thoughtworks.xstream",
    "full_FQN": "com.thoughtworks.xstream.XStream.fromXML()",
    "boolean": 1,
    "context": "private thoughtworks XStream xstream = new thoughtworks XStream(new thoughtworks DomDriver());public void readFromXML() { try { FileInputStream fis = new FileInputStream(path + fileName);ServerIP server = ((ServerIP)  <mask><mask><mask><mask><mask><mask><mask><mask>fromXML(fis, new ServerIP())));println(String + getIp());} catch (FileNotFoundException e) { printStackTrace();"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileNotFoundException",
    "boolean": 1,
    "context": "ServerIP server = ((ServerIP)  fromXML(fis, new ServerIP())));println(String + getIp());} catch (<mask><mask><mask>.FileNotFoundException e) { printStackTrace();} } } };"
  },
  {
    "lib_name": "xstream",
    "pred_type": "java.io",
    "truth_type": "java.io",
    "full_FQN": "java.io.FileNotFoundException.printStackTrace()",
    "boolean": 1,
    "context": "ServerIP server = ((ServerIP)  fromXML(fis, new ServerIP())));println(String + getIp());} catch (FileNotFoundException e) { <mask><mask><mask>printStackTrace();} } } };"
  }
]